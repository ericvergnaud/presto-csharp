//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace prompto.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IMParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_category_declaration([NotNull] MParser.Enum_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_category_declaration([NotNull] MParser.Enum_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_native_declaration([NotNull] MParser.Enum_native_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_native_declaration([NotNull] MParser.Enum_native_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol([NotNull] MParser.Native_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol([NotNull] MParser.Native_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol([NotNull] MParser.Category_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol([NotNull] MParser.Category_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_declaration([NotNull] MParser.Attribute_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_declaration([NotNull] MParser.Attribute_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.index_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex_clause([NotNull] MParser.Index_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.index_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex_clause([NotNull] MParser.Index_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.concrete_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_widget_declaration([NotNull] MParser.Concrete_widget_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.concrete_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_widget_declaration([NotNull] MParser.Concrete_widget_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_widget_declaration([NotNull] MParser.Native_widget_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_widget_declaration([NotNull] MParser.Native_widget_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_category_declaration([NotNull] MParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_category_declaration([NotNull] MParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleton_category_declaration([NotNull] MParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleton_category_declaration([NotNull] MParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerived_list([NotNull] MParser.Derived_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerived_list([NotNull] MParser.Derived_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_method_declaration([NotNull] MParser.Operator_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_method_declaration([NotNull] MParser.Operator_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter_method_declaration([NotNull] MParser.Setter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter_method_declaration([NotNull] MParser.Setter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_setter_declaration([NotNull] MParser.Native_setter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_setter_declaration([NotNull] MParser.Native_setter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter_method_declaration([NotNull] MParser.Getter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter_method_declaration([NotNull] MParser.Getter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_getter_declaration([NotNull] MParser.Native_getter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_getter_declaration([NotNull] MParser.Native_getter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_declaration([NotNull] MParser.Native_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_declaration([NotNull] MParser.Native_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_resource_declaration([NotNull] MParser.Native_resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_resource_declaration([NotNull] MParser.Native_resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_bindings([NotNull] MParser.Native_category_bindingsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_bindings([NotNull] MParser.Native_category_bindingsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="MParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingListItem([NotNull] MParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="MParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingListItem([NotNull] MParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="MParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingList([NotNull] MParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="MParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingList([NotNull] MParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method_declaration([NotNull] MParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method_declaration([NotNull] MParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_method_declaration([NotNull] MParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_method_declaration([NotNull] MParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_method_declaration([NotNull] MParser.Native_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_method_declaration([NotNull] MParser.Native_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTest_method_declaration([NotNull] MParser.Test_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTest_method_declaration([NotNull] MParser.Test_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] MParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] MParser.AssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyped_argument([NotNull] MParser.Typed_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyped_argument([NotNull] MParser.Typed_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallStatement([NotNull] MParser.MethodCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallStatement([NotNull] MParser.MethodCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignInstanceStatement([NotNull] MParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignInstanceStatement([NotNull] MParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignTupleStatement([NotNull] MParser.AssignTupleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignTupleStatement([NotNull] MParser.AssignTupleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStoreStatement([NotNull] MParser.StoreStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStoreStatement([NotNull] MParser.StoreStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchStatement([NotNull] MParser.FetchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchStatement([NotNull] MParser.FetchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FlushStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFlushStatement([NotNull] MParser.FlushStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FlushStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFlushStatement([NotNull] MParser.FlushStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] MParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] MParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] MParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] MParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] MParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] MParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] MParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] MParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseStatement([NotNull] MParser.RaiseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseStatement([NotNull] MParser.RaiseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] MParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] MParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] MParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] MParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithResourceStatement([NotNull] MParser.WithResourceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithResourceStatement([NotNull] MParser.WithResourceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithSingletonStatement([NotNull] MParser.WithSingletonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithSingletonStatement([NotNull] MParser.WithSingletonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureStatement([NotNull] MParser.ClosureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureStatement([NotNull] MParser.ClosureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommentStatement([NotNull] MParser.CommentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="MParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommentStatement([NotNull] MParser.CommentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.flush_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFlush_statement([NotNull] MParser.Flush_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.flush_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFlush_statement([NotNull] MParser.Flush_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStore_statement([NotNull] MParser.Store_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStore_statement([NotNull] MParser.Store_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.method_call_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call_expression([NotNull] MParser.Method_call_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.method_call_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call_expression([NotNull] MParser.Method_call_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call_statement([NotNull] MParser.Method_call_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call_statement([NotNull] MParser.Method_call_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_resource_statement([NotNull] MParser.With_resource_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_resource_statement([NotNull] MParser.With_resource_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_singleton_statement([NotNull] MParser.With_singleton_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_singleton_statement([NotNull] MParser.With_singleton_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] MParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] MParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="MParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicSwitchCase([NotNull] MParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="MParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicSwitchCase([NotNull] MParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="MParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionSwitchCase([NotNull] MParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="MParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionSwitchCase([NotNull] MParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_each_statement([NotNull] MParser.For_each_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_each_statement([NotNull] MParser.For_each_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] MParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] MParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] MParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] MParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] MParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] MParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="MParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementList([NotNull] MParser.ElseIfStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="MParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementList([NotNull] MParser.ElseIfStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="MParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementListItem([NotNull] MParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="MParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementListItem([NotNull] MParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaise_statement([NotNull] MParser.Raise_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaise_statement([NotNull] MParser.Raise_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] MParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] MParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="MParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchAtomicStatement([NotNull] MParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="MParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchAtomicStatement([NotNull] MParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="MParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchCollectionStatement([NotNull] MParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="MParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchCollectionStatement([NotNull] MParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreak_statement([NotNull] MParser.Break_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreak_statement([NotNull] MParser.Break_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] MParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] MParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivideExpression([NotNull] MParser.IntDivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivideExpression([NotNull] MParser.IntDivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasAnyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasAnyExpression([NotNull] MParser.HasAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasAnyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasAnyExpression([NotNull] MParser.HasAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasExpression([NotNull] MParser.HasExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasExpression([NotNull] MParser.HasExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] MParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] MParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsExpression([NotNull] MParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsExpression([NotNull] MParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] MParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] MParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxExpression([NotNull] MParser.JsxExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxExpression([NotNull] MParser.JsxExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] MParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] MParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpression([NotNull] MParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpression([NotNull] MParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] MParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] MParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeExpression([NotNull] MParser.CodeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeExpression([NotNull] MParser.CodeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpression([NotNull] MParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpression([NotNull] MParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasAnyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasAnyExpression([NotNull] MParser.NotHasAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasAnyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasAnyExpression([NotNull] MParser.NotHasAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] MParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] MParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowExpression([NotNull] MParser.ArrowExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowExpression([NotNull] MParser.ArrowExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasExpression([NotNull] MParser.NotHasExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasExpression([NotNull] MParser.NotHasExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] MParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] MParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasAllExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasAllExpression([NotNull] MParser.NotHasAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasAllExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasAllExpression([NotNull] MParser.NotHasAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsExpression([NotNull] MParser.ContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsExpression([NotNull] MParser.ContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FilteredListExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFilteredListExpression([NotNull] MParser.FilteredListExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FilteredListExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFilteredListExpression([NotNull] MParser.FilteredListExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsExpression([NotNull] MParser.NotContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsExpression([NotNull] MParser.NotContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] MParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] MParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoughlyEqualsExpression([NotNull] MParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoughlyEqualsExpression([NotNull] MParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecuteExpression([NotNull] MParser.ExecuteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecuteExpression([NotNull] MParser.ExecuteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpression([NotNull] MParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpression([NotNull] MParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotInExpression([NotNull] MParser.NotInExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotInExpression([NotNull] MParser.NotInExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorExpression([NotNull] MParser.IteratorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorExpression([NotNull] MParser.IteratorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotExpression([NotNull] MParser.IsNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotExpression([NotNull] MParser.IsNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] MParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] MParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsExpression([NotNull] MParser.IsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsExpression([NotNull] MParser.IsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] MParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] MParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] MParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] MParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasAllExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasAllExpression([NotNull] MParser.HasAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasAllExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasAllExpression([NotNull] MParser.HasAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] MParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] MParser.InstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableInstanceExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableInstanceExpression([NotNull] MParser.MutableInstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableInstanceExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableInstanceExpression([NotNull] MParser.MutableInstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssExpression([NotNull] MParser.CssExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssExpression([NotNull] MParser.CssExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] MParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] MParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] MParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] MParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpression([NotNull] MParser.LessThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpression([NotNull] MParser.LessThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsExpression([NotNull] MParser.EqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="MParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsExpression([NotNull] MParser.EqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosure_expression([NotNull] MParser.Closure_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosure_expression([NotNull] MParser.Closure_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodExpression([NotNull] MParser.MethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodExpression([NotNull] MParser.MethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] MParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] MParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] MParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] MParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] MParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] MParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] MParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="MParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] MParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="MParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorExpression([NotNull] MParser.SelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="MParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorExpression([NotNull] MParser.SelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="MParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectableExpression([NotNull] MParser.SelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="MParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectableExpression([NotNull] MParser.SelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableSelectableExpression</c>
	/// labeled alternative in <see cref="MParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableSelectableExpression([NotNull] MParser.MutableSelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableSelectableExpression</c>
	/// labeled alternative in <see cref="MParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableSelectableExpression([NotNull] MParser.MutableSelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableSelectorExpression([NotNull] MParser.MutableSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableSelectorExpression([NotNull] MParser.MutableSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_expression([NotNull] MParser.Method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_expression([NotNull] MParser.Method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberSelector([NotNull] MParser.MemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberSelector([NotNull] MParser.MemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodSelector([NotNull] MParser.MethodSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodSelector([NotNull] MParser.MethodSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceSelector([NotNull] MParser.SliceSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceSelector([NotNull] MParser.SliceSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemSelector([NotNull] MParser.ItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="MParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemSelector([NotNull] MParser.ItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.blob_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlob_expression([NotNull] MParser.Blob_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.blob_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlob_expression([NotNull] MParser.Blob_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_expression([NotNull] MParser.Document_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_expression([NotNull] MParser.Document_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorFrom</c>
	/// labeled alternative in <see cref="MParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorFrom([NotNull] MParser.ConstructorFromContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorFrom</c>
	/// labeled alternative in <see cref="MParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorFrom([NotNull] MParser.ConstructorFromContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorNoFrom</c>
	/// labeled alternative in <see cref="MParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorNoFrom([NotNull] MParser.ConstructorNoFromContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorNoFrom</c>
	/// labeled alternative in <see cref="MParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorNoFrom([NotNull] MParser.ConstructorNoFromContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.copy_from"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCopy_from([NotNull] MParser.Copy_fromContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.copy_from"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCopy_from([NotNull] MParser.Copy_fromContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAssignmentList([NotNull] MParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAssignmentList([NotNull] MParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentList([NotNull] MParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentList([NotNull] MParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListItem([NotNull] MParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="MParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListItem([NotNull] MParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_assignment([NotNull] MParser.Argument_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_assignment([NotNull] MParser.Argument_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite_statement([NotNull] MParser.Write_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite_statement([NotNull] MParser.Write_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.filtered_list_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFiltered_list_suffix([NotNull] MParser.Filtered_list_suffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.filtered_list_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFiltered_list_suffix([NotNull] MParser.Filtered_list_suffixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="MParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchOne([NotNull] MParser.FetchOneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="MParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchOne([NotNull] MParser.FetchOneContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchMany</c>
	/// labeled alternative in <see cref="MParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchMany([NotNull] MParser.FetchManyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchMany</c>
	/// labeled alternative in <see cref="MParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchMany([NotNull] MParser.FetchManyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchOneAsync</c>
	/// labeled alternative in <see cref="MParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchOneAsync([NotNull] MParser.FetchOneAsyncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchOneAsync</c>
	/// labeled alternative in <see cref="MParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchOneAsync([NotNull] MParser.FetchOneAsyncContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchManyAsync</c>
	/// labeled alternative in <see cref="MParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchManyAsync([NotNull] MParser.FetchManyAsyncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchManyAsync</c>
	/// labeled alternative in <see cref="MParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchManyAsync([NotNull] MParser.FetchManyAsyncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_expression([NotNull] MParser.Sorted_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_expression([NotNull] MParser.Sorted_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_instance_statement([NotNull] MParser.Assign_instance_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_instance_statement([NotNull] MParser.Assign_instance_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="MParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInstance([NotNull] MParser.MemberInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="MParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInstance([NotNull] MParser.MemberInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="MParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemInstance([NotNull] MParser.ItemInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="MParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemInstance([NotNull] MParser.ItemInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_tuple_statement([NotNull] MParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_tuple_statement([NotNull] MParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfs([NotNull] MParser.LfsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfs([NotNull] MParser.LfsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfp([NotNull] MParser.LfpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfp([NotNull] MParser.LfpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.ws_plus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWs_plus([NotNull] MParser.Ws_plusContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.ws_plus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWs_plus([NotNull] MParser.Ws_plusContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndent([NotNull] MParser.IndentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndent([NotNull] MParser.IndentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDedent([NotNull] MParser.DedentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDedent([NotNull] MParser.DedentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.type_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_literal([NotNull] MParser.Type_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.type_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_literal([NotNull] MParser.Type_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_literal([NotNull] MParser.Null_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_literal([NotNull] MParser.Null_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.repl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepl([NotNull] MParser.ReplContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.repl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepl([NotNull] MParser.ReplContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="MParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullDeclarationList([NotNull] MParser.FullDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="MParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullDeclarationList([NotNull] MParser.FullDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarations([NotNull] MParser.DeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarations([NotNull] MParser.DeclarationsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] MParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] MParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.annotation_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_constructor([NotNull] MParser.Annotation_constructorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.annotation_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_constructor([NotNull] MParser.Annotation_constructorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.annotation_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_identifier([NotNull] MParser.Annotation_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.annotation_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_identifier([NotNull] MParser.Annotation_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.annotation_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_argument([NotNull] MParser.Annotation_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.annotation_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_argument([NotNull] MParser.Annotation_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.annotation_argument_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_argument_name([NotNull] MParser.Annotation_argument_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.annotation_argument_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_argument_name([NotNull] MParser.Annotation_argument_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnnotationLiteralValue</c>
	/// labeled alternative in <see cref="MParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationLiteralValue([NotNull] MParser.AnnotationLiteralValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnnotationLiteralValue</c>
	/// labeled alternative in <see cref="MParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationLiteralValue([NotNull] MParser.AnnotationLiteralValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnnotationTypeValue</c>
	/// labeled alternative in <see cref="MParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationTypeValue([NotNull] MParser.AnnotationTypeValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnnotationTypeValue</c>
	/// labeled alternative in <see cref="MParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationTypeValue([NotNull] MParser.AnnotationTypeValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_declaration([NotNull] MParser.Resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_declaration([NotNull] MParser.Resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_declaration([NotNull] MParser.Enum_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_declaration([NotNull] MParser.Enum_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol_list([NotNull] MParser.Native_symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol_list([NotNull] MParser.Native_symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol_list([NotNull] MParser.Category_symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol_list([NotNull] MParser.Category_symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_list([NotNull] MParser.Symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_list([NotNull] MParser.Symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingList([NotNull] MParser.MatchingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingList([NotNull] MParser.MatchingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingSet([NotNull] MParser.MatchingSetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingSet([NotNull] MParser.MatchingSetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingRange([NotNull] MParser.MatchingRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingRange([NotNull] MParser.MatchingRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingPattern([NotNull] MParser.MatchingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingPattern([NotNull] MParser.MatchingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingExpression([NotNull] MParser.MatchingExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="MParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingExpression([NotNull] MParser.MatchingExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_literal([NotNull] MParser.List_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_literal([NotNull] MParser.List_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_literal([NotNull] MParser.Set_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_literal([NotNull] MParser.Set_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_list([NotNull] MParser.Expression_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_list([NotNull] MParser.Expression_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_literal([NotNull] MParser.Range_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_literal([NotNull] MParser.Range_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorType([NotNull] MParser.IteratorTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorType([NotNull] MParser.IteratorTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] MParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] MParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] MParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] MParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictType([NotNull] MParser.DictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictType([NotNull] MParser.DictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CursorType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCursorType([NotNull] MParser.CursorTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CursorType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCursorType([NotNull] MParser.CursorTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryType([NotNull] MParser.PrimaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="MParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryType([NotNull] MParser.PrimaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="MParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] MParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="MParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] MParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="MParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryType([NotNull] MParser.CategoryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="MParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryType([NotNull] MParser.CategoryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] MParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] MParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssType([NotNull] MParser.CssTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssType([NotNull] MParser.CssTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterType([NotNull] MParser.CharacterTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterType([NotNull] MParser.CharacterTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextType([NotNull] MParser.TextTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextType([NotNull] MParser.TextTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImageType([NotNull] MParser.ImageTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImageType([NotNull] MParser.ImageTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] MParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] MParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalType([NotNull] MParser.DecimalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalType([NotNull] MParser.DecimalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentType([NotNull] MParser.DocumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentType([NotNull] MParser.DocumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateType([NotNull] MParser.DateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateType([NotNull] MParser.DateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeType([NotNull] MParser.DateTimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeType([NotNull] MParser.DateTimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeType([NotNull] MParser.TimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeType([NotNull] MParser.TimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodType([NotNull] MParser.PeriodTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodType([NotNull] MParser.PeriodTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VersionType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVersionType([NotNull] MParser.VersionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VersionType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVersionType([NotNull] MParser.VersionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeType([NotNull] MParser.CodeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeType([NotNull] MParser.CodeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlobType([NotNull] MParser.BlobTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlobType([NotNull] MParser.BlobTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUUIDType([NotNull] MParser.UUIDTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUUIDType([NotNull] MParser.UUIDTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HtmlType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlType([NotNull] MParser.HtmlTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HtmlType</c>
	/// labeled alternative in <see cref="MParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlType([NotNull] MParser.HtmlTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_type([NotNull] MParser.Category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_type([NotNull] MParser.Category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutable_category_type([NotNull] MParser.Mutable_category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutable_category_type([NotNull] MParser.Mutable_category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_type([NotNull] MParser.Code_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_type([NotNull] MParser.Code_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteCategoryDeclaration([NotNull] MParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteCategoryDeclaration([NotNull] MParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryDeclaration([NotNull] MParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryDeclaration([NotNull] MParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingletonCategoryDeclaration([NotNull] MParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="MParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingletonCategoryDeclaration([NotNull] MParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteWidgetDeclaration</c>
	/// labeled alternative in <see cref="MParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteWidgetDeclaration([NotNull] MParser.ConcreteWidgetDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteWidgetDeclaration</c>
	/// labeled alternative in <see cref="MParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteWidgetDeclaration([NotNull] MParser.ConcreteWidgetDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeWidgetDeclaration</c>
	/// labeled alternative in <see cref="MParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeWidgetDeclaration([NotNull] MParser.NativeWidgetDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeWidgetDeclaration</c>
	/// labeled alternative in <see cref="MParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeWidgetDeclaration([NotNull] MParser.NativeWidgetDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier_list([NotNull] MParser.Type_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier_list([NotNull] MParser.Type_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_identifier([NotNull] MParser.Method_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_identifier([NotNull] MParser.Method_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier_or_keyword([NotNull] MParser.Identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier_or_keyword([NotNull] MParser.Identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.nospace_hyphen_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNospace_hyphen_identifier_or_keyword([NotNull] MParser.Nospace_hyphen_identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.nospace_hyphen_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNospace_hyphen_identifier_or_keyword([NotNull] MParser.Nospace_hyphen_identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.nospace_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNospace_identifier_or_keyword([NotNull] MParser.Nospace_identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.nospace_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNospace_identifier_or_keyword([NotNull] MParser.Nospace_identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableIdentifier([NotNull] MParser.VariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableIdentifier([NotNull] MParser.VariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] MParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] MParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolIdentifier([NotNull] MParser.SymbolIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="MParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolIdentifier([NotNull] MParser.SymbolIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.member_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_identifier([NotNull] MParser.Member_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.member_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_identifier([NotNull] MParser.Member_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier([NotNull] MParser.Variable_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier([NotNull] MParser.Variable_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.attribute_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_identifier([NotNull] MParser.Attribute_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.attribute_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_identifier([NotNull] MParser.Attribute_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier([NotNull] MParser.Type_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier([NotNull] MParser.Type_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_identifier([NotNull] MParser.Symbol_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_identifier([NotNull] MParser.Symbol_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_list([NotNull] MParser.Argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_list([NotNull] MParser.Argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="MParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeArgument([NotNull] MParser.CodeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="MParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeArgument([NotNull] MParser.CodeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="MParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorArgument([NotNull] MParser.OperatorArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="MParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorArgument([NotNull] MParser.OperatorArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_argument([NotNull] MParser.Operator_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_argument([NotNull] MParser.Operator_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_argument([NotNull] MParser.Named_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_argument([NotNull] MParser.Named_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_argument([NotNull] MParser.Code_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_argument([NotNull] MParser.Code_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_or_any_type([NotNull] MParser.Category_or_any_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_or_any_type([NotNull] MParser.Category_or_any_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyListType([NotNull] MParser.AnyListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyListType([NotNull] MParser.AnyListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyType([NotNull] MParser.AnyTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyType([NotNull] MParser.AnyTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyDictType([NotNull] MParser.AnyDictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="MParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyDictType([NotNull] MParser.AnyDictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration_list([NotNull] MParser.Member_method_declaration_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration_list([NotNull] MParser.Member_method_declaration_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration([NotNull] MParser.Member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration([NotNull] MParser.Member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_member_method_declaration_list([NotNull] MParser.Native_member_method_declaration_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_member_method_declaration_list([NotNull] MParser.Native_member_method_declaration_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_member_method_declaration([NotNull] MParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_member_method_declaration([NotNull] MParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCategoryBinding([NotNull] MParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCategoryBinding([NotNull] MParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCategoryBinding([NotNull] MParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCategoryBinding([NotNull] MParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2CategoryBinding([NotNull] MParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2CategoryBinding([NotNull] MParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3CategoryBinding([NotNull] MParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3CategoryBinding([NotNull] MParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptCategoryBinding([NotNull] MParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="MParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptCategoryBinding([NotNull] MParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_category_binding([NotNull] MParser.Python_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_category_binding([NotNull] MParser.Python_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_module([NotNull] MParser.Python_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_module([NotNull] MParser.Python_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_category_binding([NotNull] MParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_category_binding([NotNull] MParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_module([NotNull] MParser.Javascript_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_module([NotNull] MParser.Javascript_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier_list([NotNull] MParser.Variable_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier_list([NotNull] MParser.Variable_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.attribute_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_identifier_list([NotNull] MParser.Attribute_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.attribute_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_identifier_list([NotNull] MParser.Attribute_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_declaration([NotNull] MParser.Method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_declaration([NotNull] MParser.Method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment_statement([NotNull] MParser.Comment_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment_statement([NotNull] MParser.Comment_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_statement_list([NotNull] MParser.Native_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_statement_list([NotNull] MParser.Native_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaNativeStatement([NotNull] MParser.JavaNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaNativeStatement([NotNull] MParser.JavaNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpNativeStatement([NotNull] MParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpNativeStatement([NotNull] MParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2NativeStatement([NotNull] MParser.Python2NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2NativeStatement([NotNull] MParser.Python2NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3NativeStatement([NotNull] MParser.Python3NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3NativeStatement([NotNull] MParser.Python3NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptNativeStatement([NotNull] MParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="MParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptNativeStatement([NotNull] MParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_native_statement([NotNull] MParser.Python_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_native_statement([NotNull] MParser.Python_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_native_statement([NotNull] MParser.Javascript_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_native_statement([NotNull] MParser.Javascript_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement_list([NotNull] MParser.Statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement_list([NotNull] MParser.Statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion_list([NotNull] MParser.Assertion_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion_list([NotNull] MParser.Assertion_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_case_statement_list([NotNull] MParser.Switch_case_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_case_statement_list([NotNull] MParser.Switch_case_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatch_statement_list([NotNull] MParser.Catch_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatch_statement_list([NotNull] MParser.Catch_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralRangeLiteral([NotNull] MParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralRangeLiteral([NotNull] MParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListLiteral([NotNull] MParser.LiteralListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListLiteral([NotNull] MParser.LiteralListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralSetLiteral([NotNull] MParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="MParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralSetLiteral([NotNull] MParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinIntegerLiteral([NotNull] MParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinIntegerLiteral([NotNull] MParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxIntegerLiteral([NotNull] MParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxIntegerLiteral([NotNull] MParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] MParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] MParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimalLiteral([NotNull] MParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimalLiteral([NotNull] MParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterLiteral([NotNull] MParser.CharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterLiteral([NotNull] MParser.CharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] MParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] MParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] MParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] MParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextLiteral([NotNull] MParser.TextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextLiteral([NotNull] MParser.TextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] MParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] MParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] MParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] MParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] MParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] MParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodLiteral([NotNull] MParser.PeriodLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodLiteral([NotNull] MParser.PeriodLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VersionLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVersionLiteral([NotNull] MParser.VersionLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VersionLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVersionLiteral([NotNull] MParser.VersionLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UUIDLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUUIDLiteral([NotNull] MParser.UUIDLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UUIDLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUUIDLiteral([NotNull] MParser.UUIDLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolLiteral([NotNull] MParser.SymbolLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolLiteral([NotNull] MParser.SymbolLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeLiteral([NotNull] MParser.TypeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeLiteral([NotNull] MParser.TypeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] MParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="MParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] MParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral_list_literal([NotNull] MParser.Literal_list_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral_list_literal([NotNull] MParser.Literal_list_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThis_expression([NotNull] MParser.This_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThis_expression([NotNull] MParser.This_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] MParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] MParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral_expression([NotNull] MParser.Literal_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral_expression([NotNull] MParser.Literal_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollection_literal([NotNull] MParser.Collection_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollection_literal([NotNull] MParser.Collection_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_literal([NotNull] MParser.Tuple_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_literal([NotNull] MParser.Tuple_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_literal([NotNull] MParser.Dict_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_literal([NotNull] MParser.Dict_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.document_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_literal([NotNull] MParser.Document_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.document_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_literal([NotNull] MParser.Document_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_tuple([NotNull] MParser.Expression_tupleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_tuple([NotNull] MParser.Expression_tupleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry_list([NotNull] MParser.Dict_entry_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry_list([NotNull] MParser.Dict_entry_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry([NotNull] MParser.Dict_entryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry([NotNull] MParser.Dict_entryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictKeyIdentifier</c>
	/// labeled alternative in <see cref="MParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictKeyIdentifier([NotNull] MParser.DictKeyIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictKeyIdentifier</c>
	/// labeled alternative in <see cref="MParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictKeyIdentifier([NotNull] MParser.DictKeyIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictKeyText</c>
	/// labeled alternative in <see cref="MParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictKeyText([NotNull] MParser.DictKeyTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictKeyText</c>
	/// labeled alternative in <see cref="MParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictKeyText([NotNull] MParser.DictKeyTextContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstAndLast([NotNull] MParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstAndLast([NotNull] MParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstOnly([NotNull] MParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstOnly([NotNull] MParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLastOnly([NotNull] MParser.SliceLastOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="MParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLastOnly([NotNull] MParser.SliceLastOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_variable_statement([NotNull] MParser.Assign_variable_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_variable_statement([NotNull] MParser.Assign_variable_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="MParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChildInstance([NotNull] MParser.ChildInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="MParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChildInstance([NotNull] MParser.ChildInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="MParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRootInstance([NotNull] MParser.RootInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="MParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRootInstance([NotNull] MParser.RootInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="MParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsATypeExpression([NotNull] MParser.IsATypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="MParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsATypeExpression([NotNull] MParser.IsATypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="MParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsOtherExpression([NotNull] MParser.IsOtherExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="MParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsOtherExpression([NotNull] MParser.IsOtherExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowExpressionBody</c>
	/// labeled alternative in <see cref="MParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowExpressionBody([NotNull] MParser.ArrowExpressionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowExpressionBody</c>
	/// labeled alternative in <see cref="MParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowExpressionBody([NotNull] MParser.ArrowExpressionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowStatementsBody</c>
	/// labeled alternative in <see cref="MParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowStatementsBody([NotNull] MParser.ArrowStatementsBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowStatementsBody</c>
	/// labeled alternative in <see cref="MParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowStatementsBody([NotNull] MParser.ArrowStatementsBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.arrow_prefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrow_prefix([NotNull] MParser.Arrow_prefixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.arrow_prefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrow_prefix([NotNull] MParser.Arrow_prefixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowSingleArg</c>
	/// labeled alternative in <see cref="MParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowSingleArg([NotNull] MParser.ArrowSingleArgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowSingleArg</c>
	/// labeled alternative in <see cref="MParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowSingleArg([NotNull] MParser.ArrowSingleArgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowListArg</c>
	/// labeled alternative in <see cref="MParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowListArg([NotNull] MParser.ArrowListArgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowListArg</c>
	/// labeled alternative in <see cref="MParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowListArg([NotNull] MParser.ArrowListArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.sorted_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_key([NotNull] MParser.Sorted_keyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.sorted_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_key([NotNull] MParser.Sorted_keyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.read_all_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_all_expression([NotNull] MParser.Read_all_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.read_all_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_all_expression([NotNull] MParser.Read_all_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.read_one_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_one_expression([NotNull] MParser.Read_one_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.read_one_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_one_expression([NotNull] MParser.Read_one_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by_list([NotNull] MParser.Order_by_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by_list([NotNull] MParser.Order_by_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by([NotNull] MParser.Order_byContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by([NotNull] MParser.Order_byContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorPlus([NotNull] MParser.OperatorPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorPlus([NotNull] MParser.OperatorPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMinus([NotNull] MParser.OperatorMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMinus([NotNull] MParser.OperatorMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMultiply([NotNull] MParser.OperatorMultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMultiply([NotNull] MParser.OperatorMultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorDivide([NotNull] MParser.OperatorDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorDivide([NotNull] MParser.OperatorDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIDivide([NotNull] MParser.OperatorIDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIDivide([NotNull] MParser.OperatorIDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorModulo([NotNull] MParser.OperatorModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="MParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorModulo([NotNull] MParser.OperatorModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] MParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] MParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNew_token([NotNull] MParser.New_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNew_token([NotNull] MParser.New_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey_token([NotNull] MParser.Key_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey_token([NotNull] MParser.Key_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule_token([NotNull] MParser.Module_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule_token([NotNull] MParser.Module_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_token([NotNull] MParser.Value_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_token([NotNull] MParser.Value_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbols_token([NotNull] MParser.Symbols_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbols_token([NotNull] MParser.Symbols_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] MParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] MParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] MParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] MParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivide([NotNull] MParser.DivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivide([NotNull] MParser.DivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdivide([NotNull] MParser.IdivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdivide([NotNull] MParser.IdivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulo([NotNull] MParser.ModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulo([NotNull] MParser.ModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="MParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptReturnStatement([NotNull] MParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="MParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptReturnStatement([NotNull] MParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="MParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptStatement([NotNull] MParser.JavascriptStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="MParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptStatement([NotNull] MParser.JavascriptStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptSelectorExpression([NotNull] MParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptSelectorExpression([NotNull] MParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptPrimaryExpression([NotNull] MParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptPrimaryExpression([NotNull] MParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_primary_expression([NotNull] MParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_primary_expression([NotNull] MParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_this_expression([NotNull] MParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_this_expression([NotNull] MParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_new_expression([NotNull] MParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_new_expression([NotNull] MParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMethodExpression([NotNull] MParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMethodExpression([NotNull] MParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMemberExpression([NotNull] MParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMemberExpression([NotNull] MParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptItemExpression([NotNull] MParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="MParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptItemExpression([NotNull] MParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_method_expression([NotNull] MParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_method_expression([NotNull] MParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="MParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentList([NotNull] MParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="MParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentList([NotNull] MParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentListItem([NotNull] MParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentListItem([NotNull] MParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_item_expression([NotNull] MParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_item_expression([NotNull] MParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_parenthesis_expression([NotNull] MParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_parenthesis_expression([NotNull] MParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier_expression([NotNull] MParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier_expression([NotNull] MParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIntegerLiteral([NotNull] MParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIntegerLiteral([NotNull] MParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptDecimalLiteral([NotNull] MParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptDecimalLiteral([NotNull] MParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptTextLiteral([NotNull] MParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptTextLiteral([NotNull] MParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptBooleanLiteral([NotNull] MParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptBooleanLiteral([NotNull] MParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptCharacterLiteral([NotNull] MParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptCharacterLiteral([NotNull] MParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier([NotNull] MParser.Javascript_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier([NotNull] MParser.Javascript_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="MParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonReturnStatement([NotNull] MParser.PythonReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="MParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonReturnStatement([NotNull] MParser.PythonReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="MParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonStatement([NotNull] MParser.PythonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="MParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonStatement([NotNull] MParser.PythonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelectorExpression([NotNull] MParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelectorExpression([NotNull] MParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPrimaryExpression([NotNull] MParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPrimaryExpression([NotNull] MParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelfExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelfExpression([NotNull] MParser.PythonSelfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelfExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelfExpression([NotNull] MParser.PythonSelfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonParenthesisExpression([NotNull] MParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonParenthesisExpression([NotNull] MParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifierExpression([NotNull] MParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifierExpression([NotNull] MParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonLiteralExpression([NotNull] MParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonLiteralExpression([NotNull] MParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonGlobalMethodExpression([NotNull] MParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="MParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonGlobalMethodExpression([NotNull] MParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_self_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_self_expression([NotNull] MParser.Python_self_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_self_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_self_expression([NotNull] MParser.Python_self_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="MParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonMethodExpression([NotNull] MParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="MParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonMethodExpression([NotNull] MParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="MParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonItemExpression([NotNull] MParser.PythonItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="MParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonItemExpression([NotNull] MParser.PythonItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_method_expression([NotNull] MParser.Python_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_method_expression([NotNull] MParser.Python_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalOnlyArgumentList([NotNull] MParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalOnlyArgumentList([NotNull] MParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedOnlyArgumentList([NotNull] MParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedOnlyArgumentList([NotNull] MParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonArgumentList([NotNull] MParser.PythonArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonArgumentList([NotNull] MParser.PythonArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentList([NotNull] MParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentList([NotNull] MParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentListItem([NotNull] MParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentListItem([NotNull] MParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentList([NotNull] MParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="MParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentList([NotNull] MParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentListItem([NotNull] MParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentListItem([NotNull] MParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_parenthesis_expression([NotNull] MParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_parenthesis_expression([NotNull] MParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonChildIdentifier([NotNull] MParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonChildIdentifier([NotNull] MParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPromptoIdentifier([NotNull] MParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPromptoIdentifier([NotNull] MParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifier([NotNull] MParser.PythonIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="MParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifier([NotNull] MParser.PythonIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIntegerLiteral([NotNull] MParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIntegerLiteral([NotNull] MParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonDecimalLiteral([NotNull] MParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonDecimalLiteral([NotNull] MParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonTextLiteral([NotNull] MParser.PythonTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonTextLiteral([NotNull] MParser.PythonTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonBooleanLiteral([NotNull] MParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonBooleanLiteral([NotNull] MParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonCharacterLiteral([NotNull] MParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonCharacterLiteral([NotNull] MParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_identifier([NotNull] MParser.Python_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_identifier([NotNull] MParser.Python_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="MParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaReturnStatement([NotNull] MParser.JavaReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="MParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaReturnStatement([NotNull] MParser.JavaReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="MParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaStatement([NotNull] MParser.JavaStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="MParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaStatement([NotNull] MParser.JavaStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaSelectorExpression([NotNull] MParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaSelectorExpression([NotNull] MParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaPrimaryExpression([NotNull] MParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaPrimaryExpression([NotNull] MParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_primary_expression([NotNull] MParser.Java_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_primary_expression([NotNull] MParser.Java_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_this_expression([NotNull] MParser.Java_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_this_expression([NotNull] MParser.Java_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_new_expression([NotNull] MParser.Java_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_new_expression([NotNull] MParser.Java_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="MParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaMethodExpression([NotNull] MParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="MParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaMethodExpression([NotNull] MParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="MParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaItemExpression([NotNull] MParser.JavaItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="MParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaItemExpression([NotNull] MParser.JavaItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_method_expression([NotNull] MParser.Java_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_method_expression([NotNull] MParser.Java_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentListItem([NotNull] MParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentListItem([NotNull] MParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="MParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentList([NotNull] MParser.JavaArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="MParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentList([NotNull] MParser.JavaArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_item_expression([NotNull] MParser.Java_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_item_expression([NotNull] MParser.Java_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_parenthesis_expression([NotNull] MParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_parenthesis_expression([NotNull] MParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifier([NotNull] MParser.JavaIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifier([NotNull] MParser.JavaIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildIdentifier([NotNull] MParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildIdentifier([NotNull] MParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaClassIdentifier([NotNull] MParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaClassIdentifier([NotNull] MParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildClassIdentifier([NotNull] MParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="MParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildClassIdentifier([NotNull] MParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIntegerLiteral([NotNull] MParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIntegerLiteral([NotNull] MParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaDecimalLiteral([NotNull] MParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaDecimalLiteral([NotNull] MParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaTextLiteral([NotNull] MParser.JavaTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaTextLiteral([NotNull] MParser.JavaTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaBooleanLiteral([NotNull] MParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaBooleanLiteral([NotNull] MParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCharacterLiteral([NotNull] MParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCharacterLiteral([NotNull] MParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_identifier([NotNull] MParser.Java_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_identifier([NotNull] MParser.Java_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="MParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpReturnStatement([NotNull] MParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="MParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpReturnStatement([NotNull] MParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="MParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpStatement([NotNull] MParser.CSharpStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="MParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpStatement([NotNull] MParser.CSharpStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpSelectorExpression([NotNull] MParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpSelectorExpression([NotNull] MParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPrimaryExpression([NotNull] MParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPrimaryExpression([NotNull] MParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_primary_expression([NotNull] MParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_primary_expression([NotNull] MParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_this_expression([NotNull] MParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_this_expression([NotNull] MParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_new_expression([NotNull] MParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_new_expression([NotNull] MParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpMethodExpression([NotNull] MParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpMethodExpression([NotNull] MParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpItemExpression([NotNull] MParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="MParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpItemExpression([NotNull] MParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_method_expression([NotNull] MParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_method_expression([NotNull] MParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="MParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentList([NotNull] MParser.CSharpArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="MParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentList([NotNull] MParser.CSharpArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentListItem([NotNull] MParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="MParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentListItem([NotNull] MParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_item_expression([NotNull] MParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_item_expression([NotNull] MParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_parenthesis_expression([NotNull] MParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_parenthesis_expression([NotNull] MParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifier([NotNull] MParser.CSharpIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifier([NotNull] MParser.CSharpIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpChildIdentifier([NotNull] MParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpChildIdentifier([NotNull] MParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPromptoIdentifier([NotNull] MParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="MParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPromptoIdentifier([NotNull] MParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIntegerLiteral([NotNull] MParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIntegerLiteral([NotNull] MParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpDecimalLiteral([NotNull] MParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpDecimalLiteral([NotNull] MParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpTextLiteral([NotNull] MParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpTextLiteral([NotNull] MParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpBooleanLiteral([NotNull] MParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpBooleanLiteral([NotNull] MParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCharacterLiteral([NotNull] MParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="MParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCharacterLiteral([NotNull] MParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_identifier([NotNull] MParser.Csharp_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_identifier([NotNull] MParser.Csharp_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_expression([NotNull] MParser.Jsx_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_expression([NotNull] MParser.Jsx_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxSelfClosing</c>
	/// labeled alternative in <see cref="MParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxSelfClosing([NotNull] MParser.JsxSelfClosingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxSelfClosing</c>
	/// labeled alternative in <see cref="MParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxSelfClosing([NotNull] MParser.JsxSelfClosingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxElement</c>
	/// labeled alternative in <see cref="MParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxElement([NotNull] MParser.JsxElementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxElement</c>
	/// labeled alternative in <see cref="MParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxElement([NotNull] MParser.JsxElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_fragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment([NotNull] MParser.Jsx_fragmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_fragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment([NotNull] MParser.Jsx_fragmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_fragment_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment_start([NotNull] MParser.Jsx_fragment_startContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_fragment_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment_start([NotNull] MParser.Jsx_fragment_startContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_fragment_end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment_end([NotNull] MParser.Jsx_fragment_endContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_fragment_end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment_end([NotNull] MParser.Jsx_fragment_endContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_self_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_self_closing([NotNull] MParser.Jsx_self_closingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_self_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_self_closing([NotNull] MParser.Jsx_self_closingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_opening"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_opening([NotNull] MParser.Jsx_openingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_opening"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_opening([NotNull] MParser.Jsx_openingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_closing([NotNull] MParser.Jsx_closingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_closing([NotNull] MParser.Jsx_closingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_element_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_element_name([NotNull] MParser.Jsx_element_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_element_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_element_name([NotNull] MParser.Jsx_element_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_identifier([NotNull] MParser.Jsx_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_identifier([NotNull] MParser.Jsx_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_attribute([NotNull] MParser.Jsx_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_attribute([NotNull] MParser.Jsx_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxLiteral</c>
	/// labeled alternative in <see cref="MParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxLiteral([NotNull] MParser.JsxLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxLiteral</c>
	/// labeled alternative in <see cref="MParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxLiteral([NotNull] MParser.JsxLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxValue</c>
	/// labeled alternative in <see cref="MParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxValue([NotNull] MParser.JsxValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxValue</c>
	/// labeled alternative in <see cref="MParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxValue([NotNull] MParser.JsxValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_children"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_children([NotNull] MParser.Jsx_childrenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_children"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_children([NotNull] MParser.Jsx_childrenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxText</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxText([NotNull] MParser.JsxTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxText</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxText([NotNull] MParser.JsxTextContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxChild</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxChild([NotNull] MParser.JsxChildContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxChild</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxChild([NotNull] MParser.JsxChildContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxCode</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxCode([NotNull] MParser.JsxCodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxCode</c>
	/// labeled alternative in <see cref="MParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxCode([NotNull] MParser.JsxCodeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.jsx_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_text([NotNull] MParser.Jsx_textContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.jsx_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_text([NotNull] MParser.Jsx_textContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.css_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_expression([NotNull] MParser.Css_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.css_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_expression([NotNull] MParser.Css_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.css_field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_field([NotNull] MParser.Css_fieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.css_field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_field([NotNull] MParser.Css_fieldContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.css_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_identifier([NotNull] MParser.Css_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.css_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_identifier([NotNull] MParser.Css_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssValue</c>
	/// labeled alternative in <see cref="MParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssValue([NotNull] MParser.CssValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssValue</c>
	/// labeled alternative in <see cref="MParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssValue([NotNull] MParser.CssValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssText</c>
	/// labeled alternative in <see cref="MParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssText([NotNull] MParser.CssTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssText</c>
	/// labeled alternative in <see cref="MParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssText([NotNull] MParser.CssTextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MParser.css_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_text([NotNull] MParser.Css_textContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MParser.css_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_text([NotNull] MParser.Css_textContext context);
}
} // namespace prompto.parser
