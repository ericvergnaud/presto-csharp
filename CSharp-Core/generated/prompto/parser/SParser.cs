//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prompto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class SParser : AbstractParser {
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, COMMENT=8, 
		JAVA=9, CSHARP=10, PYTHON2=11, PYTHON3=12, JAVASCRIPT=13, SWIFT=14, COLON=15, 
		SEMI=16, COMMA=17, RANGE=18, DOT=19, LPAR=20, RPAR=21, LBRAK=22, RBRAK=23, 
		LCURL=24, RCURL=25, QMARK=26, XMARK=27, AMP=28, AMP2=29, PIPE=30, PIPE2=31, 
		PLUS=32, MINUS=33, STAR=34, SLASH=35, BSLASH=36, PERCENT=37, GT=38, GTE=39, 
		LT=40, LTE=41, LTGT=42, EQ=43, XEQ=44, EQ2=45, TEQ=46, TILDE=47, LARROW=48, 
		RARROW=49, BOOLEAN=50, CHARACTER=51, TEXT=52, INTEGER=53, DECIMAL=54, 
		DATE=55, TIME=56, DATETIME=57, PERIOD=58, METHOD_T=59, CODE=60, DOCUMENT=61, 
		BLOB=62, IMAGE=63, UUID=64, ITERATOR=65, CURSOR=66, ABSTRACT=67, ALL=68, 
		ALWAYS=69, AND=70, ANY=71, AS=72, ASC=73, ATTR=74, ATTRIBUTE=75, ATTRIBUTES=76, 
		BINDINGS=77, BY=78, CASE=79, CATCH=80, CATEGORY=81, CLASS=82, CLOSE=83, 
		CONTAINS=84, DEF=85, DEFAULT=86, DEFINE=87, DELETE=88, DESC=89, DO=90, 
		DOING=91, EACH=92, ELSE=93, ENUM=94, ENUMERATED=95, EXCEPT=96, EXECUTE=97, 
		EXPECTING=98, EXTENDS=99, FETCH=100, FINALLY=101, FLUSH=102, FOR=103, 
		FROM=104, GETTER=105, IF=106, IN=107, INDEX=108, INVOKE=109, IS=110, MATCHING=111, 
		METHOD=112, METHODS=113, MODULO=114, MUTABLE=115, NATIVE=116, NONE=117, 
		NOT=118, NOTHING=119, NULL=120, ON=121, ONE=122, OPEN=123, OPERATOR=124, 
		OR=125, ORDER=126, OTHERWISE=127, PASS=128, RAISE=129, READ=130, RECEIVING=131, 
		RESOURCE=132, RETURN=133, RETURNING=134, ROWS=135, SELF=136, SETTER=137, 
		SINGLETON=138, SORTED=139, STORABLE=140, STORE=141, SWITCH=142, TEST=143, 
		THIS=144, THROW=145, TO=146, TRY=147, VERIFYING=148, WITH=149, WHEN=150, 
		WHERE=151, WHILE=152, WRITE=153, BOOLEAN_LITERAL=154, CHAR_LITERAL=155, 
		MIN_INTEGER=156, MAX_INTEGER=157, SYMBOL_IDENTIFIER=158, TYPE_IDENTIFIER=159, 
		VARIABLE_IDENTIFIER=160, NATIVE_IDENTIFIER=161, DOLLAR_IDENTIFIER=162, 
		TEXT_LITERAL=163, INTEGER_LITERAL=164, HEXA_LITERAL=165, DECIMAL_LITERAL=166, 
		DATETIME_LITERAL=167, TIME_LITERAL=168, DATE_LITERAL=169, PERIOD_LITERAL=170;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_index_clause = 5, RULE_concrete_category_declaration = 6, RULE_singleton_category_declaration = 7, 
		RULE_derived_list = 8, RULE_operator_method_declaration = 9, RULE_setter_method_declaration = 10, 
		RULE_native_setter_declaration = 11, RULE_getter_method_declaration = 12, 
		RULE_native_getter_declaration = 13, RULE_native_category_declaration = 14, 
		RULE_native_resource_declaration = 15, RULE_native_category_bindings = 16, 
		RULE_native_category_binding_list = 17, RULE_abstract_method_declaration = 18, 
		RULE_concrete_method_declaration = 19, RULE_native_method_declaration = 20, 
		RULE_test_method_declaration = 21, RULE_assertion = 22, RULE_typed_argument = 23, 
		RULE_statement = 24, RULE_flush_statement = 25, RULE_store_statement = 26, 
		RULE_method_call = 27, RULE_method_selector = 28, RULE_callable_parent = 29, 
		RULE_callable_selector = 30, RULE_with_resource_statement = 31, RULE_with_singleton_statement = 32, 
		RULE_switch_statement = 33, RULE_switch_case_statement = 34, RULE_for_each_statement = 35, 
		RULE_do_while_statement = 36, RULE_while_statement = 37, RULE_if_statement = 38, 
		RULE_else_if_statement_list = 39, RULE_raise_statement = 40, RULE_try_statement = 41, 
		RULE_catch_statement = 42, RULE_return_statement = 43, RULE_expression = 44, 
		RULE_closure_expression = 45, RULE_instance_expression = 46, RULE_method_expression = 47, 
		RULE_instance_selector = 48, RULE_blob_expression = 49, RULE_document_expression = 50, 
		RULE_constructor_expression = 51, RULE_argument_assignment_list = 52, 
		RULE_argument_assignment = 53, RULE_read_expression = 54, RULE_write_statement = 55, 
		RULE_fetch_list_expression = 56, RULE_fetch_store_expression = 57, RULE_sorted_expression = 58, 
		RULE_assign_instance_statement = 59, RULE_child_instance = 60, RULE_assign_tuple_statement = 61, 
		RULE_lfs = 62, RULE_lfp = 63, RULE_indent = 64, RULE_dedent = 65, RULE_null_literal = 66, 
		RULE_declaration_list = 67, RULE_declarations = 68, RULE_declaration = 69, 
		RULE_resource_declaration = 70, RULE_enum_declaration = 71, RULE_native_symbol_list = 72, 
		RULE_category_symbol_list = 73, RULE_symbol_list = 74, RULE_attribute_constraint = 75, 
		RULE_list_literal = 76, RULE_set_literal = 77, RULE_expression_list = 78, 
		RULE_range_literal = 79, RULE_typedef = 80, RULE_primary_type = 81, RULE_native_type = 82, 
		RULE_category_type = 83, RULE_mutable_category_type = 84, RULE_code_type = 85, 
		RULE_category_declaration = 86, RULE_type_identifier_list = 87, RULE_method_identifier = 88, 
		RULE_identifier = 89, RULE_variable_identifier = 90, RULE_attribute_identifier = 91, 
		RULE_type_identifier = 92, RULE_symbol_identifier = 93, RULE_argument_list = 94, 
		RULE_argument = 95, RULE_operator_argument = 96, RULE_named_argument = 97, 
		RULE_code_argument = 98, RULE_category_or_any_type = 99, RULE_any_type = 100, 
		RULE_member_method_declaration_list = 101, RULE_member_method_declaration = 102, 
		RULE_native_member_method_declaration_list = 103, RULE_native_member_method_declaration = 104, 
		RULE_native_category_binding = 105, RULE_python_category_binding = 106, 
		RULE_python_module = 107, RULE_javascript_category_binding = 108, RULE_javascript_module = 109, 
		RULE_variable_identifier_list = 110, RULE_attribute_identifier_list = 111, 
		RULE_method_declaration = 112, RULE_comment_statement = 113, RULE_native_statement_list = 114, 
		RULE_native_statement = 115, RULE_python_native_statement = 116, RULE_javascript_native_statement = 117, 
		RULE_statement_list = 118, RULE_assertion_list = 119, RULE_switch_case_statement_list = 120, 
		RULE_catch_statement_list = 121, RULE_literal_collection = 122, RULE_atomic_literal = 123, 
		RULE_literal_list_literal = 124, RULE_selectable_expression = 125, RULE_this_expression = 126, 
		RULE_parenthesis_expression = 127, RULE_literal_expression = 128, RULE_collection_literal = 129, 
		RULE_tuple_literal = 130, RULE_dict_literal = 131, RULE_expression_tuple = 132, 
		RULE_dict_entry_list = 133, RULE_dict_entry = 134, RULE_slice_arguments = 135, 
		RULE_assign_variable_statement = 136, RULE_assignable_instance = 137, 
		RULE_is_expression = 138, RULE_order_by_list = 139, RULE_order_by = 140, 
		RULE_operator = 141, RULE_new_token = 142, RULE_key_token = 143, RULE_module_token = 144, 
		RULE_value_token = 145, RULE_symbols_token = 146, RULE_assign = 147, RULE_multiply = 148, 
		RULE_divide = 149, RULE_idivide = 150, RULE_modulo = 151, RULE_javascript_statement = 152, 
		RULE_javascript_expression = 153, RULE_javascript_primary_expression = 154, 
		RULE_javascript_this_expression = 155, RULE_javascript_new_expression = 156, 
		RULE_javascript_selector_expression = 157, RULE_javascript_method_expression = 158, 
		RULE_javascript_arguments = 159, RULE_javascript_item_expression = 160, 
		RULE_javascript_parenthesis_expression = 161, RULE_javascript_identifier_expression = 162, 
		RULE_javascript_literal_expression = 163, RULE_javascript_identifier = 164, 
		RULE_python_statement = 165, RULE_python_expression = 166, RULE_python_primary_expression = 167, 
		RULE_python_selector_expression = 168, RULE_python_method_expression = 169, 
		RULE_python_argument_list = 170, RULE_python_ordinal_argument_list = 171, 
		RULE_python_named_argument_list = 172, RULE_python_parenthesis_expression = 173, 
		RULE_python_identifier_expression = 174, RULE_python_literal_expression = 175, 
		RULE_python_identifier = 176, RULE_java_statement = 177, RULE_java_expression = 178, 
		RULE_java_primary_expression = 179, RULE_java_this_expression = 180, RULE_java_new_expression = 181, 
		RULE_java_selector_expression = 182, RULE_java_method_expression = 183, 
		RULE_java_arguments = 184, RULE_java_item_expression = 185, RULE_java_parenthesis_expression = 186, 
		RULE_java_identifier_expression = 187, RULE_java_class_identifier_expression = 188, 
		RULE_java_literal_expression = 189, RULE_java_identifier = 190, RULE_csharp_statement = 191, 
		RULE_csharp_expression = 192, RULE_csharp_primary_expression = 193, RULE_csharp_this_expression = 194, 
		RULE_csharp_new_expression = 195, RULE_csharp_selector_expression = 196, 
		RULE_csharp_method_expression = 197, RULE_csharp_arguments = 198, RULE_csharp_item_expression = 199, 
		RULE_csharp_parenthesis_expression = 200, RULE_csharp_identifier_expression = 201, 
		RULE_csharp_literal_expression = 202, RULE_csharp_identifier = 203;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "index_clause", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "operator_method_declaration", 
		"setter_method_declaration", "native_setter_declaration", "getter_method_declaration", 
		"native_getter_declaration", "native_category_declaration", "native_resource_declaration", 
		"native_category_bindings", "native_category_binding_list", "abstract_method_declaration", 
		"concrete_method_declaration", "native_method_declaration", "test_method_declaration", 
		"assertion", "typed_argument", "statement", "flush_statement", "store_statement", 
		"method_call", "method_selector", "callable_parent", "callable_selector", 
		"with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "return_statement", "expression", "closure_expression", 
		"instance_expression", "method_expression", "instance_selector", "blob_expression", 
		"document_expression", "constructor_expression", "argument_assignment_list", 
		"argument_assignment", "read_expression", "write_statement", "fetch_list_expression", 
		"fetch_store_expression", "sorted_expression", "assign_instance_statement", 
		"child_instance", "assign_tuple_statement", "lfs", "lfp", "indent", "dedent", 
		"null_literal", "declaration_list", "declarations", "declaration", "resource_declaration", 
		"enum_declaration", "native_symbol_list", "category_symbol_list", "symbol_list", 
		"attribute_constraint", "list_literal", "set_literal", "expression_list", 
		"range_literal", "typedef", "primary_type", "native_type", "category_type", 
		"mutable_category_type", "code_type", "category_declaration", "type_identifier_list", 
		"method_identifier", "identifier", "variable_identifier", "attribute_identifier", 
		"type_identifier", "symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "javascript_category_binding", "javascript_module", "variable_identifier_list", 
		"attribute_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "order_by_list", 
		"order_by", "operator", "new_token", "key_token", "module_token", "value_token", 
		"symbols_token", "assign", "multiply", "divide", "idivide", "modulo", 
		"javascript_statement", "javascript_expression", "javascript_primary_expression", 
		"javascript_this_expression", "javascript_new_expression", "javascript_selector_expression", 
		"javascript_method_expression", "javascript_arguments", "javascript_item_expression", 
		"javascript_parenthesis_expression", "javascript_identifier_expression", 
		"javascript_literal_expression", "javascript_identifier", "python_statement", 
		"python_expression", "python_primary_expression", "python_selector_expression", 
		"python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
		"python_named_argument_list", "python_parenthesis_expression", "python_identifier_expression", 
		"python_literal_expression", "python_identifier", "java_statement", "java_expression", 
		"java_primary_expression", "java_this_expression", "java_new_expression", 
		"java_selector_expression", "java_method_expression", "java_arguments", 
		"java_item_expression", "java_parenthesis_expression", "java_identifier_expression", 
		"java_class_identifier_expression", "java_literal_expression", "java_identifier", 
		"csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_new_expression", "csharp_selector_expression", 
		"csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
		"csharp_parenthesis_expression", "csharp_identifier_expression", "csharp_literal_expression", 
		"csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", null, "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		"','", "'..'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
		"'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
		"'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Method'", 
		"'Code'", "'Document'", "'Blob'", "'Image'", "'UUID'", "'Iterator'", "'Cursor'", 
		"'abstract'", "'all'", "'always'", "'and'", "'any'", "'as'", null, "'attr'", 
		"'attribute'", "'attributes'", "'bindings'", "'by'", "'case'", "'catch'", 
		"'category'", "'class'", "'close'", "'contains'", "'def'", "'default'", 
		"'define'", "'delete'", null, "'do'", "'doing'", "'each'", "'else'", "'enum'", 
		"'enumerated'", "'except'", "'execute'", "'expecting'", "'extends'", "'fetch'", 
		"'finally'", "'flush'", "'for'", "'from'", "'getter'", "'if'", "'in'", 
		"'index'", "'invoke'", "'is'", "'matching'", "'method'", "'methods'", 
		"'modulo'", "'mutable'", "'native'", "'None'", "'not'", null, "'null'", 
		"'on'", "'one'", "'open'", "'operator'", "'or'", "'order'", "'otherwise'", 
		"'pass'", "'raise'", "'read'", "'receiving'", "'resource'", "'return'", 
		"'returning'", "'rows'", "'self'", "'setter'", "'singleton'", "'sorted'", 
		"'storable'", "'store'", "'switch'", "'test'", "'this'", "'throw'", "'to'", 
		"'try'", "'verifying'", "'with'", "'when'", "'where'", "'while'", "'write'", 
		null, null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "COMMENT", 
		"JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
		"SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
		"STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
		"EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", "CHARACTER", 
		"TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
		"CODE", "DOCUMENT", "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "ABSTRACT", 
		"ALL", "ALWAYS", "AND", "ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
		"BINDINGS", "BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", 
		"DEF", "DEFAULT", "DEFINE", "DELETE", "DESC", "DO", "DOING", "EACH", "ELSE", 
		"ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
		"FINALLY", "FLUSH", "FOR", "FROM", "GETTER", "IF", "IN", "INDEX", "INVOKE", 
		"IS", "MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", 
		"NONE", "NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", "OPERATOR", "OR", 
		"ORDER", "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", "RESOURCE", 
		"RETURN", "RETURNING", "ROWS", "SELF", "SETTER", "SINGLETON", "SORTED", 
		"STORABLE", "STORE", "SWITCH", "TEST", "THIS", "THROW", "TO", "TRY", "VERIFYING", 
		"WITH", "WHEN", "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
		"VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", "TEXT_LITERAL", 
		"INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
		"TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_identifier_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(ENUM);
			State = 409; _localctx.name = type_identifier();
			State = 410; Match(LPAR);
			State = 417;
			switch (TokenStream.La(1)) {
			case TYPE_IDENTIFIER:
				{
				State = 411; _localctx.derived = type_identifier();
				State = 414;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 412; Match(COMMA);
					State = 413; _localctx.attrs = attribute_identifier_list();
					}
				}

				}
				break;
			case STORABLE:
			case VARIABLE_IDENTIFIER:
				{
				State = 416; _localctx.attrs = attribute_identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 419; Match(RPAR);
			State = 420; Match(COLON);
			State = 421; indent();
			State = 422; _localctx.symbols = category_symbol_list();
			State = 423; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(ENUM);
			State = 426; _localctx.name = type_identifier();
			State = 427; Match(LPAR);
			State = 428; _localctx.typ = native_type();
			State = 429; Match(RPAR);
			State = 430; Match(COLON);
			State = 431; indent();
			State = 432; _localctx.symbols = native_symbol_list();
			State = 433; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; _localctx.name = symbol_identifier();
			State = 436; Match(EQ);
			State = 437; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; _localctx.name = symbol_identifier();
			State = 440; Match(LPAR);
			State = 442;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 441; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 444; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Attribute_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public Index_clauseContext indices;
		public ITerminalNode ATTR() { return GetToken(SParser.ATTR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Index_clauseContext index_clause() {
			return GetRuleContext<Index_clauseContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 446; Match(STORABLE);
				}
			}

			State = 449; Match(ATTR);
			State = 450; _localctx.name = attribute_identifier();
			State = 451; Match(LPAR);
			State = 452; _localctx.typ = typedef(0);
			State = 453; Match(RPAR);
			State = 454; Match(COLON);
			State = 455; indent();
			State = 471;
			switch (TokenStream.La(1)) {
			case PASS:
				{
				State = 456; Match(PASS);
				}
				break;
			case IN:
			case INDEX:
			case MATCHING:
				{
				State = 469;
				switch (TokenStream.La(1)) {
				case IN:
				case MATCHING:
					{
					State = 457; _localctx.match = attribute_constraint();
					State = 461;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 458; lfp();
						State = 459; _localctx.indices = index_clause();
						}
						break;
					}
					}
					break;
				case INDEX:
					{
					State = 463; _localctx.indices = index_clause();
					State = 467;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 464; lfp();
						State = 465; _localctx.match = attribute_constraint();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 473; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_clauseContext : ParserRuleContext {
		public Variable_identifier_listContext indices;
		public ITerminalNode INDEX() { return GetToken(SParser.INDEX, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIndex_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIndex_clause(this);
		}
	}

	[RuleVersion(0)]
	public Index_clauseContext index_clause() {
		Index_clauseContext _localctx = new Index_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_index_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(INDEX);
			State = 476; Match(LPAR);
			State = 478;
			_la = TokenStream.La(1);
			if (_la==VARIABLE_IDENTIFIER) {
				{
				State = 477; _localctx.indices = variable_identifier_list();
				}
			}

			State = 480; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_identifier_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 482; Match(STORABLE);
				}
			}

			State = 485;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 486; _localctx.name = type_identifier();
			State = 487; Match(LPAR);
			State = 494;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 488; _localctx.derived = derived_list();
				}
				break;
			case 2:
				{
				State = 489; _localctx.attrs = attribute_identifier_list();
				}
				break;
			case 3:
				{
				State = 490; _localctx.derived = derived_list();
				State = 491; Match(COMMA);
				State = 492; _localctx.attrs = attribute_identifier_list();
				}
				break;
			}
			State = 496; Match(RPAR);
			State = 497; Match(COLON);
			State = 498; indent();
			State = 501;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 499; _localctx.methods = member_method_declaration_list();
				}
				break;
			case PASS:
				{
				State = 500; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 503; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_identifier_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode SINGLETON() { return GetToken(SParser.SINGLETON, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleton_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(SINGLETON);
			State = 506; _localctx.name = type_identifier();
			State = 507; Match(LPAR);
			State = 508; _localctx.attrs = attribute_identifier_list();
			State = 509; Match(RPAR);
			State = 510; Match(COLON);
			State = 511; indent();
			State = 514;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 512; _localctx.methods = member_method_declaration_list();
				}
				break;
			case PASS:
				{
				State = 513; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 516; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDerived_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDerived_list(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_derived_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; _localctx.items = type_identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode OPERATOR() { return GetToken(SParser.OPERATOR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(DEF);
			State = 521; Match(OPERATOR);
			State = 522; _localctx.op = @operator();
			State = 523; Match(LPAR);
			State = 524; _localctx.arg = operator_argument();
			State = 525; Match(RPAR);
			State = 528;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 526; Match(RARROW);
				State = 527; _localctx.typ = typedef(0);
				}
			}

			State = 530; Match(COLON);
			State = 531; indent();
			State = 532; _localctx.stmts = statement_list();
			State = 533; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode SETTER() { return GetToken(SParser.SETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(DEF);
			State = 536; _localctx.name = variable_identifier();
			State = 537; Match(SETTER);
			State = 538; Match(LPAR);
			State = 539; Match(RPAR);
			State = 540; Match(COLON);
			State = 541; indent();
			State = 542; _localctx.stmts = statement_list();
			State = 543; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_setter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode SETTER() { return GetToken(SParser.SETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public Native_setter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_setter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_setter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_setter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_setter_declarationContext native_setter_declaration() {
		Native_setter_declarationContext _localctx = new Native_setter_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_native_setter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(DEF);
			State = 546; _localctx.name = variable_identifier();
			State = 548;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 547; Match(NATIVE);
				}
			}

			State = 550; Match(SETTER);
			State = 551; Match(LPAR);
			State = 552; Match(RPAR);
			State = 553; Match(COLON);
			State = 554; indent();
			State = 555; _localctx.stmts = native_statement_list();
			State = 556; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode GETTER() { return GetToken(SParser.GETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(DEF);
			State = 559; _localctx.name = variable_identifier();
			State = 560; Match(GETTER);
			State = 561; Match(LPAR);
			State = 562; Match(RPAR);
			State = 563; Match(COLON);
			State = 564; indent();
			State = 565; _localctx.stmts = statement_list();
			State = 566; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_getter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode GETTER() { return GetToken(SParser.GETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public Native_getter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_getter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_getter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_getter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_getter_declarationContext native_getter_declaration() {
		Native_getter_declarationContext _localctx = new Native_getter_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_getter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(DEF);
			State = 569; _localctx.name = variable_identifier();
			State = 571;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 570; Match(NATIVE);
				}
			}

			State = 573; Match(GETTER);
			State = 574; Match(LPAR);
			State = 575; Match(RPAR);
			State = 576; Match(COLON);
			State = 577; indent();
			State = 578; _localctx.stmts = native_statement_list();
			State = 579; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_identifier_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 581; Match(STORABLE);
				}
			}

			State = 584; Match(NATIVE);
			State = 585;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 586; _localctx.name = type_identifier();
			State = 587; Match(LPAR);
			State = 589;
			_la = TokenStream.La(1);
			if (_la==STORABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 588; _localctx.attrs = attribute_identifier_list();
				}
			}

			State = 591; Match(RPAR);
			State = 592; Match(COLON);
			State = 593; indent();
			State = 594; _localctx.bindings = native_category_bindings();
			State = 598;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 595; lfp();
				State = 596; _localctx.methods = native_member_method_declaration_list();
				}
				break;
			}
			State = 600; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_identifier_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(SParser.RESOURCE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_native_resource_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; Match(NATIVE);
			State = 603; Match(RESOURCE);
			State = 604; _localctx.name = type_identifier();
			State = 605; Match(LPAR);
			State = 607;
			_la = TokenStream.La(1);
			if (_la==STORABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 606; _localctx.attrs = attribute_identifier_list();
				}
			}

			State = 609; Match(RPAR);
			State = 610; Match(COLON);
			State = 611; indent();
			State = 612; _localctx.bindings = native_category_bindings();
			State = 616;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 613; lfp();
				State = 614; _localctx.methods = native_member_method_declaration_list();
				}
				break;
			}
			State = 618; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode BINDINGS() { return GetToken(SParser.BINDINGS, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 32, RULE_native_category_bindings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(DEF);
			State = 621;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 622; Match(BINDINGS);
			State = 623; Match(COLON);
			State = 624; indent();
			State = 625; _localctx.items = native_category_binding_list(0);
			State = 626; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 629; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 637;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 631;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 632; lfp();
					State = 633; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode ABSTRACT() { return GetToken(SParser.ABSTRACT, 0); }
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(ABSTRACT);
			State = 641; Match(DEF);
			State = 642; _localctx.name = method_identifier();
			State = 643; Match(LPAR);
			State = 645;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 644; _localctx.args = argument_list();
				}
			}

			State = 647; Match(RPAR);
			State = 650;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 648; Match(RARROW);
				State = 649; _localctx.typ = typedef(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(DEF);
			State = 653; _localctx.name = method_identifier();
			State = 654; Match(LPAR);
			State = 656;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 655; _localctx.args = argument_list();
				}
			}

			State = 658; Match(RPAR);
			State = 661;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 659; Match(RARROW);
				State = 660; _localctx.typ = typedef(0);
				}
			}

			State = 663; Match(COLON);
			State = 664; indent();
			State = 665; _localctx.stmts = statement_list();
			State = 666; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668; Match(DEF);
			State = 670;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 669; Match(NATIVE);
				}
			}

			State = 672; _localctx.name = method_identifier();
			State = 673; Match(LPAR);
			State = 675;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 674; _localctx.args = argument_list();
				}
			}

			State = 677; Match(RPAR);
			State = 680;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 678; Match(RARROW);
				State = 679; _localctx.typ = category_or_any_type();
				}
			}

			State = 682; Match(COLON);
			State = 683; indent();
			State = 684; _localctx.stmts = native_statement_list();
			State = 685; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode VERIFYING() { return GetToken(SParser.VERIFYING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(DEF);
			State = 688; Match(TEST);
			State = 689; _localctx.name = Match(TEXT_LITERAL);
			State = 690; Match(LPAR);
			State = 691; Match(RPAR);
			State = 692; Match(COLON);
			State = 693; indent();
			State = 694; _localctx.stmts = statement_list();
			State = 695; dedent();
			State = 696; lfp();
			State = 697; Match(VERIFYING);
			State = 698; Match(COLON);
			State = 704;
			switch (TokenStream.La(1)) {
			case LF:
				{
				{
				State = 699; indent();
				State = 700; _localctx.exps = assertion_list();
				State = 701; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				{
				State = 703; _localctx.error = symbol_identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Category_or_any_typeContext typ;
		public Attribute_identifier_listContext attrs;
		public Literal_expressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_typed_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; _localctx.name = variable_identifier();
			State = 709; Match(COLON);
			State = 710; _localctx.typ = category_or_any_type();
			State = 715;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 711; Match(LPAR);
				State = 712; _localctx.attrs = attribute_identifier_list();
				State = 713; Match(RPAR);
				}
			}

			State = 719;
			_la = TokenStream.La(1);
			if (_la==EQ) {
				{
				State = 717; Match(EQ);
				State = 718; _localctx.value = literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommentStatementContext : StatementContext {
		public Comment_statementContext decl;
		public Comment_statementContext comment_statement() {
			return GetRuleContext<Comment_statementContext>(0);
		}
		public CommentStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCommentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCommentStatement(this);
		}
	}
	public partial class StoreStatementContext : StatementContext {
		public Store_statementContext stmt;
		public Store_statementContext store_statement() {
			return GetRuleContext<Store_statementContext>(0);
		}
		public StoreStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_callContext stmt;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class FlushStatementContext : StatementContext {
		public Flush_statementContext stmt;
		public Flush_statementContext flush_statement() {
			return GetRuleContext<Flush_statementContext>(0);
		}
		public FlushStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		try {
			State = 739;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 721; ((MethodCallStatementContext)_localctx).stmt = method_call();
				}
				break;
			case 2:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 722; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 723; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new StoreStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 724; ((StoreStatementContext)_localctx).stmt = store_statement();
				}
				break;
			case 5:
				_localctx = new FlushStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 725; ((FlushStatementContext)_localctx).stmt = flush_statement();
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 726; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 7:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 727; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 8:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 728; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 9:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 729; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 10:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 730; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 11:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 731; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 12:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 732; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 13:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 733; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 14:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 734; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 15:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 735; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 16:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 736; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 17:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 737; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 18:
				_localctx = new CommentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 738; ((CommentStatementContext)_localctx).decl = comment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_statementContext : ParserRuleContext {
		public ITerminalNode FLUSH() { return GetToken(SParser.FLUSH, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Flush_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFlush_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFlush_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flush_statementContext flush_statement() {
		Flush_statementContext _localctx = new Flush_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_flush_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741; Match(FLUSH);
			State = 742; Match(LPAR);
			State = 743; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_statementContext : ParserRuleContext {
		public Expression_listContext to_del;
		public Expression_listContext to_add;
		public ITerminalNode DELETE() { return GetToken(SParser.DELETE, 0); }
		public ITerminalNode[] LPAR() { return GetTokens(SParser.LPAR); }
		public ITerminalNode LPAR(int i) {
			return GetToken(SParser.LPAR, i);
		}
		public ITerminalNode[] RPAR() { return GetTokens(SParser.RPAR); }
		public ITerminalNode RPAR(int i) {
			return GetToken(SParser.RPAR, i);
		}
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public ITerminalNode STORE() { return GetToken(SParser.STORE, 0); }
		public ITerminalNode AND() { return GetToken(SParser.AND, 0); }
		public Store_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStore_statement(this);
		}
	}

	[RuleVersion(0)]
	public Store_statementContext store_statement() {
		Store_statementContext _localctx = new Store_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_store_statement);
		try {
			State = 765;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745; Match(DELETE);
				State = 746; Match(LPAR);
				State = 747; _localctx.to_del = expression_list();
				State = 748; Match(RPAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750; Match(STORE);
				State = 751; Match(LPAR);
				State = 752; _localctx.to_add = expression_list();
				State = 753; Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 755; Match(DELETE);
				State = 756; Match(LPAR);
				State = 757; _localctx.to_del = expression_list();
				State = 758; Match(RPAR);
				State = 759; Match(AND);
				State = 760; Match(STORE);
				State = 761; Match(LPAR);
				State = 762; _localctx.to_add = expression_list();
				State = 763; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		public Method_selectorContext method;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 54, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; _localctx.method = method_selector();
			State = 768; Match(LPAR);
			State = 770;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 769; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 772; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_selectorContext : ParserRuleContext {
		public Method_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_selector; } }
	 
		public Method_selectorContext() { }
		public virtual void CopyFrom(Method_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodParentContext : Method_selectorContext {
		public Callable_parentContext parent;
		public Method_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodParentContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodParent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodParent(this);
		}
	}
	public partial class MethodNameContext : Method_selectorContext {
		public Method_identifierContext name;
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodNameContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public Method_selectorContext method_selector() {
		Method_selectorContext _localctx = new Method_selectorContext(Context, State);
		EnterRule(_localctx, 56, RULE_method_selector);
		try {
			State = 779;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new MethodNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 774; ((MethodNameContext)_localctx).name = method_identifier();
				}
				break;
			case 2:
				_localctx = new MethodParentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 775; ((MethodParentContext)_localctx).parent = callable_parent(0);
				State = 776; Match(DOT);
				State = 777; ((MethodParentContext)_localctx).name = method_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_parentContext : ParserRuleContext {
		public Callable_parentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_parent; } }
	 
		public Callable_parentContext() { }
		public virtual void CopyFrom(Callable_parentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableSelectorContext : Callable_parentContext {
		public Callable_parentContext parent;
		public Callable_selectorContext select;
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Callable_selectorContext callable_selector() {
			return GetRuleContext<Callable_selectorContext>(0);
		}
		public CallableSelectorContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableSelector(this);
		}
	}
	public partial class CallableRootContext : Callable_parentContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CallableRootContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableRoot(this);
		}
	}

	[RuleVersion(0)]
	public Callable_parentContext callable_parent() {
		return callable_parent(0);
	}

	private Callable_parentContext callable_parent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Callable_parentContext _localctx = new Callable_parentContext(Context, _parentState);
		Callable_parentContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_callable_parent, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallableRootContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 782; ((CallableRootContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 788;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallableSelectorContext(new Callable_parentContext(_parentctx, _parentState));
					((CallableSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_callable_parent);
					State = 784;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 785; ((CallableSelectorContext)_localctx).select = callable_selector();
					}
					} 
				}
				State = 790;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Callable_selectorContext : ParserRuleContext {
		public Callable_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_selector; } }
	 
		public Callable_selectorContext() { }
		public virtual void CopyFrom(Callable_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableItemSelectorContext : Callable_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallableItemSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableItemSelector(this);
		}
	}
	public partial class CallableMemberSelectorContext : Callable_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public CallableMemberSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableMemberSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_selectorContext callable_selector() {
		Callable_selectorContext _localctx = new Callable_selectorContext(Context, State);
		EnterRule(_localctx, 60, RULE_callable_selector);
		try {
			State = 797;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CallableMemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 791; Match(DOT);
				State = 792; ((CallableMemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case LBRAK:
				_localctx = new CallableItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; Match(LBRAK);
				State = 794; ((CallableItemSelectorContext)_localctx).exp = expression(0);
				State = 795; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(WITH);
			State = 800; _localctx.stmt = assign_variable_statement();
			State = 801; Match(COLON);
			State = 802; indent();
			State = 803; _localctx.stmts = statement_list();
			State = 804; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(WITH);
			State = 807; _localctx.typ = type_identifier();
			State = 808; Match(COLON);
			State = 809; indent();
			State = 810; _localctx.stmts = statement_list();
			State = 811; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(SParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(SParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(SParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; Match(SWITCH);
			State = 814; Match(ON);
			State = 815; _localctx.exp = expression(0);
			State = 816; Match(COLON);
			State = 817; indent();
			State = 818; _localctx.cases = switch_case_statement_list();
			State = 826;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 819; lfp();
				State = 820; Match(OTHERWISE);
				State = 821; Match(COLON);
				State = 822; indent();
				State = 823; _localctx.stmts = statement_list();
				State = 824; dedent();
				}
				break;
			}
			State = 828; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switch_case_statement);
		try {
			State = 845;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 830; Match(WHEN);
				State = 831; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 832; Match(COLON);
				State = 833; indent();
				State = 834; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list();
				State = 835; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 837; Match(WHEN);
				State = 838; Match(IN);
				State = 839; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 840; Match(COLON);
				State = 841; indent();
				State = 842; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list();
				State = 843; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(SParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(FOR);
			State = 848; _localctx.name1 = variable_identifier();
			State = 851;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 849; Match(COMMA);
				State = 850; _localctx.name2 = variable_identifier();
				}
			}

			State = 853; Match(IN);
			State = 854; _localctx.source = expression(0);
			State = 855; Match(COLON);
			State = 856; indent();
			State = 857; _localctx.stmts = statement_list();
			State = 858; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(SParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860; Match(DO);
			State = 861; Match(COLON);
			State = 862; indent();
			State = 863; _localctx.stmts = statement_list();
			State = 864; dedent();
			State = 865; lfp();
			State = 866; Match(WHILE);
			State = 867; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(WHILE);
			State = 870; _localctx.exp = expression(0);
			State = 871; Match(COLON);
			State = 872; indent();
			State = 873; _localctx.stmts = statement_list();
			State = 874; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; Match(IF);
			State = 877; _localctx.exp = expression(0);
			State = 878; Match(COLON);
			State = 879; indent();
			State = 880; _localctx.stmts = statement_list();
			State = 881; dedent();
			State = 885;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 882; lfp();
				State = 883; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 894;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 887; lfp();
				State = 888; Match(ELSE);
				State = 889; Match(COLON);
				State = 890; indent();
				State = 891; _localctx.elseStmts = statement_list();
				State = 892; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 897; Match(ELSE);
			State = 898; Match(IF);
			State = 899; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 900; Match(COLON);
			State = 901; indent();
			State = 902; ((ElseIfStatementListContext)_localctx).stmts = statement_list();
			State = 903; dedent();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 917;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 905;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 906; lfp();
					State = 907; Match(ELSE);
					State = 908; Match(IF);
					State = 909; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 910; Match(COLON);
					State = 911; indent();
					State = 912; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list();
					State = 913; dedent();
					}
					} 
				}
				State = 919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(SParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; Match(RAISE);
			State = 921; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode TRY() { return GetToken(SParser.TRY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode FINALLY() { return GetToken(SParser.FINALLY, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 82, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923; Match(TRY);
			State = 924; _localctx.name = variable_identifier();
			State = 925; Match(COLON);
			State = 926; indent();
			State = 927; _localctx.stmts = statement_list();
			State = 928; dedent();
			State = 929; lfs();
			State = 931;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 930; _localctx.handlers = catch_statement_list();
				}
				break;
			}
			State = 940;
			_la = TokenStream.La(1);
			if (_la==EXCEPT) {
				{
				State = 933; Match(EXCEPT);
				State = 934; Match(COLON);
				State = 935; indent();
				State = 936; _localctx.anyStmts = statement_list();
				State = 937; dedent();
				State = 938; lfs();
				}
			}

			State = 949;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 942; Match(FINALLY);
				State = 943; Match(COLON);
				State = 944; indent();
				State = 945; _localctx.finalStmts = statement_list();
				State = 946; dedent();
				State = 947; lfs();
				}
			}

			State = 951; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 84, RULE_catch_statement);
		try {
			State = 972;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 953; Match(EXCEPT);
				State = 954; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 955; Match(COLON);
				State = 956; indent();
				State = 957; ((CatchAtomicStatementContext)_localctx).stmts = statement_list();
				State = 958; dedent();
				State = 959; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 961; Match(EXCEPT);
				State = 962; Match(IN);
				State = 963; Match(LBRAK);
				State = 964; ((CatchCollectionStatementContext)_localctx).exp = symbol_list();
				State = 965; Match(RBRAK);
				State = 966; Match(COLON);
				State = 967; indent();
				State = 968; ((CatchCollectionStatementContext)_localctx).stmts = statement_list();
				State = 969; dedent();
				State = 970; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 86, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; Match(RETURN);
			State = 976;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 975; _localctx.exp = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode XEQ() { return GetToken(SParser.XEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(SParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(SParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(SParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Closure_expressionContext exp;
		public Closure_expressionContext closure_expression() {
			return GetRuleContext<Closure_expressionContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TEQ() { return GetToken(SParser.TEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(SParser.EXECUTE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public Method_expressionContext exp;
		public Method_expressionContext method_expression() {
			return GetRuleContext<Method_expressionContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(SParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class IteratorExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ITerminalNode FOR() { return GetToken(SParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public IteratorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIteratorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIteratorExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(SParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ2() { return GetToken(SParser.EQ2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 979; Match(MINUS);
				State = 980; ((MinusExpressionContext)_localctx).exp = expression(32);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 981; Match(NOT);
				State = 982; ((NotExpressionContext)_localctx).exp = expression(31);
				}
				break;
			case 3:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 983; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new MethodExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 984; ((MethodExpressionContext)_localctx).exp = method_expression();
				}
				break;
			case 5:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 985; Match(CODE);
				State = 986; Match(LPAR);
				State = 987; ((CodeExpressionContext)_localctx).exp = expression(0);
				State = 988; Match(RPAR);
				}
				break;
			case 6:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 990; Match(EXECUTE);
				State = 991; Match(LPAR);
				State = 992; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				State = 993; Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 995; ((ClosureExpressionContext)_localctx).exp = closure_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1098;
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 998;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 999; multiply();
						State = 1000; ((MultiplyExpressionContext)_localctx).right = expression(31);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1002;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1003; divide();
						State = 1004; ((DivideExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1006;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1007; modulo();
						State = 1008; ((ModuloExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1010;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1011; idivide();
						State = 1012; ((IntDivideExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1014;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1015;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 1016; ((AddExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1017;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1018; Match(LT);
						State = 1019; ((LessThanExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1020;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1021; Match(LTE);
						State = 1022; ((LessThanOrEqualExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1023;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1024; Match(GT);
						State = 1025; ((GreaterThanExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1026;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1027; Match(GTE);
						State = 1028; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1029;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1030; Match(EQ2);
						State = 1031; ((EqualsExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1032;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1033; Match(XEQ);
						State = 1034; ((NotEqualsExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1035;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1036; Match(TEQ);
						State = 1037; ((RoughlyEqualsExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1038;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1039; Match(OR);
						State = 1040; ((OrExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1041;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1042; Match(AND);
						State = 1043; ((AndExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1044;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1045; Match(IF);
						State = 1046; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 1047; Match(ELSE);
						State = 1048; ((TernaryExpressionContext)_localctx).ifFalse = expression(15);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1050;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1051; Match(IN);
						State = 1052; ((InExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1053;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1054; Match(CONTAINS);
						State = 1055; ((ContainsExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1056;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1057; Match(CONTAINS);
						State = 1058; Match(ALL);
						State = 1059; ((ContainsAllExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1060;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1061; Match(CONTAINS);
						State = 1062; Match(ANY);
						State = 1063; ((ContainsAnyExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1064;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1065; Match(NOT);
						State = 1066; Match(IN);
						State = 1067; ((NotInExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1068;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1069; Match(NOT);
						State = 1070; Match(CONTAINS);
						State = 1071; ((NotContainsExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1072;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1073; Match(NOT);
						State = 1074; Match(CONTAINS);
						State = 1075; Match(ALL);
						State = 1076; ((NotContainsAllExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1077;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1078; Match(NOT);
						State = 1079; Match(CONTAINS);
						State = 1080; Match(ANY);
						State = 1081; ((NotContainsAnyExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 24:
						{
						_localctx = new IteratorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IteratorExpressionContext)_localctx).exp = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1082;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1083; Match(FOR);
						State = 1084; ((IteratorExpressionContext)_localctx).name = variable_identifier();
						State = 1085; Match(IN);
						State = 1086; ((IteratorExpressionContext)_localctx).source = expression(2);
						}
						break;
					case 25:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1088;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1089; Match(IS);
						State = 1090; Match(NOT);
						State = 1091; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 26:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1092;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1093; Match(IS);
						State = 1094; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 27:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1095;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1096; Match(AS);
						State = 1097; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					}
					} 
				}
				State = 1102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Closure_expressionContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Closure_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closure_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosure_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosure_expression(this);
		}
	}

	[RuleVersion(0)]
	public Closure_expressionContext closure_expression() {
		Closure_expressionContext _localctx = new Closure_expressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_closure_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103; _localctx.name = type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1106; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 1108;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1109; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 1114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_expressionContext : ParserRuleContext {
		public Blob_expressionContext blob_expression() {
			return GetRuleContext<Blob_expressionContext>(0);
		}
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public Fetch_list_expressionContext fetch_list_expression() {
			return GetRuleContext<Fetch_list_expressionContext>(0);
		}
		public Fetch_store_expressionContext fetch_store_expression() {
			return GetRuleContext<Fetch_store_expressionContext>(0);
		}
		public Read_expressionContext read_expression() {
			return GetRuleContext<Read_expressionContext>(0);
		}
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public Method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_expression(this);
		}
	}

	[RuleVersion(0)]
	public Method_expressionContext method_expression() {
		Method_expressionContext _localctx = new Method_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_method_expression);
		try {
			State = 1123;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1115; blob_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116; document_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1117; fetch_list_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1118; fetch_store_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1119; read_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1120; sorted_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1121; method_call();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1122; constructor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 96, RULE_instance_selector);
		try {
			State = 1138;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1126; Match(DOT);
				State = 1127; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1129; Match(LBRAK);
				State = 1130; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1131; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1133;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1134; Match(LBRAK);
				State = 1135; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1136; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Blob_expressionContext : ParserRuleContext {
		public ITerminalNode BLOB() { return GetToken(SParser.BLOB, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Blob_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blob_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBlob_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBlob_expression(this);
		}
	}

	[RuleVersion(0)]
	public Blob_expressionContext blob_expression() {
		Blob_expressionContext _localctx = new Blob_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_blob_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; Match(BLOB);
			State = 1141; Match(LPAR);
			State = 1143;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1142; expression(0);
				}
			}

			State = 1145; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public ITerminalNode DOCUMENT() { return GetToken(SParser.DOCUMENT, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_document_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147; Match(DOCUMENT);
			State = 1148; Match(LPAR);
			State = 1150;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1149; expression(0);
				}
			}

			State = 1152; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Mutable_category_typeContext typ;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConstructor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConstructor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_constructor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154; _localctx.typ = mutable_category_type();
			State = 1155; Match(LPAR);
			State = 1157;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1156; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 1159; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAssignmentListContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExpressionAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExpressionAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListContext : Argument_assignment_listContext {
		public Argument_assignmentContext item;
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : Argument_assignment_listContext {
		public Argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		return argument_assignment_list(0);
	}

	private Argument_assignment_listContext argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, _parentState);
		Argument_assignment_listContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				_localctx = new ExpressionAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1162; ((ExpressionAssignmentListContext)_localctx).exp = expression(0);
				State = 1163;
				if (!(this.willNotBe(this.equalToken()))) throw new FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
				}
				break;
			case 2:
				{
				_localctx = new ArgumentAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1165; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new Argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_assignment_list);
					State = 1168;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1169; Match(COMMA);
					State = 1170; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 106, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176; _localctx.name = variable_identifier();
			State = 1177; assign();
			State = 1178; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRead_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRead_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_expressionContext read_expression() {
		Read_expressionContext _localctx = new Read_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_read_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; Match(READ);
			State = 1181; Match(FROM);
			State = 1182; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(SParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 110, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184; Match(WRITE);
			State = 1185; _localctx.what = expression(0);
			State = 1186; Match(TO);
			State = 1187; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_list_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ExpressionContext predicate;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Fetch_list_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_list_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetch_list_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetch_list_expression(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_list_expressionContext fetch_list_expression() {
		Fetch_list_expressionContext _localctx = new Fetch_list_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_fetch_list_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189; Match(FETCH);
			State = 1190; _localctx.name = variable_identifier();
			State = 1191; Match(FROM);
			State = 1192; _localctx.source = expression(0);
			State = 1193; Match(WHERE);
			State = 1194; _localctx.predicate = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_store_expressionContext : ParserRuleContext {
		public Fetch_store_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_store_expression; } }
	 
		public Fetch_store_expressionContext() { }
		public virtual void CopyFrom(Fetch_store_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchOneContext : Fetch_store_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext predicate;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(SParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchOneContext(Fetch_store_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchOne(this);
		}
	}
	public partial class FetchManyContext : Fetch_store_expressionContext {
		public ExpressionContext xstart;
		public ExpressionContext xstop;
		public Mutable_category_typeContext typ;
		public ExpressionContext predicate;
		public Order_by_listContext orderby;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ITerminalNode ROWS() { return GetToken(SParser.ROWS, 0); }
		public ITerminalNode TO() { return GetToken(SParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public ITerminalNode ORDER() { return GetToken(SParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(SParser.BY, 0); }
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public Order_by_listContext order_by_list() {
			return GetRuleContext<Order_by_listContext>(0);
		}
		public FetchManyContext(Fetch_store_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchMany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchMany(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_store_expressionContext fetch_store_expression() {
		Fetch_store_expressionContext _localctx = new Fetch_store_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_fetch_store_expression);
		int _la;
		try {
			State = 1226;
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new FetchOneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1196; Match(FETCH);
				State = 1197; Match(ONE);
				State = 1199;
				_la = TokenStream.La(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1198; ((FetchOneContext)_localctx).typ = mutable_category_type();
					}
				}

				State = 1201; Match(WHERE);
				State = 1202; ((FetchOneContext)_localctx).predicate = expression(0);
				}
				break;
			case 2:
				_localctx = new FetchManyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203; Match(FETCH);
				State = 1210;
				switch (TokenStream.La(1)) {
				case ALL:
					{
					State = 1204; Match(ALL);
					}
					break;
				case ROWS:
					{
					State = 1205; Match(ROWS);
					State = 1206; ((FetchManyContext)_localctx).xstart = expression(0);
					State = 1207; Match(TO);
					State = 1208; ((FetchManyContext)_localctx).xstop = expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1212; Match(LPAR);
				State = 1214;
				_la = TokenStream.La(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1213; ((FetchManyContext)_localctx).typ = mutable_category_type();
					}
				}

				State = 1216; Match(RPAR);
				State = 1219;
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1217; Match(WHERE);
					State = 1218; ((FetchManyContext)_localctx).predicate = expression(0);
					}
					break;
				}
				State = 1224;
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1221; Match(ORDER);
					State = 1222; Match(BY);
					State = 1223; ((FetchManyContext)_localctx).orderby = order_by_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(SParser.SORTED, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; Match(SORTED);
			State = 1229; Match(LPAR);
			State = 1230; _localctx.source = instance_expression(0);
			State = 1236;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1231; Match(COMMA);
				State = 1232; key_token();
				State = 1233; Match(EQ);
				State = 1234; _localctx.key = instance_expression(0);
				}
			}

			State = 1238; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; _localctx.inst = assignable_instance(0);
			State = 1241; assign();
			State = 1242; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 120, RULE_child_instance);
		try {
			State = 1252;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1244;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1245; Match(DOT);
				State = 1246; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1247;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1248; Match(LBRAK);
				State = 1249; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1250; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 122, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254; _localctx.items = variable_identifier_list();
			State = 1255; assign();
			State = 1256; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 124, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1258; Match(LF);
					}
					} 
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 126, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1264; Match(LF);
				}
				}
				State = 1267;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(SParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 128, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1269; Match(LF);
				}
				}
				State = 1272;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			State = 1274; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(SParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 130, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LF) {
				{
				{
				State = 1276; Match(LF);
				}
				}
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1282; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NONE() { return GetToken(SParser.NONE, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 132, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284; Match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 134, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			_la = TokenStream.La(1);
			if (_la==COMMENT || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (ABSTRACT - 67)) | (1L << (ATTR - 67)) | (1L << (CATEGORY - 67)) | (1L << (CLASS - 67)) | (1L << (DEF - 67)) | (1L << (ENUM - 67)) | (1L << (NATIVE - 67)))) != 0) || _la==SINGLETON || _la==STORABLE) {
				{
				State = 1286; declarations();
				}
			}

			State = 1289; lfs();
			State = 1290; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 136, RULE_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292; declaration();
			State = 1298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1293; lfp();
					State = 1294; declaration();
					}
					} 
				}
				State = 1300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Comment_statementContext[] comment_statement() {
			return GetRuleContexts<Comment_statementContext>();
		}
		public Comment_statementContext comment_statement(int i) {
			return GetRuleContext<Comment_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMENT) {
				{
				{
				State = 1301; comment_statement();
				State = 1302; lfp();
				}
				}
				State = 1308;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1314;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1309; attribute_declaration();
				}
				break;
			case 2:
				{
				State = 1310; category_declaration();
				}
				break;
			case 3:
				{
				State = 1311; resource_declaration();
				}
				break;
			case 4:
				{
				State = 1312; enum_declaration();
				}
				break;
			case 5:
				{
				State = 1313; method_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 140, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316; native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_enum_declaration);
		try {
			State = 1320;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1318; enum_category_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1319; enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbolContext[] native_symbol() {
			return GetRuleContexts<Native_symbolContext>();
		}
		public Native_symbolContext native_symbol(int i) {
			return GetRuleContext<Native_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, State);
		EnterRule(_localctx, 144, RULE_native_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322; native_symbol();
			State = 1328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1323; lfp();
					State = 1324; native_symbol();
					}
					} 
				}
				State = 1330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbolContext[] category_symbol() {
			return GetRuleContexts<Category_symbolContext>();
		}
		public Category_symbolContext category_symbol(int i) {
			return GetRuleContext<Category_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, State);
		EnterRule(_localctx, 146, RULE_category_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331; category_symbol();
			State = 1337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1332; lfp();
					State = 1333; category_symbol();
					}
					} 
				}
				State = 1339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_identifierContext[] symbol_identifier() {
			return GetRuleContexts<Symbol_identifierContext>();
		}
		public Symbol_identifierContext symbol_identifier(int i) {
			return GetRuleContext<Symbol_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		Symbol_listContext _localctx = new Symbol_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_symbol_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340; symbol_identifier();
			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1341; Match(COMMA);
				State = 1342; symbol_identifier();
				}
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 150, RULE_attribute_constraint);
		try {
			State = 1358;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1348; Match(IN);
				State = 1349; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1350; Match(IN);
				State = 1351; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1352; Match(IN);
				State = 1353; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1354; Match(MATCHING);
				State = 1355; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1356; Match(MATCHING);
				State = 1357; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 152, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1360; Match(MUTABLE);
				}
			}

			State = 1363; Match(LBRAK);
			State = 1365;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1364; expression_list();
				}
			}

			State = 1367; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 154, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1369; Match(MUTABLE);
				}
			}

			State = 1372; Match(LT);
			State = 1374;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1373; expression_list();
				}
			}

			State = 1376; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 156, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378; expression(0);
			State = 1383;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1379; Match(COMMA);
				State = 1380; expression(0);
				}
				}
				State = 1385;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 158, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(LBRAK);
			State = 1387; _localctx.low = expression(0);
			State = 1388; Match(RANGE);
			State = 1389; _localctx.high = expression(0);
			State = 1390; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IteratorTypeContext : TypedefContext {
		public TypedefContext i;
		public ITerminalNode ITERATOR() { return GetToken(SParser.ITERATOR, 0); }
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public IteratorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIteratorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIteratorType(this);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(SParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class CursorTypeContext : TypedefContext {
		public TypedefContext c;
		public ITerminalNode CURSOR() { return GetToken(SParser.CURSOR, 0); }
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CursorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCursorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCursorType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 160;
		EnterRecursionRule(_localctx, 160, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case TYPE_IDENTIFIER:
				{
				_localctx = new PrimaryTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1393; ((PrimaryTypeContext)_localctx).p = primary_type();
				}
				break;
			case CURSOR:
				{
				_localctx = new CursorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1394; Match(CURSOR);
				State = 1395; Match(LT);
				State = 1396; ((CursorTypeContext)_localctx).c = typedef(0);
				State = 1397; Match(GT);
				}
				break;
			case ITERATOR:
				{
				_localctx = new IteratorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1399; Match(ITERATOR);
				State = 1400; Match(LT);
				State = 1401; ((IteratorTypeContext)_localctx).i = typedef(0);
				State = 1402; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1414;
					switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1406;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1407; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1408;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1409; Match(LBRAK);
						State = 1410; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1411;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1412; Match(LCURL);
						State = 1413; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 162, RULE_primary_type);
		try {
			State = 1421;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1419; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1420; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}
	public partial class DocumentTypeContext : Native_typeContext {
		public ITerminalNode DOCUMENT() { return GetToken(SParser.DOCUMENT, 0); }
		public DocumentTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocumentType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class ImageTypeContext : Native_typeContext {
		public ITerminalNode IMAGE() { return GetToken(SParser.IMAGE, 0); }
		public ImageTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterImageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitImageType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class BlobTypeContext : Native_typeContext {
		public ITerminalNode BLOB() { return GetToken(SParser.BLOB, 0); }
		public BlobTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBlobType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBlobType(this);
		}
	}
	public partial class UUIDTypeContext : Native_typeContext {
		public ITerminalNode UUID() { return GetToken(SParser.UUID, 0); }
		public UUIDTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterUUIDType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitUUIDType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 164, RULE_native_type);
		try {
			State = 1437;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1423; Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1424; Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1425; Match(TEXT);
				}
				break;
			case IMAGE:
				_localctx = new ImageTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1426; Match(IMAGE);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1427; Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1428; Match(DECIMAL);
				}
				break;
			case DOCUMENT:
				_localctx = new DocumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1429; Match(DOCUMENT);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1430; Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1431; Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1432; Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1433; Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1434; Match(CODE);
				}
				break;
			case BLOB:
				_localctx = new BlobTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1435; Match(BLOB);
				}
				break;
			case UUID:
				_localctx = new UUIDTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1436; Match(UUID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 166, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mutable_category_typeContext : ParserRuleContext {
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Mutable_category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutable_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMutable_category_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMutable_category_type(this);
		}
	}

	[RuleVersion(0)]
	public Mutable_category_typeContext mutable_category_type() {
		Mutable_category_typeContext _localctx = new Mutable_category_typeContext(Context, State);
		EnterRule(_localctx, 168, RULE_mutable_category_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1441; Match(MUTABLE);
				}
			}

			State = 1444; category_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 170, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_category_declaration);
		try {
			State = 1451;
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1448; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case 2:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1449; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case 3:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1450; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterType_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitType_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, State);
		EnterRule(_localctx, 174, RULE_type_identifier_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453; type_identifier();
			State = 1458;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1454; Match(COMMA);
					State = 1455; type_identifier();
					}
					} 
				}
				State = 1460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 176, RULE_method_identifier);
		try {
			State = 1463;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1461; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1462; type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_identifier);
		try {
			State = 1468;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1466; type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1467; symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 180, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1470; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public Attribute_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifierContext attribute_identifier() {
		Attribute_identifierContext _localctx = new Attribute_identifierContext(Context, State);
		EnterRule(_localctx, 182, RULE_attribute_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1472;
			_la = TokenStream.La(1);
			if ( !(_la==STORABLE || _la==VARIABLE_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 184, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 186, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 188, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478; argument();
			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1479; Match(COMMA);
				State = 1480; argument();
				}
				}
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 190, RULE_argument);
		int _la;
		try {
			State = 1491;
			switch (TokenStream.La(1)) {
			case CODE:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1486; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case MUTABLE:
			case VARIABLE_IDENTIFIER:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1488;
				_la = TokenStream.La(1);
				if (_la==MUTABLE) {
					{
					State = 1487; Match(MUTABLE);
					}
				}

				State = 1490; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperator_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperator_argument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 192, RULE_operator_argument);
		try {
			State = 1495;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1493; named_argument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1494; typed_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 194, RULE_named_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; variable_identifier();
			State = 1500;
			_la = TokenStream.La(1);
			if (_la==EQ) {
				{
				State = 1498; Match(EQ);
				State = 1499; literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 196, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; code_type();
			State = 1503; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_or_any_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_or_any_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 198, RULE_category_or_any_type);
		try {
			State = 1507;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1505; typedef(0);
				}
				break;
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1506; any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 200;
		EnterRecursionRule(_localctx, 200, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1510; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1520;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1518;
					switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1512;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1513; Match(LBRAK);
						State = 1514; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1515;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1516; Match(LCURL);
						State = 1517; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1522;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declarationContext[] member_method_declaration() {
			return GetRuleContexts<Member_method_declarationContext>();
		}
		public Member_method_declarationContext member_method_declaration(int i) {
			return GetRuleContext<Member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 202, RULE_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523; member_method_declaration();
			State = 1529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1524; lfp();
					State = 1525; member_method_declaration();
					}
					} 
				}
				State = 1531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_member_method_declaration);
		try {
			State = 1537;
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1532; setter_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1533; getter_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1534; concrete_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1535; abstract_method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1536; operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declarationContext[] native_member_method_declaration() {
			return GetRuleContexts<Native_member_method_declarationContext>();
		}
		public Native_member_method_declarationContext native_member_method_declaration(int i) {
			return GetRuleContext<Native_member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 206, RULE_native_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539; native_member_method_declaration();
			State = 1545;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1540; lfp();
					State = 1541; native_member_method_declaration();
					}
					} 
				}
				State = 1547;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Native_getter_declarationContext native_getter_declaration() {
			return GetRuleContext<Native_getter_declarationContext>(0);
		}
		public Native_setter_declarationContext native_setter_declaration() {
			return GetRuleContext<Native_setter_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_native_member_method_declaration);
		try {
			State = 1551;
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1548; native_getter_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1549; native_setter_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1550; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 210, RULE_native_category_binding);
		try {
			State = 1563;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1553; Match(JAVA);
				State = 1554; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1555; Match(CSHARP);
				State = 1556; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557; Match(PYTHON2);
				State = 1558; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1559; Match(PYTHON3);
				State = 1560; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1561; Match(JAVASCRIPT);
				State = 1562; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 212, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; identifier();
			State = 1567;
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1566; python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 214, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(FROM);
			State = 1570; module_token();
			State = 1571; Match(COLON);
			State = 1572; identifier();
			State = 1577;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1573; Match(DOT);
					State = 1574; identifier();
					}
					} 
				}
				State = 1579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 216, RULE_javascript_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580; identifier();
			State = 1582;
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1581; javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(SParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(SParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 218, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; Match(FROM);
			State = 1585; module_token();
			State = 1586; Match(COLON);
			State = 1588;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1587; Match(SLASH);
				}
			}

			State = 1590; javascript_identifier();
			State = 1595;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1591; Match(SLASH);
					State = 1592; javascript_identifier();
					}
					} 
				}
				State = 1597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			State = 1600;
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1598; Match(DOT);
				State = 1599; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, State);
		EnterRule(_localctx, 220, RULE_variable_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; variable_identifier();
			State = 1607;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1603; Match(COMMA);
				State = 1604; variable_identifier();
				}
				}
				State = 1609;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifier_listContext : ParserRuleContext {
		public Attribute_identifierContext[] attribute_identifier() {
			return GetRuleContexts<Attribute_identifierContext>();
		}
		public Attribute_identifierContext attribute_identifier(int i) {
			return GetRuleContext<Attribute_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Attribute_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifier_listContext attribute_identifier_list() {
		Attribute_identifier_listContext _localctx = new Attribute_identifier_listContext(Context, State);
		EnterRule(_localctx, 222, RULE_attribute_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; attribute_identifier();
			State = 1615;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1611; Match(COMMA);
				State = 1612; attribute_identifier();
				}
				}
				State = 1617;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_method_declaration);
		try {
			State = 1622;
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1618; abstract_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1619; concrete_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1620; native_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1621; test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_statementContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(SParser.COMMENT, 0); }
		public Comment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterComment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitComment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Comment_statementContext comment_statement() {
		Comment_statementContext _localctx = new Comment_statementContext(Context, State);
		EnterRule(_localctx, 226, RULE_comment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statementContext[] native_statement() {
			return GetRuleContexts<Native_statementContext>();
		}
		public Native_statementContext native_statement(int i) {
			return GetRuleContext<Native_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, State);
		EnterRule(_localctx, 228, RULE_native_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; native_statement();
			State = 1632;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1627; lfp();
					State = 1628; native_statement();
					}
					} 
				}
				State = 1634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 230, RULE_native_statement);
		try {
			State = 1645;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635; Match(JAVA);
				State = 1636; java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1637; Match(CSHARP);
				State = 1638; csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1639; Match(PYTHON2);
				State = 1640; python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1641; Match(PYTHON3);
				State = 1642; python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1643; Match(JAVASCRIPT);
				State = 1644; javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 232, RULE_python_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; python_statement();
			State = 1649;
			_la = TokenStream.La(1);
			if (_la==SEMI) {
				{
				State = 1648; Match(SEMI);
				}
			}

			State = 1652;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1651; python_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 234, RULE_javascript_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; javascript_statement();
			State = 1656;
			_la = TokenStream.La(1);
			if (_la==SEMI) {
				{
				State = 1655; Match(SEMI);
				}
			}

			State = 1659;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1658; javascript_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 236, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; statement();
			State = 1667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1662; lfp();
					State = 1663; statement();
					}
					} 
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public AssertionContext[] assertion() {
			return GetRuleContexts<AssertionContext>();
		}
		public AssertionContext assertion(int i) {
			return GetRuleContext<AssertionContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertion_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertion_list(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		Assertion_listContext _localctx = new Assertion_listContext(Context, State);
		EnterRule(_localctx, 238, RULE_assertion_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670; assertion();
			State = 1676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1671; lfp();
					State = 1672; assertion();
					}
					} 
				}
				State = 1678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statementContext[] switch_case_statement() {
			return GetRuleContexts<Switch_case_statementContext>();
		}
		public Switch_case_statementContext switch_case_statement(int i) {
			return GetRuleContext<Switch_case_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitch_case_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitch_case_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, State);
		EnterRule(_localctx, 240, RULE_switch_case_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; switch_case_statement();
			State = 1685;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1680; lfp();
					State = 1681; switch_case_statement();
					}
					} 
				}
				State = 1687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statementContext[] catch_statement() {
			return GetRuleContexts<Catch_statementContext>();
		}
		public Catch_statementContext catch_statement(int i) {
			return GetRuleContext<Catch_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatch_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatch_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, State);
		EnterRule(_localctx, 242, RULE_catch_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; catch_statement();
			State = 1694;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1689; lfp();
					State = 1690; catch_statement();
					}
					} 
				}
				State = 1696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 244, RULE_literal_collection);
		try {
			State = 1711;
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1697; Match(LBRAK);
				State = 1698; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1699; Match(RANGE);
				State = 1700; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1701; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1703; Match(LBRAK);
				State = 1704; literal_list_literal();
				State = 1705; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1707; Match(LT);
				State = 1708; literal_list_literal();
				State = 1709; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(SParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(SParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(SParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(SParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(SParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(SParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(SParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 246, RULE_atomic_literal);
		try {
			State = 1726;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1713; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1714; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1715; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1716; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1717; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1718; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1719; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1720; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1721; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1722; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1723; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1724; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case NONE:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1725; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteral_list_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteral_list_literal(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, State);
		EnterRule(_localctx, 248, RULE_literal_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; atomic_literal();
			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1729; Match(COMMA);
				State = 1730; atomic_literal();
				}
				}
				State = 1735;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 250, RULE_selectable_expression);
		try {
			State = 1740;
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1736; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1737; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1738; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1739; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 252, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1742;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744; Match(LPAR);
			State = 1745; expression(0);
			State = 1746; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expression(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_literal_expression);
		try {
			State = 1750;
			switch (TokenStream.La(1)) {
			case NONE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1748; atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
			case MUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749; collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollection_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollection_literal(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 258, RULE_collection_literal);
		try {
			State = 1757;
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1752; range_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1753; list_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1754; set_literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1755; dict_literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1756; tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 260, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1759; Match(MUTABLE);
				}
			}

			State = 1762; Match(LPAR);
			State = 1764;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1763; expression_tuple();
				}
			}

			State = 1766; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 262, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1769;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1768; Match(MUTABLE);
				}
			}

			State = 1771; Match(LCURL);
			State = 1773;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1772; dict_entry_list();
				}
			}

			State = 1775; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExpression_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExpression_tuple(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, State);
		EnterRule(_localctx, 264, RULE_expression_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; expression(0);
			State = 1778; Match(COMMA);
			State = 1787;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (EXECUTE - 97)) | (1L << (FETCH - 97)) | (1L << (MUTABLE - 97)) | (1L << (NONE - 97)) | (1L << (NOT - 97)) | (1L << (READ - 97)) | (1L << (SELF - 97)) | (1L << (SORTED - 97)) | (1L << (THIS - 97)) | (1L << (BOOLEAN_LITERAL - 97)) | (1L << (CHAR_LITERAL - 97)) | (1L << (MIN_INTEGER - 97)) | (1L << (MAX_INTEGER - 97)) | (1L << (SYMBOL_IDENTIFIER - 97)) | (1L << (TYPE_IDENTIFIER - 97)) | (1L << (VARIABLE_IDENTIFIER - 97)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TEXT_LITERAL - 163)) | (1L << (INTEGER_LITERAL - 163)) | (1L << (HEXA_LITERAL - 163)) | (1L << (DECIMAL_LITERAL - 163)) | (1L << (DATETIME_LITERAL - 163)) | (1L << (TIME_LITERAL - 163)) | (1L << (DATE_LITERAL - 163)) | (1L << (PERIOD_LITERAL - 163)))) != 0)) {
				{
				State = 1779; expression(0);
				State = 1784;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1780; Match(COMMA);
					State = 1781; expression(0);
					}
					}
					State = 1786;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entryContext[] dict_entry() {
			return GetRuleContexts<Dict_entryContext>();
		}
		public Dict_entryContext dict_entry(int i) {
			return GetRuleContext<Dict_entryContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_entry_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_entry_list(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, State);
		EnterRule(_localctx, 266, RULE_dict_entry_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789; dict_entry();
			State = 1794;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1790; Match(COMMA);
				State = 1791; dict_entry();
				}
				}
				State = 1796;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 268, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; _localctx.key = expression(0);
			State = 1798; Match(COLON);
			State = 1799; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 270, RULE_slice_arguments);
		try {
			State = 1810;
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1801; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1802; Match(COLON);
				State = 1803; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1805; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1806; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1808; Match(COLON);
				State = 1809; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 272, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; variable_identifier();
			State = 1813; assign();
			State = 1814; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 274;
		EnterRecursionRule(_localctx, 274, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1817; variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1823;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1819;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1820; child_instance();
					}
					} 
				}
				State = 1825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 276, RULE_is_expression);
		try {
			State = 1830;
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1826;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1827; Match(VARIABLE_IDENTIFIER);
				State = 1828; category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1829; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_listContext : ParserRuleContext {
		public Order_byContext[] order_by() {
			return GetRuleContexts<Order_byContext>();
		}
		public Order_byContext order_by(int i) {
			return GetRuleContext<Order_byContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SParser.COMMA, i);
		}
		public Order_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_listContext order_by_list() {
		Order_by_listContext _localctx = new Order_by_listContext(Context, State);
		EnterRule(_localctx, 278, RULE_order_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832; order_by();
			State = 1837;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1833; Match(COMMA);
					State = 1834; order_by();
					}
					} 
				}
				State = 1839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_byContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SParser.DOT, i);
		}
		public ITerminalNode ASC() { return GetToken(SParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(SParser.DESC, 0); }
		public Order_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOrder_by(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOrder_by(this);
		}
	}

	[RuleVersion(0)]
	public Order_byContext order_by() {
		Order_byContext _localctx = new Order_byContext(Context, State);
		EnterRule(_localctx, 280, RULE_order_by);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840; variable_identifier();
			State = 1845;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1841; Match(DOT);
					State = 1842; variable_identifier();
					}
					} 
				}
				State = 1847;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			State = 1849;
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1848;
				_la = TokenStream.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 282, RULE_operator);
		try {
			State = 1857;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1851; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1852; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1853; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1854; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1855; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1856; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public New_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNew_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNew_token(this);
		}
	}

	[RuleVersion(0)]
	public New_tokenContext new_token() {
		New_tokenContext _localctx = new New_tokenContext(Context, State);
		EnterRule(_localctx, 284, RULE_new_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1860;
			if (!(this.isText(_localctx.i1,"new"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"new\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 286, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1863;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 288, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1866;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 290, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1869;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 292, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1872;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 294, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(SParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 296, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(SParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 298, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(SParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 300, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(SParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(SParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 302, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 304, RULE_javascript_statement);
		try {
			State = 1891;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1884; Match(RETURN);
				State = 1885; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1886; Match(SEMI);
				}
				break;
			case LPAR:
			case LBRAK:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1888; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1889; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 306;
		EnterRecursionRule(_localctx, 306, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1894; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1900;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1896;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1897; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 1902;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_new_expressionContext javascript_new_expression() {
			return GetRuleContext<Javascript_new_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_javascript_primary_expression);
		try {
			State = 1910;
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1903; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904; javascript_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1905; javascript_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906; javascript_identifier_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1907; javascript_literal_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1908; javascript_method_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1909; javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_new_expressionContext javascript_new_expression() {
		Javascript_new_expressionContext _localctx = new Javascript_new_expressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_javascript_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; new_token();
			State = 1915; javascript_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaScriptMemberExpressionContext : Javascript_selector_expressionContext {
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavaScriptMemberExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMemberExpression(this);
		}
	}
	public partial class JavaScriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavaScriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptItemExpression(this);
		}
	}
	public partial class JavaScriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext method;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavaScriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_javascript_selector_expression);
		try {
			State = 1922;
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				_localctx = new JavaScriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1917; Match(DOT);
				State = 1918; ((JavaScriptMethodExpressionContext)_localctx).method = javascript_method_expression();
				}
				break;
			case 2:
				_localctx = new JavaScriptMemberExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1919; Match(DOT);
				State = 1920; ((JavaScriptMemberExpressionContext)_localctx).name = javascript_identifier();
				}
				break;
			case 3:
				_localctx = new JavaScriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1921; ((JavaScriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924; _localctx.name = javascript_identifier();
			State = 1925; Match(LPAR);
			State = 1927;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (SELF - 130)) | (1L << (TEST - 130)) | (1L << (THIS - 130)) | (1L << (WRITE - 130)) | (1L << (BOOLEAN_LITERAL - 130)) | (1L << (CHAR_LITERAL - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)) | (1L << (TEXT_LITERAL - 130)) | (1L << (INTEGER_LITERAL - 130)) | (1L << (DECIMAL_LITERAL - 130)))) != 0)) {
				{
				State = 1926; _localctx.args = javascript_arguments(0);
				}
			}

			State = 1929; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1932; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1939;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 1934;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1935; Match(COMMA);
					State = 1936; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 1941;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; Match(LBRAK);
			State = 1943; _localctx.exp = javascript_expression(0);
			State = 1944; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; Match(LPAR);
			State = 1947; _localctx.exp = javascript_expression(0);
			State = 1948; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_javascript_identifier_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_javascript_literal_expression);
		try {
			State = 1957;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1954; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1955; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1956; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (TEST - 130)) | (1L << (WRITE - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 330, RULE_python_statement);
		try {
			State = 1964;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1961; Match(RETURN);
				State = 1962; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1963; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 332;
		EnterRecursionRule(_localctx, 332, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1967; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1973;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 1969;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1970; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 1975;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_python_primary_expression);
		try {
			State = 1980;
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1976; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1977; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1978; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1979; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_python_selector_expression);
		try {
			State = 1988;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1982; Match(DOT);
				State = 1983; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1984; Match(LBRAK);
				State = 1985; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 1986; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; _localctx.name = python_identifier();
			State = 1991; Match(LPAR);
			State = 1993;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (SELF - 130)) | (1L << (TEST - 130)) | (1L << (THIS - 130)) | (1L << (WRITE - 130)) | (1L << (BOOLEAN_LITERAL - 130)) | (1L << (CHAR_LITERAL - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)) | (1L << (TEXT_LITERAL - 130)) | (1L << (INTEGER_LITERAL - 130)) | (1L << (DECIMAL_LITERAL - 130)))) != 0)) {
				{
				State = 1992; _localctx.args = python_argument_list();
				}
			}

			State = 1995; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 340, RULE_python_argument_list);
		try {
			State = 2003;
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1997; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1998; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1999; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 2000; Match(COMMA);
				State = 2001; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2006; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2013;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 2008;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2009; Match(COMMA);
					State = 2010; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 2015;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 344;
		EnterRecursionRule(_localctx, 344, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2017; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 2018; Match(EQ);
			State = 2019; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2029;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 2021;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2022; Match(COMMA);
					State = 2023; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 2024; Match(EQ);
					State = 2025; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 2031;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032; Match(LPAR);
			State = 2033; _localctx.exp = python_expression(0);
			State = 2034; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonPromptoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPromptoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPromptoIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 348;
		EnterRecursionRule(_localctx, 348, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2037; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2038; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2046;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 2041;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2042; Match(DOT);
					State = 2043; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 2048;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 350, RULE_python_literal_expression);
		try {
			State = 2054;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2049; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2050; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2051; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2052; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2053; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 352, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2056;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (SELF - 130)) | (1L << (TEST - 130)) | (1L << (THIS - 130)) | (1L << (WRITE - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 354, RULE_java_statement);
		try {
			State = 2065;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2058; Match(RETURN);
				State = 2059; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 2060; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2062; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 2063; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 356;
		EnterRecursionRule(_localctx, 356, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2068; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2074;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 2070;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2071; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 2076;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_new_expressionContext java_new_expression() {
			return GetRuleContext<Java_new_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 358, RULE_java_primary_expression);
		try {
			State = 2082;
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2077; java_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2078; java_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2079; java_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2080; java_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2081; java_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public Java_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_new_expressionContext java_new_expression() {
		Java_new_expressionContext _localctx = new Java_new_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_java_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086; new_token();
			State = 2087; java_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 364, RULE_java_selector_expression);
		try {
			State = 2092;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2089; Match(DOT);
				State = 2090; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2091; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2094; _localctx.name = java_identifier();
			State = 2095; Match(LPAR);
			State = 2097;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (SELF - 130)) | (1L << (TEST - 130)) | (1L << (THIS - 130)) | (1L << (WRITE - 130)) | (1L << (BOOLEAN_LITERAL - 130)) | (1L << (CHAR_LITERAL - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (NATIVE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)) | (1L << (TEXT_LITERAL - 130)) | (1L << (INTEGER_LITERAL - 130)) | (1L << (DECIMAL_LITERAL - 130)))) != 0)) {
				{
				State = 2096; _localctx.args = java_arguments(0);
				}
			}

			State = 2099; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 368;
		EnterRecursionRule(_localctx, 368, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2102; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 2104;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2105; Match(COMMA);
					State = 2106; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 2111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2112; Match(LBRAK);
			State = 2113; _localctx.exp = java_expression(0);
			State = 2114; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; Match(LPAR);
			State = 2117; _localctx.exp = java_expression(0);
			State = 2118; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 374;
		EnterRecursionRule(_localctx, 374, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2121; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 2123;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2124; Match(DOT);
					State = 2125; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 2130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 376;
		EnterRecursionRule(_localctx, 376, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2132; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 2134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2135; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 2140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 378, RULE_java_literal_expression);
		try {
			State = 2146;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2141; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2142; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2143; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2144; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2145; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(SParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 380, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (TEST - 130)) | (1L << (WRITE - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (NATIVE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 382, RULE_csharp_statement);
		try {
			State = 2157;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2150; Match(RETURN);
				State = 2151; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 2152; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2154; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 2155; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 384;
		EnterRecursionRule(_localctx, 384, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2160; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 2162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2163; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 2168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_new_expressionContext csharp_new_expression() {
			return GetRuleContext<Csharp_new_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_csharp_primary_expression);
		try {
			State = 2174;
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2169; csharp_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2170; csharp_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2171; csharp_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2172; csharp_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2173; csharp_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 388, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public Csharp_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_new_expressionContext csharp_new_expression() {
		Csharp_new_expressionContext _localctx = new Csharp_new_expressionContext(Context, State);
		EnterRule(_localctx, 390, RULE_csharp_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2178; new_token();
			State = 2179; csharp_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 392, RULE_csharp_selector_expression);
		try {
			State = 2184;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2181; Match(DOT);
				State = 2182; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2183; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2186; _localctx.name = csharp_identifier();
			State = 2187; Match(LPAR);
			State = 2189;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (SELF - 130)) | (1L << (TEST - 130)) | (1L << (THIS - 130)) | (1L << (WRITE - 130)) | (1L << (BOOLEAN_LITERAL - 130)) | (1L << (CHAR_LITERAL - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)) | (1L << (DOLLAR_IDENTIFIER - 130)) | (1L << (TEXT_LITERAL - 130)) | (1L << (INTEGER_LITERAL - 130)) | (1L << (DECIMAL_LITERAL - 130)))) != 0)) {
				{
				State = 2188; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2191; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 396;
		EnterRecursionRule(_localctx, 396, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2194; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2196;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2197; Match(COMMA);
					State = 2198; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 398, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204; Match(LBRAK);
			State = 2205; _localctx.exp = csharp_expression(0);
			State = 2206; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2208; Match(LPAR);
			State = 2209; _localctx.exp = csharp_expression(0);
			State = 2210; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}
	public partial class CSharpPromptoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPromptoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 402;
		EnterRecursionRule(_localctx, 402, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2215;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2213; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2214; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2217;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2218; Match(DOT);
					State = 2219; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 404, RULE_csharp_literal_expression);
		try {
			State = 2230;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2225; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2226; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2227; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2228; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2229; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 406, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (TEST - 130)) | (1L << (WRITE - 130)) | (1L << (SYMBOL_IDENTIFIER - 130)) | (1L << (TYPE_IDENTIFIER - 130)) | (1L << (VARIABLE_IDENTIFIER - 130)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 29: return callable_parent_sempred((Callable_parentContext)_localctx, predIndex);
		case 39: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 44: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 46: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 48: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 52: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 60: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 80: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 100: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 137: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 138: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 142: return new_token_sempred((New_tokenContext)_localctx, predIndex);
		case 143: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 144: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 145: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 146: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 153: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 159: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 166: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 171: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 172: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 174: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 178: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 184: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 187: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 188: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 192: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 198: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 201: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool callable_parent_sempred(Callable_parentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 30);
		case 4: return Precpred(Context, 29);
		case 5: return Precpred(Context, 28);
		case 6: return Precpred(Context, 27);
		case 7: return Precpred(Context, 26);
		case 8: return Precpred(Context, 25);
		case 9: return Precpred(Context, 24);
		case 10: return Precpred(Context, 23);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 19);
		case 13: return Precpred(Context, 18);
		case 14: return Precpred(Context, 17);
		case 15: return Precpred(Context, 16);
		case 16: return Precpred(Context, 15);
		case 17: return Precpred(Context, 14);
		case 18: return Precpred(Context, 12);
		case 19: return Precpred(Context, 11);
		case 20: return Precpred(Context, 10);
		case 21: return Precpred(Context, 9);
		case 22: return Precpred(Context, 8);
		case 23: return Precpred(Context, 7);
		case 24: return Precpred(Context, 6);
		case 25: return Precpred(Context, 5);
		case 26: return Precpred(Context, 1);
		case 27: return Precpred(Context, 21);
		case 28: return Precpred(Context, 20);
		case 29: return Precpred(Context, 13);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.wasNot(SParser.WS);
		case 32: return this.wasNot(SParser.WS);
		case 33: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.willNotBe(this.equalToken());
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.wasNot(SParser.WS);
		case 37: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 5);
		case 39: return Precpred(Context, 4);
		case 40: return Precpred(Context, 3);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 2);
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return this.willBeAOrAn();
		}
		return true;
	}
	private bool new_token_sempred(New_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return this.isText(_localctx.i1,"new");
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xAC\x8BD\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x5\x2\x1A1\n\x2\x3\x2\x5\x2\x1A4\n\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5\x1BD\n\x5"+
		"\x3\x5\x3\x5\x3\x6\x5\x6\x1C2\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1D0\n\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x1D6\n\x6\x5\x6\x1D8\n\x6\x5\x6\x1DA\n\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x5\a\x1E1\n\a\x3\a\x3\a\x3\b\x5\b\x1E6\n\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1F1\n\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\x1F8\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x5\t\x205\n\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x5\v\x213\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\x227\n\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\x23E\n\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x5\x10\x249\n\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x5\x10\x250\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x259\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x262\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\x26B\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\a\x13\x27E\n\x13\f\x13\xE\x13\x281\v\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x5\x14\x288\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x28D\n\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x293\n\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x298\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x2A1"+
		"\n\x16\x3\x16\x3\x16\x3\x16\x5\x16\x2A6\n\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x2AB\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x2C3\n\x17\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2CE\n\x19\x3\x19\x3\x19"+
		"\x5\x19\x2D2\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x2E6\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x300\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x305\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x30E\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a"+
		"\x1F\x315\n\x1F\f\x1F\xE\x1F\x318\v\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x5 \x320"+
		"\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x33D\n#\x3#\x3#"+
		"\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x350"+
		"\n$\x3%\x3%\x3%\x3%\x5%\x356\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x378\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5("+
		"\x381\n(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\a)\x396\n)\f)\xE)\x399\v)\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x5+\x3A6\n+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3AF\n+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3B8\n+\x3+\x3+\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x3CF\n,\x3-\x3-"+
		"\x5-\x3D3\n-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x5.\x3E7\n.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3"+
		".\x3.\a.\x44D\n.\f.\xE.\x450\v.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\a\x30\x459\n\x30\f\x30\xE\x30\x45C\v\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x466\n\x31\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x475\n\x32\x3\x33\x3\x33\x3\x33\x5\x33\x47A\n\x33\x3\x33\x3\x33"+
		"\x3\x34\x3\x34\x3\x34\x5\x34\x481\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3"+
		"\x35\x5\x35\x488\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x5\x36\x491\n\x36\x3\x36\x3\x36\x3\x36\a\x36\x496\n\x36\f\x36\xE\x36"+
		"\x499\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3"+
		";\x5;\x4B2\n;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x4BD\n;\x3;\x3;"+
		"\x5;\x4C1\n;\x3;\x3;\x3;\x5;\x4C6\n;\x3;\x3;\x3;\x5;\x4CB\n;\x5;\x4CD"+
		"\n;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x4D7\n<\x3<\x3<\x3=\x3=\x3=\x3"+
		"=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x4E7\n>\x3?\x3?\x3?\x3?\x3@\a@\x4EE"+
		"\n@\f@\xE@\x4F1\v@\x3\x41\x6\x41\x4F4\n\x41\r\x41\xE\x41\x4F5\x3\x42\x6"+
		"\x42\x4F9\n\x42\r\x42\xE\x42\x4FA\x3\x42\x3\x42\x3\x43\a\x43\x500\n\x43"+
		"\f\x43\xE\x43\x503\v\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x5\x45\x50A"+
		"\n\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x513\n\x46"+
		"\f\x46\xE\x46\x516\v\x46\x3G\x3G\x3G\aG\x51B\nG\fG\xEG\x51E\vG\x3G\x3"+
		"G\x3G\x3G\x3G\x5G\x525\nG\x3H\x3H\x3I\x3I\x5I\x52B\nI\x3J\x3J\x3J\x3J"+
		"\aJ\x531\nJ\fJ\xEJ\x534\vJ\x3K\x3K\x3K\x3K\aK\x53A\nK\fK\xEK\x53D\vK\x3"+
		"L\x3L\x3L\aL\x542\nL\fL\xEL\x545\vL\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3"+
		"M\x3M\x5M\x551\nM\x3N\x5N\x554\nN\x3N\x3N\x5N\x558\nN\x3N\x3N\x3O\x5O"+
		"\x55D\nO\x3O\x3O\x5O\x561\nO\x3O\x3O\x3P\x3P\x3P\aP\x568\nP\fP\xEP\x56B"+
		"\vP\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3"+
		"R\x3R\x5R\x57F\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\aR\x589\nR\fR\xER\x58C"+
		"\vR\x3S\x3S\x5S\x590\nS\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3T\x5T\x5A0\nT\x3U\x3U\x3V\x5V\x5A5\nV\x3V\x3V\x3W\x3W\x3X\x3X"+
		"\x3X\x5X\x5AE\nX\x3Y\x3Y\x3Y\aY\x5B3\nY\fY\xEY\x5B6\vY\x3Z\x3Z\x5Z\x5BA"+
		"\nZ\x3[\x3[\x3[\x5[\x5BF\n[\x3\\\x3\\\x3]\x3]\x3^\x3^\x3_\x3_\x3`\x3`"+
		"\x3`\a`\x5CC\n`\f`\xE`\x5CF\v`\x3\x61\x3\x61\x5\x61\x5D3\n\x61\x3\x61"+
		"\x5\x61\x5D6\n\x61\x3\x62\x3\x62\x5\x62\x5DA\n\x62\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x5DF\n\x63\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65\x5E6\n\x65"+
		"\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\a\x66"+
		"\x5F1\n\x66\f\x66\xE\x66\x5F4\v\x66\x3g\x3g\x3g\x3g\ag\x5FA\ng\fg\xEg"+
		"\x5FD\vg\x3h\x3h\x3h\x3h\x3h\x5h\x604\nh\x3i\x3i\x3i\x3i\ai\x60A\ni\f"+
		"i\xEi\x60D\vi\x3j\x3j\x3j\x5j\x612\nj\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k"+
		"\x3k\x3k\x5k\x61E\nk\x3l\x3l\x5l\x622\nl\x3m\x3m\x3m\x3m\x3m\x3m\am\x62A"+
		"\nm\fm\xEm\x62D\vm\x3n\x3n\x5n\x631\nn\x3o\x3o\x3o\x3o\x5o\x637\no\x3"+
		"o\x3o\x3o\ao\x63C\no\fo\xEo\x63F\vo\x3o\x3o\x5o\x643\no\x3p\x3p\x3p\a"+
		"p\x648\np\fp\xEp\x64B\vp\x3q\x3q\x3q\aq\x650\nq\fq\xEq\x653\vq\x3r\x3"+
		"r\x3r\x3r\x5r\x659\nr\x3s\x3s\x3t\x3t\x3t\x3t\at\x661\nt\ft\xEt\x664\v"+
		"t\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x5u\x670\nu\x3v\x3v\x5v\x674"+
		"\nv\x3v\x5v\x677\nv\x3w\x3w\x5w\x67B\nw\x3w\x5w\x67E\nw\x3x\x3x\x3x\x3"+
		"x\ax\x684\nx\fx\xEx\x687\vx\x3y\x3y\x3y\x3y\ay\x68D\ny\fy\xEy\x690\vy"+
		"\x3z\x3z\x3z\x3z\az\x696\nz\fz\xEz\x699\vz\x3{\x3{\x3{\x3{\a{\x69F\n{"+
		"\f{\xE{\x6A2\v{\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3|\x3"+
		"|\x5|\x6B2\n|\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x5}"+
		"\x6C1\n}\x3~\x3~\x3~\a~\x6C6\n~\f~\xE~\x6C9\v~\x3\x7F\x3\x7F\x3\x7F\x3"+
		"\x7F\x5\x7F\x6CF\n\x7F\x3\x80\x3\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3\x82"+
		"\x3\x82\x5\x82\x6D9\n\x82\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83\x6E0"+
		"\n\x83\x3\x84\x5\x84\x6E3\n\x84\x3\x84\x3\x84\x5\x84\x6E7\n\x84\x3\x84"+
		"\x3\x84\x3\x85\x5\x85\x6EC\n\x85\x3\x85\x3\x85\x5\x85\x6F0\n\x85\x3\x85"+
		"\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\a\x86\x6F9\n\x86\f\x86\xE\x86"+
		"\x6FC\v\x86\x5\x86\x6FE\n\x86\x3\x87\x3\x87\x3\x87\a\x87\x703\n\x87\f"+
		"\x87\xE\x87\x706\v\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\x715\n\x89\x3\x8A\x3"+
		"\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\a\x8B\x720\n\x8B"+
		"\f\x8B\xE\x8B\x723\v\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x729\n\x8C"+
		"\x3\x8D\x3\x8D\x3\x8D\a\x8D\x72E\n\x8D\f\x8D\xE\x8D\x731\v\x8D\x3\x8E"+
		"\x3\x8E\x3\x8E\a\x8E\x736\n\x8E\f\x8E\xE\x8E\x739\v\x8E\x3\x8E\x5\x8E"+
		"\x73C\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x744\n\x8F"+
		"\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\x3\x92\x3\x93"+
		"\x3\x93\x3\x93\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x96\x3\x96\x3\x97"+
		"\x3\x97\x3\x98\x3\x98\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x5\x9A\x766\n\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\a"+
		"\x9B\x76D\n\x9B\f\x9B\xE\x9B\x770\v\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\x3\x9C\x5\x9C\x779\n\x9C\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x785\n\x9F\x3\xA0\x3\xA0\x3"+
		"\xA0\x5\xA0\x78A\n\xA0\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\a\xA1\x794\n\xA1\f\xA1\xE\xA1\x797\v\xA1\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x5\xA5\x7A8\n\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x5"+
		"\xA7\x7AF\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\a\xA8\x7B6\n\xA8\f"+
		"\xA8\xE\xA8\x7B9\v\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x7BF\n\xA9\x3"+
		"\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x7C7\n\xAA\x3\xAB\x3\xAB"+
		"\x3\xAB\x5\xAB\x7CC\n\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\x3\xAC\x5\xAC\x7D6\n\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\a\xAD\x7DE\n\xAD\f\xAD\xE\xAD\x7E1\v\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\a\xAE\x7EE\n\xAE\f\xAE"+
		"\xE\xAE\x7F1\v\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x5"+
		"\xB0\x7FA\n\xB0\x3\xB0\x3\xB0\x3\xB0\a\xB0\x7FF\n\xB0\f\xB0\xE\xB0\x802"+
		"\v\xB0\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x809\n\xB1\x3\xB2\x3"+
		"\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x814\n\xB3"+
		"\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\a\xB4\x81B\n\xB4\f\xB4\xE\xB4\x81E"+
		"\v\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x825\n\xB5\x3\xB6\x3"+
		"\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x82F\n\xB8\x3\xB9"+
		"\x3\xB9\x3\xB9\x5\xB9\x834\n\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\x3"+
		"\xBA\x3\xBA\x3\xBA\a\xBA\x83E\n\xBA\f\xBA\xE\xBA\x841\v\xBA\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBD\x3"+
		"\xBD\x3\xBD\x3\xBD\a\xBD\x851\n\xBD\f\xBD\xE\xBD\x854\v\xBD\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x85B\n\xBE\f\xBE\xE\xBE\x85E\v\xBE\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x865\n\xBF\x3\xC0\x3\xC0\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x870\n\xC1\x3\xC2\x3"+
		"\xC2\x3\xC2\x3\xC2\x3\xC2\a\xC2\x877\n\xC2\f\xC2\xE\xC2\x87A\v\xC2\x3"+
		"\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x881\n\xC3\x3\xC4\x3\xC4\x3\xC5"+
		"\x3\xC5\x3\xC5\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x88B\n\xC6\x3\xC7\x3\xC7\x3"+
		"\xC7\x5\xC7\x890\n\xC7\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8"+
		"\x3\xC8\a\xC8\x89A\n\xC8\f\xC8\xE\xC8\x89D\v\xC8\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x8AA\n"+
		"\xCB\x3\xCB\x3\xCB\x3\xCB\a\xCB\x8AF\n\xCB\f\xCB\xE\xCB\x8B2\v\xCB\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x8B9\n\xCC\x3\xCD\x3\xCD\x3\xCD"+
		"\x2\x18$<PZ^j\xA2\xCA\x114\x134\x140\x14E\x158\x15A\x15E\x166\x172\x178"+
		"\x17A\x182\x18E\x194\xCE\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64"+
		"\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A"+
		"\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE"+
		"\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2"+
		"\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104"+
		"\x106\x108\x10A\x10C\x10E\x110\x112\x114\x116\x118\x11A\x11C\x11E\x120"+
		"\x122\x124\x126\x128\x12A\x12C\x12E\x130\x132\x134\x136\x138\x13A\x13C"+
		"\x13E\x140\x142\x144\x146\x148\x14A\x14C\x14E\x150\x152\x154\x156\x158"+
		"\x15A\x15C\x15E\x160\x162\x164\x166\x168\x16A\x16C\x16E\x170\x172\x174"+
		"\x176\x178\x17A\x17C\x17E\x180\x182\x184\x186\x188\x18A\x18C\x18E\x190"+
		"\x192\x194\x196\x198\x2\f\x3\x2ST\x3\x2\"#\x4\x2\x8E\x8E\xA2\xA2\x4\x2"+
		"\x8A\x8A\x92\x92\x4\x2KK[[\x4\x2\'\'tt\b\x2\x34<\x84\x84\x91\x91\x9B\x9B"+
		"\xA0\xA2\xA4\xA4\b\x2\x34<\x84\x84\x8A\x8A\x91\x92\x9B\x9B\xA0\xA2\a\x2"+
		"\x34<\x84\x84\x91\x91\x9B\x9B\xA0\xA4\a\x2\x34<\x84\x84\x91\x91\x9B\x9B"+
		"\xA0\xA2\x932\x2\x19A\x3\x2\x2\x2\x4\x1AB\x3\x2\x2\x2\x6\x1B5\x3\x2\x2"+
		"\x2\b\x1B9\x3\x2\x2\x2\n\x1C1\x3\x2\x2\x2\f\x1DD\x3\x2\x2\x2\xE\x1E5\x3"+
		"\x2\x2\x2\x10\x1FB\x3\x2\x2\x2\x12\x208\x3\x2\x2\x2\x14\x20A\x3\x2\x2"+
		"\x2\x16\x219\x3\x2\x2\x2\x18\x223\x3\x2\x2\x2\x1A\x230\x3\x2\x2\x2\x1C"+
		"\x23A\x3\x2\x2\x2\x1E\x248\x3\x2\x2\x2 \x25C\x3\x2\x2\x2\"\x26E\x3\x2"+
		"\x2\x2$\x276\x3\x2\x2\x2&\x282\x3\x2\x2\x2(\x28E\x3\x2\x2\x2*\x29E\x3"+
		"\x2\x2\x2,\x2B1\x3\x2\x2\x2.\x2C4\x3\x2\x2\x2\x30\x2C6\x3\x2\x2\x2\x32"+
		"\x2E5\x3\x2\x2\x2\x34\x2E7\x3\x2\x2\x2\x36\x2FF\x3\x2\x2\x2\x38\x301\x3"+
		"\x2\x2\x2:\x30D\x3\x2\x2\x2<\x30F\x3\x2\x2\x2>\x31F\x3\x2\x2\x2@\x321"+
		"\x3\x2\x2\x2\x42\x328\x3\x2\x2\x2\x44\x32F\x3\x2\x2\x2\x46\x34F\x3\x2"+
		"\x2\x2H\x351\x3\x2\x2\x2J\x35E\x3\x2\x2\x2L\x367\x3\x2\x2\x2N\x36E\x3"+
		"\x2\x2\x2P\x382\x3\x2\x2\x2R\x39A\x3\x2\x2\x2T\x39D\x3\x2\x2\x2V\x3CE"+
		"\x3\x2\x2\x2X\x3D0\x3\x2\x2\x2Z\x3E6\x3\x2\x2\x2\\\x451\x3\x2\x2\x2^\x453"+
		"\x3\x2\x2\x2`\x465\x3\x2\x2\x2\x62\x474\x3\x2\x2\x2\x64\x476\x3\x2\x2"+
		"\x2\x66\x47D\x3\x2\x2\x2h\x484\x3\x2\x2\x2j\x490\x3\x2\x2\x2l\x49A\x3"+
		"\x2\x2\x2n\x49E\x3\x2\x2\x2p\x4A2\x3\x2\x2\x2r\x4A7\x3\x2\x2\x2t\x4CC"+
		"\x3\x2\x2\x2v\x4CE\x3\x2\x2\x2x\x4DA\x3\x2\x2\x2z\x4E6\x3\x2\x2\x2|\x4E8"+
		"\x3\x2\x2\x2~\x4EF\x3\x2\x2\x2\x80\x4F3\x3\x2\x2\x2\x82\x4F8\x3\x2\x2"+
		"\x2\x84\x501\x3\x2\x2\x2\x86\x506\x3\x2\x2\x2\x88\x509\x3\x2\x2\x2\x8A"+
		"\x50E\x3\x2\x2\x2\x8C\x51C\x3\x2\x2\x2\x8E\x526\x3\x2\x2\x2\x90\x52A\x3"+
		"\x2\x2\x2\x92\x52C\x3\x2\x2\x2\x94\x535\x3\x2\x2\x2\x96\x53E\x3\x2\x2"+
		"\x2\x98\x550\x3\x2\x2\x2\x9A\x553\x3\x2\x2\x2\x9C\x55C\x3\x2\x2\x2\x9E"+
		"\x564\x3\x2\x2\x2\xA0\x56C\x3\x2\x2\x2\xA2\x57E\x3\x2\x2\x2\xA4\x58F\x3"+
		"\x2\x2\x2\xA6\x59F\x3\x2\x2\x2\xA8\x5A1\x3\x2\x2\x2\xAA\x5A4\x3\x2\x2"+
		"\x2\xAC\x5A8\x3\x2\x2\x2\xAE\x5AD\x3\x2\x2\x2\xB0\x5AF\x3\x2\x2\x2\xB2"+
		"\x5B9\x3\x2\x2\x2\xB4\x5BE\x3\x2\x2\x2\xB6\x5C0\x3\x2\x2\x2\xB8\x5C2\x3"+
		"\x2\x2\x2\xBA\x5C4\x3\x2\x2\x2\xBC\x5C6\x3\x2\x2\x2\xBE\x5C8\x3\x2\x2"+
		"\x2\xC0\x5D5\x3\x2\x2\x2\xC2\x5D9\x3\x2\x2\x2\xC4\x5DB\x3\x2\x2\x2\xC6"+
		"\x5E0\x3\x2\x2\x2\xC8\x5E5\x3\x2\x2\x2\xCA\x5E7\x3\x2\x2\x2\xCC\x5F5\x3"+
		"\x2\x2\x2\xCE\x603\x3\x2\x2\x2\xD0\x605\x3\x2\x2\x2\xD2\x611\x3\x2\x2"+
		"\x2\xD4\x61D\x3\x2\x2\x2\xD6\x61F\x3\x2\x2\x2\xD8\x623\x3\x2\x2\x2\xDA"+
		"\x62E\x3\x2\x2\x2\xDC\x632\x3\x2\x2\x2\xDE\x644\x3\x2\x2\x2\xE0\x64C\x3"+
		"\x2\x2\x2\xE2\x658\x3\x2\x2\x2\xE4\x65A\x3\x2\x2\x2\xE6\x65C\x3\x2\x2"+
		"\x2\xE8\x66F\x3\x2\x2\x2\xEA\x671\x3\x2\x2\x2\xEC\x678\x3\x2\x2\x2\xEE"+
		"\x67F\x3\x2\x2\x2\xF0\x688\x3\x2\x2\x2\xF2\x691\x3\x2\x2\x2\xF4\x69A\x3"+
		"\x2\x2\x2\xF6\x6B1\x3\x2\x2\x2\xF8\x6C0\x3\x2\x2\x2\xFA\x6C2\x3\x2\x2"+
		"\x2\xFC\x6CE\x3\x2\x2\x2\xFE\x6D0\x3\x2\x2\x2\x100\x6D2\x3\x2\x2\x2\x102"+
		"\x6D8\x3\x2\x2\x2\x104\x6DF\x3\x2\x2\x2\x106\x6E2\x3\x2\x2\x2\x108\x6EB"+
		"\x3\x2\x2\x2\x10A\x6F3\x3\x2\x2\x2\x10C\x6FF\x3\x2\x2\x2\x10E\x707\x3"+
		"\x2\x2\x2\x110\x714\x3\x2\x2\x2\x112\x716\x3\x2\x2\x2\x114\x71A\x3\x2"+
		"\x2\x2\x116\x728\x3\x2\x2\x2\x118\x72A\x3\x2\x2\x2\x11A\x732\x3\x2\x2"+
		"\x2\x11C\x743\x3\x2\x2\x2\x11E\x745\x3\x2\x2\x2\x120\x748\x3\x2\x2\x2"+
		"\x122\x74B\x3\x2\x2\x2\x124\x74E\x3\x2\x2\x2\x126\x751\x3\x2\x2\x2\x128"+
		"\x754\x3\x2\x2\x2\x12A\x756\x3\x2\x2\x2\x12C\x758\x3\x2\x2\x2\x12E\x75A"+
		"\x3\x2\x2\x2\x130\x75C\x3\x2\x2\x2\x132\x765\x3\x2\x2\x2\x134\x767\x3"+
		"\x2\x2\x2\x136\x778\x3\x2\x2\x2\x138\x77A\x3\x2\x2\x2\x13A\x77C\x3\x2"+
		"\x2\x2\x13C\x784\x3\x2\x2\x2\x13E\x786\x3\x2\x2\x2\x140\x78D\x3\x2\x2"+
		"\x2\x142\x798\x3\x2\x2\x2\x144\x79C\x3\x2\x2\x2\x146\x7A0\x3\x2\x2\x2"+
		"\x148\x7A7\x3\x2\x2\x2\x14A\x7A9\x3\x2\x2\x2\x14C\x7AE\x3\x2\x2\x2\x14E"+
		"\x7B0\x3\x2\x2\x2\x150\x7BE\x3\x2\x2\x2\x152\x7C6\x3\x2\x2\x2\x154\x7C8"+
		"\x3\x2\x2\x2\x156\x7D5\x3\x2\x2\x2\x158\x7D7\x3\x2\x2\x2\x15A\x7E2\x3"+
		"\x2\x2\x2\x15C\x7F2\x3\x2\x2\x2\x15E\x7F9\x3\x2\x2\x2\x160\x808\x3\x2"+
		"\x2\x2\x162\x80A\x3\x2\x2\x2\x164\x813\x3\x2\x2\x2\x166\x815\x3\x2\x2"+
		"\x2\x168\x824\x3\x2\x2\x2\x16A\x826\x3\x2\x2\x2\x16C\x828\x3\x2\x2\x2"+
		"\x16E\x82E\x3\x2\x2\x2\x170\x830\x3\x2\x2\x2\x172\x837\x3\x2\x2\x2\x174"+
		"\x842\x3\x2\x2\x2\x176\x846\x3\x2\x2\x2\x178\x84A\x3\x2\x2\x2\x17A\x855"+
		"\x3\x2\x2\x2\x17C\x864\x3\x2\x2\x2\x17E\x866\x3\x2\x2\x2\x180\x86F\x3"+
		"\x2\x2\x2\x182\x871\x3\x2\x2\x2\x184\x880\x3\x2\x2\x2\x186\x882\x3\x2"+
		"\x2\x2\x188\x884\x3\x2\x2\x2\x18A\x88A\x3\x2\x2\x2\x18C\x88C\x3\x2\x2"+
		"\x2\x18E\x893\x3\x2\x2\x2\x190\x89E\x3\x2\x2\x2\x192\x8A2\x3\x2\x2\x2"+
		"\x194\x8A9\x3\x2\x2\x2\x196\x8B8\x3\x2\x2\x2\x198\x8BA\x3\x2\x2\x2\x19A"+
		"\x19B\a`\x2\x2\x19B\x19C\x5\xBA^\x2\x19C\x1A3\a\x16\x2\x2\x19D\x1A0\x5"+
		"\xBA^\x2\x19E\x19F\a\x13\x2\x2\x19F\x1A1\x5\xE0q\x2\x1A0\x19E\x3\x2\x2"+
		"\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A4\x5\xE0q\x2\x1A3"+
		"\x19D\x3\x2\x2\x2\x1A3\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6"+
		"\a\x17\x2\x2\x1A6\x1A7\a\x11\x2\x2\x1A7\x1A8\x5\x82\x42\x2\x1A8\x1A9\x5"+
		"\x94K\x2\x1A9\x1AA\x5\x84\x43\x2\x1AA\x3\x3\x2\x2\x2\x1AB\x1AC\a`\x2\x2"+
		"\x1AC\x1AD\x5\xBA^\x2\x1AD\x1AE\a\x16\x2\x2\x1AE\x1AF\x5\xA6T\x2\x1AF"+
		"\x1B0\a\x17\x2\x2\x1B0\x1B1\a\x11\x2\x2\x1B1\x1B2\x5\x82\x42\x2\x1B2\x1B3"+
		"\x5\x92J\x2\x1B3\x1B4\x5\x84\x43\x2\x1B4\x5\x3\x2\x2\x2\x1B5\x1B6\x5\xBC"+
		"_\x2\x1B6\x1B7\a-\x2\x2\x1B7\x1B8\x5Z.\x2\x1B8\a\x3\x2\x2\x2\x1B9\x1BA"+
		"\x5\xBC_\x2\x1BA\x1BC\a\x16\x2\x2\x1BB\x1BD\x5j\x36\x2\x1BC\x1BB\x3\x2"+
		"\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\a\x17\x2"+
		"\x2\x1BF\t\x3\x2\x2\x2\x1C0\x1C2\a\x8E\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1"+
		"\x1C2\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\aL\x2\x2\x1C4\x1C5\x5"+
		"\xB8]\x2\x1C5\x1C6\a\x16\x2\x2\x1C6\x1C7\x5\xA2R\x2\x1C7\x1C8\a\x17\x2"+
		"\x2\x1C8\x1C9\a\x11\x2\x2\x1C9\x1D9\x5\x82\x42\x2\x1CA\x1DA\a\x82\x2\x2"+
		"\x1CB\x1CF\x5\x98M\x2\x1CC\x1CD\x5\x80\x41\x2\x1CD\x1CE\x5\f\a\x2\x1CE"+
		"\x1D0\x3\x2\x2\x2\x1CF\x1CC\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D8"+
		"\x3\x2\x2\x2\x1D1\x1D5\x5\f\a\x2\x1D2\x1D3\x5\x80\x41\x2\x1D3\x1D4\x5"+
		"\x98M\x2\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1D2\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2"+
		"\x2\x1D6\x1D8\x3\x2\x2\x2\x1D7\x1CB\x3\x2\x2\x2\x1D7\x1D1\x3\x2\x2\x2"+
		"\x1D8\x1DA\x3\x2\x2\x2\x1D9\x1CA\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1DA"+
		"\x1DB\x3\x2\x2\x2\x1DB\x1DC\x5\x84\x43\x2\x1DC\v\x3\x2\x2\x2\x1DD\x1DE"+
		"\an\x2\x2\x1DE\x1E0\a\x16\x2\x2\x1DF\x1E1\x5\xDEp\x2\x1E0\x1DF\x3\x2\x2"+
		"\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\a\x17\x2\x2"+
		"\x1E3\r\x3\x2\x2\x2\x1E4\x1E6\a\x8E\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6"+
		"\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\t\x2\x2\x2\x1E8\x1E9\x5\xBA"+
		"^\x2\x1E9\x1F0\a\x16\x2\x2\x1EA\x1F1\x5\x12\n\x2\x1EB\x1F1\x5\xE0q\x2"+
		"\x1EC\x1ED\x5\x12\n\x2\x1ED\x1EE\a\x13\x2\x2\x1EE\x1EF\x5\xE0q\x2\x1EF"+
		"\x1F1\x3\x2\x2\x2\x1F0\x1EA\x3\x2\x2\x2\x1F0\x1EB\x3\x2\x2\x2\x1F0\x1EC"+
		"\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F3\a\x17\x2\x2\x1F3\x1F4\a\x11"+
		"\x2\x2\x1F4\x1F7\x5\x82\x42\x2\x1F5\x1F8\x5\xCCg\x2\x1F6\x1F8\a\x82\x2"+
		"\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2"+
		"\x1F9\x1FA\x5\x84\x43\x2\x1FA\xF\x3\x2\x2\x2\x1FB\x1FC\a\x8C\x2\x2\x1FC"+
		"\x1FD\x5\xBA^\x2\x1FD\x1FE\a\x16\x2\x2\x1FE\x1FF\x5\xE0q\x2\x1FF\x200"+
		"\a\x17\x2\x2\x200\x201\a\x11\x2\x2\x201\x204\x5\x82\x42\x2\x202\x205\x5"+
		"\xCCg\x2\x203\x205\a\x82\x2\x2\x204\x202\x3\x2\x2\x2\x204\x203\x3\x2\x2"+
		"\x2\x205\x206\x3\x2\x2\x2\x206\x207\x5\x84\x43\x2\x207\x11\x3\x2\x2\x2"+
		"\x208\x209\x5\xB0Y\x2\x209\x13\x3\x2\x2\x2\x20A\x20B\aW\x2\x2\x20B\x20C"+
		"\a~\x2\x2\x20C\x20D\x5\x11C\x8F\x2\x20D\x20E\a\x16\x2\x2\x20E\x20F\x5"+
		"\xC2\x62\x2\x20F\x212\a\x17\x2\x2\x210\x211\a\x33\x2\x2\x211\x213\x5\xA2"+
		"R\x2\x212\x210\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2"+
		"\x214\x215\a\x11\x2\x2\x215\x216\x5\x82\x42\x2\x216\x217\x5\xEEx\x2\x217"+
		"\x218\x5\x84\x43\x2\x218\x15\x3\x2\x2\x2\x219\x21A\aW\x2\x2\x21A\x21B"+
		"\x5\xB6\\\x2\x21B\x21C\a\x8B\x2\x2\x21C\x21D\a\x16\x2\x2\x21D\x21E\a\x17"+
		"\x2\x2\x21E\x21F\a\x11\x2\x2\x21F\x220\x5\x82\x42\x2\x220\x221\x5\xEE"+
		"x\x2\x221\x222\x5\x84\x43\x2\x222\x17\x3\x2\x2\x2\x223\x224\aW\x2\x2\x224"+
		"\x226\x5\xB6\\\x2\x225\x227\av\x2\x2\x226\x225\x3\x2\x2\x2\x226\x227\x3"+
		"\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x229\a\x8B\x2\x2\x229\x22A\a\x16"+
		"\x2\x2\x22A\x22B\a\x17\x2\x2\x22B\x22C\a\x11\x2\x2\x22C\x22D\x5\x82\x42"+
		"\x2\x22D\x22E\x5\xE6t\x2\x22E\x22F\x5\x84\x43\x2\x22F\x19\x3\x2\x2\x2"+
		"\x230\x231\aW\x2\x2\x231\x232\x5\xB6\\\x2\x232\x233\ak\x2\x2\x233\x234"+
		"\a\x16\x2\x2\x234\x235\a\x17\x2\x2\x235\x236\a\x11\x2\x2\x236\x237\x5"+
		"\x82\x42\x2\x237\x238\x5\xEEx\x2\x238\x239\x5\x84\x43\x2\x239\x1B\x3\x2"+
		"\x2\x2\x23A\x23B\aW\x2\x2\x23B\x23D\x5\xB6\\\x2\x23C\x23E\av\x2\x2\x23D"+
		"\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240"+
		"\ak\x2\x2\x240\x241\a\x16\x2\x2\x241\x242\a\x17\x2\x2\x242\x243\a\x11"+
		"\x2\x2\x243\x244\x5\x82\x42\x2\x244\x245\x5\xE6t\x2\x245\x246\x5\x84\x43"+
		"\x2\x246\x1D\x3\x2\x2\x2\x247\x249\a\x8E\x2\x2\x248\x247\x3\x2\x2\x2\x248"+
		"\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\av\x2\x2\x24B\x24C\t"+
		"\x2\x2\x2\x24C\x24D\x5\xBA^\x2\x24D\x24F\a\x16\x2\x2\x24E\x250\x5\xE0"+
		"q\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2"+
		"\x251\x252\a\x17\x2\x2\x252\x253\a\x11\x2\x2\x253\x254\x5\x82\x42\x2\x254"+
		"\x258\x5\"\x12\x2\x255\x256\x5\x80\x41\x2\x256\x257\x5\xD0i\x2\x257\x259"+
		"\x3\x2\x2\x2\x258\x255\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x3"+
		"\x2\x2\x2\x25A\x25B\x5\x84\x43\x2\x25B\x1F\x3\x2\x2\x2\x25C\x25D\av\x2"+
		"\x2\x25D\x25E\a\x86\x2\x2\x25E\x25F\x5\xBA^\x2\x25F\x261\a\x16\x2\x2\x260"+
		"\x262\x5\xE0q\x2\x261\x260\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263"+
		"\x3\x2\x2\x2\x263\x264\a\x17\x2\x2\x264\x265\a\x11\x2\x2\x265\x266\x5"+
		"\x82\x42\x2\x266\x26A\x5\"\x12\x2\x267\x268\x5\x80\x41\x2\x268\x269\x5"+
		"\xD0i\x2\x269\x26B\x3\x2\x2\x2\x26A\x267\x3\x2\x2\x2\x26A\x26B\x3\x2\x2"+
		"\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26D\x5\x84\x43\x2\x26D!\x3\x2\x2\x2\x26E"+
		"\x26F\aW\x2\x2\x26F\x270\t\x2\x2\x2\x270\x271\aO\x2\x2\x271\x272\a\x11"+
		"\x2\x2\x272\x273\x5\x82\x42\x2\x273\x274\x5$\x13\x2\x274\x275\x5\x84\x43"+
		"\x2\x275#\x3\x2\x2\x2\x276\x277\b\x13\x1\x2\x277\x278\x5\xD4k\x2\x278"+
		"\x27F\x3\x2\x2\x2\x279\x27A\f\x3\x2\x2\x27A\x27B\x5\x80\x41\x2\x27B\x27C"+
		"\x5\xD4k\x2\x27C\x27E\x3\x2\x2\x2\x27D\x279\x3\x2\x2\x2\x27E\x281\x3\x2"+
		"\x2\x2\x27F\x27D\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280%\x3\x2\x2\x2\x281"+
		"\x27F\x3\x2\x2\x2\x282\x283\a\x45\x2\x2\x283\x284\aW\x2\x2\x284\x285\x5"+
		"\xB2Z\x2\x285\x287\a\x16\x2\x2\x286\x288\x5\xBE`\x2\x287\x286\x3\x2\x2"+
		"\x2\x287\x288\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x28C\a\x17\x2\x2"+
		"\x28A\x28B\a\x33\x2\x2\x28B\x28D\x5\xA2R\x2\x28C\x28A\x3\x2\x2\x2\x28C"+
		"\x28D\x3\x2\x2\x2\x28D\'\x3\x2\x2\x2\x28E\x28F\aW\x2\x2\x28F\x290\x5\xB2"+
		"Z\x2\x290\x292\a\x16\x2\x2\x291\x293\x5\xBE`\x2\x292\x291\x3\x2\x2\x2"+
		"\x292\x293\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x297\a\x17\x2\x2\x295"+
		"\x296\a\x33\x2\x2\x296\x298\x5\xA2R\x2\x297\x295\x3\x2\x2\x2\x297\x298"+
		"\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29A\a\x11\x2\x2\x29A\x29B\x5"+
		"\x82\x42\x2\x29B\x29C\x5\xEEx\x2\x29C\x29D\x5\x84\x43\x2\x29D)\x3\x2\x2"+
		"\x2\x29E\x2A0\aW\x2\x2\x29F\x2A1\av\x2\x2\x2A0\x29F\x3\x2\x2\x2\x2A0\x2A1"+
		"\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3\x5\xB2Z\x2\x2A3\x2A5\a\x16"+
		"\x2\x2\x2A4\x2A6\x5\xBE`\x2\x2A5\x2A4\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2"+
		"\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2AA\a\x17\x2\x2\x2A8\x2A9\a\x33\x2\x2\x2A9"+
		"\x2AB\x5\xC8\x65\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB\x2AC"+
		"\x3\x2\x2\x2\x2AC\x2AD\a\x11\x2\x2\x2AD\x2AE\x5\x82\x42\x2\x2AE\x2AF\x5"+
		"\xE6t\x2\x2AF\x2B0\x5\x84\x43\x2\x2B0+\x3\x2\x2\x2\x2B1\x2B2\aW\x2\x2"+
		"\x2B2\x2B3\a\x91\x2\x2\x2B3\x2B4\a\xA5\x2\x2\x2B4\x2B5\a\x16\x2\x2\x2B5"+
		"\x2B6\a\x17\x2\x2\x2B6\x2B7\a\x11\x2\x2\x2B7\x2B8\x5\x82\x42\x2\x2B8\x2B9"+
		"\x5\xEEx\x2\x2B9\x2BA\x5\x84\x43\x2\x2BA\x2BB\x5\x80\x41\x2\x2BB\x2BC"+
		"\a\x96\x2\x2\x2BC\x2C2\a\x11\x2\x2\x2BD\x2BE\x5\x82\x42\x2\x2BE\x2BF\x5"+
		"\xF0y\x2\x2BF\x2C0\x5\x84\x43\x2\x2C0\x2C3\x3\x2\x2\x2\x2C1\x2C3\x5\xBC"+
		"_\x2\x2C2\x2BD\x3\x2\x2\x2\x2C2\x2C1\x3\x2\x2\x2\x2C3-\x3\x2\x2\x2\x2C4"+
		"\x2C5\x5Z.\x2\x2C5/\x3\x2\x2\x2\x2C6\x2C7\x5\xB6\\\x2\x2C7\x2C8\a\x11"+
		"\x2\x2\x2C8\x2CD\x5\xC8\x65\x2\x2C9\x2CA\a\x16\x2\x2\x2CA\x2CB\x5\xE0"+
		"q\x2\x2CB\x2CC\a\x17\x2\x2\x2CC\x2CE\x3\x2\x2\x2\x2CD\x2C9\x3\x2\x2\x2"+
		"\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2D1\x3\x2\x2\x2\x2CF\x2D0\a-\x2\x2\x2D0\x2D2"+
		"\x5\x102\x82\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x31\x3"+
		"\x2\x2\x2\x2D3\x2E6\x5\x38\x1D\x2\x2D4\x2E6\x5x=\x2\x2D5\x2E6\x5|?\x2"+
		"\x2D6\x2E6\x5\x36\x1C\x2\x2D7\x2E6\x5\x34\x1B\x2\x2D8\x2E6\x5X-\x2\x2D9"+
		"\x2E6\x5N(\x2\x2DA\x2E6\x5\x44#\x2\x2DB\x2E6\x5H%\x2\x2DC\x2E6\x5L\'\x2"+
		"\x2DD\x2E6\x5J&\x2\x2DE\x2E6\x5R*\x2\x2DF\x2E6\x5T+\x2\x2E0\x2E6\x5p\x39"+
		"\x2\x2E1\x2E6\x5@!\x2\x2E2\x2E6\x5\x42\"\x2\x2E3\x2E6\x5(\x15\x2\x2E4"+
		"\x2E6\x5\xE4s\x2\x2E5\x2D3\x3\x2\x2\x2\x2E5\x2D4\x3\x2\x2\x2\x2E5\x2D5"+
		"\x3\x2\x2\x2\x2E5\x2D6\x3\x2\x2\x2\x2E5\x2D7\x3\x2\x2\x2\x2E5\x2D8\x3"+
		"\x2\x2\x2\x2E5\x2D9\x3\x2\x2\x2\x2E5\x2DA\x3\x2\x2\x2\x2E5\x2DB\x3\x2"+
		"\x2\x2\x2E5\x2DC\x3\x2\x2\x2\x2E5\x2DD\x3\x2\x2\x2\x2E5\x2DE\x3\x2\x2"+
		"\x2\x2E5\x2DF\x3\x2\x2\x2\x2E5\x2E0\x3\x2\x2\x2\x2E5\x2E1\x3\x2\x2\x2"+
		"\x2E5\x2E2\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E4\x3\x2\x2\x2\x2E6"+
		"\x33\x3\x2\x2\x2\x2E7\x2E8\ah\x2\x2\x2E8\x2E9\a\x16\x2\x2\x2E9\x2EA\a"+
		"\x17\x2\x2\x2EA\x35\x3\x2\x2\x2\x2EB\x2EC\aZ\x2\x2\x2EC\x2ED\a\x16\x2"+
		"\x2\x2ED\x2EE\x5\x9EP\x2\x2EE\x2EF\a\x17\x2\x2\x2EF\x300\x3\x2\x2\x2\x2F0"+
		"\x2F1\a\x8F\x2\x2\x2F1\x2F2\a\x16\x2\x2\x2F2\x2F3\x5\x9EP\x2\x2F3\x2F4"+
		"\a\x17\x2\x2\x2F4\x300\x3\x2\x2\x2\x2F5\x2F6\aZ\x2\x2\x2F6\x2F7\a\x16"+
		"\x2\x2\x2F7\x2F8\x5\x9EP\x2\x2F8\x2F9\a\x17\x2\x2\x2F9\x2FA\aH\x2\x2\x2FA"+
		"\x2FB\a\x8F\x2\x2\x2FB\x2FC\a\x16\x2\x2\x2FC\x2FD\x5\x9EP\x2\x2FD\x2FE"+
		"\a\x17\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2EB\x3\x2\x2\x2\x2FF\x2F0\x3"+
		"\x2\x2\x2\x2FF\x2F5\x3\x2\x2\x2\x300\x37\x3\x2\x2\x2\x301\x302\x5:\x1E"+
		"\x2\x302\x304\a\x16\x2\x2\x303\x305\x5j\x36\x2\x304\x303\x3\x2\x2\x2\x304"+
		"\x305\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x307\a\x17\x2\x2\x307\x39"+
		"\x3\x2\x2\x2\x308\x30E\x5\xB2Z\x2\x309\x30A\x5<\x1F\x2\x30A\x30B\a\x15"+
		"\x2\x2\x30B\x30C\x5\xB2Z\x2\x30C\x30E\x3\x2\x2\x2\x30D\x308\x3\x2\x2\x2"+
		"\x30D\x309\x3\x2\x2\x2\x30E;\x3\x2\x2\x2\x30F\x310\b\x1F\x1\x2\x310\x311"+
		"\x5\xB4[\x2\x311\x316\x3\x2\x2\x2\x312\x313\f\x3\x2\x2\x313\x315\x5> "+
		"\x2\x314\x312\x3\x2\x2\x2\x315\x318\x3\x2\x2\x2\x316\x314\x3\x2\x2\x2"+
		"\x316\x317\x3\x2\x2\x2\x317=\x3\x2\x2\x2\x318\x316\x3\x2\x2\x2\x319\x31A"+
		"\a\x15\x2\x2\x31A\x320\x5\xB6\\\x2\x31B\x31C\a\x18\x2\x2\x31C\x31D\x5"+
		"Z.\x2\x31D\x31E\a\x19\x2\x2\x31E\x320\x3\x2\x2\x2\x31F\x319\x3\x2\x2\x2"+
		"\x31F\x31B\x3\x2\x2\x2\x320?\x3\x2\x2\x2\x321\x322\a\x97\x2\x2\x322\x323"+
		"\x5\x112\x8A\x2\x323\x324\a\x11\x2\x2\x324\x325\x5\x82\x42\x2\x325\x326"+
		"\x5\xEEx\x2\x326\x327\x5\x84\x43\x2\x327\x41\x3\x2\x2\x2\x328\x329\a\x97"+
		"\x2\x2\x329\x32A\x5\xBA^\x2\x32A\x32B\a\x11\x2\x2\x32B\x32C\x5\x82\x42"+
		"\x2\x32C\x32D\x5\xEEx\x2\x32D\x32E\x5\x84\x43\x2\x32E\x43\x3\x2\x2\x2"+
		"\x32F\x330\a\x90\x2\x2\x330\x331\a{\x2\x2\x331\x332\x5Z.\x2\x332\x333"+
		"\a\x11\x2\x2\x333\x334\x5\x82\x42\x2\x334\x33C\x5\xF2z\x2\x335\x336\x5"+
		"\x80\x41\x2\x336\x337\a\x81\x2\x2\x337\x338\a\x11\x2\x2\x338\x339\x5\x82"+
		"\x42\x2\x339\x33A\x5\xEEx\x2\x33A\x33B\x5\x84\x43\x2\x33B\x33D\x3\x2\x2"+
		"\x2\x33C\x335\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2"+
		"\x33E\x33F\x5\x84\x43\x2\x33F\x45\x3\x2\x2\x2\x340\x341\a\x98\x2\x2\x341"+
		"\x342\x5\xF8}\x2\x342\x343\a\x11\x2\x2\x343\x344\x5\x82\x42\x2\x344\x345"+
		"\x5\xEEx\x2\x345\x346\x5\x84\x43\x2\x346\x350\x3\x2\x2\x2\x347\x348\a"+
		"\x98\x2\x2\x348\x349\am\x2\x2\x349\x34A\x5\xF6|\x2\x34A\x34B\a\x11\x2"+
		"\x2\x34B\x34C\x5\x82\x42\x2\x34C\x34D\x5\xEEx\x2\x34D\x34E\x5\x84\x43"+
		"\x2\x34E\x350\x3\x2\x2\x2\x34F\x340\x3\x2\x2\x2\x34F\x347\x3\x2\x2\x2"+
		"\x350G\x3\x2\x2\x2\x351\x352\ai\x2\x2\x352\x355\x5\xB6\\\x2\x353\x354"+
		"\a\x13\x2\x2\x354\x356\x5\xB6\\\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3"+
		"\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x358\am\x2\x2\x358\x359\x5Z.\x2\x359"+
		"\x35A\a\x11\x2\x2\x35A\x35B\x5\x82\x42\x2\x35B\x35C\x5\xEEx\x2\x35C\x35D"+
		"\x5\x84\x43\x2\x35DI\x3\x2\x2\x2\x35E\x35F\a\\\x2\x2\x35F\x360\a\x11\x2"+
		"\x2\x360\x361\x5\x82\x42\x2\x361\x362\x5\xEEx\x2\x362\x363\x5\x84\x43"+
		"\x2\x363\x364\x5\x80\x41\x2\x364\x365\a\x9A\x2\x2\x365\x366\x5Z.\x2\x366"+
		"K\x3\x2\x2\x2\x367\x368\a\x9A\x2\x2\x368\x369\x5Z.\x2\x369\x36A\a\x11"+
		"\x2\x2\x36A\x36B\x5\x82\x42\x2\x36B\x36C\x5\xEEx\x2\x36C\x36D\x5\x84\x43"+
		"\x2\x36DM\x3\x2\x2\x2\x36E\x36F\al\x2\x2\x36F\x370\x5Z.\x2\x370\x371\a"+
		"\x11\x2\x2\x371\x372\x5\x82\x42\x2\x372\x373\x5\xEEx\x2\x373\x377\x5\x84"+
		"\x43\x2\x374\x375\x5\x80\x41\x2\x375\x376\x5P)\x2\x376\x378\x3\x2\x2\x2"+
		"\x377\x374\x3\x2\x2\x2\x377\x378\x3\x2\x2\x2\x378\x380\x3\x2\x2\x2\x379"+
		"\x37A\x5\x80\x41\x2\x37A\x37B\a_\x2\x2\x37B\x37C\a\x11\x2\x2\x37C\x37D"+
		"\x5\x82\x42\x2\x37D\x37E\x5\xEEx\x2\x37E\x37F\x5\x84\x43\x2\x37F\x381"+
		"\x3\x2\x2\x2\x380\x379\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381O\x3\x2\x2"+
		"\x2\x382\x383\b)\x1\x2\x383\x384\a_\x2\x2\x384\x385\al\x2\x2\x385\x386"+
		"\x5Z.\x2\x386\x387\a\x11\x2\x2\x387\x388\x5\x82\x42\x2\x388\x389\x5\xEE"+
		"x\x2\x389\x38A\x5\x84\x43\x2\x38A\x397\x3\x2\x2\x2\x38B\x38C\f\x3\x2\x2"+
		"\x38C\x38D\x5\x80\x41\x2\x38D\x38E\a_\x2\x2\x38E\x38F\al\x2\x2\x38F\x390"+
		"\x5Z.\x2\x390\x391\a\x11\x2\x2\x391\x392\x5\x82\x42\x2\x392\x393\x5\xEE"+
		"x\x2\x393\x394\x5\x84\x43\x2\x394\x396\x3\x2\x2\x2\x395\x38B\x3\x2\x2"+
		"\x2\x396\x399\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2"+
		"\x398Q\x3\x2\x2\x2\x399\x397\x3\x2\x2\x2\x39A\x39B\a\x83\x2\x2\x39B\x39C"+
		"\x5Z.\x2\x39CS\x3\x2\x2\x2\x39D\x39E\a\x95\x2\x2\x39E\x39F\x5\xB6\\\x2"+
		"\x39F\x3A0\a\x11\x2\x2\x3A0\x3A1\x5\x82\x42\x2\x3A1\x3A2\x5\xEEx\x2\x3A2"+
		"\x3A3\x5\x84\x43\x2\x3A3\x3A5\x5~@\x2\x3A4\x3A6\x5\xF4{\x2\x3A5\x3A4\x3"+
		"\x2\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3AE\x3\x2\x2\x2\x3A7\x3A8\a\x62"+
		"\x2\x2\x3A8\x3A9\a\x11\x2\x2\x3A9\x3AA\x5\x82\x42\x2\x3AA\x3AB\x5\xEE"+
		"x\x2\x3AB\x3AC\x5\x84\x43\x2\x3AC\x3AD\x5~@\x2\x3AD\x3AF\x3\x2\x2\x2\x3AE"+
		"\x3A7\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B7\x3\x2\x2\x2\x3B0\x3B1"+
		"\ag\x2\x2\x3B1\x3B2\a\x11\x2\x2\x3B2\x3B3\x5\x82\x42\x2\x3B3\x3B4\x5\xEE"+
		"x\x2\x3B4\x3B5\x5\x84\x43\x2\x3B5\x3B6\x5~@\x2\x3B6\x3B8\x3\x2\x2\x2\x3B7"+
		"\x3B0\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA"+
		"\x5~@\x2\x3BAU\x3\x2\x2\x2\x3BB\x3BC\a\x62\x2\x2\x3BC\x3BD\x5\xBC_\x2"+
		"\x3BD\x3BE\a\x11\x2\x2\x3BE\x3BF\x5\x82\x42\x2\x3BF\x3C0\x5\xEEx\x2\x3C0"+
		"\x3C1\x5\x84\x43\x2\x3C1\x3C2\x5~@\x2\x3C2\x3CF\x3\x2\x2\x2\x3C3\x3C4"+
		"\a\x62\x2\x2\x3C4\x3C5\am\x2\x2\x3C5\x3C6\a\x18\x2\x2\x3C6\x3C7\x5\x96"+
		"L\x2\x3C7\x3C8\a\x19\x2\x2\x3C8\x3C9\a\x11\x2\x2\x3C9\x3CA\x5\x82\x42"+
		"\x2\x3CA\x3CB\x5\xEEx\x2\x3CB\x3CC\x5\x84\x43\x2\x3CC\x3CD\x5~@\x2\x3CD"+
		"\x3CF\x3\x2\x2\x2\x3CE\x3BB\x3\x2\x2\x2\x3CE\x3C3\x3\x2\x2\x2\x3CFW\x3"+
		"\x2\x2\x2\x3D0\x3D2\a\x87\x2\x2\x3D1\x3D3\x5Z.\x2\x3D2\x3D1\x3\x2\x2\x2"+
		"\x3D2\x3D3\x3\x2\x2\x2\x3D3Y\x3\x2\x2\x2\x3D4\x3D5\b.\x1\x2\x3D5\x3D6"+
		"\a#\x2\x2\x3D6\x3E7\x5Z.\"\x3D7\x3D8\ax\x2\x2\x3D8\x3E7\x5Z.!\x3D9\x3E7"+
		"\x5^\x30\x2\x3DA\x3E7\x5`\x31\x2\x3DB\x3DC\a>\x2\x2\x3DC\x3DD\a\x16\x2"+
		"\x2\x3DD\x3DE\x5Z.\x2\x3DE\x3DF\a\x17\x2\x2\x3DF\x3E7\x3\x2\x2\x2\x3E0"+
		"\x3E1\a\x63\x2\x2\x3E1\x3E2\a\x16\x2\x2\x3E2\x3E3\x5\xB6\\\x2\x3E3\x3E4"+
		"\a\x17\x2\x2\x3E4\x3E7\x3\x2\x2\x2\x3E5\x3E7\x5\\/\x2\x3E6\x3D4\x3\x2"+
		"\x2\x2\x3E6\x3D7\x3\x2\x2\x2\x3E6\x3D9\x3\x2\x2\x2\x3E6\x3DA\x3\x2\x2"+
		"\x2\x3E6\x3DB\x3\x2\x2\x2\x3E6\x3E0\x3\x2\x2\x2\x3E6\x3E5\x3\x2\x2\x2"+
		"\x3E7\x44E\x3\x2\x2\x2\x3E8\x3E9\f \x2\x2\x3E9\x3EA\x5\x12A\x96\x2\x3EA"+
		"\x3EB\x5Z.!\x3EB\x44D\x3\x2\x2\x2\x3EC\x3ED\f\x1F\x2\x2\x3ED\x3EE\x5\x12C"+
		"\x97\x2\x3EE\x3EF\x5Z. \x3EF\x44D\x3\x2\x2\x2\x3F0\x3F1\f\x1E\x2\x2\x3F1"+
		"\x3F2\x5\x130\x99\x2\x3F2\x3F3\x5Z.\x1F\x3F3\x44D\x3\x2\x2\x2\x3F4\x3F5"+
		"\f\x1D\x2\x2\x3F5\x3F6\x5\x12E\x98\x2\x3F6\x3F7\x5Z.\x1E\x3F7\x44D\x3"+
		"\x2\x2\x2\x3F8\x3F9\f\x1C\x2\x2\x3F9\x3FA\t\x3\x2\x2\x3FA\x44D\x5Z.\x1D"+
		"\x3FB\x3FC\f\x1B\x2\x2\x3FC\x3FD\a*\x2\x2\x3FD\x44D\x5Z.\x1C\x3FE\x3FF"+
		"\f\x1A\x2\x2\x3FF\x400\a+\x2\x2\x400\x44D\x5Z.\x1B\x401\x402\f\x19\x2"+
		"\x2\x402\x403\a(\x2\x2\x403\x44D\x5Z.\x1A\x404\x405\f\x18\x2\x2\x405\x406"+
		"\a)\x2\x2\x406\x44D\x5Z.\x19\x407\x408\f\x15\x2\x2\x408\x409\a/\x2\x2"+
		"\x409\x44D\x5Z.\x16\x40A\x40B\f\x14\x2\x2\x40B\x40C\a.\x2\x2\x40C\x44D"+
		"\x5Z.\x15\x40D\x40E\f\x13\x2\x2\x40E\x40F\a\x30\x2\x2\x40F\x44D\x5Z.\x14"+
		"\x410\x411\f\x12\x2\x2\x411\x412\a\x7F\x2\x2\x412\x44D\x5Z.\x13\x413\x414"+
		"\f\x11\x2\x2\x414\x415\aH\x2\x2\x415\x44D\x5Z.\x12\x416\x417\f\x10\x2"+
		"\x2\x417\x418\al\x2\x2\x418\x419\x5Z.\x2\x419\x41A\a_\x2\x2\x41A\x41B"+
		"\x5Z.\x11\x41B\x44D\x3\x2\x2\x2\x41C\x41D\f\xE\x2\x2\x41D\x41E\am\x2\x2"+
		"\x41E\x44D\x5Z.\xF\x41F\x420\f\r\x2\x2\x420\x421\aV\x2\x2\x421\x44D\x5"+
		"Z.\xE\x422\x423\f\f\x2\x2\x423\x424\aV\x2\x2\x424\x425\a\x46\x2\x2\x425"+
		"\x44D\x5Z.\r\x426\x427\f\v\x2\x2\x427\x428\aV\x2\x2\x428\x429\aI\x2\x2"+
		"\x429\x44D\x5Z.\f\x42A\x42B\f\n\x2\x2\x42B\x42C\ax\x2\x2\x42C\x42D\am"+
		"\x2\x2\x42D\x44D\x5Z.\v\x42E\x42F\f\t\x2\x2\x42F\x430\ax\x2\x2\x430\x431"+
		"\aV\x2\x2\x431\x44D\x5Z.\n\x432\x433\f\b\x2\x2\x433\x434\ax\x2\x2\x434"+
		"\x435\aV\x2\x2\x435\x436\a\x46\x2\x2\x436\x44D\x5Z.\t\x437\x438\f\a\x2"+
		"\x2\x438\x439\ax\x2\x2\x439\x43A\aV\x2\x2\x43A\x43B\aI\x2\x2\x43B\x44D"+
		"\x5Z.\b\x43C\x43D\f\x3\x2\x2\x43D\x43E\ai\x2\x2\x43E\x43F\x5\xB6\\\x2"+
		"\x43F\x440\am\x2\x2\x440\x441\x5Z.\x4\x441\x44D\x3\x2\x2\x2\x442\x443"+
		"\f\x17\x2\x2\x443\x444\ap\x2\x2\x444\x445\ax\x2\x2\x445\x44D\x5\x116\x8C"+
		"\x2\x446\x447\f\x16\x2\x2\x447\x448\ap\x2\x2\x448\x44D\x5\x116\x8C\x2"+
		"\x449\x44A\f\xF\x2\x2\x44A\x44B\aJ\x2\x2\x44B\x44D\x5\xC8\x65\x2\x44C"+
		"\x3E8\x3\x2\x2\x2\x44C\x3EC\x3\x2\x2\x2\x44C\x3F0\x3\x2\x2\x2\x44C\x3F4"+
		"\x3\x2\x2\x2\x44C\x3F8\x3\x2\x2\x2\x44C\x3FB\x3\x2\x2\x2\x44C\x3FE\x3"+
		"\x2\x2\x2\x44C\x401\x3\x2\x2\x2\x44C\x404\x3\x2\x2\x2\x44C\x407\x3\x2"+
		"\x2\x2\x44C\x40A\x3\x2\x2\x2\x44C\x40D\x3\x2\x2\x2\x44C\x410\x3\x2\x2"+
		"\x2\x44C\x413\x3\x2\x2\x2\x44C\x416\x3\x2\x2\x2\x44C\x41C\x3\x2\x2\x2"+
		"\x44C\x41F\x3\x2\x2\x2\x44C\x422\x3\x2\x2\x2\x44C\x426\x3\x2\x2\x2\x44C"+
		"\x42A\x3\x2\x2\x2\x44C\x42E\x3\x2\x2\x2\x44C\x432\x3\x2\x2\x2\x44C\x437"+
		"\x3\x2\x2\x2\x44C\x43C\x3\x2\x2\x2\x44C\x442\x3\x2\x2\x2\x44C\x446\x3"+
		"\x2\x2\x2\x44C\x449\x3\x2\x2\x2\x44D\x450\x3\x2\x2\x2\x44E\x44C\x3\x2"+
		"\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F[\x3\x2\x2\x2\x450\x44E\x3\x2\x2\x2\x451"+
		"\x452\x5\xBA^\x2\x452]\x3\x2\x2\x2\x453\x454\b\x30\x1\x2\x454\x455\x5"+
		"\xFC\x7F\x2\x455\x45A\x3\x2\x2\x2\x456\x457\f\x3\x2\x2\x457\x459\x5\x62"+
		"\x32\x2\x458\x456\x3\x2\x2\x2\x459\x45C\x3\x2\x2\x2\x45A\x458\x3\x2\x2"+
		"\x2\x45A\x45B\x3\x2\x2\x2\x45B_\x3\x2\x2\x2\x45C\x45A\x3\x2\x2\x2\x45D"+
		"\x466\x5\x64\x33\x2\x45E\x466\x5\x66\x34\x2\x45F\x466\x5r:\x2\x460\x466"+
		"\x5t;\x2\x461\x466\x5n\x38\x2\x462\x466\x5v<\x2\x463\x466\x5\x38\x1D\x2"+
		"\x464\x466\x5h\x35\x2\x465\x45D\x3\x2\x2\x2\x465\x45E\x3\x2\x2\x2\x465"+
		"\x45F\x3\x2\x2\x2\x465\x460\x3\x2\x2\x2\x465\x461\x3\x2\x2\x2\x465\x462"+
		"\x3\x2\x2\x2\x465\x463\x3\x2\x2\x2\x465\x464\x3\x2\x2\x2\x466\x61\x3\x2"+
		"\x2\x2\x467\x468\x6\x32!\x3\x468\x469\a\x15\x2\x2\x469\x475\x5\xB6\\\x2"+
		"\x46A\x46B\x6\x32\"\x3\x46B\x46C\a\x18\x2\x2\x46C\x46D\x5\x110\x89\x2"+
		"\x46D\x46E\a\x19\x2\x2\x46E\x475\x3\x2\x2\x2\x46F\x470\x6\x32#\x3\x470"+
		"\x471\a\x18\x2\x2\x471\x472\x5Z.\x2\x472\x473\a\x19\x2\x2\x473\x475\x3"+
		"\x2\x2\x2\x474\x467\x3\x2\x2\x2\x474\x46A\x3\x2\x2\x2\x474\x46F\x3\x2"+
		"\x2\x2\x475\x63\x3\x2\x2\x2\x476\x477\a@\x2\x2\x477\x479\a\x16\x2\x2\x478"+
		"\x47A\x5Z.\x2\x479\x478\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x3"+
		"\x2\x2\x2\x47B\x47C\a\x17\x2\x2\x47C\x65\x3\x2\x2\x2\x47D\x47E\a?\x2\x2"+
		"\x47E\x480\a\x16\x2\x2\x47F\x481\x5Z.\x2\x480\x47F\x3\x2\x2\x2\x480\x481"+
		"\x3\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x483\a\x17\x2\x2\x483g\x3\x2\x2"+
		"\x2\x484\x485\x5\xAAV\x2\x485\x487\a\x16\x2\x2\x486\x488\x5j\x36\x2\x487"+
		"\x486\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48A"+
		"\a\x17\x2\x2\x48Ai\x3\x2\x2\x2\x48B\x48C\b\x36\x1\x2\x48C\x48D\x5Z.\x2"+
		"\x48D\x48E\x6\x36$\x3\x48E\x491\x3\x2\x2\x2\x48F\x491\x5l\x37\x2\x490"+
		"\x48B\x3\x2\x2\x2\x490\x48F\x3\x2\x2\x2\x491\x497\x3\x2\x2\x2\x492\x493"+
		"\f\x3\x2\x2\x493\x494\a\x13\x2\x2\x494\x496\x5l\x37\x2\x495\x492\x3\x2"+
		"\x2\x2\x496\x499\x3\x2\x2\x2\x497\x495\x3\x2\x2\x2\x497\x498\x3\x2\x2"+
		"\x2\x498k\x3\x2\x2\x2\x499\x497\x3\x2\x2\x2\x49A\x49B\x5\xB6\\\x2\x49B"+
		"\x49C\x5\x128\x95\x2\x49C\x49D\x5Z.\x2\x49Dm\x3\x2\x2\x2\x49E\x49F\a\x84"+
		"\x2\x2\x49F\x4A0\aj\x2\x2\x4A0\x4A1\x5Z.\x2\x4A1o\x3\x2\x2\x2\x4A2\x4A3"+
		"\a\x9B\x2\x2\x4A3\x4A4\x5Z.\x2\x4A4\x4A5\a\x94\x2\x2\x4A5\x4A6\x5Z.\x2"+
		"\x4A6q\x3\x2\x2\x2\x4A7\x4A8\a\x66\x2\x2\x4A8\x4A9\x5\xB6\\\x2\x4A9\x4AA"+
		"\aj\x2\x2\x4AA\x4AB\x5Z.\x2\x4AB\x4AC\a\x99\x2\x2\x4AC\x4AD\x5Z.\x2\x4AD"+
		"s\x3\x2\x2\x2\x4AE\x4AF\a\x66\x2\x2\x4AF\x4B1\a|\x2\x2\x4B0\x4B2\x5\xAA"+
		"V\x2\x4B1\x4B0\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2"+
		"\x4B3\x4B4\a\x99\x2\x2\x4B4\x4CD\x5Z.\x2\x4B5\x4BC\a\x66\x2\x2\x4B6\x4BD"+
		"\a\x46\x2\x2\x4B7\x4B8\a\x89\x2\x2\x4B8\x4B9\x5Z.\x2\x4B9\x4BA\a\x94\x2"+
		"\x2\x4BA\x4BB\x5Z.\x2\x4BB\x4BD\x3\x2\x2\x2\x4BC\x4B6\x3\x2\x2\x2\x4BC"+
		"\x4B7\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4C0\a\x16\x2\x2\x4BF\x4C1"+
		"\x5\xAAV\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x4C2\x3\x2"+
		"\x2\x2\x4C2\x4C5\a\x17\x2\x2\x4C3\x4C4\a\x99\x2\x2\x4C4\x4C6\x5Z.\x2\x4C5"+
		"\x4C3\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6\x4CA\x3\x2\x2\x2\x4C7\x4C8"+
		"\a\x80\x2\x2\x4C8\x4C9\aP\x2\x2\x4C9\x4CB\x5\x118\x8D\x2\x4CA\x4C7\x3"+
		"\x2\x2\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\x4CD\x3\x2\x2\x2\x4CC\x4AE\x3\x2"+
		"\x2\x2\x4CC\x4B5\x3\x2\x2\x2\x4CDu\x3\x2\x2\x2\x4CE\x4CF\a\x8D\x2\x2\x4CF"+
		"\x4D0\a\x16\x2\x2\x4D0\x4D6\x5^\x30\x2\x4D1\x4D2\a\x13\x2\x2\x4D2\x4D3"+
		"\x5\x120\x91\x2\x4D3\x4D4\a-\x2\x2\x4D4\x4D5\x5^\x30\x2\x4D5\x4D7\x3\x2"+
		"\x2\x2\x4D6\x4D1\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2"+
		"\x2\x4D8\x4D9\a\x17\x2\x2\x4D9w\x3\x2\x2\x2\x4DA\x4DB\x5\x114\x8B\x2\x4DB"+
		"\x4DC\x5\x128\x95\x2\x4DC\x4DD\x5Z.\x2\x4DDy\x3\x2\x2\x2\x4DE\x4DF\x6"+
		">&\x3\x4DF\x4E0\a\x15\x2\x2\x4E0\x4E7\x5\xB6\\\x2\x4E1\x4E2\x6>\'\x3\x4E2"+
		"\x4E3\a\x18\x2\x2\x4E3\x4E4\x5Z.\x2\x4E4\x4E5\a\x19\x2\x2\x4E5\x4E7\x3"+
		"\x2\x2\x2\x4E6\x4DE\x3\x2\x2\x2\x4E6\x4E1\x3\x2\x2\x2\x4E7{\x3\x2\x2\x2"+
		"\x4E8\x4E9\x5\xDEp\x2\x4E9\x4EA\x5\x128\x95\x2\x4EA\x4EB\x5Z.\x2\x4EB"+
		"}\x3\x2\x2\x2\x4EC\x4EE\a\a\x2\x2\x4ED\x4EC\x3\x2\x2\x2\x4EE\x4F1\x3\x2"+
		"\x2\x2\x4EF\x4ED\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x7F\x3\x2\x2\x2"+
		"\x4F1\x4EF\x3\x2\x2\x2\x4F2\x4F4\a\a\x2\x2\x4F3\x4F2\x3\x2\x2\x2\x4F4"+
		"\x4F5\x3\x2\x2\x2\x4F5\x4F3\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x81"+
		"\x3\x2\x2\x2\x4F7\x4F9\a\a\x2\x2\x4F8\x4F7\x3\x2\x2\x2\x4F9\x4FA\x3\x2"+
		"\x2\x2\x4FA\x4F8\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x4FC\x3\x2\x2"+
		"\x2\x4FC\x4FD\a\x3\x2\x2\x4FD\x83\x3\x2\x2\x2\x4FE\x500\a\a\x2\x2\x4FF"+
		"\x4FE\x3\x2\x2\x2\x500\x503\x3\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x501\x502"+
		"\x3\x2\x2\x2\x502\x504\x3\x2\x2\x2\x503\x501\x3\x2\x2\x2\x504\x505\a\x4"+
		"\x2\x2\x505\x85\x3\x2\x2\x2\x506\x507\aw\x2\x2\x507\x87\x3\x2\x2\x2\x508"+
		"\x50A\x5\x8A\x46\x2\x509\x508\x3\x2\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x50B"+
		"\x3\x2\x2\x2\x50B\x50C\x5~@\x2\x50C\x50D\a\x2\x2\x3\x50D\x89\x3\x2\x2"+
		"\x2\x50E\x514\x5\x8CG\x2\x50F\x510\x5\x80\x41\x2\x510\x511\x5\x8CG\x2"+
		"\x511\x513\x3\x2\x2\x2\x512\x50F\x3\x2\x2\x2\x513\x516\x3\x2\x2\x2\x514"+
		"\x512\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x8B\x3\x2\x2\x2\x516\x514"+
		"\x3\x2\x2\x2\x517\x518\x5\xE4s\x2\x518\x519\x5\x80\x41\x2\x519\x51B\x3"+
		"\x2\x2\x2\x51A\x517\x3\x2\x2\x2\x51B\x51E\x3\x2\x2\x2\x51C\x51A\x3\x2"+
		"\x2\x2\x51C\x51D\x3\x2\x2\x2\x51D\x524\x3\x2\x2\x2\x51E\x51C\x3\x2\x2"+
		"\x2\x51F\x525\x5\n\x6\x2\x520\x525\x5\xAEX\x2\x521\x525\x5\x8EH\x2\x522"+
		"\x525\x5\x90I\x2\x523\x525\x5\xE2r\x2\x524\x51F\x3\x2\x2\x2\x524\x520"+
		"\x3\x2\x2\x2\x524\x521\x3\x2\x2\x2\x524\x522\x3\x2\x2\x2\x524\x523\x3"+
		"\x2\x2\x2\x525\x8D\x3\x2\x2\x2\x526\x527\x5 \x11\x2\x527\x8F\x3\x2\x2"+
		"\x2\x528\x52B\x5\x2\x2\x2\x529\x52B\x5\x4\x3\x2\x52A\x528\x3\x2\x2\x2"+
		"\x52A\x529\x3\x2\x2\x2\x52B\x91\x3\x2\x2\x2\x52C\x532\x5\x6\x4\x2\x52D"+
		"\x52E\x5\x80\x41\x2\x52E\x52F\x5\x6\x4\x2\x52F\x531\x3\x2\x2\x2\x530\x52D"+
		"\x3\x2\x2\x2\x531\x534\x3\x2\x2\x2\x532\x530\x3\x2\x2\x2\x532\x533\x3"+
		"\x2\x2\x2\x533\x93\x3\x2\x2\x2\x534\x532\x3\x2\x2\x2\x535\x53B\x5\b\x5"+
		"\x2\x536\x537\x5\x80\x41\x2\x537\x538\x5\b\x5\x2\x538\x53A\x3\x2\x2\x2"+
		"\x539\x536\x3\x2\x2\x2\x53A\x53D\x3\x2\x2\x2\x53B\x539\x3\x2\x2\x2\x53B"+
		"\x53C\x3\x2\x2\x2\x53C\x95\x3\x2\x2\x2\x53D\x53B\x3\x2\x2\x2\x53E\x543"+
		"\x5\xBC_\x2\x53F\x540\a\x13\x2\x2\x540\x542\x5\xBC_\x2\x541\x53F\x3\x2"+
		"\x2\x2\x542\x545\x3\x2\x2\x2\x543\x541\x3\x2\x2\x2\x543\x544\x3\x2\x2"+
		"\x2\x544\x97\x3\x2\x2\x2\x545\x543\x3\x2\x2\x2\x546\x547\am\x2\x2\x547"+
		"\x551\x5\x9AN\x2\x548\x549\am\x2\x2\x549\x551\x5\x9CO\x2\x54A\x54B\am"+
		"\x2\x2\x54B\x551\x5\xA0Q\x2\x54C\x54D\aq\x2\x2\x54D\x551\a\xA5\x2\x2\x54E"+
		"\x54F\aq\x2\x2\x54F\x551\x5Z.\x2\x550\x546\x3\x2\x2\x2\x550\x548\x3\x2"+
		"\x2\x2\x550\x54A\x3\x2\x2\x2\x550\x54C\x3\x2\x2\x2\x550\x54E\x3\x2\x2"+
		"\x2\x551\x99\x3\x2\x2\x2\x552\x554\au\x2\x2\x553\x552\x3\x2\x2\x2\x553"+
		"\x554\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x557\a\x18\x2\x2\x556\x558"+
		"\x5\x9EP\x2\x557\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x559\x3\x2"+
		"\x2\x2\x559\x55A\a\x19\x2\x2\x55A\x9B\x3\x2\x2\x2\x55B\x55D\au\x2\x2\x55C"+
		"\x55B\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560"+
		"\a*\x2\x2\x55F\x561\x5\x9EP\x2\x560\x55F\x3\x2\x2\x2\x560\x561\x3\x2\x2"+
		"\x2\x561\x562\x3\x2\x2\x2\x562\x563\a(\x2\x2\x563\x9D\x3\x2\x2\x2\x564"+
		"\x569\x5Z.\x2\x565\x566\a\x13\x2\x2\x566\x568\x5Z.\x2\x567\x565\x3\x2"+
		"\x2\x2\x568\x56B\x3\x2\x2\x2\x569\x567\x3\x2\x2\x2\x569\x56A\x3\x2\x2"+
		"\x2\x56A\x9F\x3\x2\x2\x2\x56B\x569\x3\x2\x2\x2\x56C\x56D\a\x18\x2\x2\x56D"+
		"\x56E\x5Z.\x2\x56E\x56F\a\x14\x2\x2\x56F\x570\x5Z.\x2\x570\x571\a\x19"+
		"\x2\x2\x571\xA1\x3\x2\x2\x2\x572\x573\bR\x1\x2\x573\x57F\x5\xA4S\x2\x574"+
		"\x575\a\x44\x2\x2\x575\x576\a*\x2\x2\x576\x577\x5\xA2R\x2\x577\x578\a"+
		"(\x2\x2\x578\x57F\x3\x2\x2\x2\x579\x57A\a\x43\x2\x2\x57A\x57B\a*\x2\x2"+
		"\x57B\x57C\x5\xA2R\x2\x57C\x57D\a(\x2\x2\x57D\x57F\x3\x2\x2\x2\x57E\x572"+
		"\x3\x2\x2\x2\x57E\x574\x3\x2\x2\x2\x57E\x579\x3\x2\x2\x2\x57F\x58A\x3"+
		"\x2\x2\x2\x580\x581\f\a\x2\x2\x581\x589\a,\x2\x2\x582\x583\f\x6\x2\x2"+
		"\x583\x584\a\x18\x2\x2\x584\x589\a\x19\x2\x2\x585\x586\f\x5\x2\x2\x586"+
		"\x587\a\x1A\x2\x2\x587\x589\a\x1B\x2\x2\x588\x580\x3\x2\x2\x2\x588\x582"+
		"\x3\x2\x2\x2\x588\x585\x3\x2\x2\x2\x589\x58C\x3\x2\x2\x2\x58A\x588\x3"+
		"\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\xA3\x3\x2\x2\x2\x58C\x58A\x3\x2\x2"+
		"\x2\x58D\x590\x5\xA6T\x2\x58E\x590\x5\xA8U\x2\x58F\x58D\x3\x2\x2\x2\x58F"+
		"\x58E\x3\x2\x2\x2\x590\xA5\x3\x2\x2\x2\x591\x5A0\a\x34\x2\x2\x592\x5A0"+
		"\a\x35\x2\x2\x593\x5A0\a\x36\x2\x2\x594\x5A0\a\x41\x2\x2\x595\x5A0\a\x37"+
		"\x2\x2\x596\x5A0\a\x38\x2\x2\x597\x5A0\a?\x2\x2\x598\x5A0\a\x39\x2\x2"+
		"\x599\x5A0\a;\x2\x2\x59A\x5A0\a:\x2\x2\x59B\x5A0\a<\x2\x2\x59C\x5A0\a"+
		">\x2\x2\x59D\x5A0\a@\x2\x2\x59E\x5A0\a\x42\x2\x2\x59F\x591\x3\x2\x2\x2"+
		"\x59F\x592\x3\x2\x2\x2\x59F\x593\x3\x2\x2\x2\x59F\x594\x3\x2\x2\x2\x59F"+
		"\x595\x3\x2\x2\x2\x59F\x596\x3\x2\x2\x2\x59F\x597\x3\x2\x2\x2\x59F\x598"+
		"\x3\x2\x2\x2\x59F\x599\x3\x2\x2\x2\x59F\x59A\x3\x2\x2\x2\x59F\x59B\x3"+
		"\x2\x2\x2\x59F\x59C\x3\x2\x2\x2\x59F\x59D\x3\x2\x2\x2\x59F\x59E\x3\x2"+
		"\x2\x2\x5A0\xA7\x3\x2\x2\x2\x5A1\x5A2\a\xA1\x2\x2\x5A2\xA9\x3\x2\x2\x2"+
		"\x5A3\x5A5\au\x2\x2\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A6"+
		"\x3\x2\x2\x2\x5A6\x5A7\x5\xA8U\x2\x5A7\xAB\x3\x2\x2\x2\x5A8\x5A9\a>\x2"+
		"\x2\x5A9\xAD\x3\x2\x2\x2\x5AA\x5AE\x5\xE\b\x2\x5AB\x5AE\x5\x1E\x10\x2"+
		"\x5AC\x5AE\x5\x10\t\x2\x5AD\x5AA\x3\x2\x2\x2\x5AD\x5AB\x3\x2\x2\x2\x5AD"+
		"\x5AC\x3\x2\x2\x2\x5AE\xAF\x3\x2\x2\x2\x5AF\x5B4\x5\xBA^\x2\x5B0\x5B1"+
		"\a\x13\x2\x2\x5B1\x5B3\x5\xBA^\x2\x5B2\x5B0\x3\x2\x2\x2\x5B3\x5B6\x3\x2"+
		"\x2\x2\x5B4\x5B2\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\xB1\x3\x2\x2\x2"+
		"\x5B6\x5B4\x3\x2\x2\x2\x5B7\x5BA\x5\xB6\\\x2\x5B8\x5BA\x5\xBA^\x2\x5B9"+
		"\x5B7\x3\x2\x2\x2\x5B9\x5B8\x3\x2\x2\x2\x5BA\xB3\x3\x2\x2\x2\x5BB\x5BF"+
		"\x5\xB6\\\x2\x5BC\x5BF\x5\xBA^\x2\x5BD\x5BF\x5\xBC_\x2\x5BE\x5BB\x3\x2"+
		"\x2\x2\x5BE\x5BC\x3\x2\x2\x2\x5BE\x5BD\x3\x2\x2\x2\x5BF\xB5\x3\x2\x2\x2"+
		"\x5C0\x5C1\a\xA2\x2\x2\x5C1\xB7\x3\x2\x2\x2\x5C2\x5C3\t\x4\x2\x2\x5C3"+
		"\xB9\x3\x2\x2\x2\x5C4\x5C5\a\xA1\x2\x2\x5C5\xBB\x3\x2\x2\x2\x5C6\x5C7"+
		"\a\xA0\x2\x2\x5C7\xBD\x3\x2\x2\x2\x5C8\x5CD\x5\xC0\x61\x2\x5C9\x5CA\a"+
		"\x13\x2\x2\x5CA\x5CC\x5\xC0\x61\x2\x5CB\x5C9\x3\x2\x2\x2\x5CC\x5CF\x3"+
		"\x2\x2\x2\x5CD\x5CB\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\xBF\x3\x2\x2"+
		"\x2\x5CF\x5CD\x3\x2\x2\x2\x5D0\x5D6\x5\xC6\x64\x2\x5D1\x5D3\au\x2\x2\x5D2"+
		"\x5D1\x3\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D6"+
		"\x5\xC2\x62\x2\x5D5\x5D0\x3\x2\x2\x2\x5D5\x5D2\x3\x2\x2\x2\x5D6\xC1\x3"+
		"\x2\x2\x2\x5D7\x5DA\x5\xC4\x63\x2\x5D8\x5DA\x5\x30\x19\x2\x5D9\x5D7\x3"+
		"\x2\x2\x2\x5D9\x5D8\x3\x2\x2\x2\x5DA\xC3\x3\x2\x2\x2\x5DB\x5DE\x5\xB6"+
		"\\\x2\x5DC\x5DD\a-\x2\x2\x5DD\x5DF\x5\x102\x82\x2\x5DE\x5DC\x3\x2\x2\x2"+
		"\x5DE\x5DF\x3\x2\x2\x2\x5DF\xC5\x3\x2\x2\x2\x5E0\x5E1\x5\xACW\x2\x5E1"+
		"\x5E2\x5\xB6\\\x2\x5E2\xC7\x3\x2\x2\x2\x5E3\x5E6\x5\xA2R\x2\x5E4\x5E6"+
		"\x5\xCA\x66\x2\x5E5\x5E3\x3\x2\x2\x2\x5E5\x5E4\x3\x2\x2\x2\x5E6\xC9\x3"+
		"\x2\x2\x2\x5E7\x5E8\b\x66\x1\x2\x5E8\x5E9\aI\x2\x2\x5E9\x5F2\x3\x2\x2"+
		"\x2\x5EA\x5EB\f\x4\x2\x2\x5EB\x5EC\a\x18\x2\x2\x5EC\x5F1\a\x19\x2\x2\x5ED"+
		"\x5EE\f\x3\x2\x2\x5EE\x5EF\a\x1A\x2\x2\x5EF\x5F1\a\x1B\x2\x2\x5F0\x5EA"+
		"\x3\x2\x2\x2\x5F0\x5ED\x3\x2\x2\x2\x5F1\x5F4\x3\x2\x2\x2\x5F2\x5F0\x3"+
		"\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\xCB\x3\x2\x2\x2\x5F4\x5F2\x3\x2\x2"+
		"\x2\x5F5\x5FB\x5\xCEh\x2\x5F6\x5F7\x5\x80\x41\x2\x5F7\x5F8\x5\xCEh\x2"+
		"\x5F8\x5FA\x3\x2\x2\x2\x5F9\x5F6\x3\x2\x2\x2\x5FA\x5FD\x3\x2\x2\x2\x5FB"+
		"\x5F9\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\xCD\x3\x2\x2\x2\x5FD\x5FB"+
		"\x3\x2\x2\x2\x5FE\x604\x5\x16\f\x2\x5FF\x604\x5\x1A\xE\x2\x600\x604\x5"+
		"(\x15\x2\x601\x604\x5&\x14\x2\x602\x604\x5\x14\v\x2\x603\x5FE\x3\x2\x2"+
		"\x2\x603\x5FF\x3\x2\x2\x2\x603\x600\x3\x2\x2\x2\x603\x601\x3\x2\x2\x2"+
		"\x603\x602\x3\x2\x2\x2\x604\xCF\x3\x2\x2\x2\x605\x60B\x5\xD2j\x2\x606"+
		"\x607\x5\x80\x41\x2\x607\x608\x5\xD2j\x2\x608\x60A\x3\x2\x2\x2\x609\x606"+
		"\x3\x2\x2\x2\x60A\x60D\x3\x2\x2\x2\x60B\x609\x3\x2\x2\x2\x60B\x60C\x3"+
		"\x2\x2\x2\x60C\xD1\x3\x2\x2\x2\x60D\x60B\x3\x2\x2\x2\x60E\x612\x5\x1C"+
		"\xF\x2\x60F\x612\x5\x18\r\x2\x610\x612\x5*\x16\x2\x611\x60E\x3\x2\x2\x2"+
		"\x611\x60F\x3\x2\x2\x2\x611\x610\x3\x2\x2\x2\x612\xD3\x3\x2\x2\x2\x613"+
		"\x614\a\v\x2\x2\x614\x61E\x5\x17A\xBE\x2\x615\x616\a\f\x2\x2\x616\x61E"+
		"\x5\x194\xCB\x2\x617\x618\a\r\x2\x2\x618\x61E\x5\xD6l\x2\x619\x61A\a\xE"+
		"\x2\x2\x61A\x61E\x5\xD6l\x2\x61B\x61C\a\xF\x2\x2\x61C\x61E\x5\xDAn\x2"+
		"\x61D\x613\x3\x2\x2\x2\x61D\x615\x3\x2\x2\x2\x61D\x617\x3\x2\x2\x2\x61D"+
		"\x619\x3\x2\x2\x2\x61D\x61B\x3\x2\x2\x2\x61E\xD5\x3\x2\x2\x2\x61F\x621"+
		"\x5\xB4[\x2\x620\x622\x5\xD8m\x2\x621\x620\x3\x2\x2\x2\x621\x622\x3\x2"+
		"\x2\x2\x622\xD7\x3\x2\x2\x2\x623\x624\aj\x2\x2\x624\x625\x5\x122\x92\x2"+
		"\x625\x626\a\x11\x2\x2\x626\x62B\x5\xB4[\x2\x627\x628\a\x15\x2\x2\x628"+
		"\x62A\x5\xB4[\x2\x629\x627\x3\x2\x2\x2\x62A\x62D\x3\x2\x2\x2\x62B\x629"+
		"\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\xD9\x3\x2\x2\x2\x62D\x62B\x3\x2"+
		"\x2\x2\x62E\x630\x5\xB4[\x2\x62F\x631\x5\xDCo\x2\x630\x62F\x3\x2\x2\x2"+
		"\x630\x631\x3\x2\x2\x2\x631\xDB\x3\x2\x2\x2\x632\x633\aj\x2\x2\x633\x634"+
		"\x5\x122\x92\x2\x634\x636\a\x11\x2\x2\x635\x637\a%\x2\x2\x636\x635\x3"+
		"\x2\x2\x2\x636\x637\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638\x63D\x5\x14A"+
		"\xA6\x2\x639\x63A\a%\x2\x2\x63A\x63C\x5\x14A\xA6\x2\x63B\x639\x3\x2\x2"+
		"\x2\x63C\x63F\x3\x2\x2\x2\x63D\x63B\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2"+
		"\x63E\x642\x3\x2\x2\x2\x63F\x63D\x3\x2\x2\x2\x640\x641\a\x15\x2\x2\x641"+
		"\x643\x5\x14A\xA6\x2\x642\x640\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643"+
		"\xDD\x3\x2\x2\x2\x644\x649\x5\xB6\\\x2\x645\x646\a\x13\x2\x2\x646\x648"+
		"\x5\xB6\\\x2\x647\x645\x3\x2\x2\x2\x648\x64B\x3\x2\x2\x2\x649\x647\x3"+
		"\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\xDF\x3\x2\x2\x2\x64B\x649\x3\x2\x2"+
		"\x2\x64C\x651\x5\xB8]\x2\x64D\x64E\a\x13\x2\x2\x64E\x650\x5\xB8]\x2\x64F"+
		"\x64D\x3\x2\x2\x2\x650\x653\x3\x2\x2\x2\x651\x64F\x3\x2\x2\x2\x651\x652"+
		"\x3\x2\x2\x2\x652\xE1\x3\x2\x2\x2\x653\x651\x3\x2\x2\x2\x654\x659\x5&"+
		"\x14\x2\x655\x659\x5(\x15\x2\x656\x659\x5*\x16\x2\x657\x659\x5,\x17\x2"+
		"\x658\x654\x3\x2\x2\x2\x658\x655\x3\x2\x2\x2\x658\x656\x3\x2\x2\x2\x658"+
		"\x657\x3\x2\x2\x2\x659\xE3\x3\x2\x2\x2\x65A\x65B\a\n\x2\x2\x65B\xE5\x3"+
		"\x2\x2\x2\x65C\x662\x5\xE8u\x2\x65D\x65E\x5\x80\x41\x2\x65E\x65F\x5\xE8"+
		"u\x2\x65F\x661\x3\x2\x2\x2\x660\x65D\x3\x2\x2\x2\x661\x664\x3\x2\x2\x2"+
		"\x662\x660\x3\x2\x2\x2\x662\x663\x3\x2\x2\x2\x663\xE7\x3\x2\x2\x2\x664"+
		"\x662\x3\x2\x2\x2\x665\x666\a\v\x2\x2\x666\x670\x5\x164\xB3\x2\x667\x668"+
		"\a\f\x2\x2\x668\x670\x5\x180\xC1\x2\x669\x66A\a\r\x2\x2\x66A\x670\x5\xEA"+
		"v\x2\x66B\x66C\a\xE\x2\x2\x66C\x670\x5\xEAv\x2\x66D\x66E\a\xF\x2\x2\x66E"+
		"\x670\x5\xECw\x2\x66F\x665\x3\x2\x2\x2\x66F\x667\x3\x2\x2\x2\x66F\x669"+
		"\x3\x2\x2\x2\x66F\x66B\x3\x2\x2\x2\x66F\x66D\x3\x2\x2\x2\x670\xE9\x3\x2"+
		"\x2\x2\x671\x673\x5\x14C\xA7\x2\x672\x674\a\x12\x2\x2\x673\x672\x3\x2"+
		"\x2\x2\x673\x674\x3\x2\x2\x2\x674\x676\x3\x2\x2\x2\x675\x677\x5\xD8m\x2"+
		"\x676\x675\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\xEB\x3\x2\x2\x2\x678"+
		"\x67A\x5\x132\x9A\x2\x679\x67B\a\x12\x2\x2\x67A\x679\x3\x2\x2\x2\x67A"+
		"\x67B\x3\x2\x2\x2\x67B\x67D\x3\x2\x2\x2\x67C\x67E\x5\xDCo\x2\x67D\x67C"+
		"\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\xED\x3\x2\x2\x2\x67F\x685\x5\x32"+
		"\x1A\x2\x680\x681\x5\x80\x41\x2\x681\x682\x5\x32\x1A\x2\x682\x684\x3\x2"+
		"\x2\x2\x683\x680\x3\x2\x2\x2\x684\x687\x3\x2\x2\x2\x685\x683\x3\x2\x2"+
		"\x2\x685\x686\x3\x2\x2\x2\x686\xEF\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x688"+
		"\x68E\x5.\x18\x2\x689\x68A\x5\x80\x41\x2\x68A\x68B\x5.\x18\x2\x68B\x68D"+
		"\x3\x2\x2\x2\x68C\x689\x3\x2\x2\x2\x68D\x690\x3\x2\x2\x2\x68E\x68C\x3"+
		"\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\xF1\x3\x2\x2\x2\x690\x68E\x3\x2\x2"+
		"\x2\x691\x697\x5\x46$\x2\x692\x693\x5\x80\x41\x2\x693\x694\x5\x46$\x2"+
		"\x694\x696\x3\x2\x2\x2\x695\x692\x3\x2\x2\x2\x696\x699\x3\x2\x2\x2\x697"+
		"\x695\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\xF3\x3\x2\x2\x2\x699\x697"+
		"\x3\x2\x2\x2\x69A\x6A0\x5V,\x2\x69B\x69C\x5\x80\x41\x2\x69C\x69D\x5V,"+
		"\x2\x69D\x69F\x3\x2\x2\x2\x69E\x69B\x3\x2\x2\x2\x69F\x6A2\x3\x2\x2\x2"+
		"\x6A0\x69E\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\xF5\x3\x2\x2\x2\x6A2"+
		"\x6A0\x3\x2\x2\x2\x6A3\x6A4\a\x18\x2\x2\x6A4\x6A5\x5\xF8}\x2\x6A5\x6A6"+
		"\a\x14\x2\x2\x6A6\x6A7\x5\xF8}\x2\x6A7\x6A8\a\x19\x2\x2\x6A8\x6B2\x3\x2"+
		"\x2\x2\x6A9\x6AA\a\x18\x2\x2\x6AA\x6AB\x5\xFA~\x2\x6AB\x6AC\a\x19\x2\x2"+
		"\x6AC\x6B2\x3\x2\x2\x2\x6AD\x6AE\a*\x2\x2\x6AE\x6AF\x5\xFA~\x2\x6AF\x6B0"+
		"\a(\x2\x2\x6B0\x6B2\x3\x2\x2\x2\x6B1\x6A3\x3\x2\x2\x2\x6B1\x6A9\x3\x2"+
		"\x2\x2\x6B1\x6AD\x3\x2\x2\x2\x6B2\xF7\x3\x2\x2\x2\x6B3\x6C1\a\x9E\x2\x2"+
		"\x6B4\x6C1\a\x9F\x2\x2\x6B5\x6C1\a\xA6\x2\x2\x6B6\x6C1\a\xA7\x2\x2\x6B7"+
		"\x6C1\a\x9D\x2\x2\x6B8\x6C1\a\xAB\x2\x2\x6B9\x6C1\a\xAA\x2\x2\x6BA\x6C1"+
		"\a\xA5\x2\x2\x6BB\x6C1\a\xA8\x2\x2\x6BC\x6C1\a\xA9\x2\x2\x6BD\x6C1\a\x9C"+
		"\x2\x2\x6BE\x6C1\a\xAC\x2\x2\x6BF\x6C1\x5\x86\x44\x2\x6C0\x6B3\x3\x2\x2"+
		"\x2\x6C0\x6B4\x3\x2\x2\x2\x6C0\x6B5\x3\x2\x2\x2\x6C0\x6B6\x3\x2\x2\x2"+
		"\x6C0\x6B7\x3\x2\x2\x2\x6C0\x6B8\x3\x2\x2\x2\x6C0\x6B9\x3\x2\x2\x2\x6C0"+
		"\x6BA\x3\x2\x2\x2\x6C0\x6BB\x3\x2\x2\x2\x6C0\x6BC\x3\x2\x2\x2\x6C0\x6BD"+
		"\x3\x2\x2\x2\x6C0\x6BE\x3\x2\x2\x2\x6C0\x6BF\x3\x2\x2\x2\x6C1\xF9\x3\x2"+
		"\x2\x2\x6C2\x6C7\x5\xF8}\x2\x6C3\x6C4\a\x13\x2\x2\x6C4\x6C6\x5\xF8}\x2"+
		"\x6C5\x6C3\x3\x2\x2\x2\x6C6\x6C9\x3\x2\x2\x2\x6C7\x6C5\x3\x2\x2\x2\x6C7"+
		"\x6C8\x3\x2\x2\x2\x6C8\xFB\x3\x2\x2\x2\x6C9\x6C7\x3\x2\x2\x2\x6CA\x6CF"+
		"\x5\x100\x81\x2\x6CB\x6CF\x5\x102\x82\x2\x6CC\x6CF\x5\xB4[\x2\x6CD\x6CF"+
		"\x5\xFE\x80\x2\x6CE\x6CA\x3\x2\x2\x2\x6CE\x6CB\x3\x2\x2\x2\x6CE\x6CC\x3"+
		"\x2\x2\x2\x6CE\x6CD\x3\x2\x2\x2\x6CF\xFD\x3\x2\x2\x2\x6D0\x6D1\t\x5\x2"+
		"\x2\x6D1\xFF\x3\x2\x2\x2\x6D2\x6D3\a\x16\x2\x2\x6D3\x6D4\x5Z.\x2\x6D4"+
		"\x6D5\a\x17\x2\x2\x6D5\x101\x3\x2\x2\x2\x6D6\x6D9\x5\xF8}\x2\x6D7\x6D9"+
		"\x5\x104\x83\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D7\x3\x2\x2\x2\x6D9\x103"+
		"\x3\x2\x2\x2\x6DA\x6E0\x5\xA0Q\x2\x6DB\x6E0\x5\x9AN\x2\x6DC\x6E0\x5\x9C"+
		"O\x2\x6DD\x6E0\x5\x108\x85\x2\x6DE\x6E0\x5\x106\x84\x2\x6DF\x6DA\x3\x2"+
		"\x2\x2\x6DF\x6DB\x3\x2\x2\x2\x6DF\x6DC\x3\x2\x2\x2\x6DF\x6DD\x3\x2\x2"+
		"\x2\x6DF\x6DE\x3\x2\x2\x2\x6E0\x105\x3\x2\x2\x2\x6E1\x6E3\au\x2\x2\x6E2"+
		"\x6E1\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E6"+
		"\a\x16\x2\x2\x6E5\x6E7\x5\x10A\x86\x2\x6E6\x6E5\x3\x2\x2\x2\x6E6\x6E7"+
		"\x3\x2\x2\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8\x6E9\a\x17\x2\x2\x6E9\x107\x3"+
		"\x2\x2\x2\x6EA\x6EC\au\x2\x2\x6EB\x6EA\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2"+
		"\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED\x6EF\a\x1A\x2\x2\x6EE\x6F0\x5\x10C\x87"+
		"\x2\x6EF\x6EE\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2"+
		"\x6F1\x6F2\a\x1B\x2\x2\x6F2\x109\x3\x2\x2\x2\x6F3\x6F4\x5Z.\x2\x6F4\x6FD"+
		"\a\x13\x2\x2\x6F5\x6FA\x5Z.\x2\x6F6\x6F7\a\x13\x2\x2\x6F7\x6F9\x5Z.\x2"+
		"\x6F8\x6F6\x3\x2\x2\x2\x6F9\x6FC\x3\x2\x2\x2\x6FA\x6F8\x3\x2\x2\x2\x6FA"+
		"\x6FB\x3\x2\x2\x2\x6FB\x6FE\x3\x2\x2\x2\x6FC\x6FA\x3\x2\x2\x2\x6FD\x6F5"+
		"\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2\x6FE\x10B\x3\x2\x2\x2\x6FF\x704\x5"+
		"\x10E\x88\x2\x700\x701\a\x13\x2\x2\x701\x703\x5\x10E\x88\x2\x702\x700"+
		"\x3\x2\x2\x2\x703\x706\x3\x2\x2\x2\x704\x702\x3\x2\x2\x2\x704\x705\x3"+
		"\x2\x2\x2\x705\x10D\x3\x2\x2\x2\x706\x704\x3\x2\x2\x2\x707\x708\x5Z.\x2"+
		"\x708\x709\a\x11\x2\x2\x709\x70A\x5Z.\x2\x70A\x10F\x3\x2\x2\x2\x70B\x70C"+
		"\x5Z.\x2\x70C\x70D\a\x11\x2\x2\x70D\x70E\x5Z.\x2\x70E\x715\x3\x2\x2\x2"+
		"\x70F\x710\x5Z.\x2\x710\x711\a\x11\x2\x2\x711\x715\x3\x2\x2\x2\x712\x713"+
		"\a\x11\x2\x2\x713\x715\x5Z.\x2\x714\x70B\x3\x2\x2\x2\x714\x70F\x3\x2\x2"+
		"\x2\x714\x712\x3\x2\x2\x2\x715\x111\x3\x2\x2\x2\x716\x717\x5\xB6\\\x2"+
		"\x717\x718\x5\x128\x95\x2\x718\x719\x5Z.\x2\x719\x113\x3\x2\x2\x2\x71A"+
		"\x71B\b\x8B\x1\x2\x71B\x71C\x5\xB6\\\x2\x71C\x721\x3\x2\x2\x2\x71D\x71E"+
		"\f\x3\x2\x2\x71E\x720\x5z>\x2\x71F\x71D\x3\x2\x2\x2\x720\x723\x3\x2\x2"+
		"\x2\x721\x71F\x3\x2\x2\x2\x721\x722\x3\x2\x2\x2\x722\x115\x3\x2\x2\x2"+
		"\x723\x721\x3\x2\x2\x2\x724\x725\x6\x8C.\x3\x725\x726\a\xA2\x2\x2\x726"+
		"\x729\x5\xC8\x65\x2\x727\x729\x5Z.\x2\x728\x724\x3\x2\x2\x2\x728\x727"+
		"\x3\x2\x2\x2\x729\x117\x3\x2\x2\x2\x72A\x72F\x5\x11A\x8E\x2\x72B\x72C"+
		"\a\x13\x2\x2\x72C\x72E\x5\x11A\x8E\x2\x72D\x72B\x3\x2\x2\x2\x72E\x731"+
		"\x3\x2\x2\x2\x72F\x72D\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x119\x3"+
		"\x2\x2\x2\x731\x72F\x3\x2\x2\x2\x732\x737\x5\xB6\\\x2\x733\x734\a\x15"+
		"\x2\x2\x734\x736\x5\xB6\\\x2\x735\x733\x3\x2\x2\x2\x736\x739\x3\x2\x2"+
		"\x2\x737\x735\x3\x2\x2\x2\x737\x738\x3\x2\x2\x2\x738\x73B\x3\x2\x2\x2"+
		"\x739\x737\x3\x2\x2\x2\x73A\x73C\t\x6\x2\x2\x73B\x73A\x3\x2\x2\x2\x73B"+
		"\x73C\x3\x2\x2\x2\x73C\x11B\x3\x2\x2\x2\x73D\x744\a\"\x2\x2\x73E\x744"+
		"\a#\x2\x2\x73F\x744\x5\x12A\x96\x2\x740\x744\x5\x12C\x97\x2\x741\x744"+
		"\x5\x12E\x98\x2\x742\x744\x5\x130\x99\x2\x743\x73D\x3\x2\x2\x2\x743\x73E"+
		"\x3\x2\x2\x2\x743\x73F\x3\x2\x2\x2\x743\x740\x3\x2\x2\x2\x743\x741\x3"+
		"\x2\x2\x2\x743\x742\x3\x2\x2\x2\x744\x11D\x3\x2\x2\x2\x745\x746\a\xA2"+
		"\x2\x2\x746\x747\x6\x90/\x3\x747\x11F\x3\x2\x2\x2\x748\x749\a\xA2\x2\x2"+
		"\x749\x74A\x6\x91\x30\x3\x74A\x121\x3\x2\x2\x2\x74B\x74C\a\xA2\x2\x2\x74C"+
		"\x74D\x6\x92\x31\x3\x74D\x123\x3\x2\x2\x2\x74E\x74F\a\xA2\x2\x2\x74F\x750"+
		"\x6\x93\x32\x3\x750\x125\x3\x2\x2\x2\x751\x752\a\xA2\x2\x2\x752\x753\x6"+
		"\x94\x33\x3\x753\x127\x3\x2\x2\x2\x754\x755\a-\x2\x2\x755\x129\x3\x2\x2"+
		"\x2\x756\x757\a$\x2\x2\x757\x12B\x3\x2\x2\x2\x758\x759\a%\x2\x2\x759\x12D"+
		"\x3\x2\x2\x2\x75A\x75B\a&\x2\x2\x75B\x12F\x3\x2\x2\x2\x75C\x75D\t\a\x2"+
		"\x2\x75D\x131\x3\x2\x2\x2\x75E\x75F\a\x87\x2\x2\x75F\x760\x5\x134\x9B"+
		"\x2\x760\x761\a\x12\x2\x2\x761\x766\x3\x2\x2\x2\x762\x763\x5\x134\x9B"+
		"\x2\x763\x764\a\x12\x2\x2\x764\x766\x3\x2\x2\x2\x765\x75E\x3\x2\x2\x2"+
		"\x765\x762\x3\x2\x2\x2\x766\x133\x3\x2\x2\x2\x767\x768\b\x9B\x1\x2\x768"+
		"\x769\x5\x136\x9C\x2\x769\x76E\x3\x2\x2\x2\x76A\x76B\f\x3\x2\x2\x76B\x76D"+
		"\x5\x13C\x9F\x2\x76C\x76A\x3\x2\x2\x2\x76D\x770\x3\x2\x2\x2\x76E\x76C"+
		"\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x135\x3\x2\x2\x2\x770\x76E\x3"+
		"\x2\x2\x2\x771\x779\x5\x138\x9D\x2\x772\x779\x5\x13A\x9E\x2\x773\x779"+
		"\x5\x144\xA3\x2\x774\x779\x5\x146\xA4\x2\x775\x779\x5\x148\xA5\x2\x776"+
		"\x779\x5\x13E\xA0\x2\x777\x779\x5\x142\xA2\x2\x778\x771\x3\x2\x2\x2\x778"+
		"\x772\x3\x2\x2\x2\x778\x773\x3\x2\x2\x2\x778\x774\x3\x2\x2\x2\x778\x775"+
		"\x3\x2\x2\x2\x778\x776\x3\x2\x2\x2\x778\x777\x3\x2\x2\x2\x779\x137\x3"+
		"\x2\x2\x2\x77A\x77B\x5\xFE\x80\x2\x77B\x139\x3\x2\x2\x2\x77C\x77D\x5\x11E"+
		"\x90\x2\x77D\x77E\x5\x13E\xA0\x2\x77E\x13B\x3\x2\x2\x2\x77F\x780\a\x15"+
		"\x2\x2\x780\x785\x5\x13E\xA0\x2\x781\x782\a\x15\x2\x2\x782\x785\x5\x14A"+
		"\xA6\x2\x783\x785\x5\x142\xA2\x2\x784\x77F\x3\x2\x2\x2\x784\x781\x3\x2"+
		"\x2\x2\x784\x783\x3\x2\x2\x2\x785\x13D\x3\x2\x2\x2\x786\x787\x5\x14A\xA6"+
		"\x2\x787\x789\a\x16\x2\x2\x788\x78A\x5\x140\xA1\x2\x789\x788\x3\x2\x2"+
		"\x2\x789\x78A\x3\x2\x2\x2\x78A\x78B\x3\x2\x2\x2\x78B\x78C\a\x17\x2\x2"+
		"\x78C\x13F\x3\x2\x2\x2\x78D\x78E\b\xA1\x1\x2\x78E\x78F\x5\x134\x9B\x2"+
		"\x78F\x795\x3\x2\x2\x2\x790\x791\f\x3\x2\x2\x791\x792\a\x13\x2\x2\x792"+
		"\x794\x5\x134\x9B\x2\x793\x790\x3\x2\x2\x2\x794\x797\x3\x2\x2\x2\x795"+
		"\x793\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x141\x3\x2\x2\x2\x797\x795"+
		"\x3\x2\x2\x2\x798\x799\a\x18\x2\x2\x799\x79A\x5\x134\x9B\x2\x79A\x79B"+
		"\a\x19\x2\x2\x79B\x143\x3\x2\x2\x2\x79C\x79D\a\x16\x2\x2\x79D\x79E\x5"+
		"\x134\x9B\x2\x79E\x79F\a\x17\x2\x2\x79F\x145\x3\x2\x2\x2\x7A0\x7A1\x5"+
		"\x14A\xA6\x2\x7A1\x147\x3\x2\x2\x2\x7A2\x7A8\a\xA6\x2\x2\x7A3\x7A8\a\xA8"+
		"\x2\x2\x7A4\x7A8\a\xA5\x2\x2\x7A5\x7A8\a\x9C\x2\x2\x7A6\x7A8\a\x9D\x2"+
		"\x2\x7A7\x7A2\x3\x2\x2\x2\x7A7\x7A3\x3\x2\x2\x2\x7A7\x7A4\x3\x2\x2\x2"+
		"\x7A7\x7A5\x3\x2\x2\x2\x7A7\x7A6\x3\x2\x2\x2\x7A8\x149\x3\x2\x2\x2\x7A9"+
		"\x7AA\t\b\x2\x2\x7AA\x14B\x3\x2\x2\x2\x7AB\x7AC\a\x87\x2\x2\x7AC\x7AF"+
		"\x5\x14E\xA8\x2\x7AD\x7AF\x5\x14E\xA8\x2\x7AE\x7AB\x3\x2\x2\x2\x7AE\x7AD"+
		"\x3\x2\x2\x2\x7AF\x14D\x3\x2\x2\x2\x7B0\x7B1\b\xA8\x1\x2\x7B1\x7B2\x5"+
		"\x150\xA9\x2\x7B2\x7B7\x3\x2\x2\x2\x7B3\x7B4\f\x3\x2\x2\x7B4\x7B6\x5\x152"+
		"\xAA\x2\x7B5\x7B3\x3\x2\x2\x2\x7B6\x7B9\x3\x2\x2\x2\x7B7\x7B5\x3\x2\x2"+
		"\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x14F\x3\x2\x2\x2\x7B9\x7B7\x3\x2\x2\x2"+
		"\x7BA\x7BF\x5\x15C\xAF\x2\x7BB\x7BF\x5\x15E\xB0\x2\x7BC\x7BF\x5\x160\xB1"+
		"\x2\x7BD\x7BF\x5\x154\xAB\x2\x7BE\x7BA\x3\x2\x2\x2\x7BE\x7BB\x3\x2\x2"+
		"\x2\x7BE\x7BC\x3\x2\x2\x2\x7BE\x7BD\x3\x2\x2\x2\x7BF\x151\x3\x2\x2\x2"+
		"\x7C0\x7C1\a\x15\x2\x2\x7C1\x7C7\x5\x154\xAB\x2\x7C2\x7C3\a\x18\x2\x2"+
		"\x7C3\x7C4\x5\x14E\xA8\x2\x7C4\x7C5\a\x19\x2\x2\x7C5\x7C7\x3\x2\x2\x2"+
		"\x7C6\x7C0\x3\x2\x2\x2\x7C6\x7C2\x3\x2\x2\x2\x7C7\x153\x3\x2\x2\x2\x7C8"+
		"\x7C9\x5\x162\xB2\x2\x7C9\x7CB\a\x16\x2\x2\x7CA\x7CC\x5\x156\xAC\x2\x7CB"+
		"\x7CA\x3\x2\x2\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7CE"+
		"\a\x17\x2\x2\x7CE\x155\x3\x2\x2\x2\x7CF\x7D6\x5\x158\xAD\x2\x7D0\x7D6"+
		"\x5\x15A\xAE\x2\x7D1\x7D2\x5\x158\xAD\x2\x7D2\x7D3\a\x13\x2\x2\x7D3\x7D4"+
		"\x5\x15A\xAE\x2\x7D4\x7D6\x3\x2\x2\x2\x7D5\x7CF\x3\x2\x2\x2\x7D5\x7D0"+
		"\x3\x2\x2\x2\x7D5\x7D1\x3\x2\x2\x2\x7D6\x157\x3\x2\x2\x2\x7D7\x7D8\b\xAD"+
		"\x1\x2\x7D8\x7D9\x5\x14E\xA8\x2\x7D9\x7DF\x3\x2\x2\x2\x7DA\x7DB\f\x3\x2"+
		"\x2\x7DB\x7DC\a\x13\x2\x2\x7DC\x7DE\x5\x14E\xA8\x2\x7DD\x7DA\x3\x2\x2"+
		"\x2\x7DE\x7E1\x3\x2\x2\x2\x7DF\x7DD\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2"+
		"\x7E0\x159\x3\x2\x2\x2\x7E1\x7DF\x3\x2\x2\x2\x7E2\x7E3\b\xAE\x1\x2\x7E3"+
		"\x7E4\x5\x162\xB2\x2\x7E4\x7E5\a-\x2\x2\x7E5\x7E6\x5\x14E\xA8\x2\x7E6"+
		"\x7EF\x3\x2\x2\x2\x7E7\x7E8\f\x3\x2\x2\x7E8\x7E9\a\x13\x2\x2\x7E9\x7EA"+
		"\x5\x162\xB2\x2\x7EA\x7EB\a-\x2\x2\x7EB\x7EC\x5\x14E\xA8\x2\x7EC\x7EE"+
		"\x3\x2\x2\x2\x7ED\x7E7\x3\x2\x2\x2\x7EE\x7F1\x3\x2\x2\x2\x7EF\x7ED\x3"+
		"\x2\x2\x2\x7EF\x7F0\x3\x2\x2\x2\x7F0\x15B\x3\x2\x2\x2\x7F1\x7EF\x3\x2"+
		"\x2\x2\x7F2\x7F3\a\x16\x2\x2\x7F3\x7F4\x5\x14E\xA8\x2\x7F4\x7F5\a\x17"+
		"\x2\x2\x7F5\x15D\x3\x2\x2\x2\x7F6\x7F7\b\xB0\x1\x2\x7F7\x7FA\a\xA4\x2"+
		"\x2\x7F8\x7FA\x5\x162\xB2\x2\x7F9\x7F6\x3\x2\x2\x2\x7F9\x7F8\x3\x2\x2"+
		"\x2\x7FA\x800\x3\x2\x2\x2\x7FB\x7FC\f\x3\x2\x2\x7FC\x7FD\a\x15\x2\x2\x7FD"+
		"\x7FF\x5\x162\xB2\x2\x7FE\x7FB\x3\x2\x2\x2\x7FF\x802\x3\x2\x2\x2\x800"+
		"\x7FE\x3\x2\x2\x2\x800\x801\x3\x2\x2\x2\x801\x15F\x3\x2\x2\x2\x802\x800"+
		"\x3\x2\x2\x2\x803\x809\a\xA6\x2\x2\x804\x809\a\xA8\x2\x2\x805\x809\a\xA5"+
		"\x2\x2\x806\x809\a\x9C\x2\x2\x807\x809\a\x9D\x2\x2\x808\x803\x3\x2\x2"+
		"\x2\x808\x804\x3\x2\x2\x2\x808\x805\x3\x2\x2\x2\x808\x806\x3\x2\x2\x2"+
		"\x808\x807\x3\x2\x2\x2\x809\x161\x3\x2\x2\x2\x80A\x80B\t\t\x2\x2\x80B"+
		"\x163\x3\x2\x2\x2\x80C\x80D\a\x87\x2\x2\x80D\x80E\x5\x166\xB4\x2\x80E"+
		"\x80F\a\x12\x2\x2\x80F\x814\x3\x2\x2\x2\x810\x811\x5\x166\xB4\x2\x811"+
		"\x812\a\x12\x2\x2\x812\x814\x3\x2\x2\x2\x813\x80C\x3\x2\x2\x2\x813\x810"+
		"\x3\x2\x2\x2\x814\x165\x3\x2\x2\x2\x815\x816\b\xB4\x1\x2\x816\x817\x5"+
		"\x168\xB5\x2\x817\x81C\x3\x2\x2\x2\x818\x819\f\x3\x2\x2\x819\x81B\x5\x16E"+
		"\xB8\x2\x81A\x818\x3\x2\x2\x2\x81B\x81E\x3\x2\x2\x2\x81C\x81A\x3\x2\x2"+
		"\x2\x81C\x81D\x3\x2\x2\x2\x81D\x167\x3\x2\x2\x2\x81E\x81C\x3\x2\x2\x2"+
		"\x81F\x825\x5\x16A\xB6\x2\x820\x825\x5\x16C\xB7\x2\x821\x825\x5\x176\xBC"+
		"\x2\x822\x825\x5\x178\xBD\x2\x823\x825\x5\x17C\xBF\x2\x824\x81F\x3\x2"+
		"\x2\x2\x824\x820\x3\x2\x2\x2\x824\x821\x3\x2\x2\x2\x824\x822\x3\x2\x2"+
		"\x2\x824\x823\x3\x2\x2\x2\x825\x169\x3\x2\x2\x2\x826\x827\x5\xFE\x80\x2"+
		"\x827\x16B\x3\x2\x2\x2\x828\x829\x5\x11E\x90\x2\x829\x82A\x5\x170\xB9"+
		"\x2\x82A\x16D\x3\x2\x2\x2\x82B\x82C\a\x15\x2\x2\x82C\x82F\x5\x170\xB9"+
		"\x2\x82D\x82F\x5\x174\xBB\x2\x82E\x82B\x3\x2\x2\x2\x82E\x82D\x3\x2\x2"+
		"\x2\x82F\x16F\x3\x2\x2\x2\x830\x831\x5\x17E\xC0\x2\x831\x833\a\x16\x2"+
		"\x2\x832\x834\x5\x172\xBA\x2\x833\x832\x3\x2\x2\x2\x833\x834\x3\x2\x2"+
		"\x2\x834\x835\x3\x2\x2\x2\x835\x836\a\x17\x2\x2\x836\x171\x3\x2\x2\x2"+
		"\x837\x838\b\xBA\x1\x2\x838\x839\x5\x166\xB4\x2\x839\x83F\x3\x2\x2\x2"+
		"\x83A\x83B\f\x3\x2\x2\x83B\x83C\a\x13\x2\x2\x83C\x83E\x5\x166\xB4\x2\x83D"+
		"\x83A\x3\x2\x2\x2\x83E\x841\x3\x2\x2\x2\x83F\x83D\x3\x2\x2\x2\x83F\x840"+
		"\x3\x2\x2\x2\x840\x173\x3\x2\x2\x2\x841\x83F\x3\x2\x2\x2\x842\x843\a\x18"+
		"\x2\x2\x843\x844\x5\x166\xB4\x2\x844\x845\a\x19\x2\x2\x845\x175\x3\x2"+
		"\x2\x2\x846\x847\a\x16\x2\x2\x847\x848\x5\x166\xB4\x2\x848\x849\a\x17"+
		"\x2\x2\x849\x177\x3\x2\x2\x2\x84A\x84B\b\xBD\x1\x2\x84B\x84C\x5\x17E\xC0"+
		"\x2\x84C\x852\x3\x2\x2\x2\x84D\x84E\f\x3\x2\x2\x84E\x84F\a\x15\x2\x2\x84F"+
		"\x851\x5\x17E\xC0\x2\x850\x84D\x3\x2\x2\x2\x851\x854\x3\x2\x2\x2\x852"+
		"\x850\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2\x853\x179\x3\x2\x2\x2\x854\x852"+
		"\x3\x2\x2\x2\x855\x856\b\xBE\x1\x2\x856\x857\x5\x178\xBD\x2\x857\x85C"+
		"\x3\x2\x2\x2\x858\x859\f\x3\x2\x2\x859\x85B\a\xA4\x2\x2\x85A\x858\x3\x2"+
		"\x2\x2\x85B\x85E\x3\x2\x2\x2\x85C\x85A\x3\x2\x2\x2\x85C\x85D\x3\x2\x2"+
		"\x2\x85D\x17B\x3\x2\x2\x2\x85E\x85C\x3\x2\x2\x2\x85F\x865\a\xA6\x2\x2"+
		"\x860\x865\a\xA8\x2\x2\x861\x865\a\xA5\x2\x2\x862\x865\a\x9C\x2\x2\x863"+
		"\x865\a\x9D\x2\x2\x864\x85F\x3\x2\x2\x2\x864\x860\x3\x2\x2\x2\x864\x861"+
		"\x3\x2\x2\x2\x864\x862\x3\x2\x2\x2\x864\x863\x3\x2\x2\x2\x865\x17D\x3"+
		"\x2\x2\x2\x866\x867\t\n\x2\x2\x867\x17F\x3\x2\x2\x2\x868\x869\a\x87\x2"+
		"\x2\x869\x86A\x5\x182\xC2\x2\x86A\x86B\a\x12\x2\x2\x86B\x870\x3\x2\x2"+
		"\x2\x86C\x86D\x5\x182\xC2\x2\x86D\x86E\a\x12\x2\x2\x86E\x870\x3\x2\x2"+
		"\x2\x86F\x868\x3\x2\x2\x2\x86F\x86C\x3\x2\x2\x2\x870\x181\x3\x2\x2\x2"+
		"\x871\x872\b\xC2\x1\x2\x872\x873\x5\x184\xC3\x2\x873\x878\x3\x2\x2\x2"+
		"\x874\x875\f\x3\x2\x2\x875\x877\x5\x18A\xC6\x2\x876\x874\x3\x2\x2\x2\x877"+
		"\x87A\x3\x2\x2\x2\x878\x876\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2\x879\x183"+
		"\x3\x2\x2\x2\x87A\x878\x3\x2\x2\x2\x87B\x881\x5\x186\xC4\x2\x87C\x881"+
		"\x5\x188\xC5\x2\x87D\x881\x5\x192\xCA\x2\x87E\x881\x5\x194\xCB\x2\x87F"+
		"\x881\x5\x196\xCC\x2\x880\x87B\x3\x2\x2\x2\x880\x87C\x3\x2\x2\x2\x880"+
		"\x87D\x3\x2\x2\x2\x880\x87E\x3\x2\x2\x2\x880\x87F\x3\x2\x2\x2\x881\x185"+
		"\x3\x2\x2\x2\x882\x883\x5\xFE\x80\x2\x883\x187\x3\x2\x2\x2\x884\x885\x5"+
		"\x11E\x90\x2\x885\x886\x5\x18C\xC7\x2\x886\x189\x3\x2\x2\x2\x887\x888"+
		"\a\x15\x2\x2\x888\x88B\x5\x18C\xC7\x2\x889\x88B\x5\x190\xC9\x2\x88A\x887"+
		"\x3\x2\x2\x2\x88A\x889\x3\x2\x2\x2\x88B\x18B\x3\x2\x2\x2\x88C\x88D\x5"+
		"\x198\xCD\x2\x88D\x88F\a\x16\x2\x2\x88E\x890\x5\x18E\xC8\x2\x88F\x88E"+
		"\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x892\a\x17"+
		"\x2\x2\x892\x18D\x3\x2\x2\x2\x893\x894\b\xC8\x1\x2\x894\x895\x5\x182\xC2"+
		"\x2\x895\x89B\x3\x2\x2\x2\x896\x897\f\x3\x2\x2\x897\x898\a\x13\x2\x2\x898"+
		"\x89A\x5\x182\xC2\x2\x899\x896\x3\x2\x2\x2\x89A\x89D\x3\x2\x2\x2\x89B"+
		"\x899\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\x18F\x3\x2\x2\x2\x89D\x89B"+
		"\x3\x2\x2\x2\x89E\x89F\a\x18\x2\x2\x89F\x8A0\x5\x182\xC2\x2\x8A0\x8A1"+
		"\a\x19\x2\x2\x8A1\x191\x3\x2\x2\x2\x8A2\x8A3\a\x16\x2\x2\x8A3\x8A4\x5"+
		"\x182\xC2\x2\x8A4\x8A5\a\x17\x2\x2\x8A5\x193\x3\x2\x2\x2\x8A6\x8A7\b\xCB"+
		"\x1\x2\x8A7\x8AA\a\xA4\x2\x2\x8A8\x8AA\x5\x198\xCD\x2\x8A9\x8A6\x3\x2"+
		"\x2\x2\x8A9\x8A8\x3\x2\x2\x2\x8AA\x8B0\x3\x2\x2\x2\x8AB\x8AC\f\x3\x2\x2"+
		"\x8AC\x8AD\a\x15\x2\x2\x8AD\x8AF\x5\x198\xCD\x2\x8AE\x8AB\x3\x2\x2\x2"+
		"\x8AF\x8B2\x3\x2\x2\x2\x8B0\x8AE\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1"+
		"\x195\x3\x2\x2\x2\x8B2\x8B0\x3\x2\x2\x2\x8B3\x8B9\a\xA6\x2\x2\x8B4\x8B9"+
		"\a\xA8\x2\x2\x8B5\x8B9\a\xA5\x2\x2\x8B6\x8B9\a\x9C\x2\x2\x8B7\x8B9\a\x9D"+
		"\x2\x2\x8B8\x8B3\x3\x2\x2\x2\x8B8\x8B4\x3\x2\x2\x2\x8B8\x8B5\x3\x2\x2"+
		"\x2\x8B8\x8B6\x3\x2\x2\x2\x8B8\x8B7\x3\x2\x2\x2\x8B9\x197\x3\x2\x2\x2"+
		"\x8BA\x8BB\t\v\x2\x2\x8BB\x199\x3\x2\x2\x2\xBA\x1A0\x1A3\x1BC\x1C1\x1CF"+
		"\x1D5\x1D7\x1D9\x1E0\x1E5\x1F0\x1F7\x204\x212\x226\x23D\x248\x24F\x258"+
		"\x261\x26A\x27F\x287\x28C\x292\x297\x2A0\x2A5\x2AA\x2C2\x2CD\x2D1\x2E5"+
		"\x2FF\x304\x30D\x316\x31F\x33C\x34F\x355\x377\x380\x397\x3A5\x3AE\x3B7"+
		"\x3CE\x3D2\x3E6\x44C\x44E\x45A\x465\x474\x479\x480\x487\x490\x497\x4B1"+
		"\x4BC\x4C0\x4C5\x4CA\x4CC\x4D6\x4E6\x4EF\x4F5\x4FA\x501\x509\x514\x51C"+
		"\x524\x52A\x532\x53B\x543\x550\x553\x557\x55C\x560\x569\x57E\x588\x58A"+
		"\x58F\x59F\x5A4\x5AD\x5B4\x5B9\x5BE\x5CD\x5D2\x5D5\x5D9\x5DE\x5E5\x5F0"+
		"\x5F2\x5FB\x603\x60B\x611\x61D\x621\x62B\x630\x636\x63D\x642\x649\x651"+
		"\x658\x662\x66F\x673\x676\x67A\x67D\x685\x68E\x697\x6A0\x6B1\x6C0\x6C7"+
		"\x6CE\x6D8\x6DF\x6E2\x6E6\x6EB\x6EF\x6FA\x6FD\x704\x714\x721\x728\x72F"+
		"\x737\x73B\x743\x765\x76E\x778\x784\x789\x795\x7A7\x7AE\x7B7\x7BE\x7C6"+
		"\x7CB\x7D5\x7DF\x7EF\x7F9\x800\x808\x813\x81C\x824\x82E\x833\x83F\x852"+
		"\x85C\x864\x86F\x878\x880\x88A\x88F\x89B\x8A9\x8B0\x8B8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace prompto.parser
