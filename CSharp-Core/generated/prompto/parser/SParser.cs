//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prompto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class SParser : AbstractParser {
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, COMMENT=8, 
		JAVA=9, CSHARP=10, PYTHON2=11, PYTHON3=12, JAVASCRIPT=13, SWIFT=14, COLON=15, 
		SEMI=16, COMMA=17, RANGE=18, DOT=19, LPAR=20, RPAR=21, LBRAK=22, RBRAK=23, 
		LCURL=24, RCURL=25, QMARK=26, XMARK=27, AMP=28, AMP2=29, PIPE=30, PIPE2=31, 
		PLUS=32, MINUS=33, STAR=34, SLASH=35, BSLASH=36, PERCENT=37, GT=38, GTE=39, 
		LT=40, LTE=41, LTGT=42, EQ=43, XEQ=44, EQ2=45, TEQ=46, TILDE=47, LARROW=48, 
		RARROW=49, BOOLEAN=50, CHARACTER=51, TEXT=52, INTEGER=53, DECIMAL=54, 
		DATE=55, TIME=56, DATETIME=57, PERIOD=58, METHOD_T=59, CODE=60, DOCUMENT=61, 
		ABSTRACT=62, ALL=63, ALWAYS=64, AND=65, ANY=66, AS=67, ATTR=68, ATTRIBUTE=69, 
		ATTRIBUTES=70, BINDINGS=71, CASE=72, CATCH=73, CATEGORY=74, CLASS=75, 
		CLOSE=76, CONTAINS=77, DEF=78, DEFAULT=79, DEFINE=80, DO=81, DOING=82, 
		EACH=83, ELSE=84, ENUM=85, ENUMERATED=86, EXCEPT=87, EXECUTE=88, EXPECTING=89, 
		EXTENDS=90, FETCH=91, FINALLY=92, FOR=93, FROM=94, GETTER=95, IF=96, IN=97, 
		INVOKE=98, IS=99, MATCHING=100, METHOD=101, METHODS=102, MODULO=103, MUTABLE=104, 
		NATIVE=105, NONE=106, NOT=107, NOTHING=108, NULL=109, ON=110, ONE=111, 
		OPEN=112, OPERATOR=113, OR=114, OTHERWISE=115, PASS=116, RAISE=117, READ=118, 
		RECEIVING=119, RESOURCE=120, RETURN=121, RETURNING=122, ROWS=123, SELF=124, 
		SETTER=125, SINGLETON=126, SORTED=127, STORABLE=128, STORE=129, SWITCH=130, 
		TEST=131, THIS=132, THROW=133, TO=134, TRY=135, VERIFYING=136, WITH=137, 
		WHEN=138, WHERE=139, WHILE=140, WRITE=141, BOOLEAN_LITERAL=142, CHAR_LITERAL=143, 
		MIN_INTEGER=144, MAX_INTEGER=145, SYMBOL_IDENTIFIER=146, TYPE_IDENTIFIER=147, 
		VARIABLE_IDENTIFIER=148, NATIVE_IDENTIFIER=149, DOLLAR_IDENTIFIER=150, 
		TEXT_LITERAL=151, INTEGER_LITERAL=152, HEXA_LITERAL=153, DECIMAL_LITERAL=154, 
		DATETIME_LITERAL=155, TIME_LITERAL=156, DATE_LITERAL=157, PERIOD_LITERAL=158;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_category_declaration = 5, RULE_singleton_category_declaration = 6, 
		RULE_derived_list = 7, RULE_operator_method_declaration = 8, RULE_setter_method_declaration = 9, 
		RULE_getter_method_declaration = 10, RULE_native_category_declaration = 11, 
		RULE_native_resource_declaration = 12, RULE_native_category_bindings = 13, 
		RULE_native_category_binding_list = 14, RULE_attribute_list = 15, RULE_abstract_method_declaration = 16, 
		RULE_concrete_method_declaration = 17, RULE_native_method_declaration = 18, 
		RULE_test_method_declaration = 19, RULE_assertion = 20, RULE_typed_argument = 21, 
		RULE_statement = 22, RULE_store_statement = 23, RULE_method_call = 24, 
		RULE_method_selector = 25, RULE_callable_parent = 26, RULE_callable_selector = 27, 
		RULE_with_resource_statement = 28, RULE_with_singleton_statement = 29, 
		RULE_switch_statement = 30, RULE_switch_case_statement = 31, RULE_for_each_statement = 32, 
		RULE_do_while_statement = 33, RULE_while_statement = 34, RULE_if_statement = 35, 
		RULE_else_if_statement_list = 36, RULE_raise_statement = 37, RULE_try_statement = 38, 
		RULE_catch_statement = 39, RULE_return_statement = 40, RULE_expression = 41, 
		RULE_closure_expression = 42, RULE_instance_expression = 43, RULE_method_expression = 44, 
		RULE_instance_selector = 45, RULE_document_expression = 46, RULE_constructor_expression = 47, 
		RULE_argument_assignment_list = 48, RULE_argument_assignment = 49, RULE_read_expression = 50, 
		RULE_write_statement = 51, RULE_fetch_expression = 52, RULE_sorted_expression = 53, 
		RULE_assign_instance_statement = 54, RULE_child_instance = 55, RULE_assign_tuple_statement = 56, 
		RULE_lfs = 57, RULE_lfp = 58, RULE_indent = 59, RULE_dedent = 60, RULE_null_literal = 61, 
		RULE_declaration_list = 62, RULE_declarations = 63, RULE_declaration = 64, 
		RULE_resource_declaration = 65, RULE_enum_declaration = 66, RULE_native_symbol_list = 67, 
		RULE_category_symbol_list = 68, RULE_symbol_list = 69, RULE_attribute_constraint = 70, 
		RULE_list_literal = 71, RULE_set_literal = 72, RULE_expression_list = 73, 
		RULE_range_literal = 74, RULE_typedef = 75, RULE_primary_type = 76, RULE_native_type = 77, 
		RULE_category_type = 78, RULE_code_type = 79, RULE_category_declaration = 80, 
		RULE_type_identifier_list = 81, RULE_method_identifier = 82, RULE_identifier = 83, 
		RULE_variable_identifier = 84, RULE_type_identifier = 85, RULE_symbol_identifier = 86, 
		RULE_argument_list = 87, RULE_argument = 88, RULE_operator_argument = 89, 
		RULE_named_argument = 90, RULE_code_argument = 91, RULE_category_or_any_type = 92, 
		RULE_any_type = 93, RULE_member_method_declaration_list = 94, RULE_member_method_declaration = 95, 
		RULE_native_member_method_declaration_list = 96, RULE_native_member_method_declaration = 97, 
		RULE_native_category_binding = 98, RULE_python_category_binding = 99, 
		RULE_python_module = 100, RULE_module_token = 101, RULE_javascript_category_binding = 102, 
		RULE_javascript_module = 103, RULE_variable_identifier_list = 104, RULE_method_declaration = 105, 
		RULE_comment_statement = 106, RULE_native_statement_list = 107, RULE_native_statement = 108, 
		RULE_python_native_statement = 109, RULE_javascript_native_statement = 110, 
		RULE_statement_list = 111, RULE_assertion_list = 112, RULE_switch_case_statement_list = 113, 
		RULE_catch_statement_list = 114, RULE_literal_collection = 115, RULE_atomic_literal = 116, 
		RULE_literal_list_literal = 117, RULE_selectable_expression = 118, RULE_this_expression = 119, 
		RULE_parenthesis_expression = 120, RULE_literal_expression = 121, RULE_collection_literal = 122, 
		RULE_tuple_literal = 123, RULE_dict_literal = 124, RULE_expression_tuple = 125, 
		RULE_dict_entry_list = 126, RULE_dict_entry = 127, RULE_slice_arguments = 128, 
		RULE_assign_variable_statement = 129, RULE_assignable_instance = 130, 
		RULE_is_expression = 131, RULE_operator = 132, RULE_key_token = 133, RULE_value_token = 134, 
		RULE_symbols_token = 135, RULE_assign = 136, RULE_multiply = 137, RULE_divide = 138, 
		RULE_idivide = 139, RULE_modulo = 140, RULE_javascript_statement = 141, 
		RULE_javascript_expression = 142, RULE_javascript_primary_expression = 143, 
		RULE_javascript_this_expression = 144, RULE_javascript_selector_expression = 145, 
		RULE_javascript_method_expression = 146, RULE_javascript_arguments = 147, 
		RULE_javascript_item_expression = 148, RULE_javascript_parenthesis_expression = 149, 
		RULE_javascript_identifier_expression = 150, RULE_javascript_literal_expression = 151, 
		RULE_javascript_identifier = 152, RULE_python_statement = 153, RULE_python_expression = 154, 
		RULE_python_primary_expression = 155, RULE_python_selector_expression = 156, 
		RULE_python_method_expression = 157, RULE_python_argument_list = 158, 
		RULE_python_ordinal_argument_list = 159, RULE_python_named_argument_list = 160, 
		RULE_python_parenthesis_expression = 161, RULE_python_identifier_expression = 162, 
		RULE_python_literal_expression = 163, RULE_python_identifier = 164, RULE_java_statement = 165, 
		RULE_java_expression = 166, RULE_java_primary_expression = 167, RULE_java_this_expression = 168, 
		RULE_java_selector_expression = 169, RULE_java_method_expression = 170, 
		RULE_java_arguments = 171, RULE_java_item_expression = 172, RULE_java_parenthesis_expression = 173, 
		RULE_java_identifier_expression = 174, RULE_java_class_identifier_expression = 175, 
		RULE_java_literal_expression = 176, RULE_java_identifier = 177, RULE_csharp_statement = 178, 
		RULE_csharp_expression = 179, RULE_csharp_primary_expression = 180, RULE_csharp_this_expression = 181, 
		RULE_csharp_selector_expression = 182, RULE_csharp_method_expression = 183, 
		RULE_csharp_arguments = 184, RULE_csharp_item_expression = 185, RULE_csharp_parenthesis_expression = 186, 
		RULE_csharp_identifier_expression = 187, RULE_csharp_literal_expression = 188, 
		RULE_csharp_identifier = 189;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "operator_method_declaration", 
		"setter_method_declaration", "getter_method_declaration", "native_category_declaration", 
		"native_resource_declaration", "native_category_bindings", "native_category_binding_list", 
		"attribute_list", "abstract_method_declaration", "concrete_method_declaration", 
		"native_method_declaration", "test_method_declaration", "assertion", "typed_argument", 
		"statement", "store_statement", "method_call", "method_selector", "callable_parent", 
		"callable_selector", "with_resource_statement", "with_singleton_statement", 
		"switch_statement", "switch_case_statement", "for_each_statement", "do_while_statement", 
		"while_statement", "if_statement", "else_if_statement_list", "raise_statement", 
		"try_statement", "catch_statement", "return_statement", "expression", 
		"closure_expression", "instance_expression", "method_expression", "instance_selector", 
		"document_expression", "constructor_expression", "argument_assignment_list", 
		"argument_assignment", "read_expression", "write_statement", "fetch_expression", 
		"sorted_expression", "assign_instance_statement", "child_instance", "assign_tuple_statement", 
		"lfs", "lfp", "indent", "dedent", "null_literal", "declaration_list", 
		"declarations", "declaration", "resource_declaration", "enum_declaration", 
		"native_symbol_list", "category_symbol_list", "symbol_list", "attribute_constraint", 
		"list_literal", "set_literal", "expression_list", "range_literal", "typedef", 
		"primary_type", "native_type", "category_type", "code_type", "category_declaration", 
		"type_identifier_list", "method_identifier", "identifier", "variable_identifier", 
		"type_identifier", "symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "module_token", "javascript_category_binding", "javascript_module", 
		"variable_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "operator", 
		"key_token", "value_token", "symbols_token", "assign", "multiply", "divide", 
		"idivide", "modulo", "javascript_statement", "javascript_expression", 
		"javascript_primary_expression", "javascript_this_expression", "javascript_selector_expression", 
		"javascript_method_expression", "javascript_arguments", "javascript_item_expression", 
		"javascript_parenthesis_expression", "javascript_identifier_expression", 
		"javascript_literal_expression", "javascript_identifier", "python_statement", 
		"python_expression", "python_primary_expression", "python_selector_expression", 
		"python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
		"python_named_argument_list", "python_parenthesis_expression", "python_identifier_expression", 
		"python_literal_expression", "python_identifier", "java_statement", "java_expression", 
		"java_primary_expression", "java_this_expression", "java_selector_expression", 
		"java_method_expression", "java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_selector_expression", "csharp_method_expression", 
		"csharp_arguments", "csharp_item_expression", "csharp_parenthesis_expression", 
		"csharp_identifier_expression", "csharp_literal_expression", "csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", null, "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		"','", "'..'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
		"'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
		"'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Method'", 
		"'Code'", "'Document'", "'abstract'", "'all'", "'always'", "'and'", "'any'", 
		"'as'", "'attr'", "'attribute'", "'attributes'", "'bindings'", "'case'", 
		"'catch'", "'category'", "'class'", "'close'", "'contains'", "'def'", 
		"'default'", "'define'", "'do'", "'doing'", "'each'", "'else'", "'enum'", 
		"'enumerated'", "'except'", "'execute'", "'expecting'", "'extends'", "'fetch'", 
		"'finally'", "'for'", "'from'", "'getter'", "'if'", "'in'", "'invoke'", 
		"'is'", "'matching'", "'method'", "'methods'", "'modulo'", "'mutable'", 
		"'native'", "'None'", "'not'", null, "'null'", "'on'", "'one'", "'open'", 
		"'operator'", "'or'", "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", 
		"'resource'", "'return'", "'returning'", "'rows'", "'self'", "'setter'", 
		"'singleton'", "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
		"'this'", "'throw'", "'to'", "'try'", "'verifying'", "'with'", "'when'", 
		"'where'", "'while'", "'write'", null, null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "COMMENT", 
		"JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
		"SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
		"STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
		"EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", "CHARACTER", 
		"TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
		"CODE", "DOCUMENT", "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", "AS", "ATTR", 
		"ATTRIBUTE", "ATTRIBUTES", "BINDINGS", "CASE", "CATCH", "CATEGORY", "CLASS", 
		"CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DO", "DOING", "EACH", 
		"ELSE", "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", 
		"FETCH", "FINALLY", "FOR", "FROM", "GETTER", "IF", "IN", "INVOKE", "IS", 
		"MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", "NONE", 
		"NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", "OPERATOR", "OR", "OTHERWISE", 
		"PASS", "RAISE", "READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", 
		"ROWS", "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", "STORE", 
		"SWITCH", "TEST", "THIS", "THROW", "TO", "TRY", "VERIFYING", "WITH", "WHEN", 
		"WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
		"MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", 
		"NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", "TEXT_LITERAL", "INTEGER_LITERAL", 
		"HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
		"DATE_LITERAL", "PERIOD_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(ENUM);
			State = 381; _localctx.name = type_identifier();
			State = 382; Match(LPAR);
			State = 389;
			switch (TokenStream.La(1)) {
			case TYPE_IDENTIFIER:
				{
				State = 383; _localctx.derived = type_identifier();
				State = 386;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 384; Match(COMMA);
					State = 385; _localctx.attrs = attribute_list();
					}
				}

				}
				break;
			case VARIABLE_IDENTIFIER:
				{
				State = 388; _localctx.attrs = attribute_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 391; Match(RPAR);
			State = 392; Match(COLON);
			State = 393; indent();
			State = 394; _localctx.symbols = category_symbol_list(0);
			State = 395; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(ENUM);
			State = 398; _localctx.name = type_identifier();
			State = 399; Match(LPAR);
			State = 400; _localctx.typ = native_type();
			State = 401; Match(RPAR);
			State = 402; Match(COLON);
			State = 403; indent();
			State = 404; _localctx.symbols = native_symbol_list(0);
			State = 405; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; _localctx.name = symbol_identifier();
			State = 408; Match(EQ);
			State = 409; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; _localctx.name = symbol_identifier();
			State = 412; Match(LPAR);
			State = 414;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 413; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 416; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public ITerminalNode ATTR() { return GetToken(SParser.ATTR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 418; Match(STORABLE);
				}
			}

			State = 421; Match(ATTR);
			State = 422; _localctx.name = variable_identifier();
			State = 423; Match(LPAR);
			State = 424; _localctx.typ = typedef(0);
			State = 425; Match(RPAR);
			State = 426; Match(COLON);
			State = 427; indent();
			State = 430;
			switch (TokenStream.La(1)) {
			case IN:
			case MATCHING:
				{
				State = 428; _localctx.match = attribute_constraint();
				}
				break;
			case PASS:
				{
				State = 429; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 432; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 434; Match(STORABLE);
				}
			}

			State = 437;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 438; _localctx.name = type_identifier();
			State = 439; Match(LPAR);
			State = 446;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 440; _localctx.derived = derived_list();
				}
				break;
			case 2:
				{
				State = 441; _localctx.attrs = attribute_list();
				}
				break;
			case 3:
				{
				State = 442; _localctx.derived = derived_list();
				State = 443; Match(COMMA);
				State = 444; _localctx.attrs = attribute_list();
				}
				break;
			}
			State = 448; Match(RPAR);
			State = 449; Match(COLON);
			State = 450; indent();
			State = 453;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 451; _localctx.methods = member_method_declaration_list(0);
				}
				break;
			case PASS:
				{
				State = 452; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 455; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode SINGLETON() { return GetToken(SParser.SINGLETON, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleton_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(SINGLETON);
			State = 458; _localctx.name = type_identifier();
			State = 459; Match(LPAR);
			State = 460; _localctx.attrs = attribute_list();
			State = 461; Match(RPAR);
			State = 462; Match(COLON);
			State = 463; indent();
			State = 466;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 464; _localctx.methods = member_method_declaration_list(0);
				}
				break;
			case PASS:
				{
				State = 465; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 468; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDerived_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDerived_list(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_derived_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; _localctx.items = type_identifier_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode OPERATOR() { return GetToken(SParser.OPERATOR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(DEF);
			State = 473; Match(OPERATOR);
			State = 474; _localctx.op = @operator();
			State = 475; Match(LPAR);
			State = 476; _localctx.arg = operator_argument();
			State = 477; Match(RPAR);
			State = 480;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 478; Match(RARROW);
				State = 479; _localctx.typ = typedef(0);
				}
			}

			State = 482; Match(COLON);
			State = 483; indent();
			State = 484; _localctx.stmts = statement_list(0);
			State = 485; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode SETTER() { return GetToken(SParser.SETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(DEF);
			State = 488; _localctx.name = variable_identifier();
			State = 489; Match(SETTER);
			State = 490; Match(LPAR);
			State = 491; Match(RPAR);
			State = 492; Match(COLON);
			State = 493; indent();
			State = 494; _localctx.stmts = statement_list(0);
			State = 495; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode GETTER() { return GetToken(SParser.GETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(DEF);
			State = 498; _localctx.name = variable_identifier();
			State = 499; Match(GETTER);
			State = 500; Match(LPAR);
			State = 501; Match(RPAR);
			State = 502; Match(COLON);
			State = 503; indent();
			State = 504; _localctx.stmts = statement_list(0);
			State = 505; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode STORABLE() { return GetToken(SParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 507; Match(STORABLE);
				}
			}

			State = 510; Match(NATIVE);
			State = 511;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 512; _localctx.name = type_identifier();
			State = 513; Match(LPAR);
			State = 515;
			_la = TokenStream.La(1);
			if (_la==VARIABLE_IDENTIFIER) {
				{
				State = 514; _localctx.attrs = attribute_list();
				}
			}

			State = 517; Match(RPAR);
			State = 518; Match(COLON);
			State = 519; indent();
			State = 520; _localctx.bindings = native_category_bindings();
			State = 524;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 521; lfp();
				State = 522; _localctx.methods = native_member_method_declaration_list(0);
				}
				break;
			}
			State = 526; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(SParser.RESOURCE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_native_resource_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(NATIVE);
			State = 529; Match(RESOURCE);
			State = 530; _localctx.name = type_identifier();
			State = 531; Match(LPAR);
			State = 533;
			_la = TokenStream.La(1);
			if (_la==VARIABLE_IDENTIFIER) {
				{
				State = 532; _localctx.attrs = attribute_list();
				}
			}

			State = 535; Match(RPAR);
			State = 536; Match(COLON);
			State = 537; indent();
			State = 538; _localctx.bindings = native_category_bindings();
			State = 542;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 539; lfp();
				State = 540; _localctx.methods = native_member_method_declaration_list(0);
				}
				break;
			}
			State = 544; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode BINDINGS() { return GetToken(SParser.BINDINGS, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_category_bindings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(DEF);
			State = 547;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 548; Match(BINDINGS);
			State = 549; Match(COLON);
			State = 550; indent();
			State = 551; _localctx.items = native_category_binding_list(0);
			State = 552; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 555; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 563;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 557;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 558; lfp();
					State = 559; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; _localctx.items = variable_identifier_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode ABSTRACT() { return GetToken(SParser.ABSTRACT, 0); }
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(ABSTRACT);
			State = 569; Match(DEF);
			State = 570; _localctx.name = method_identifier();
			State = 571; Match(LPAR);
			State = 573;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 572; _localctx.args = argument_list(0);
				}
			}

			State = 575; Match(RPAR);
			State = 578;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 576; Match(RARROW);
				State = 577; _localctx.typ = typedef(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(DEF);
			State = 581; _localctx.name = method_identifier();
			State = 582; Match(LPAR);
			State = 584;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 583; _localctx.args = argument_list(0);
				}
			}

			State = 586; Match(RPAR);
			State = 589;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 587; Match(RARROW);
				State = 588; _localctx.typ = typedef(0);
				}
			}

			State = 591; Match(COLON);
			State = 592; indent();
			State = 593; _localctx.stmts = statement_list(0);
			State = 594; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(DEF);
			State = 597; Match(NATIVE);
			State = 598; _localctx.name = method_identifier();
			State = 599; Match(LPAR);
			State = 601;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 600; _localctx.args = argument_list(0);
				}
			}

			State = 603; Match(RPAR);
			State = 606;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 604; Match(RARROW);
				State = 605; _localctx.typ = category_or_any_type();
				}
			}

			State = 608; Match(COLON);
			State = 609; indent();
			State = 610; _localctx.stmts = native_statement_list(0);
			State = 611; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode VERIFYING() { return GetToken(SParser.VERIFYING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; Match(DEF);
			State = 614; Match(TEST);
			State = 615; _localctx.name = Match(TEXT_LITERAL);
			State = 616; Match(LPAR);
			State = 617; Match(RPAR);
			State = 618; Match(COLON);
			State = 619; indent();
			State = 620; _localctx.stmts = statement_list(0);
			State = 621; dedent();
			State = 622; lfp();
			State = 623; Match(VERIFYING);
			State = 624; Match(COLON);
			State = 630;
			switch (TokenStream.La(1)) {
			case LF:
				{
				{
				State = 625; indent();
				State = 626; _localctx.exps = assertion_list(0);
				State = 627; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				{
				State = 629; _localctx.error = symbol_identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Category_or_any_typeContext typ;
		public Attribute_listContext attrs;
		public Literal_expressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 42, RULE_typed_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; _localctx.name = variable_identifier();
			State = 635; Match(COLON);
			State = 636; _localctx.typ = category_or_any_type();
			State = 641;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 637; Match(LPAR);
				State = 638; _localctx.attrs = attribute_list();
				State = 639; Match(RPAR);
				}
				break;
			}
			State = 645;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 643; Match(EQ);
				State = 644; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommentStatementContext : StatementContext {
		public Comment_statementContext decl;
		public Comment_statementContext comment_statement() {
			return GetRuleContext<Comment_statementContext>(0);
		}
		public CommentStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCommentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCommentStatement(this);
		}
	}
	public partial class StoreStatementContext : StatementContext {
		public Store_statementContext stmt;
		public Store_statementContext store_statement() {
			return GetRuleContext<Store_statementContext>(0);
		}
		public StoreStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_callContext stmt;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		try {
			State = 664;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 647; ((MethodCallStatementContext)_localctx).stmt = method_call();
				}
				break;
			case 2:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 648; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 649; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new StoreStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 650; ((StoreStatementContext)_localctx).stmt = store_statement();
				}
				break;
			case 5:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 651; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 6:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 652; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 7:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 653; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 8:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 654; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 9:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 655; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 10:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 656; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 11:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 657; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 12:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 658; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 13:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 659; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 14:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 660; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 15:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 661; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 16:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 662; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 17:
				_localctx = new CommentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 663; ((CommentStatementContext)_localctx).decl = comment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_statementContext : ParserRuleContext {
		public Expression_listContext exps;
		public ITerminalNode STORE() { return GetToken(SParser.STORE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Store_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStore_statement(this);
		}
	}

	[RuleVersion(0)]
	public Store_statementContext store_statement() {
		Store_statementContext _localctx = new Store_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_store_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(STORE);
			State = 667; Match(LPAR);
			State = 668; _localctx.exps = expression_list(0);
			State = 669; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		public Method_selectorContext method;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 48, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; _localctx.method = method_selector();
			State = 672; Match(LPAR);
			State = 674;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 673; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 676; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_selectorContext : ParserRuleContext {
		public Method_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_selector; } }
	 
		public Method_selectorContext() { }
		public virtual void CopyFrom(Method_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodParentContext : Method_selectorContext {
		public Callable_parentContext parent;
		public Method_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodParentContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodParent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodParent(this);
		}
	}
	public partial class MethodNameContext : Method_selectorContext {
		public Method_identifierContext name;
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodNameContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public Method_selectorContext method_selector() {
		Method_selectorContext _localctx = new Method_selectorContext(Context, State);
		EnterRule(_localctx, 50, RULE_method_selector);
		try {
			State = 683;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new MethodNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 678; ((MethodNameContext)_localctx).name = method_identifier();
				}
				break;
			case 2:
				_localctx = new MethodParentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 679; ((MethodParentContext)_localctx).parent = callable_parent(0);
				State = 680; Match(DOT);
				State = 681; ((MethodParentContext)_localctx).name = method_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_parentContext : ParserRuleContext {
		public Callable_parentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_parent; } }
	 
		public Callable_parentContext() { }
		public virtual void CopyFrom(Callable_parentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableSelectorContext : Callable_parentContext {
		public Callable_parentContext parent;
		public Callable_selectorContext select;
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Callable_selectorContext callable_selector() {
			return GetRuleContext<Callable_selectorContext>(0);
		}
		public CallableSelectorContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableSelector(this);
		}
	}
	public partial class CallableRootContext : Callable_parentContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CallableRootContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableRoot(this);
		}
	}

	[RuleVersion(0)]
	public Callable_parentContext callable_parent() {
		return callable_parent(0);
	}

	private Callable_parentContext callable_parent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Callable_parentContext _localctx = new Callable_parentContext(Context, _parentState);
		Callable_parentContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_callable_parent, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallableRootContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 686; ((CallableRootContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 692;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallableSelectorContext(new Callable_parentContext(_parentctx, _parentState));
					((CallableSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_callable_parent);
					State = 688;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 689; ((CallableSelectorContext)_localctx).select = callable_selector();
					}
					} 
				}
				State = 694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Callable_selectorContext : ParserRuleContext {
		public Callable_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_selector; } }
	 
		public Callable_selectorContext() { }
		public virtual void CopyFrom(Callable_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableItemSelectorContext : Callable_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallableItemSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableItemSelector(this);
		}
	}
	public partial class CallableMemberSelectorContext : Callable_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public CallableMemberSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableMemberSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_selectorContext callable_selector() {
		Callable_selectorContext _localctx = new Callable_selectorContext(Context, State);
		EnterRule(_localctx, 54, RULE_callable_selector);
		try {
			State = 701;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CallableMemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; Match(DOT);
				State = 696; ((CallableMemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case LBRAK:
				_localctx = new CallableItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 697; Match(LBRAK);
				State = 698; ((CallableItemSelectorContext)_localctx).exp = expression(0);
				State = 699; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(WITH);
			State = 704; _localctx.stmt = assign_variable_statement();
			State = 705; Match(COLON);
			State = 706; indent();
			State = 707; _localctx.stmts = statement_list(0);
			State = 708; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(WITH);
			State = 711; _localctx.typ = type_identifier();
			State = 712; Match(COLON);
			State = 713; indent();
			State = 714; _localctx.stmts = statement_list(0);
			State = 715; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(SParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(SParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(SParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(SWITCH);
			State = 718; Match(ON);
			State = 719; _localctx.exp = expression(0);
			State = 720; Match(COLON);
			State = 721; indent();
			State = 722; _localctx.cases = switch_case_statement_list(0);
			State = 730;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 723; lfp();
				State = 724; Match(OTHERWISE);
				State = 725; Match(COLON);
				State = 726; indent();
				State = 727; _localctx.stmts = statement_list(0);
				State = 728; dedent();
				}
				break;
			}
			State = 732; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_case_statement);
		try {
			State = 749;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 734; Match(WHEN);
				State = 735; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 736; Match(COLON);
				State = 737; indent();
				State = 738; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 739; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 741; Match(WHEN);
				State = 742; Match(IN);
				State = 743; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 744; Match(COLON);
				State = 745; indent();
				State = 746; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 747; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(SParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(FOR);
			State = 752; _localctx.name1 = variable_identifier();
			State = 755;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 753; Match(COMMA);
				State = 754; _localctx.name2 = variable_identifier();
				}
			}

			State = 757; Match(IN);
			State = 758; _localctx.source = expression(0);
			State = 759; Match(COLON);
			State = 760; indent();
			State = 761; _localctx.stmts = statement_list(0);
			State = 762; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(SParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; Match(DO);
			State = 765; Match(COLON);
			State = 766; indent();
			State = 767; _localctx.stmts = statement_list(0);
			State = 768; dedent();
			State = 769; lfp();
			State = 770; Match(WHILE);
			State = 771; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(WHILE);
			State = 774; _localctx.exp = expression(0);
			State = 775; Match(COLON);
			State = 776; indent();
			State = 777; _localctx.stmts = statement_list(0);
			State = 778; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; Match(IF);
			State = 781; _localctx.exp = expression(0);
			State = 782; Match(COLON);
			State = 783; indent();
			State = 784; _localctx.stmts = statement_list(0);
			State = 785; dedent();
			State = 789;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 786; lfp();
				State = 787; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 798;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 791; lfp();
				State = 792; Match(ELSE);
				State = 793; Match(COLON);
				State = 794; indent();
				State = 795; _localctx.elseStmts = statement_list(0);
				State = 796; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 801; Match(ELSE);
			State = 802; Match(IF);
			State = 803; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 804; Match(COLON);
			State = 805; indent();
			State = 806; ((ElseIfStatementListContext)_localctx).stmts = statement_list(0);
			State = 807; dedent();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 821;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 809;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 810; lfp();
					State = 811; Match(ELSE);
					State = 812; Match(IF);
					State = 813; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 814; Match(COLON);
					State = 815; indent();
					State = 816; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list(0);
					State = 817; dedent();
					}
					} 
				}
				State = 823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(SParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824; Match(RAISE);
			State = 825; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode TRY() { return GetToken(SParser.TRY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode FINALLY() { return GetToken(SParser.FINALLY, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_try_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; Match(TRY);
			State = 828; _localctx.name = variable_identifier();
			State = 829; Match(COLON);
			State = 830; indent();
			State = 831; _localctx.stmts = statement_list(0);
			State = 832; dedent();
			State = 833; lfs();
			State = 835;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 834; _localctx.handlers = catch_statement_list(0);
				}
				break;
			}
			State = 844;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 837; Match(EXCEPT);
				State = 838; Match(COLON);
				State = 839; indent();
				State = 840; _localctx.anyStmts = statement_list(0);
				State = 841; dedent();
				State = 842; lfs();
				}
				break;
			}
			State = 853;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 846; Match(FINALLY);
				State = 847; Match(COLON);
				State = 848; indent();
				State = 849; _localctx.finalStmts = statement_list(0);
				State = 850; dedent();
				State = 851; lfs();
				}
				break;
			}
			State = 855; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_catch_statement);
		try {
			State = 876;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 857; Match(EXCEPT);
				State = 858; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 859; Match(COLON);
				State = 860; indent();
				State = 861; ((CatchAtomicStatementContext)_localctx).stmts = statement_list(0);
				State = 862; dedent();
				State = 863; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 865; Match(EXCEPT);
				State = 866; Match(IN);
				State = 867; Match(LBRAK);
				State = 868; ((CatchCollectionStatementContext)_localctx).exp = symbol_list(0);
				State = 869; Match(RBRAK);
				State = 870; Match(COLON);
				State = 871; indent();
				State = 872; ((CatchCollectionStatementContext)_localctx).stmts = statement_list(0);
				State = 873; dedent();
				State = 874; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; Match(RETURN);
			State = 880;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 879; _localctx.exp = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode XEQ() { return GetToken(SParser.XEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(SParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(SParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(SParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Closure_expressionContext exp;
		public Closure_expressionContext closure_expression() {
			return GetRuleContext<Closure_expressionContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TEQ() { return GetToken(SParser.TEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(SParser.EXECUTE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public Method_expressionContext exp;
		public Method_expressionContext method_expression() {
			return GetRuleContext<Method_expressionContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(SParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(SParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ2() { return GetToken(SParser.EQ2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 883; Match(MINUS);
				State = 884; ((MinusExpressionContext)_localctx).exp = expression(31);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 885; Match(NOT);
				State = 886; ((NotExpressionContext)_localctx).exp = expression(30);
				}
				break;
			case 3:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 887; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new MethodExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 888; ((MethodExpressionContext)_localctx).exp = method_expression();
				}
				break;
			case 5:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 889; Match(CODE);
				State = 890; Match(LPAR);
				State = 891; ((CodeExpressionContext)_localctx).exp = expression(0);
				State = 892; Match(RPAR);
				}
				break;
			case 6:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 894; Match(EXECUTE);
				State = 895; Match(LPAR);
				State = 896; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				State = 897; Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 899; ((ClosureExpressionContext)_localctx).exp = closure_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 998;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 996;
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 902;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 903; multiply();
						State = 904; ((MultiplyExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 906;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 907; divide();
						State = 908; ((DivideExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 910;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 911; modulo();
						State = 912; ((ModuloExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 914;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 915; idivide();
						State = 916; ((IntDivideExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 918;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 919;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 920; ((AddExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 921;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 922; Match(LT);
						State = 923; ((LessThanExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 924;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 925; Match(LTE);
						State = 926; ((LessThanOrEqualExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 927;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 928; Match(GT);
						State = 929; ((GreaterThanExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 930;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 931; Match(GTE);
						State = 932; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 933;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 934; Match(EQ2);
						State = 935; ((EqualsExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 936;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 937; Match(XEQ);
						State = 938; ((NotEqualsExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 939;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 940; Match(TEQ);
						State = 941; ((RoughlyEqualsExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 942;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 943; Match(OR);
						State = 944; ((OrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 945;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 946; Match(AND);
						State = 947; ((AndExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 948;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 949; Match(IF);
						State = 950; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 951; Match(ELSE);
						State = 952; ((TernaryExpressionContext)_localctx).ifFalse = expression(14);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 954;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 955; Match(IN);
						State = 956; ((InExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 957;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 958; Match(CONTAINS);
						State = 959; ((ContainsExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 960;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 961; Match(CONTAINS);
						State = 962; Match(ALL);
						State = 963; ((ContainsAllExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 964;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 965; Match(CONTAINS);
						State = 966; Match(ANY);
						State = 967; ((ContainsAnyExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 968;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 969; Match(NOT);
						State = 970; Match(IN);
						State = 971; ((NotInExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 972;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 973; Match(NOT);
						State = 974; Match(CONTAINS);
						State = 975; ((NotContainsExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 976;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 977; Match(NOT);
						State = 978; Match(CONTAINS);
						State = 979; Match(ALL);
						State = 980; ((NotContainsAllExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 981;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 982; Match(NOT);
						State = 983; Match(CONTAINS);
						State = 984; Match(ANY);
						State = 985; ((NotContainsAnyExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 24:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 986;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 987; Match(IS);
						State = 988; Match(NOT);
						State = 989; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 25:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 990;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 991; Match(IS);
						State = 992; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 26:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 993;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 994; Match(AS);
						State = 995; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					}
					} 
				}
				State = 1000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Closure_expressionContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Closure_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closure_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosure_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosure_expression(this);
		}
	}

	[RuleVersion(0)]
	public Closure_expressionContext closure_expression() {
		Closure_expressionContext _localctx = new Closure_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_closure_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1001; _localctx.name = type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1004; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1010;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 1006;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1007; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 1012;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_expressionContext : ParserRuleContext {
		public Method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_expression; } }
	 
		public Method_expressionContext() { }
		public virtual void CopyFrom(Method_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadExpressionContext : Method_expressionContext {
		public Read_expressionContext exp;
		public Read_expressionContext read_expression() {
			return GetRuleContext<Read_expressionContext>(0);
		}
		public ReadExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReadExpression(this);
		}
	}
	public partial class MethodCallExpressionContext : Method_expressionContext {
		public Method_callContext exp;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class FetchExpressionContext : Method_expressionContext {
		public Fetch_expressionContext exp;
		public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public FetchExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : Method_expressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class DocumentExpressionContext : Method_expressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}
	public partial class SortedExpressionContext : Method_expressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}

	[RuleVersion(0)]
	public Method_expressionContext method_expression() {
		Method_expressionContext _localctx = new Method_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_method_expression);
		try {
			State = 1019;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new DocumentExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 2:
				_localctx = new FetchExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014; ((FetchExpressionContext)_localctx).exp = fetch_expression();
				}
				break;
			case 3:
				_localctx = new ReadExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1015; ((ReadExpressionContext)_localctx).exp = read_expression();
				}
				break;
			case 4:
				_localctx = new SortedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1016; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 5:
				_localctx = new MethodCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1017; ((MethodCallExpressionContext)_localctx).exp = method_call();
				}
				break;
			case 6:
				_localctx = new ConstructorExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1018; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 90, RULE_instance_selector);
		try {
			State = 1034;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1021;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1022; Match(DOT);
				State = 1023; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1025; Match(LBRAK);
				State = 1026; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1027; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1030; Match(LBRAK);
				State = 1031; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1032; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public ITerminalNode DOCUMENT() { return GetToken(SParser.DOCUMENT, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; Match(DOCUMENT);
			State = 1037; Match(LPAR);
			State = 1038; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Category_typeContext typ;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConstructor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConstructor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_constructor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1040; Match(MUTABLE);
				}
			}

			State = 1043; _localctx.typ = category_type();
			State = 1044; Match(LPAR);
			State = 1046;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 1045; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 1048; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAssignmentListContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExpressionAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExpressionAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListContext : Argument_assignment_listContext {
		public Argument_assignmentContext item;
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : Argument_assignment_listContext {
		public Argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		return argument_assignment_list(0);
	}

	private Argument_assignment_listContext argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, _parentState);
		Argument_assignment_listContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				_localctx = new ExpressionAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1051; ((ExpressionAssignmentListContext)_localctx).exp = expression(0);
				State = 1052;
				if (!(this.willNotBe(this.equalToken()))) throw new FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
				}
				break;
			case 2:
				{
				_localctx = new ArgumentAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1054; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1062;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new Argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_assignment_list);
					State = 1057;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1058; Match(COMMA);
					State = 1059; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1064;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 98, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065; _localctx.name = variable_identifier();
			State = 1066; assign();
			State = 1067; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRead_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRead_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_expressionContext read_expression() {
		Read_expressionContext _localctx = new Read_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_read_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069; Match(READ);
			State = 1070; Match(FROM);
			State = 1071; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(SParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 102, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073; Match(WRITE);
			State = 1074; _localctx.what = expression(0);
			State = 1075; Match(TO);
			State = 1076; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
	 
		public Fetch_expressionContext() { }
		public virtual void CopyFrom(Fetch_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchOneContext : Fetch_expressionContext {
		public Category_typeContext typ;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(SParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FetchOneContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchOne(this);
		}
	}
	public partial class FetchListContext : Fetch_expressionContext {
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FetchListContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchList(this);
		}
	}
	public partial class FetchAllContext : Fetch_expressionContext {
		public ExpressionContext start;
		public ExpressionContext end;
		public Category_typeContext typ;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ITerminalNode ROWS() { return GetToken(SParser.ROWS, 0); }
		public ITerminalNode TO() { return GetToken(SParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public FetchAllContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchAll(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_fetch_expression);
		try {
			State = 1107;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				_localctx = new FetchListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078; Match(FETCH);
				State = 1079; ((FetchListContext)_localctx).name = variable_identifier();
				State = 1080; Match(FROM);
				State = 1081; ((FetchListContext)_localctx).source = expression(0);
				State = 1082; Match(WHERE);
				State = 1083; ((FetchListContext)_localctx).xfilter = expression(0);
				}
				break;
			case 2:
				_localctx = new FetchOneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1085; Match(FETCH);
				State = 1086; Match(ONE);
				State = 1087; ((FetchOneContext)_localctx).typ = category_type();
				State = 1088; Match(WHERE);
				State = 1089; ((FetchOneContext)_localctx).xfilter = expression(0);
				}
				break;
			case 3:
				_localctx = new FetchAllContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1091; Match(FETCH);
				State = 1098;
				switch (TokenStream.La(1)) {
				case ALL:
					{
					State = 1092; Match(ALL);
					}
					break;
				case ROWS:
					{
					State = 1093; Match(ROWS);
					State = 1094; ((FetchAllContext)_localctx).start = expression(0);
					State = 1095; Match(TO);
					State = 1096; ((FetchAllContext)_localctx).end = expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1100; Match(LPAR);
				State = 1101; ((FetchAllContext)_localctx).typ = category_type();
				State = 1102; Match(RPAR);
				State = 1105;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 1103; Match(WHERE);
					State = 1104; ((FetchAllContext)_localctx).xfilter = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(SParser.SORTED, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(SORTED);
			State = 1110; Match(LPAR);
			State = 1111; _localctx.source = instance_expression(0);
			State = 1117;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1112; Match(COMMA);
				State = 1113; key_token();
				State = 1114; Match(EQ);
				State = 1115; _localctx.key = instance_expression(0);
				}
			}

			State = 1119; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 108, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; _localctx.inst = assignable_instance(0);
			State = 1122; assign();
			State = 1123; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 110, RULE_child_instance);
		try {
			State = 1133;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1126; Match(DOT);
				State = 1127; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1129; Match(LBRAK);
				State = 1130; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1131; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 112, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135; _localctx.items = variable_identifier_list(0);
			State = 1136; assign();
			State = 1137; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 114, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1139; Match(LF);
					}
					} 
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 116, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1145; Match(LF);
				}
				}
				State = 1148;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(SParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 118, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1150; Match(LF);
				}
				}
				State = 1153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			State = 1155; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(SParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 120, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LF) {
				{
				{
				State = 1157; Match(LF);
				}
				}
				State = 1162;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1163; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NONE() { return GetToken(SParser.NONE, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 122, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165; Match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public DeclarationsContext items;
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168;
			_la = TokenStream.La(1);
			if (_la==ABSTRACT || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ATTR - 68)) | (1L << (CATEGORY - 68)) | (1L << (CLASS - 68)) | (1L << (DEF - 68)) | (1L << (ENUM - 68)) | (1L << (NATIVE - 68)) | (1L << (SINGLETON - 68)) | (1L << (STORABLE - 68)))) != 0)) {
				{
				State = 1167; ((FullDeclarationListContext)_localctx).items = declarations(0);
				}
			}

			State = 1170; lfs();
			State = 1171; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationListItemContext : DeclarationsContext {
		public DeclarationsContext items;
		public DeclarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListItemContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclarationListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclarationListItem(this);
		}
	}
	public partial class DeclarationListContext : DeclarationsContext {
		public DeclarationContext item;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(Context, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DeclarationListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1174; ((DeclarationListContext)_localctx).item = declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListItemContext(new DeclarationsContext(_parentctx, _parentState));
					((DeclarationListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_declarations);
					State = 1176;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1177; lfp();
					State = 1178; ((DeclarationListItemContext)_localctx).item = declaration();
					}
					} 
				}
				State = 1184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ResourceDeclarationContext : DeclarationContext {
		public Resource_declarationContext decl;
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public ResourceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterResourceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitResourceDeclaration(this);
		}
	}
	public partial class MethodDeclarationContext : DeclarationContext {
		public Method_declarationContext decl;
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public MethodDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}
	public partial class CategoryDeclarationContext : DeclarationContext {
		public Category_declarationContext decl;
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public CategoryDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryDeclaration(this);
		}
	}
	public partial class AttributeDeclarationContext : DeclarationContext {
		public Attribute_declarationContext decl;
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public AttributeDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
	}
	public partial class EnumDeclarationContext : DeclarationContext {
		public Enum_declarationContext decl;
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public EnumDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_declaration);
		try {
			State = 1190;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				_localctx = new AttributeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1185; ((AttributeDeclarationContext)_localctx).decl = attribute_declaration();
				}
				break;
			case 2:
				_localctx = new CategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1186; ((CategoryDeclarationContext)_localctx).decl = category_declaration();
				}
				break;
			case 3:
				_localctx = new ResourceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1187; ((ResourceDeclarationContext)_localctx).decl = resource_declaration();
				}
				break;
			case 4:
				_localctx = new EnumDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1188; ((EnumDeclarationContext)_localctx).decl = enum_declaration();
				}
				break;
			case 5:
				_localctx = new MethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1189; ((MethodDeclarationContext)_localctx).decl = method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext decl;
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192; _localctx.decl = native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
	 
		public Enum_declarationContext() { }
		public virtual void CopyFrom(Enum_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumCategoryDeclarationContext : Enum_declarationContext {
		public Enum_category_declarationContext decl;
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public EnumCategoryDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumCategoryDeclaration(this);
		}
	}
	public partial class EnumNativeDeclarationContext : Enum_declarationContext {
		public Enum_native_declarationContext decl;
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public EnumNativeDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumNativeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumNativeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_enum_declaration);
		try {
			State = 1196;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				_localctx = new EnumCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1194; ((EnumCategoryDeclarationContext)_localctx).decl = enum_category_declaration();
				}
				break;
			case 2:
				_localctx = new EnumNativeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1195; ((EnumNativeDeclarationContext)_localctx).decl = enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
	 
		public Native_symbol_listContext() { }
		public virtual void CopyFrom(Native_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeSymbolListContext : Native_symbol_listContext {
		public Native_symbolContext item;
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolList(this);
		}
	}
	public partial class NativeSymbolListItemContext : Native_symbol_listContext {
		public Native_symbol_listContext items;
		public Native_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListItemContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		return native_symbol_list(0);
	}

	private Native_symbol_listContext native_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, _parentState);
		Native_symbol_listContext _prevctx = _localctx;
		int _startState = 134;
		EnterRecursionRule(_localctx, 134, RULE_native_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeSymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1199; ((NativeSymbolListContext)_localctx).item = native_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeSymbolListItemContext(new Native_symbol_listContext(_parentctx, _parentState));
					((NativeSymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_symbol_list);
					State = 1201;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1202; lfp();
					State = 1203; ((NativeSymbolListItemContext)_localctx).item = native_symbol();
					}
					} 
				}
				State = 1209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
	 
		public Category_symbol_listContext() { }
		public virtual void CopyFrom(Category_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategorySymbolListItemContext : Category_symbol_listContext {
		public Category_symbol_listContext items;
		public Category_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListItemContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolListItem(this);
		}
	}
	public partial class CategorySymbolListContext : Category_symbol_listContext {
		public Category_symbolContext item;
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolList(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		return category_symbol_list(0);
	}

	private Category_symbol_listContext category_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, _parentState);
		Category_symbol_listContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_category_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategorySymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1211; ((CategorySymbolListContext)_localctx).item = category_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategorySymbolListItemContext(new Category_symbol_listContext(_parentctx, _parentState));
					((CategorySymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_category_symbol_list);
					State = 1213;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1214; lfp();
					State = 1215; ((CategorySymbolListItemContext)_localctx).item = category_symbol();
					}
					} 
				}
				State = 1221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
	 
		public Symbol_listContext() { }
		public virtual void CopyFrom(Symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolListContext : Symbol_listContext {
		public Symbol_identifierContext item;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
	}
	public partial class SymbolListItemContext : Symbol_listContext {
		public Symbol_listContext items;
		public Symbol_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListItemContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		return symbol_list(0);
	}

	private Symbol_listContext symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_listContext _localctx = new Symbol_listContext(Context, _parentState);
		Symbol_listContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1223; ((SymbolListContext)_localctx).item = symbol_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SymbolListItemContext(new Symbol_listContext(_parentctx, _parentState));
					((SymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_list);
					State = 1225;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1226; Match(COMMA);
					State = 1227; ((SymbolListItemContext)_localctx).item = symbol_identifier();
					}
					} 
				}
				State = 1232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 140, RULE_attribute_constraint);
		try {
			State = 1243;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1233; Match(IN);
				State = 1234; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235; Match(IN);
				State = 1236; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1237; Match(IN);
				State = 1238; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1239; Match(MATCHING);
				State = 1240; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1241; Match(MATCHING);
				State = 1242; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 142, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(LBRAK);
			State = 1247;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 1246; _localctx.items = expression_list(0);
				}
			}

			State = 1249; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 144, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(LT);
			State = 1253;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 1252; _localctx.items = expression_list(0);
				}
			}

			State = 1255; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	 
		public Expression_listContext() { }
		public virtual void CopyFrom(Expression_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueListContext : Expression_listContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}
	public partial class ValueListItemContext : Expression_listContext {
		public Expression_listContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListItemContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueListItem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 146;
		EnterRecursionRule(_localctx, 146, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1258; ((ValueListContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueListItemContext(new Expression_listContext(_parentctx, _parentState));
					((ValueListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 1260;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1261; Match(COMMA);
					State = 1262; ((ValueListItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 148, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(LBRAK);
			State = 1269; _localctx.low = expression(0);
			State = 1270; Match(RANGE);
			State = 1271; _localctx.high = expression(0);
			State = 1272; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(SParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 150;
		EnterRecursionRule(_localctx, 150, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1275; ((PrimaryTypeContext)_localctx).p = primary_type();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1285;
					switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1277;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1278; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1279;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1280; Match(LBRAK);
						State = 1281; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1282;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1283; Match(LCURL);
						State = 1284; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 152, RULE_primary_type);
		try {
			State = 1292;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1291; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class DocumentTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DOCUMENT() { return GetToken(SParser.DOCUMENT, 0); }
		public DocumentTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocumentType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 154, RULE_native_type);
		try {
			State = 1305;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294; ((BooleanTypeContext)_localctx).t1 = Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1295; ((CharacterTypeContext)_localctx).t1 = Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1296; ((TextTypeContext)_localctx).t1 = Match(TEXT);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1297; ((IntegerTypeContext)_localctx).t1 = Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1298; ((DecimalTypeContext)_localctx).t1 = Match(DECIMAL);
				}
				break;
			case DOCUMENT:
				_localctx = new DocumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1299; ((DocumentTypeContext)_localctx).t1 = Match(DOCUMENT);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1300; ((DateTypeContext)_localctx).t1 = Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1301; ((DateTimeTypeContext)_localctx).t1 = Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1302; ((TimeTypeContext)_localctx).t1 = Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1303; ((PeriodTypeContext)_localctx).t1 = Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1304; ((CodeTypeContext)_localctx).t1 = Match(CODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 158, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 160, RULE_category_declaration);
		try {
			State = 1314;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1311; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case 2:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case 3:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1313; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
	 
		public Type_identifier_listContext() { }
		public virtual void CopyFrom(Type_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierListContext : Type_identifier_listContext {
		public Type_identifierContext item;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierList(this);
		}
	}
	public partial class TypeIdentifierListItemContext : Type_identifier_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListItemContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierListItem(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		return type_identifier_list(0);
	}

	private Type_identifier_listContext type_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, _parentState);
		Type_identifier_listContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_type_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TypeIdentifierListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1317; ((TypeIdentifierListContext)_localctx).item = type_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdentifierListItemContext(new Type_identifier_listContext(_parentctx, _parentState));
					((TypeIdentifierListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type_identifier_list);
					State = 1319;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1320; Match(COMMA);
					State = 1321; ((TypeIdentifierListItemContext)_localctx).item = type_identifier();
					}
					} 
				}
				State = 1326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
	 
		public Method_identifierContext() { }
		public virtual void CopyFrom(Method_identifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodVariableIdentifierContext : Method_identifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MethodVariableIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodVariableIdentifier(this);
		}
	}
	public partial class MethodTypeIdentifierContext : Method_identifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public MethodTypeIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_method_identifier);
		try {
			State = 1329;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new MethodVariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1327; ((MethodVariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new MethodTypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328; ((MethodTypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext name;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_identifier);
		try {
			State = 1334;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; ((VariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332; ((TypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1333; ((SymbolIdentifierContext)_localctx).name = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	 
		public Argument_listContext() { }
		public virtual void CopyFrom(Argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentListItemContext : Argument_listContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListItemContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentListItem(this);
		}
	}
	public partial class ArgumentListContext : Argument_listContext {
		public ArgumentContext item;
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 174;
		EnterRecursionRule(_localctx, 174, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1343; ((ArgumentListContext)_localctx).item = argument();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListItemContext(new Argument_listContext(_parentctx, _parentState));
					((ArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 1345;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1346; Match(COMMA);
					State = 1347; ((ArgumentListItemContext)_localctx).item = argument();
					}
					} 
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 176, RULE_argument);
		int _la;
		try {
			State = 1358;
			switch (TokenStream.La(1)) {
			case CODE:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1353; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case MUTABLE:
			case VARIABLE_IDENTIFIER:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1355;
				_la = TokenStream.La(1);
				if (_la==MUTABLE) {
					{
					State = 1354; Match(MUTABLE);
					}
				}

				State = 1357; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
	 
		public Operator_argumentContext() { }
		public virtual void CopyFrom(Operator_argumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypedArgumentContext : Operator_argumentContext {
		public Typed_argumentContext arg;
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public TypedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypedArgument(this);
		}
	}
	public partial class NamedArgumentContext : Operator_argumentContext {
		public Named_argumentContext arg;
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public NamedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 178, RULE_operator_argument);
		try {
			State = 1362;
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360; ((NamedArgumentContext)_localctx).arg = named_argument();
				}
				break;
			case 2:
				_localctx = new TypedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1361; ((TypedArgumentContext)_localctx).arg = typed_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Literal_expressionContext value;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 180, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364; _localctx.name = variable_identifier();
			State = 1367;
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 1365; Match(EQ);
				State = 1366; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 182, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369; code_type();
			State = 1370; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
	 
		public Category_or_any_typeContext() { }
		public virtual void CopyFrom(Category_or_any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyArgumentTypeContext : Category_or_any_typeContext {
		public Any_typeContext typ;
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyArgumentType(this);
		}
	}
	public partial class CategoryArgumentTypeContext : Category_or_any_typeContext {
		public TypedefContext typ;
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CategoryArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryArgumentType(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 184, RULE_category_or_any_type);
		try {
			State = 1374;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case TYPE_IDENTIFIER:
				_localctx = new CategoryArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1372; ((CategoryArgumentTypeContext)_localctx).typ = typedef(0);
				}
				break;
			case ANY:
				_localctx = new AnyArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1373; ((AnyArgumentTypeContext)_localctx).typ = any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1377; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1385;
					switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyListTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1379;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1380; Match(LBRAK);
						State = 1381; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyDictTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1382;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1383; Match(LCURL);
						State = 1384; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
	 
		public Member_method_declaration_listContext() { }
		public virtual void CopyFrom(Member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryMethodListItemContext : Member_method_declaration_listContext {
		public Member_method_declaration_listContext items;
		public Member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListItemContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodListItem(this);
		}
	}
	public partial class CategoryMethodListContext : Member_method_declaration_listContext {
		public Member_method_declarationContext item;
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodList(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		return member_method_declaration_list(0);
	}

	private Member_method_declaration_listContext member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, _parentState);
		Member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1391; ((CategoryMethodListContext)_localctx).item = member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1399;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategoryMethodListItemContext(new Member_method_declaration_listContext(_parentctx, _parentState));
					((CategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_member_method_declaration_list);
					State = 1393;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1394; lfp();
					State = 1395; ((CategoryMethodListItemContext)_localctx).item = member_method_declaration();
					}
					} 
				}
				State = 1401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_member_method_declaration);
		try {
			State = 1407;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1402; setter_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1403; getter_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1404; concrete_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1405; abstract_method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1406; operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
	 
		public Native_member_method_declaration_listContext() { }
		public virtual void CopyFrom(Native_member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryMethodListContext : Native_member_method_declaration_listContext {
		public Native_member_method_declarationContext item;
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodList(this);
		}
	}
	public partial class NativeCategoryMethodListItemContext : Native_member_method_declaration_listContext {
		public Native_member_method_declaration_listContext items;
		public Native_member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListItemContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		return native_member_method_declaration_list(0);
	}

	private Native_member_method_declaration_listContext native_member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, _parentState);
		Native_member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 192;
		EnterRecursionRule(_localctx, 192, RULE_native_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1410; ((NativeCategoryMethodListContext)_localctx).item = native_member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryMethodListItemContext(new Native_member_method_declaration_listContext(_parentctx, _parentState));
					((NativeCategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_member_method_declaration_list);
					State = 1412;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1413; lfp();
					State = 1414; ((NativeCategoryMethodListItemContext)_localctx).item = native_member_method_declaration();
					}
					} 
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_native_member_method_declaration);
		try {
			State = 1423;
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1421; member_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1422; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 196, RULE_native_category_binding);
		try {
			State = 1435;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1425; Match(JAVA);
				State = 1426; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1427; Match(CSHARP);
				State = 1428; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1429; Match(PYTHON2);
				State = 1430; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1431; Match(PYTHON3);
				State = 1432; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1433; Match(JAVASCRIPT);
				State = 1434; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Python_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 198, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437; _localctx.id_ = identifier();
			State = 1439;
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 1438; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 200, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; Match(FROM);
			State = 1442; module_token();
			State = 1443; Match(COLON);
			State = 1444; identifier();
			State = 1449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1445; Match(DOT);
					State = 1446; identifier();
					}
					} 
				}
				State = 1451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 202, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1453;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Javascript_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 204, RULE_javascript_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; _localctx.id_ = identifier();
			State = 1457;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 1456; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(SParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(SParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 206, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(FROM);
			State = 1460; module_token();
			State = 1461; Match(COLON);
			State = 1463;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1462; Match(SLASH);
				}
			}

			State = 1465; javascript_identifier();
			State = 1470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1466; Match(SLASH);
					State = 1467; javascript_identifier();
					}
					} 
				}
				State = 1472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			State = 1475;
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1473; Match(DOT);
				State = 1474; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
	 
		public Variable_identifier_listContext() { }
		public virtual void CopyFrom(Variable_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableListContext : Variable_identifier_listContext {
		public Variable_identifierContext item;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
	}
	public partial class VariableListItemContext : Variable_identifier_listContext {
		public Variable_identifier_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListItemContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableListItem(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		return variable_identifier_list(0);
	}

	private Variable_identifier_listContext variable_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, _parentState);
		Variable_identifier_listContext _prevctx = _localctx;
		int _startState = 208;
		EnterRecursionRule(_localctx, 208, RULE_variable_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new VariableListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1478; ((VariableListContext)_localctx).item = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableListItemContext(new Variable_identifier_listContext(_parentctx, _parentState));
					((VariableListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_variable_identifier_list);
					State = 1480;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1481; Match(COMMA);
					State = 1482; ((VariableListItemContext)_localctx).item = variable_identifier();
					}
					} 
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
	 
		public Method_declarationContext() { }
		public virtual void CopyFrom(Method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeMethodContext : Method_declarationContext {
		public Native_method_declarationContext decl;
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public NativeMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeMethod(this);
		}
	}
	public partial class AbstractMethodContext : Method_declarationContext {
		public Abstract_method_declarationContext decl;
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public AbstractMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAbstractMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAbstractMethod(this);
		}
	}
	public partial class ConcreteMethodContext : Method_declarationContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ConcreteMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcreteMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcreteMethod(this);
		}
	}
	public partial class TestMethodContext : Method_declarationContext {
		public Test_method_declarationContext decl;
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public TestMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTestMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTestMethod(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_method_declaration);
		try {
			State = 1492;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				_localctx = new AbstractMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1488; ((AbstractMethodContext)_localctx).decl = abstract_method_declaration();
				}
				break;
			case 2:
				_localctx = new ConcreteMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1489; ((ConcreteMethodContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 3:
				_localctx = new NativeMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1490; ((NativeMethodContext)_localctx).decl = native_method_declaration();
				}
				break;
			case 4:
				_localctx = new TestMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1491; ((TestMethodContext)_localctx).decl = test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_statementContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(SParser.COMMENT, 0); }
		public Comment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterComment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitComment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Comment_statementContext comment_statement() {
		Comment_statementContext _localctx = new Comment_statementContext(Context, State);
		EnterRule(_localctx, 212, RULE_comment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
	 
		public Native_statement_listContext() { }
		public virtual void CopyFrom(Native_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeStatementListItemContext : Native_statement_listContext {
		public Native_statement_listContext items;
		public Native_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListItemContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementListItem(this);
		}
	}
	public partial class NativeStatementListContext : Native_statement_listContext {
		public Native_statementContext item;
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		return native_statement_list(0);
	}

	private Native_statement_listContext native_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, _parentState);
		Native_statement_listContext _prevctx = _localctx;
		int _startState = 214;
		EnterRecursionRule(_localctx, 214, RULE_native_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1497; ((NativeStatementListContext)_localctx).item = native_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeStatementListItemContext(new Native_statement_listContext(_parentctx, _parentState));
					((NativeStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_statement_list);
					State = 1499;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1500; lfp();
					State = 1501; ((NativeStatementListItemContext)_localctx).item = native_statement();
					}
					} 
				}
				State = 1507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public Csharp_statementContext stmt;
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public Java_statementContext stmt;
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public Javascript_native_statementContext stmt;
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 216, RULE_native_statement);
		try {
			State = 1518;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1508; Match(JAVA);
				State = 1509; ((JavaNativeStatementContext)_localctx).stmt = java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510; Match(CSHARP);
				State = 1511; ((CSharpNativeStatementContext)_localctx).stmt = csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1512; Match(PYTHON2);
				State = 1513; ((Python2NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1514; Match(PYTHON3);
				State = 1515; ((Python3NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1516; Match(JAVASCRIPT);
				State = 1517; ((JavaScriptNativeStatementContext)_localctx).stmt = javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext stmt;
		public Python_moduleContext module;
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 218, RULE_python_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520; _localctx.stmt = python_statement();
			State = 1522;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1521; Match(SEMI);
				}
				break;
			}
			State = 1525;
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1524; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext stmt;
		public Javascript_moduleContext module;
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 220, RULE_javascript_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; _localctx.stmt = javascript_statement();
			State = 1529;
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1528; Match(SEMI);
				}
				break;
			}
			State = 1532;
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1531; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
	 
		public Statement_listContext() { }
		public virtual void CopyFrom(Statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementListContext : Statement_listContext {
		public StatementContext item;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}
	public partial class StatementListItemContext : Statement_listContext {
		public Statement_listContext items;
		public StatementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListItemContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 222;
		EnterRecursionRule(_localctx, 222, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new StatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1535; ((StatementListContext)_localctx).item = statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1543;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementListItemContext(new Statement_listContext(_parentctx, _parentState));
					((StatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 1537;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1538; lfp();
					State = 1539; ((StatementListItemContext)_localctx).item = statement();
					}
					} 
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
	 
		public Assertion_listContext() { }
		public virtual void CopyFrom(Assertion_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssertionListContext : Assertion_listContext {
		public AssertionContext item;
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertionList(this);
		}
	}
	public partial class AssertionListItemContext : Assertion_listContext {
		public Assertion_listContext items;
		public AssertionContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListItemContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertionListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertionListItem(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		return assertion_list(0);
	}

	private Assertion_listContext assertion_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assertion_listContext _localctx = new Assertion_listContext(Context, _parentState);
		Assertion_listContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_assertion_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AssertionListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1547; ((AssertionListContext)_localctx).item = assertion();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssertionListItemContext(new Assertion_listContext(_parentctx, _parentState));
					((AssertionListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assertion_list);
					State = 1549;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1550; lfp();
					State = 1551; ((AssertionListItemContext)_localctx).item = assertion();
					}
					} 
				}
				State = 1557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
	 
		public Switch_case_statement_listContext() { }
		public virtual void CopyFrom(Switch_case_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseStatementListContext : Switch_case_statement_listContext {
		public Switch_case_statementContext item;
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementList(this);
		}
	}
	public partial class SwitchCaseStatementListItemContext : Switch_case_statement_listContext {
		public Switch_case_statement_listContext items;
		public Switch_case_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListItemContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		return switch_case_statement_list(0);
	}

	private Switch_case_statement_listContext switch_case_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, _parentState);
		Switch_case_statement_listContext _prevctx = _localctx;
		int _startState = 226;
		EnterRecursionRule(_localctx, 226, RULE_switch_case_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SwitchCaseStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1559; ((SwitchCaseStatementListContext)_localctx).item = switch_case_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SwitchCaseStatementListItemContext(new Switch_case_statement_listContext(_parentctx, _parentState));
					((SwitchCaseStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_switch_case_statement_list);
					State = 1561;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1562; lfp();
					State = 1563; ((SwitchCaseStatementListItemContext)_localctx).item = switch_case_statement();
					}
					} 
				}
				State = 1569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
	 
		public Catch_statement_listContext() { }
		public virtual void CopyFrom(Catch_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchStatementListContext : Catch_statement_listContext {
		public Catch_statementContext item;
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementList(this);
		}
	}
	public partial class CatchStatementListItemContext : Catch_statement_listContext {
		public Catch_statement_listContext items;
		public Catch_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListItemContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		return catch_statement_list(0);
	}

	private Catch_statement_listContext catch_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, _parentState);
		Catch_statement_listContext _prevctx = _localctx;
		int _startState = 228;
		EnterRecursionRule(_localctx, 228, RULE_catch_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CatchStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1571; ((CatchStatementListContext)_localctx).item = catch_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1579;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CatchStatementListItemContext(new Catch_statement_listContext(_parentctx, _parentState));
					((CatchStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_catch_statement_list);
					State = 1573;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1574; lfp();
					State = 1575; ((CatchStatementListItemContext)_localctx).item = catch_statement();
					}
					} 
				}
				State = 1581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 230, RULE_literal_collection);
		try {
			State = 1596;
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1582; Match(LBRAK);
				State = 1583; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1584; Match(RANGE);
				State = 1585; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1586; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1588; Match(LBRAK);
				State = 1589; ((LiteralListLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1590; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1592; Match(LT);
				State = 1593; ((LiteralSetLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1594; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(SParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(SParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(SParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(SParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(SParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(SParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(SParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 232, RULE_atomic_literal);
		try {
			State = 1611;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1598; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1599; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1600; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1601; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1602; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1603; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1604; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1605; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1606; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1607; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1608; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1609; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case NONE:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1610; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
	 
		public Literal_list_literalContext() { }
		public virtual void CopyFrom(Literal_list_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListContext : Literal_list_literalContext {
		public Atomic_literalContext item;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}
	public partial class LiteralListItemContext : Literal_list_literalContext {
		public Literal_list_literalContext items;
		public Atomic_literalContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListItemContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralListItem(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		return literal_list_literal(0);
	}

	private Literal_list_literalContext literal_list_literal(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, _parentState);
		Literal_list_literalContext _prevctx = _localctx;
		int _startState = 234;
		EnterRecursionRule(_localctx, 234, RULE_literal_list_literal, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LiteralListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1614; ((LiteralListContext)_localctx).item = atomic_literal();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LiteralListItemContext(new Literal_list_literalContext(_parentctx, _parentState));
					((LiteralListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_literal_list_literal);
					State = 1616;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1617; Match(COMMA);
					State = 1618; ((LiteralListItemContext)_localctx).item = atomic_literal();
					}
					} 
				}
				State = 1623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 236, RULE_selectable_expression);
		try {
			State = 1628;
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1624; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1626; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1627; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 238, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(LPAR);
			State = 1633; _localctx.exp = expression(0);
			State = 1634; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
	 
		public Literal_expressionContext() { }
		public virtual void CopyFrom(Literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CollectionLiteralContext : Literal_expressionContext {
		public Collection_literalContext exp;
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public CollectionLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollectionLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollectionLiteral(this);
		}
	}
	public partial class AtomicLiteralContext : Literal_expressionContext {
		public Atomic_literalContext exp;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public AtomicLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAtomicLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAtomicLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_literal_expression);
		try {
			State = 1638;
			switch (TokenStream.La(1)) {
			case NONE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				_localctx = new AtomicLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1636; ((AtomicLiteralContext)_localctx).exp = atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
				_localctx = new CollectionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1637; ((CollectionLiteralContext)_localctx).exp = collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
	 
		public Collection_literalContext() { }
		public virtual void CopyFrom(Collection_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListLiteralContext : Collection_literalContext {
		public List_literalContext exp;
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public ListLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
	}
	public partial class RangeLiteralContext : Collection_literalContext {
		public Range_literalContext exp;
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRangeLiteral(this);
		}
	}
	public partial class TupleLiteralContext : Collection_literalContext {
		public Tuple_literalContext exp;
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public TupleLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTupleLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTupleLiteral(this);
		}
	}
	public partial class SetLiteralContext : Collection_literalContext {
		public Set_literalContext exp;
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public SetLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetLiteral(this);
		}
	}
	public partial class DictLiteralContext : Collection_literalContext {
		public Dict_literalContext exp;
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public DictLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 244, RULE_collection_literal);
		try {
			State = 1645;
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				_localctx = new RangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1640; ((RangeLiteralContext)_localctx).exp = range_literal();
				}
				break;
			case 2:
				_localctx = new ListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1641; ((ListLiteralContext)_localctx).exp = list_literal();
				}
				break;
			case 3:
				_localctx = new SetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1642; ((SetLiteralContext)_localctx).exp = set_literal();
				}
				break;
			case 4:
				_localctx = new DictLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1643; ((DictLiteralContext)_localctx).exp = dict_literal();
				}
				break;
			case 5:
				_localctx = new TupleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1644; ((TupleLiteralContext)_localctx).exp = tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public Expression_tupleContext items;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 246, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; Match(LPAR);
			State = 1649;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 1648; _localctx.items = expression_tuple(0);
				}
			}

			State = 1651; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public Dict_entry_listContext items;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 248, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(LCURL);
			State = 1655;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (EXECUTE - 88)) | (1L << (FETCH - 88)) | (1L << (MUTABLE - 88)) | (1L << (NONE - 88)) | (1L << (NOT - 88)) | (1L << (READ - 88)) | (1L << (SELF - 88)) | (1L << (SORTED - 88)) | (1L << (THIS - 88)) | (1L << (BOOLEAN_LITERAL - 88)) | (1L << (CHAR_LITERAL - 88)) | (1L << (MIN_INTEGER - 88)) | (1L << (MAX_INTEGER - 88)) | (1L << (SYMBOL_IDENTIFIER - 88)) | (1L << (TYPE_IDENTIFIER - 88)) | (1L << (VARIABLE_IDENTIFIER - 88)) | (1L << (TEXT_LITERAL - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (INTEGER_LITERAL - 152)) | (1L << (HEXA_LITERAL - 152)) | (1L << (DECIMAL_LITERAL - 152)) | (1L << (DATETIME_LITERAL - 152)) | (1L << (TIME_LITERAL - 152)) | (1L << (DATE_LITERAL - 152)) | (1L << (PERIOD_LITERAL - 152)))) != 0)) {
				{
				State = 1654; _localctx.items = dict_entry_list(0);
				}
			}

			State = 1657; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
	 
		public Expression_tupleContext() { }
		public virtual void CopyFrom(Expression_tupleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTupleContext : Expression_tupleContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueTuple(this);
		}
	}
	public partial class ValueTupleItemContext : Expression_tupleContext {
		public Expression_tupleContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleItemContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueTupleItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueTupleItem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		return expression_tuple(0);
	}

	private Expression_tupleContext expression_tuple(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, _parentState);
		Expression_tupleContext _prevctx = _localctx;
		int _startState = 250;
		EnterRecursionRule(_localctx, 250, RULE_expression_tuple, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueTupleContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1660; ((ValueTupleContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueTupleItemContext(new Expression_tupleContext(_parentctx, _parentState));
					((ValueTupleItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_tuple);
					State = 1662;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1663; Match(COMMA);
					State = 1664; ((ValueTupleItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
	 
		public Dict_entry_listContext() { }
		public virtual void CopyFrom(Dict_entry_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DictEntryListContext : Dict_entry_listContext {
		public Dict_entryContext item;
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictEntryList(this);
		}
	}
	public partial class DictEntryListItemContext : Dict_entry_listContext {
		public Dict_entry_listContext items;
		public Dict_entryContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListItemContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictEntryListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictEntryListItem(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		return dict_entry_list(0);
	}

	private Dict_entry_listContext dict_entry_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, _parentState);
		Dict_entry_listContext _prevctx = _localctx;
		int _startState = 252;
		EnterRecursionRule(_localctx, 252, RULE_dict_entry_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DictEntryListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1671; ((DictEntryListContext)_localctx).item = dict_entry();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DictEntryListItemContext(new Dict_entry_listContext(_parentctx, _parentState));
					((DictEntryListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_dict_entry_list);
					State = 1673;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1674; Match(COMMA);
					State = 1675; ((DictEntryListItemContext)_localctx).item = dict_entry();
					}
					} 
				}
				State = 1680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 254, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; _localctx.key = expression(0);
			State = 1682; Match(COLON);
			State = 1683; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 256, RULE_slice_arguments);
		try {
			State = 1694;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1686; Match(COLON);
				State = 1687; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1689; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1690; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1692; Match(COLON);
				State = 1693; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 258, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; _localctx.name = variable_identifier();
			State = 1697; assign();
			State = 1698; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext parent;
		public Child_instanceContext child;
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 260;
		EnterRecursionRule(_localctx, 260, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1701; ((RootInstanceContext)_localctx).name = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1707;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					((ChildInstanceContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1703;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1704; ((ChildInstanceContext)_localctx).child = child_instance();
					}
					} 
				}
				State = 1709;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public Category_or_any_typeContext typ;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 262, RULE_is_expression);
		try {
			State = 1714;
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1710;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1711; Match(VARIABLE_IDENTIFIER);
				State = 1712; ((IsATypeExpressionContext)_localctx).typ = category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1713; ((IsOtherExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_operator);
		try {
			State = 1722;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1716; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1717; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1718; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1719; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1720; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1721; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 266, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1725;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 268, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1728;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 270, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1731;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 272, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(SParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 274, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(SParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 276, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(SParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 278, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(SParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(SParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 280, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 282, RULE_javascript_statement);
		try {
			State = 1750;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1743; Match(RETURN);
				State = 1744; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1745; Match(SEMI);
				}
				break;
			case LPAR:
			case LBRAK:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1747; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1748; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 284;
		EnterRecursionRule(_localctx, 284, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1753; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1759;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1755;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1756; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 1761;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_javascript_primary_expression);
		try {
			State = 1768;
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1762; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1763; javascript_parenthesis_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1764; javascript_identifier_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1765; javascript_literal_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1766; javascript_method_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1767; javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 288, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaScriptMemberExpressionContext : Javascript_selector_expressionContext {
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavaScriptMemberExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMemberExpression(this);
		}
	}
	public partial class JavaScriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavaScriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptItemExpression(this);
		}
	}
	public partial class JavaScriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext method;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavaScriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_javascript_selector_expression);
		try {
			State = 1777;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				_localctx = new JavaScriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1772; Match(DOT);
				State = 1773; ((JavaScriptMethodExpressionContext)_localctx).method = javascript_method_expression();
				}
				break;
			case 2:
				_localctx = new JavaScriptMemberExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1774; Match(DOT);
				State = 1775; ((JavaScriptMemberExpressionContext)_localctx).name = javascript_identifier();
				}
				break;
			case 3:
				_localctx = new JavaScriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1776; ((JavaScriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 292, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779; _localctx.name = javascript_identifier();
			State = 1780; Match(LPAR);
			State = 1782;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (SELF - 118)) | (1L << (TEST - 118)) | (1L << (THIS - 118)) | (1L << (WRITE - 118)) | (1L << (BOOLEAN_LITERAL - 118)) | (1L << (CHAR_LITERAL - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)) | (1L << (TEXT_LITERAL - 118)) | (1L << (INTEGER_LITERAL - 118)) | (1L << (DECIMAL_LITERAL - 118)))) != 0)) {
				{
				State = 1781; _localctx.args = javascript_arguments(0);
				}
			}

			State = 1784; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 294;
		EnterRecursionRule(_localctx, 294, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1787; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1794;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 1789;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1790; Match(COMMA);
					State = 1791; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 1796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; Match(LBRAK);
			State = 1798; _localctx.exp = javascript_expression(0);
			State = 1799; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(LPAR);
			State = 1802; _localctx.exp = javascript_expression(0);
			State = 1803; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, State);
		EnterRule(_localctx, 300, RULE_javascript_identifier_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_javascript_literal_expression);
		try {
			State = 1812;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1807; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1808; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1809; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1810; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1811; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 304, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (TEST - 118)) | (1L << (WRITE - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 306, RULE_python_statement);
		try {
			State = 1819;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1816; Match(RETURN);
				State = 1817; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1818; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 308;
		EnterRecursionRule(_localctx, 308, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1822; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1828;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 1824;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1825; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 1830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_python_primary_expression);
		try {
			State = 1835;
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1831; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1832; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1833; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1834; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_python_selector_expression);
		try {
			State = 1843;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1837; Match(DOT);
				State = 1838; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1839; Match(LBRAK);
				State = 1840; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 1841; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845; _localctx.name = python_identifier();
			State = 1846; Match(LPAR);
			State = 1848;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (SELF - 118)) | (1L << (TEST - 118)) | (1L << (THIS - 118)) | (1L << (WRITE - 118)) | (1L << (BOOLEAN_LITERAL - 118)) | (1L << (CHAR_LITERAL - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)) | (1L << (TEXT_LITERAL - 118)) | (1L << (INTEGER_LITERAL - 118)) | (1L << (DECIMAL_LITERAL - 118)))) != 0)) {
				{
				State = 1847; _localctx.args = python_argument_list();
				}
			}

			State = 1850; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 316, RULE_python_argument_list);
		try {
			State = 1858;
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1854; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 1855; Match(COMMA);
				State = 1856; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1861; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1868;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 1863;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1864; Match(COMMA);
					State = 1865; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 1870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 320;
		EnterRecursionRule(_localctx, 320, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1872; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 1873; Match(EQ);
			State = 1874; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1884;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 1876;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1877; Match(COMMA);
					State = 1878; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 1879; Match(EQ);
					State = 1880; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 1886;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887; Match(LPAR);
			State = 1888; _localctx.exp = python_expression(0);
			State = 1889; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonPromptoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPromptoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPromptoIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 324;
		EnterRecursionRule(_localctx, 324, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1892; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1893; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1901;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 1896;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1897; Match(DOT);
					State = 1898; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 1903;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_python_literal_expression);
		try {
			State = 1909;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1906; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1907; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1908; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (SELF - 118)) | (1L << (TEST - 118)) | (1L << (THIS - 118)) | (1L << (WRITE - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 330, RULE_java_statement);
		try {
			State = 1920;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1913; Match(RETURN);
				State = 1914; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 1915; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1917; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 1918; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 332;
		EnterRecursionRule(_localctx, 332, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1923; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1929;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 1925;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1926; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 1931;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_java_primary_expression);
		try {
			State = 1936;
			switch (TokenStream.La(1)) {
			case SELF:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1932; java_this_expression();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933; java_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1934; java_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1935; java_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1938; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_java_selector_expression);
		try {
			State = 1943;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1940; Match(DOT);
				State = 1941; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1942; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 340, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945; _localctx.name = java_identifier();
			State = 1946; Match(LPAR);
			State = 1948;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (SELF - 118)) | (1L << (TEST - 118)) | (1L << (THIS - 118)) | (1L << (WRITE - 118)) | (1L << (BOOLEAN_LITERAL - 118)) | (1L << (CHAR_LITERAL - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (NATIVE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)) | (1L << (TEXT_LITERAL - 118)) | (1L << (INTEGER_LITERAL - 118)) | (1L << (DECIMAL_LITERAL - 118)))) != 0)) {
				{
				State = 1947; _localctx.args = java_arguments(0);
				}
			}

			State = 1950; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1953; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1960;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 1955;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1956; Match(COMMA);
					State = 1957; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 1962;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1963; Match(LBRAK);
			State = 1964; _localctx.exp = java_expression(0);
			State = 1965; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967; Match(LPAR);
			State = 1968; _localctx.exp = java_expression(0);
			State = 1969; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 348;
		EnterRecursionRule(_localctx, 348, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1972; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1979;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 1974;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1975; Match(DOT);
					State = 1976; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 1981;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 350;
		EnterRecursionRule(_localctx, 350, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1983; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1989;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 1985;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1986; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 1991;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_java_literal_expression);
		try {
			State = 1997;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1994; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1995; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1996; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(SParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 354, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (TEST - 118)) | (1L << (WRITE - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (NATIVE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 356, RULE_csharp_statement);
		try {
			State = 2008;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2001; Match(RETURN);
				State = 2002; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 2003; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2005; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 2006; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 358;
		EnterRecursionRule(_localctx, 358, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2011; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2017;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 2013;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2014; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 2019;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_csharp_primary_expression);
		try {
			State = 2024;
			switch (TokenStream.La(1)) {
			case SELF:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2020; csharp_this_expression();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2021; csharp_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2022; csharp_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2023; csharp_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 364, RULE_csharp_selector_expression);
		try {
			State = 2031;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2028; Match(DOT);
				State = 2029; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2030; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033; _localctx.name = csharp_identifier();
			State = 2034; Match(LPAR);
			State = 2036;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (SELF - 118)) | (1L << (TEST - 118)) | (1L << (THIS - 118)) | (1L << (WRITE - 118)) | (1L << (BOOLEAN_LITERAL - 118)) | (1L << (CHAR_LITERAL - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)) | (1L << (DOLLAR_IDENTIFIER - 118)) | (1L << (TEXT_LITERAL - 118)) | (1L << (INTEGER_LITERAL - 118)) | (1L << (DECIMAL_LITERAL - 118)))) != 0)) {
				{
				State = 2035; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2038; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 368;
		EnterRecursionRule(_localctx, 368, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2041; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2048;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2043;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2044; Match(COMMA);
					State = 2045; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2050;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2051; Match(LBRAK);
			State = 2052; _localctx.exp = csharp_expression(0);
			State = 2053; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055; Match(LPAR);
			State = 2056; _localctx.exp = csharp_expression(0);
			State = 2057; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}
	public partial class CSharpPromptoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPromptoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 374;
		EnterRecursionRule(_localctx, 374, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2060; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2061; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2069;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2064;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2065; Match(DOT);
					State = 2066; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2071;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_csharp_literal_expression);
		try {
			State = 2077;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2072; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2073; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2074; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2075; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2076; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 378, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (READ - 118)) | (1L << (TEST - 118)) | (1L << (WRITE - 118)) | (1L << (SYMBOL_IDENTIFIER - 118)) | (1L << (TYPE_IDENTIFIER - 118)) | (1L << (VARIABLE_IDENTIFIER - 118)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 26: return callable_parent_sempred((Callable_parentContext)_localctx, predIndex);
		case 36: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 41: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 43: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 45: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 48: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 55: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 63: return declarations_sempred((DeclarationsContext)_localctx, predIndex);
		case 67: return native_symbol_list_sempred((Native_symbol_listContext)_localctx, predIndex);
		case 68: return category_symbol_list_sempred((Category_symbol_listContext)_localctx, predIndex);
		case 69: return symbol_list_sempred((Symbol_listContext)_localctx, predIndex);
		case 73: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 75: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 81: return type_identifier_list_sempred((Type_identifier_listContext)_localctx, predIndex);
		case 87: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		case 93: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 94: return member_method_declaration_list_sempred((Member_method_declaration_listContext)_localctx, predIndex);
		case 96: return native_member_method_declaration_list_sempred((Native_member_method_declaration_listContext)_localctx, predIndex);
		case 101: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 104: return variable_identifier_list_sempred((Variable_identifier_listContext)_localctx, predIndex);
		case 107: return native_statement_list_sempred((Native_statement_listContext)_localctx, predIndex);
		case 111: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 112: return assertion_list_sempred((Assertion_listContext)_localctx, predIndex);
		case 113: return switch_case_statement_list_sempred((Switch_case_statement_listContext)_localctx, predIndex);
		case 114: return catch_statement_list_sempred((Catch_statement_listContext)_localctx, predIndex);
		case 117: return literal_list_literal_sempred((Literal_list_literalContext)_localctx, predIndex);
		case 125: return expression_tuple_sempred((Expression_tupleContext)_localctx, predIndex);
		case 126: return dict_entry_list_sempred((Dict_entry_listContext)_localctx, predIndex);
		case 130: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 131: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 133: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 134: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 135: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 142: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 147: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 154: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 159: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 160: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 162: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 166: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 171: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 174: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 175: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 179: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 184: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 187: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool callable_parent_sempred(Callable_parentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 18);
		case 13: return Precpred(Context, 17);
		case 14: return Precpred(Context, 16);
		case 15: return Precpred(Context, 15);
		case 16: return Precpred(Context, 14);
		case 17: return Precpred(Context, 13);
		case 18: return Precpred(Context, 11);
		case 19: return Precpred(Context, 10);
		case 20: return Precpred(Context, 9);
		case 21: return Precpred(Context, 8);
		case 22: return Precpred(Context, 7);
		case 23: return Precpred(Context, 6);
		case 24: return Precpred(Context, 5);
		case 25: return Precpred(Context, 4);
		case 26: return Precpred(Context, 20);
		case 27: return Precpred(Context, 19);
		case 28: return Precpred(Context, 12);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return this.wasNot(SParser.WS);
		case 31: return this.wasNot(SParser.WS);
		case 32: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.willNotBe(this.equalToken());
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.wasNot(SParser.WS);
		case 36: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_symbol_list_sempred(Native_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool category_symbol_list_sempred(Category_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_list_sempred(Symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_identifier_list_sempred(Type_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 1);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 2);
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_method_declaration_list_sempred(Member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_member_method_declaration_list_sempred(Native_member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool variable_identifier_list_sempred(Variable_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_statement_list_sempred(Native_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assertion_list_sempred(Assertion_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool switch_case_statement_list_sempred(Switch_case_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool catch_statement_list_sempred(Catch_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool literal_list_literal_sempred(Literal_list_literalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_tuple_sempred(Expression_tupleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dict_entry_list_sempred(Dict_entry_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return this.willBeAOrAn();
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xA0\x824\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x185\n\x2\x3\x2"+
		"\x5\x2\x188\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x1A1\n\x5\x3\x5\x3\x5\x3\x6\x5\x6\x1A6\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1B1\n\x6\x3\x6"+
		"\x3\x6\x3\a\x5\a\x1B6\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x5\a\x1C1\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1C8\n\a\x3\a\x3\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1D5\n\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1E3\n\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x5\r\x1FF\n\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\x206\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5"+
		"\r\x20F\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x218\n\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x221\n\xE\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\x234\n\x10\f\x10\xE\x10\x237\v\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x240\n\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x245\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x24B"+
		"\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x250\n\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x25C\n\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x261\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x279\n\x15\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x284\n"+
		"\x17\x3\x17\x3\x17\x5\x17\x288\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x29B\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x2A5\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2AE\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a"+
		"\x1C\x2B5\n\x1C\f\x1C\xE\x1C\x2B8\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x5\x1D\x2C0\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2DD\n \x3 \x3 \x3!\x3!\x3!"+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x2F0\n!\x3\"\x3\""+
		"\x3\"\x3\"\x5\"\x2F6\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%"+
		"\x3%\x3%\x3%\x3%\x3%\x5%\x318\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x321"+
		"\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\a&\x336\n&\f&\xE&\x339\v&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x5(\x346\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x34F\n(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x358\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x36F\n)\x3*\x3*"+
		"\x5*\x373\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x5+\x387\n+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\a+\x3E7\n+\f+\xE"+
		"+\x3EA\v+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\a-\x3F3\n-\f-\xE-\x3F6\v-\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x5.\x3FE\n.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/"+
		"\x3/\x3/\x3/\x5/\x40D\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x5\x31\x414"+
		"\n\x31\x3\x31\x3\x31\x3\x31\x5\x31\x419\n\x31\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x5\x32\x422\n\x32\x3\x32\x3\x32\x3\x32\a\x32"+
		"\x427\n\x32\f\x32\xE\x32\x42A\v\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x44D\n"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x454\n\x36\x5\x36\x456"+
		"\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37"+
		"\x460\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x470\n\x39\x3:\x3:\x3:"+
		"\x3:\x3;\a;\x477\n;\f;\xE;\x47A\v;\x3<\x6<\x47D\n<\r<\xE<\x47E\x3=\x6"+
		"=\x482\n=\r=\xE=\x483\x3=\x3=\x3>\a>\x489\n>\f>\xE>\x48C\v>\x3>\x3>\x3"+
		"?\x3?\x3@\x5@\x493\n@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\a\x41\x49F\n\x41\f\x41\xE\x41\x4A2\v\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x5\x42\x4A9\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x5\x44"+
		"\x4AF\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\a\x45\x4B8"+
		"\n\x45\f\x45\xE\x45\x4BB\v\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\a\x46\x4C4\n\x46\f\x46\xE\x46\x4C7\v\x46\x3G\x3G\x3G\x3G\x3G\x3"+
		"G\aG\x4CF\nG\fG\xEG\x4D2\vG\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x5"+
		"H\x4DE\nH\x3I\x3I\x5I\x4E2\nI\x3I\x3I\x3J\x3J\x5J\x4E8\nJ\x3J\x3J\x3K"+
		"\x3K\x3K\x3K\x3K\x3K\aK\x4F2\nK\fK\xEK\x4F5\vK\x3L\x3L\x3L\x3L\x3L\x3"+
		"L\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\aM\x508\nM\fM\xEM\x50B\v"+
		"M\x3N\x3N\x5N\x50F\nN\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O"+
		"\x51C\nO\x3P\x3P\x3Q\x3Q\x3R\x3R\x3R\x5R\x525\nR\x3S\x3S\x3S\x3S\x3S\x3"+
		"S\aS\x52D\nS\fS\xES\x530\vS\x3T\x3T\x5T\x534\nT\x3U\x3U\x3U\x5U\x539\n"+
		"U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\aY\x547\nY\fY\xEY\x54A"+
		"\vY\x3Z\x3Z\x5Z\x54E\nZ\x3Z\x5Z\x551\nZ\x3[\x3[\x5[\x555\n[\x3\\\x3\\"+
		"\x3\\\x5\\\x55A\n\\\x3]\x3]\x3]\x3^\x3^\x5^\x561\n^\x3_\x3_\x3_\x3_\x3"+
		"_\x3_\x3_\x3_\x3_\a_\x56C\n_\f_\xE_\x56F\v_\x3`\x3`\x3`\x3`\x3`\x3`\x3"+
		"`\a`\x578\n`\f`\xE`\x57B\v`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61"+
		"\x582\n\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\a\x62\x58B"+
		"\n\x62\f\x62\xE\x62\x58E\v\x62\x3\x63\x3\x63\x5\x63\x592\n\x63\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64"+
		"\x59E\n\x64\x3\x65\x3\x65\x5\x65\x5A2\n\x65\x3\x66\x3\x66\x3\x66\x3\x66"+
		"\x3\x66\x3\x66\a\x66\x5AA\n\x66\f\x66\xE\x66\x5AD\v\x66\x3g\x3g\x3g\x3"+
		"h\x3h\x5h\x5B4\nh\x3i\x3i\x3i\x3i\x5i\x5BA\ni\x3i\x3i\x3i\ai\x5BF\ni\f"+
		"i\xEi\x5C2\vi\x3i\x3i\x5i\x5C6\ni\x3j\x3j\x3j\x3j\x3j\x3j\aj\x5CE\nj\f"+
		"j\xEj\x5D1\vj\x3k\x3k\x3k\x3k\x5k\x5D7\nk\x3l\x3l\x3m\x3m\x3m\x3m\x3m"+
		"\x3m\x3m\am\x5E2\nm\fm\xEm\x5E5\vm\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3n\x3"+
		"n\x3n\x5n\x5F1\nn\x3o\x3o\x5o\x5F5\no\x3o\x5o\x5F8\no\x3p\x3p\x5p\x5FC"+
		"\np\x3p\x5p\x5FF\np\x3q\x3q\x3q\x3q\x3q\x3q\x3q\aq\x608\nq\fq\xEq\x60B"+
		"\vq\x3r\x3r\x3r\x3r\x3r\x3r\x3r\ar\x614\nr\fr\xEr\x617\vr\x3s\x3s\x3s"+
		"\x3s\x3s\x3s\x3s\as\x620\ns\fs\xEs\x623\vs\x3t\x3t\x3t\x3t\x3t\x3t\x3"+
		"t\at\x62C\nt\ft\xEt\x62F\vt\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3"+
		"u\x3u\x3u\x3u\x5u\x63F\nu\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v"+
		"\x3v\x3v\x5v\x64E\nv\x3w\x3w\x3w\x3w\x3w\x3w\aw\x656\nw\fw\xEw\x659\v"+
		"w\x3x\x3x\x3x\x3x\x5x\x65F\nx\x3y\x3y\x3z\x3z\x3z\x3z\x3{\x3{\x5{\x669"+
		"\n{\x3|\x3|\x3|\x3|\x3|\x5|\x670\n|\x3}\x3}\x5}\x674\n}\x3}\x3}\x3~\x3"+
		"~\x5~\x67A\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\a\x7F"+
		"\x684\n\x7F\f\x7F\xE\x7F\x687\v\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80"+
		"\x3\x80\a\x80\x68F\n\x80\f\x80\xE\x80\x692\v\x80\x3\x81\x3\x81\x3\x81"+
		"\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x5\x82\x6A1\n\x82\x3\x83\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3"+
		"\x84\x3\x84\a\x84\x6AC\n\x84\f\x84\xE\x84\x6AF\v\x84\x3\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\x6B5\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86"+
		"\x5\x86\x6BD\n\x86\x3\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3\x89\x3"+
		"\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3"+
		"\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x6D9"+
		"\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\a\x90\x6E0\n\x90\f\x90\xE\x90"+
		"\x6E3\v\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x5\x91\x6EB\n\x91"+
		"\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\x6F4\n\x93\x3"+
		"\x94\x3\x94\x3\x94\x5\x94\x6F9\n\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\a\x95\x703\n\x95\f\x95\xE\x95\x706\v\x95\x3\x96"+
		"\x3\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\x717\n\x99\x3\x9A\x3\x9A\x3\x9B\x3"+
		"\x9B\x3\x9B\x5\x9B\x71E\n\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\a\x9C"+
		"\x725\n\x9C\f\x9C\xE\x9C\x728\v\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D"+
		"\x72E\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x736\n\x9E"+
		"\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x73B\n\x9F\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x745\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\a\xA1\x74D\n\xA1\f\xA1\xE\xA1\x750\v\xA1\x3\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\a\xA2"+
		"\x75D\n\xA2\f\xA2\xE\xA2\x760\v\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA4"+
		"\x3\xA4\x3\xA4\x5\xA4\x769\n\xA4\x3\xA4\x3\xA4\x3\xA4\a\xA4\x76E\n\xA4"+
		"\f\xA4\xE\xA4\x771\v\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\x778"+
		"\n\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x5\xA7\x783\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\a\xA8\x78A\n\xA8"+
		"\f\xA8\xE\xA8\x78D\v\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x793\n\xA9"+
		"\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x79A\n\xAB\x3\xAC\x3\xAC\x3"+
		"\xAC\x5\xAC\x79F\n\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\a\xAD\x7A9\n\xAD\f\xAD\xE\xAD\x7AC\v\xAD\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0"+
		"\x3\xB0\a\xB0\x7BC\n\xB0\f\xB0\xE\xB0\x7BF\v\xB0\x3\xB1\x3\xB1\x3\xB1"+
		"\x3\xB1\x3\xB1\a\xB1\x7C6\n\xB1\f\xB1\xE\xB1\x7C9\v\xB1\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x7D0\n\xB2\x3\xB3\x3\xB3\x3\xB4\x3\xB4\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x7DB\n\xB4\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\a\xB5\x7E2\n\xB5\f\xB5\xE\xB5\x7E5\v\xB5\x3\xB6\x3\xB6"+
		"\x3\xB6\x3\xB6\x5\xB6\x7EB\n\xB6\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x5"+
		"\xB8\x7F2\n\xB8\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x7F7\n\xB9\x3\xB9\x3\xB9\x3"+
		"\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\a\xBA\x801\n\xBA\f\xBA\xE\xBA"+
		"\x804\v\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3"+
		"\xBD\x3\xBD\x3\xBD\x5\xBD\x811\n\xBD\x3\xBD\x3\xBD\x3\xBD\a\xBD\x816\n"+
		"\xBD\f\xBD\xE\xBD\x819\v\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE"+
		"\x820\n\xBE\x3\xBF\x3\xBF\x3\xBF\x2*\x1E\x36JTX\x62\x80\x88\x8A\x8C\x94"+
		"\x98\xA4\xB0\xBC\xBE\xC2\xD2\xD8\xE0\xE2\xE4\xE6\xEC\xFC\xFE\x106\x11E"+
		"\x128\x136\x140\x142\x146\x14E\x158\x15E\x160\x168\x172\x178\xC0\x2\x4"+
		"\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36"+
		"\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84"+
		"\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8"+
		"\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC"+
		"\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0"+
		"\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C\x10E\x110"+
		"\x112\x114\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128\x12A\x12C"+
		"\x12E\x130\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144\x146\x148"+
		"\x14A\x14C\x14E\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160\x162\x164"+
		"\x166\x168\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C\x2\n\x3\x2"+
		"LM\x3\x2\"#\x4\x2~~\x86\x86\x4\x2\'\'ii\b\x2\x34<xx\x85\x85\x8F\x8F\x94"+
		"\x96\x98\x98\b\x2\x34<xx~~\x85\x86\x8F\x8F\x94\x96\a\x2\x34<xx\x85\x85"+
		"\x8F\x8F\x94\x98\a\x2\x34<xx\x85\x85\x8F\x8F\x94\x96\x883\x2\x17E\x3\x2"+
		"\x2\x2\x4\x18F\x3\x2\x2\x2\x6\x199\x3\x2\x2\x2\b\x19D\x3\x2\x2\x2\n\x1A5"+
		"\x3\x2\x2\x2\f\x1B5\x3\x2\x2\x2\xE\x1CB\x3\x2\x2\x2\x10\x1D8\x3\x2\x2"+
		"\x2\x12\x1DA\x3\x2\x2\x2\x14\x1E9\x3\x2\x2\x2\x16\x1F3\x3\x2\x2\x2\x18"+
		"\x1FE\x3\x2\x2\x2\x1A\x212\x3\x2\x2\x2\x1C\x224\x3\x2\x2\x2\x1E\x22C\x3"+
		"\x2\x2\x2 \x238\x3\x2\x2\x2\"\x23A\x3\x2\x2\x2$\x246\x3\x2\x2\x2&\x256"+
		"\x3\x2\x2\x2(\x267\x3\x2\x2\x2*\x27A\x3\x2\x2\x2,\x27C\x3\x2\x2\x2.\x29A"+
		"\x3\x2\x2\x2\x30\x29C\x3\x2\x2\x2\x32\x2A1\x3\x2\x2\x2\x34\x2AD\x3\x2"+
		"\x2\x2\x36\x2AF\x3\x2\x2\x2\x38\x2BF\x3\x2\x2\x2:\x2C1\x3\x2\x2\x2<\x2C8"+
		"\x3\x2\x2\x2>\x2CF\x3\x2\x2\x2@\x2EF\x3\x2\x2\x2\x42\x2F1\x3\x2\x2\x2"+
		"\x44\x2FE\x3\x2\x2\x2\x46\x307\x3\x2\x2\x2H\x30E\x3\x2\x2\x2J\x322\x3"+
		"\x2\x2\x2L\x33A\x3\x2\x2\x2N\x33D\x3\x2\x2\x2P\x36E\x3\x2\x2\x2R\x370"+
		"\x3\x2\x2\x2T\x386\x3\x2\x2\x2V\x3EB\x3\x2\x2\x2X\x3ED\x3\x2\x2\x2Z\x3FD"+
		"\x3\x2\x2\x2\\\x40C\x3\x2\x2\x2^\x40E\x3\x2\x2\x2`\x413\x3\x2\x2\x2\x62"+
		"\x421\x3\x2\x2\x2\x64\x42B\x3\x2\x2\x2\x66\x42F\x3\x2\x2\x2h\x433\x3\x2"+
		"\x2\x2j\x455\x3\x2\x2\x2l\x457\x3\x2\x2\x2n\x463\x3\x2\x2\x2p\x46F\x3"+
		"\x2\x2\x2r\x471\x3\x2\x2\x2t\x478\x3\x2\x2\x2v\x47C\x3\x2\x2\x2x\x481"+
		"\x3\x2\x2\x2z\x48A\x3\x2\x2\x2|\x48F\x3\x2\x2\x2~\x492\x3\x2\x2\x2\x80"+
		"\x497\x3\x2\x2\x2\x82\x4A8\x3\x2\x2\x2\x84\x4AA\x3\x2\x2\x2\x86\x4AE\x3"+
		"\x2\x2\x2\x88\x4B0\x3\x2\x2\x2\x8A\x4BC\x3\x2\x2\x2\x8C\x4C8\x3\x2\x2"+
		"\x2\x8E\x4DD\x3\x2\x2\x2\x90\x4DF\x3\x2\x2\x2\x92\x4E5\x3\x2\x2\x2\x94"+
		"\x4EB\x3\x2\x2\x2\x96\x4F6\x3\x2\x2\x2\x98\x4FC\x3\x2\x2\x2\x9A\x50E\x3"+
		"\x2\x2\x2\x9C\x51B\x3\x2\x2\x2\x9E\x51D\x3\x2\x2\x2\xA0\x51F\x3\x2\x2"+
		"\x2\xA2\x524\x3\x2\x2\x2\xA4\x526\x3\x2\x2\x2\xA6\x533\x3\x2\x2\x2\xA8"+
		"\x538\x3\x2\x2\x2\xAA\x53A\x3\x2\x2\x2\xAC\x53C\x3\x2\x2\x2\xAE\x53E\x3"+
		"\x2\x2\x2\xB0\x540\x3\x2\x2\x2\xB2\x550\x3\x2\x2\x2\xB4\x554\x3\x2\x2"+
		"\x2\xB6\x556\x3\x2\x2\x2\xB8\x55B\x3\x2\x2\x2\xBA\x560\x3\x2\x2\x2\xBC"+
		"\x562\x3\x2\x2\x2\xBE\x570\x3\x2\x2\x2\xC0\x581\x3\x2\x2\x2\xC2\x583\x3"+
		"\x2\x2\x2\xC4\x591\x3\x2\x2\x2\xC6\x59D\x3\x2\x2\x2\xC8\x59F\x3\x2\x2"+
		"\x2\xCA\x5A3\x3\x2\x2\x2\xCC\x5AE\x3\x2\x2\x2\xCE\x5B1\x3\x2\x2\x2\xD0"+
		"\x5B5\x3\x2\x2\x2\xD2\x5C7\x3\x2\x2\x2\xD4\x5D6\x3\x2\x2\x2\xD6\x5D8\x3"+
		"\x2\x2\x2\xD8\x5DA\x3\x2\x2\x2\xDA\x5F0\x3\x2\x2\x2\xDC\x5F2\x3\x2\x2"+
		"\x2\xDE\x5F9\x3\x2\x2\x2\xE0\x600\x3\x2\x2\x2\xE2\x60C\x3\x2\x2\x2\xE4"+
		"\x618\x3\x2\x2\x2\xE6\x624\x3\x2\x2\x2\xE8\x63E\x3\x2\x2\x2\xEA\x64D\x3"+
		"\x2\x2\x2\xEC\x64F\x3\x2\x2\x2\xEE\x65E\x3\x2\x2\x2\xF0\x660\x3\x2\x2"+
		"\x2\xF2\x662\x3\x2\x2\x2\xF4\x668\x3\x2\x2\x2\xF6\x66F\x3\x2\x2\x2\xF8"+
		"\x671\x3\x2\x2\x2\xFA\x677\x3\x2\x2\x2\xFC\x67D\x3\x2\x2\x2\xFE\x688\x3"+
		"\x2\x2\x2\x100\x693\x3\x2\x2\x2\x102\x6A0\x3\x2\x2\x2\x104\x6A2\x3\x2"+
		"\x2\x2\x106\x6A6\x3\x2\x2\x2\x108\x6B4\x3\x2\x2\x2\x10A\x6BC\x3\x2\x2"+
		"\x2\x10C\x6BE\x3\x2\x2\x2\x10E\x6C1\x3\x2\x2\x2\x110\x6C4\x3\x2\x2\x2"+
		"\x112\x6C7\x3\x2\x2\x2\x114\x6C9\x3\x2\x2\x2\x116\x6CB\x3\x2\x2\x2\x118"+
		"\x6CD\x3\x2\x2\x2\x11A\x6CF\x3\x2\x2\x2\x11C\x6D8\x3\x2\x2\x2\x11E\x6DA"+
		"\x3\x2\x2\x2\x120\x6EA\x3\x2\x2\x2\x122\x6EC\x3\x2\x2\x2\x124\x6F3\x3"+
		"\x2\x2\x2\x126\x6F5\x3\x2\x2\x2\x128\x6FC\x3\x2\x2\x2\x12A\x707\x3\x2"+
		"\x2\x2\x12C\x70B\x3\x2\x2\x2\x12E\x70F\x3\x2\x2\x2\x130\x716\x3\x2\x2"+
		"\x2\x132\x718\x3\x2\x2\x2\x134\x71D\x3\x2\x2\x2\x136\x71F\x3\x2\x2\x2"+
		"\x138\x72D\x3\x2\x2\x2\x13A\x735\x3\x2\x2\x2\x13C\x737\x3\x2\x2\x2\x13E"+
		"\x744\x3\x2\x2\x2\x140\x746\x3\x2\x2\x2\x142\x751\x3\x2\x2\x2\x144\x761"+
		"\x3\x2\x2\x2\x146\x768\x3\x2\x2\x2\x148\x777\x3\x2\x2\x2\x14A\x779\x3"+
		"\x2\x2\x2\x14C\x782\x3\x2\x2\x2\x14E\x784\x3\x2\x2\x2\x150\x792\x3\x2"+
		"\x2\x2\x152\x794\x3\x2\x2\x2\x154\x799\x3\x2\x2\x2\x156\x79B\x3\x2\x2"+
		"\x2\x158\x7A2\x3\x2\x2\x2\x15A\x7AD\x3\x2\x2\x2\x15C\x7B1\x3\x2\x2\x2"+
		"\x15E\x7B5\x3\x2\x2\x2\x160\x7C0\x3\x2\x2\x2\x162\x7CF\x3\x2\x2\x2\x164"+
		"\x7D1\x3\x2\x2\x2\x166\x7DA\x3\x2\x2\x2\x168\x7DC\x3\x2\x2\x2\x16A\x7EA"+
		"\x3\x2\x2\x2\x16C\x7EC\x3\x2\x2\x2\x16E\x7F1\x3\x2\x2\x2\x170\x7F3\x3"+
		"\x2\x2\x2\x172\x7FA\x3\x2\x2\x2\x174\x805\x3\x2\x2\x2\x176\x809\x3\x2"+
		"\x2\x2\x178\x810\x3\x2\x2\x2\x17A\x81F\x3\x2\x2\x2\x17C\x821\x3\x2\x2"+
		"\x2\x17E\x17F\aW\x2\x2\x17F\x180\x5\xACW\x2\x180\x187\a\x16\x2\x2\x181"+
		"\x184\x5\xACW\x2\x182\x183\a\x13\x2\x2\x183\x185\x5 \x11\x2\x184\x182"+
		"\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x188\x5"+
		" \x11\x2\x187\x181\x3\x2\x2\x2\x187\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2"+
		"\x2\x189\x18A\a\x17\x2\x2\x18A\x18B\a\x11\x2\x2\x18B\x18C\x5x=\x2\x18C"+
		"\x18D\x5\x8A\x46\x2\x18D\x18E\x5z>\x2\x18E\x3\x3\x2\x2\x2\x18F\x190\a"+
		"W\x2\x2\x190\x191\x5\xACW\x2\x191\x192\a\x16\x2\x2\x192\x193\x5\x9CO\x2"+
		"\x193\x194\a\x17\x2\x2\x194\x195\a\x11\x2\x2\x195\x196\x5x=\x2\x196\x197"+
		"\x5\x88\x45\x2\x197\x198\x5z>\x2\x198\x5\x3\x2\x2\x2\x199\x19A\x5\xAE"+
		"X\x2\x19A\x19B\a-\x2\x2\x19B\x19C\x5T+\x2\x19C\a\x3\x2\x2\x2\x19D\x19E"+
		"\x5\xAEX\x2\x19E\x1A0\a\x16\x2\x2\x19F\x1A1\x5\x62\x32\x2\x1A0\x19F\x3"+
		"\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\a\x17"+
		"\x2\x2\x1A3\t\x3\x2\x2\x2\x1A4\x1A6\a\x82\x2\x2\x1A5\x1A4\x3\x2\x2\x2"+
		"\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\a\x46\x2\x2\x1A8"+
		"\x1A9\x5\xAAV\x2\x1A9\x1AA\a\x16\x2\x2\x1AA\x1AB\x5\x98M\x2\x1AB\x1AC"+
		"\a\x17\x2\x2\x1AC\x1AD\a\x11\x2\x2\x1AD\x1B0\x5x=\x2\x1AE\x1B1\x5\x8E"+
		"H\x2\x1AF\x1B1\av\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1"+
		"\x1B2\x3\x2\x2\x2\x1B2\x1B3\x5z>\x2\x1B3\v\x3\x2\x2\x2\x1B4\x1B6\a\x82"+
		"\x2\x2\x1B5\x1B4\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2"+
		"\x2\x1B7\x1B8\t\x2\x2\x2\x1B8\x1B9\x5\xACW\x2\x1B9\x1C0\a\x16\x2\x2\x1BA"+
		"\x1C1\x5\x10\t\x2\x1BB\x1C1\x5 \x11\x2\x1BC\x1BD\x5\x10\t\x2\x1BD\x1BE"+
		"\a\x13\x2\x2\x1BE\x1BF\x5 \x11\x2\x1BF\x1C1\x3\x2\x2\x2\x1C0\x1BA\x3\x2"+
		"\x2\x2\x1C0\x1BB\x3\x2\x2\x2\x1C0\x1BC\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2"+
		"\x2\x1C2\x1C3\a\x17\x2\x2\x1C3\x1C4\a\x11\x2\x2\x1C4\x1C7\x5x=\x2\x1C5"+
		"\x1C8\x5\xBE`\x2\x1C6\x1C8\av\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C7\x1C6\x3"+
		"\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA\x5z>\x2\x1CA\r\x3\x2\x2\x2\x1CB"+
		"\x1CC\a\x80\x2\x2\x1CC\x1CD\x5\xACW\x2\x1CD\x1CE\a\x16\x2\x2\x1CE\x1CF"+
		"\x5 \x11\x2\x1CF\x1D0\a\x17\x2\x2\x1D0\x1D1\a\x11\x2\x2\x1D1\x1D4\x5x"+
		"=\x2\x1D2\x1D5\x5\xBE`\x2\x1D3\x1D5\av\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4"+
		"\x1D3\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x5z>\x2\x1D7\xF\x3\x2"+
		"\x2\x2\x1D8\x1D9\x5\xA4S\x2\x1D9\x11\x3\x2\x2\x2\x1DA\x1DB\aP\x2\x2\x1DB"+
		"\x1DC\as\x2\x2\x1DC\x1DD\x5\x10A\x86\x2\x1DD\x1DE\a\x16\x2\x2\x1DE\x1DF"+
		"\x5\xB4[\x2\x1DF\x1E2\a\x17\x2\x2\x1E0\x1E1\a\x33\x2\x2\x1E1\x1E3\x5\x98"+
		"M\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2"+
		"\x1E4\x1E5\a\x11\x2\x2\x1E5\x1E6\x5x=\x2\x1E6\x1E7\x5\xE0q\x2\x1E7\x1E8"+
		"\x5z>\x2\x1E8\x13\x3\x2\x2\x2\x1E9\x1EA\aP\x2\x2\x1EA\x1EB\x5\xAAV\x2"+
		"\x1EB\x1EC\a\x7F\x2\x2\x1EC\x1ED\a\x16\x2\x2\x1ED\x1EE\a\x17\x2\x2\x1EE"+
		"\x1EF\a\x11\x2\x2\x1EF\x1F0\x5x=\x2\x1F0\x1F1\x5\xE0q\x2\x1F1\x1F2\x5"+
		"z>\x2\x1F2\x15\x3\x2\x2\x2\x1F3\x1F4\aP\x2\x2\x1F4\x1F5\x5\xAAV\x2\x1F5"+
		"\x1F6\a\x61\x2\x2\x1F6\x1F7\a\x16\x2\x2\x1F7\x1F8\a\x17\x2\x2\x1F8\x1F9"+
		"\a\x11\x2\x2\x1F9\x1FA\x5x=\x2\x1FA\x1FB\x5\xE0q\x2\x1FB\x1FC\x5z>\x2"+
		"\x1FC\x17\x3\x2\x2\x2\x1FD\x1FF\a\x82\x2\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE"+
		"\x1FF\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x201\ak\x2\x2\x201\x202\t"+
		"\x2\x2\x2\x202\x203\x5\xACW\x2\x203\x205\a\x16\x2\x2\x204\x206\x5 \x11"+
		"\x2\x205\x204\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2"+
		"\x207\x208\a\x17\x2\x2\x208\x209\a\x11\x2\x2\x209\x20A\x5x=\x2\x20A\x20E"+
		"\x5\x1C\xF\x2\x20B\x20C\x5v<\x2\x20C\x20D\x5\xC2\x62\x2\x20D\x20F\x3\x2"+
		"\x2\x2\x20E\x20B\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x210\x3\x2\x2"+
		"\x2\x210\x211\x5z>\x2\x211\x19\x3\x2\x2\x2\x212\x213\ak\x2\x2\x213\x214"+
		"\az\x2\x2\x214\x215\x5\xACW\x2\x215\x217\a\x16\x2\x2\x216\x218\x5 \x11"+
		"\x2\x217\x216\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2"+
		"\x219\x21A\a\x17\x2\x2\x21A\x21B\a\x11\x2\x2\x21B\x21C\x5x=\x2\x21C\x220"+
		"\x5\x1C\xF\x2\x21D\x21E\x5v<\x2\x21E\x21F\x5\xC2\x62\x2\x21F\x221\x3\x2"+
		"\x2\x2\x220\x21D\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222\x3\x2\x2"+
		"\x2\x222\x223\x5z>\x2\x223\x1B\x3\x2\x2\x2\x224\x225\aP\x2\x2\x225\x226"+
		"\t\x2\x2\x2\x226\x227\aI\x2\x2\x227\x228\a\x11\x2\x2\x228\x229\x5x=\x2"+
		"\x229\x22A\x5\x1E\x10\x2\x22A\x22B\x5z>\x2\x22B\x1D\x3\x2\x2\x2\x22C\x22D"+
		"\b\x10\x1\x2\x22D\x22E\x5\xC6\x64\x2\x22E\x235\x3\x2\x2\x2\x22F\x230\f"+
		"\x3\x2\x2\x230\x231\x5v<\x2\x231\x232\x5\xC6\x64\x2\x232\x234\x3\x2\x2"+
		"\x2\x233\x22F\x3\x2\x2\x2\x234\x237\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2"+
		"\x235\x236\x3\x2\x2\x2\x236\x1F\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238"+
		"\x239\x5\xD2j\x2\x239!\x3\x2\x2\x2\x23A\x23B\a@\x2\x2\x23B\x23C\aP\x2"+
		"\x2\x23C\x23D\x5\xA6T\x2\x23D\x23F\a\x16\x2\x2\x23E\x240\x5\xB0Y\x2\x23F"+
		"\x23E\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x244"+
		"\a\x17\x2\x2\x242\x243\a\x33\x2\x2\x243\x245\x5\x98M\x2\x244\x242\x3\x2"+
		"\x2\x2\x244\x245\x3\x2\x2\x2\x245#\x3\x2\x2\x2\x246\x247\aP\x2\x2\x247"+
		"\x248\x5\xA6T\x2\x248\x24A\a\x16\x2\x2\x249\x24B\x5\xB0Y\x2\x24A\x249"+
		"\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24F\a\x17"+
		"\x2\x2\x24D\x24E\a\x33\x2\x2\x24E\x250\x5\x98M\x2\x24F\x24D\x3\x2\x2\x2"+
		"\x24F\x250\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\a\x11\x2\x2\x252"+
		"\x253\x5x=\x2\x253\x254\x5\xE0q\x2\x254\x255\x5z>\x2\x255%\x3\x2\x2\x2"+
		"\x256\x257\aP\x2\x2\x257\x258\ak\x2\x2\x258\x259\x5\xA6T\x2\x259\x25B"+
		"\a\x16\x2\x2\x25A\x25C\x5\xB0Y\x2\x25B\x25A\x3\x2\x2\x2\x25B\x25C\x3\x2"+
		"\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x260\a\x17\x2\x2\x25E\x25F\a\x33\x2"+
		"\x2\x25F\x261\x5\xBA^\x2\x260\x25E\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261"+
		"\x262\x3\x2\x2\x2\x262\x263\a\x11\x2\x2\x263\x264\x5x=\x2\x264\x265\x5"+
		"\xD8m\x2\x265\x266\x5z>\x2\x266\'\x3\x2\x2\x2\x267\x268\aP\x2\x2\x268"+
		"\x269\a\x85\x2\x2\x269\x26A\a\x99\x2\x2\x26A\x26B\a\x16\x2\x2\x26B\x26C"+
		"\a\x17\x2\x2\x26C\x26D\a\x11\x2\x2\x26D\x26E\x5x=\x2\x26E\x26F\x5\xE0"+
		"q\x2\x26F\x270\x5z>\x2\x270\x271\x5v<\x2\x271\x272\a\x8A\x2\x2\x272\x278"+
		"\a\x11\x2\x2\x273\x274\x5x=\x2\x274\x275\x5\xE2r\x2\x275\x276\x5z>\x2"+
		"\x276\x279\x3\x2\x2\x2\x277\x279\x5\xAEX\x2\x278\x273\x3\x2\x2\x2\x278"+
		"\x277\x3\x2\x2\x2\x279)\x3\x2\x2\x2\x27A\x27B\x5T+\x2\x27B+\x3\x2\x2\x2"+
		"\x27C\x27D\x5\xAAV\x2\x27D\x27E\a\x11\x2\x2\x27E\x283\x5\xBA^\x2\x27F"+
		"\x280\a\x16\x2\x2\x280\x281\x5 \x11\x2\x281\x282\a\x17\x2\x2\x282\x284"+
		"\x3\x2\x2\x2\x283\x27F\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x287\x3"+
		"\x2\x2\x2\x285\x286\a-\x2\x2\x286\x288\x5\xF4{\x2\x287\x285\x3\x2\x2\x2"+
		"\x287\x288\x3\x2\x2\x2\x288-\x3\x2\x2\x2\x289\x29B\x5\x32\x1A\x2\x28A"+
		"\x29B\x5n\x38\x2\x28B\x29B\x5r:\x2\x28C\x29B\x5\x30\x19\x2\x28D\x29B\x5"+
		"R*\x2\x28E\x29B\x5H%\x2\x28F\x29B\x5> \x2\x290\x29B\x5\x42\"\x2\x291\x29B"+
		"\x5\x46$\x2\x292\x29B\x5\x44#\x2\x293\x29B\x5L\'\x2\x294\x29B\x5N(\x2"+
		"\x295\x29B\x5h\x35\x2\x296\x29B\x5:\x1E\x2\x297\x29B\x5<\x1F\x2\x298\x29B"+
		"\x5$\x13\x2\x299\x29B\x5\xD6l\x2\x29A\x289\x3\x2\x2\x2\x29A\x28A\x3\x2"+
		"\x2\x2\x29A\x28B\x3\x2\x2\x2\x29A\x28C\x3\x2\x2\x2\x29A\x28D\x3\x2\x2"+
		"\x2\x29A\x28E\x3\x2\x2\x2\x29A\x28F\x3\x2\x2\x2\x29A\x290\x3\x2\x2\x2"+
		"\x29A\x291\x3\x2\x2\x2\x29A\x292\x3\x2\x2\x2\x29A\x293\x3\x2\x2\x2\x29A"+
		"\x294\x3\x2\x2\x2\x29A\x295\x3\x2\x2\x2\x29A\x296\x3\x2\x2\x2\x29A\x297"+
		"\x3\x2\x2\x2\x29A\x298\x3\x2\x2\x2\x29A\x299\x3\x2\x2\x2\x29B/\x3\x2\x2"+
		"\x2\x29C\x29D\a\x83\x2\x2\x29D\x29E\a\x16\x2\x2\x29E\x29F\x5\x94K\x2\x29F"+
		"\x2A0\a\x17\x2\x2\x2A0\x31\x3\x2\x2\x2\x2A1\x2A2\x5\x34\x1B\x2\x2A2\x2A4"+
		"\a\x16\x2\x2\x2A3\x2A5\x5\x62\x32\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4\x2A5\x3"+
		"\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7\a\x17\x2\x2\x2A7\x33\x3\x2\x2"+
		"\x2\x2A8\x2AE\x5\xA6T\x2\x2A9\x2AA\x5\x36\x1C\x2\x2AA\x2AB\a\x15\x2\x2"+
		"\x2AB\x2AC\x5\xA6T\x2\x2AC\x2AE\x3\x2\x2\x2\x2AD\x2A8\x3\x2\x2\x2\x2AD"+
		"\x2A9\x3\x2\x2\x2\x2AE\x35\x3\x2\x2\x2\x2AF\x2B0\b\x1C\x1\x2\x2B0\x2B1"+
		"\x5\xA8U\x2\x2B1\x2B6\x3\x2\x2\x2\x2B2\x2B3\f\x3\x2\x2\x2B3\x2B5\x5\x38"+
		"\x1D\x2\x2B4\x2B2\x3\x2\x2\x2\x2B5\x2B8\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2"+
		"\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x37\x3\x2\x2\x2\x2B8\x2B6\x3\x2\x2\x2\x2B9"+
		"\x2BA\a\x15\x2\x2\x2BA\x2C0\x5\xAAV\x2\x2BB\x2BC\a\x18\x2\x2\x2BC\x2BD"+
		"\x5T+\x2\x2BD\x2BE\a\x19\x2\x2\x2BE\x2C0\x3\x2\x2\x2\x2BF\x2B9\x3\x2\x2"+
		"\x2\x2BF\x2BB\x3\x2\x2\x2\x2C0\x39\x3\x2\x2\x2\x2C1\x2C2\a\x8B\x2\x2\x2C2"+
		"\x2C3\x5\x104\x83\x2\x2C3\x2C4\a\x11\x2\x2\x2C4\x2C5\x5x=\x2\x2C5\x2C6"+
		"\x5\xE0q\x2\x2C6\x2C7\x5z>\x2\x2C7;\x3\x2\x2\x2\x2C8\x2C9\a\x8B\x2\x2"+
		"\x2C9\x2CA\x5\xACW\x2\x2CA\x2CB\a\x11\x2\x2\x2CB\x2CC\x5x=\x2\x2CC\x2CD"+
		"\x5\xE0q\x2\x2CD\x2CE\x5z>\x2\x2CE=\x3\x2\x2\x2\x2CF\x2D0\a\x84\x2\x2"+
		"\x2D0\x2D1\ap\x2\x2\x2D1\x2D2\x5T+\x2\x2D2\x2D3\a\x11\x2\x2\x2D3\x2D4"+
		"\x5x=\x2\x2D4\x2DC\x5\xE4s\x2\x2D5\x2D6\x5v<\x2\x2D6\x2D7\au\x2\x2\x2D7"+
		"\x2D8\a\x11\x2\x2\x2D8\x2D9\x5x=\x2\x2D9\x2DA\x5\xE0q\x2\x2DA\x2DB\x5"+
		"z>\x2\x2DB\x2DD\x3\x2\x2\x2\x2DC\x2D5\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2"+
		"\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2DF\x5z>\x2\x2DF?\x3\x2\x2\x2\x2E0\x2E1\a"+
		"\x8C\x2\x2\x2E1\x2E2\x5\xEAv\x2\x2E2\x2E3\a\x11\x2\x2\x2E3\x2E4\x5x=\x2"+
		"\x2E4\x2E5\x5\xE0q\x2\x2E5\x2E6\x5z>\x2\x2E6\x2F0\x3\x2\x2\x2\x2E7\x2E8"+
		"\a\x8C\x2\x2\x2E8\x2E9\a\x63\x2\x2\x2E9\x2EA\x5\xE8u\x2\x2EA\x2EB\a\x11"+
		"\x2\x2\x2EB\x2EC\x5x=\x2\x2EC\x2ED\x5\xE0q\x2\x2ED\x2EE\x5z>\x2\x2EE\x2F0"+
		"\x3\x2\x2\x2\x2EF\x2E0\x3\x2\x2\x2\x2EF\x2E7\x3\x2\x2\x2\x2F0\x41\x3\x2"+
		"\x2\x2\x2F1\x2F2\a_\x2\x2\x2F2\x2F5\x5\xAAV\x2\x2F3\x2F4\a\x13\x2\x2\x2F4"+
		"\x2F6\x5\xAAV\x2\x2F5\x2F3\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F7"+
		"\x3\x2\x2\x2\x2F7\x2F8\a\x63\x2\x2\x2F8\x2F9\x5T+\x2\x2F9\x2FA\a\x11\x2"+
		"\x2\x2FA\x2FB\x5x=\x2\x2FB\x2FC\x5\xE0q\x2\x2FC\x2FD\x5z>\x2\x2FD\x43"+
		"\x3\x2\x2\x2\x2FE\x2FF\aS\x2\x2\x2FF\x300\a\x11\x2\x2\x300\x301\x5x=\x2"+
		"\x301\x302\x5\xE0q\x2\x302\x303\x5z>\x2\x303\x304\x5v<\x2\x304\x305\a"+
		"\x8E\x2\x2\x305\x306\x5T+\x2\x306\x45\x3\x2\x2\x2\x307\x308\a\x8E\x2\x2"+
		"\x308\x309\x5T+\x2\x309\x30A\a\x11\x2\x2\x30A\x30B\x5x=\x2\x30B\x30C\x5"+
		"\xE0q\x2\x30C\x30D\x5z>\x2\x30DG\x3\x2\x2\x2\x30E\x30F\a\x62\x2\x2\x30F"+
		"\x310\x5T+\x2\x310\x311\a\x11\x2\x2\x311\x312\x5x=\x2\x312\x313\x5\xE0"+
		"q\x2\x313\x317\x5z>\x2\x314\x315\x5v<\x2\x315\x316\x5J&\x2\x316\x318\x3"+
		"\x2\x2\x2\x317\x314\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x320\x3\x2"+
		"\x2\x2\x319\x31A\x5v<\x2\x31A\x31B\aV\x2\x2\x31B\x31C\a\x11\x2\x2\x31C"+
		"\x31D\x5x=\x2\x31D\x31E\x5\xE0q\x2\x31E\x31F\x5z>\x2\x31F\x321\x3\x2\x2"+
		"\x2\x320\x319\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321I\x3\x2\x2\x2\x322"+
		"\x323\b&\x1\x2\x323\x324\aV\x2\x2\x324\x325\a\x62\x2\x2\x325\x326\x5T"+
		"+\x2\x326\x327\a\x11\x2\x2\x327\x328\x5x=\x2\x328\x329\x5\xE0q\x2\x329"+
		"\x32A\x5z>\x2\x32A\x337\x3\x2\x2\x2\x32B\x32C\f\x3\x2\x2\x32C\x32D\x5"+
		"v<\x2\x32D\x32E\aV\x2\x2\x32E\x32F\a\x62\x2\x2\x32F\x330\x5T+\x2\x330"+
		"\x331\a\x11\x2\x2\x331\x332\x5x=\x2\x332\x333\x5\xE0q\x2\x333\x334\x5"+
		"z>\x2\x334\x336\x3\x2\x2\x2\x335\x32B\x3\x2\x2\x2\x336\x339\x3\x2\x2\x2"+
		"\x337\x335\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338K\x3\x2\x2\x2\x339\x337"+
		"\x3\x2\x2\x2\x33A\x33B\aw\x2\x2\x33B\x33C\x5T+\x2\x33CM\x3\x2\x2\x2\x33D"+
		"\x33E\a\x89\x2\x2\x33E\x33F\x5\xAAV\x2\x33F\x340\a\x11\x2\x2\x340\x341"+
		"\x5x=\x2\x341\x342\x5\xE0q\x2\x342\x343\x5z>\x2\x343\x345\x5t;\x2\x344"+
		"\x346\x5\xE6t\x2\x345\x344\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x34E"+
		"\x3\x2\x2\x2\x347\x348\aY\x2\x2\x348\x349\a\x11\x2\x2\x349\x34A\x5x=\x2"+
		"\x34A\x34B\x5\xE0q\x2\x34B\x34C\x5z>\x2\x34C\x34D\x5t;\x2\x34D\x34F\x3"+
		"\x2\x2\x2\x34E\x347\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34F\x357\x3\x2"+
		"\x2\x2\x350\x351\a^\x2\x2\x351\x352\a\x11\x2\x2\x352\x353\x5x=\x2\x353"+
		"\x354\x5\xE0q\x2\x354\x355\x5z>\x2\x355\x356\x5t;\x2\x356\x358\x3\x2\x2"+
		"\x2\x357\x350\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2"+
		"\x359\x35A\x5t;\x2\x35AO\x3\x2\x2\x2\x35B\x35C\aY\x2\x2\x35C\x35D\x5\xAE"+
		"X\x2\x35D\x35E\a\x11\x2\x2\x35E\x35F\x5x=\x2\x35F\x360\x5\xE0q\x2\x360"+
		"\x361\x5z>\x2\x361\x362\x5t;\x2\x362\x36F\x3\x2\x2\x2\x363\x364\aY\x2"+
		"\x2\x364\x365\a\x63\x2\x2\x365\x366\a\x18\x2\x2\x366\x367\x5\x8CG\x2\x367"+
		"\x368\a\x19\x2\x2\x368\x369\a\x11\x2\x2\x369\x36A\x5x=\x2\x36A\x36B\x5"+
		"\xE0q\x2\x36B\x36C\x5z>\x2\x36C\x36D\x5t;\x2\x36D\x36F\x3\x2\x2\x2\x36E"+
		"\x35B\x3\x2\x2\x2\x36E\x363\x3\x2\x2\x2\x36FQ\x3\x2\x2\x2\x370\x372\a"+
		"{\x2\x2\x371\x373\x5T+\x2\x372\x371\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2"+
		"\x373S\x3\x2\x2\x2\x374\x375\b+\x1\x2\x375\x376\a#\x2\x2\x376\x387\x5"+
		"T+!\x377\x378\am\x2\x2\x378\x387\x5T+ \x379\x387\x5X-\x2\x37A\x387\x5"+
		"Z.\x2\x37B\x37C\a>\x2\x2\x37C\x37D\a\x16\x2\x2\x37D\x37E\x5T+\x2\x37E"+
		"\x37F\a\x17\x2\x2\x37F\x387\x3\x2\x2\x2\x380\x381\aZ\x2\x2\x381\x382\a"+
		"\x16\x2\x2\x382\x383\x5\xAAV\x2\x383\x384\a\x17\x2\x2\x384\x387\x3\x2"+
		"\x2\x2\x385\x387\x5V,\x2\x386\x374\x3\x2\x2\x2\x386\x377\x3\x2\x2\x2\x386"+
		"\x379\x3\x2\x2\x2\x386\x37A\x3\x2\x2\x2\x386\x37B\x3\x2\x2\x2\x386\x380"+
		"\x3\x2\x2\x2\x386\x385\x3\x2\x2\x2\x387\x3E8\x3\x2\x2\x2\x388\x389\f\x1F"+
		"\x2\x2\x389\x38A\x5\x114\x8B\x2\x38A\x38B\x5T+ \x38B\x3E7\x3\x2\x2\x2"+
		"\x38C\x38D\f\x1E\x2\x2\x38D\x38E\x5\x116\x8C\x2\x38E\x38F\x5T+\x1F\x38F"+
		"\x3E7\x3\x2\x2\x2\x390\x391\f\x1D\x2\x2\x391\x392\x5\x11A\x8E\x2\x392"+
		"\x393\x5T+\x1E\x393\x3E7\x3\x2\x2\x2\x394\x395\f\x1C\x2\x2\x395\x396\x5"+
		"\x118\x8D\x2\x396\x397\x5T+\x1D\x397\x3E7\x3\x2\x2\x2\x398\x399\f\x1B"+
		"\x2\x2\x399\x39A\t\x3\x2\x2\x39A\x3E7\x5T+\x1C\x39B\x39C\f\x1A\x2\x2\x39C"+
		"\x39D\a*\x2\x2\x39D\x3E7\x5T+\x1B\x39E\x39F\f\x19\x2\x2\x39F\x3A0\a+\x2"+
		"\x2\x3A0\x3E7\x5T+\x1A\x3A1\x3A2\f\x18\x2\x2\x3A2\x3A3\a(\x2\x2\x3A3\x3E7"+
		"\x5T+\x19\x3A4\x3A5\f\x17\x2\x2\x3A5\x3A6\a)\x2\x2\x3A6\x3E7\x5T+\x18"+
		"\x3A7\x3A8\f\x14\x2\x2\x3A8\x3A9\a/\x2\x2\x3A9\x3E7\x5T+\x15\x3AA\x3AB"+
		"\f\x13\x2\x2\x3AB\x3AC\a.\x2\x2\x3AC\x3E7\x5T+\x14\x3AD\x3AE\f\x12\x2"+
		"\x2\x3AE\x3AF\a\x30\x2\x2\x3AF\x3E7\x5T+\x13\x3B0\x3B1\f\x11\x2\x2\x3B1"+
		"\x3B2\at\x2\x2\x3B2\x3E7\x5T+\x12\x3B3\x3B4\f\x10\x2\x2\x3B4\x3B5\a\x43"+
		"\x2\x2\x3B5\x3E7\x5T+\x11\x3B6\x3B7\f\xF\x2\x2\x3B7\x3B8\a\x62\x2\x2\x3B8"+
		"\x3B9\x5T+\x2\x3B9\x3BA\aV\x2\x2\x3BA\x3BB\x5T+\x10\x3BB\x3E7\x3\x2\x2"+
		"\x2\x3BC\x3BD\f\r\x2\x2\x3BD\x3BE\a\x63\x2\x2\x3BE\x3E7\x5T+\xE\x3BF\x3C0"+
		"\f\f\x2\x2\x3C0\x3C1\aO\x2\x2\x3C1\x3E7\x5T+\r\x3C2\x3C3\f\v\x2\x2\x3C3"+
		"\x3C4\aO\x2\x2\x3C4\x3C5\a\x41\x2\x2\x3C5\x3E7\x5T+\f\x3C6\x3C7\f\n\x2"+
		"\x2\x3C7\x3C8\aO\x2\x2\x3C8\x3C9\a\x44\x2\x2\x3C9\x3E7\x5T+\v\x3CA\x3CB"+
		"\f\t\x2\x2\x3CB\x3CC\am\x2\x2\x3CC\x3CD\a\x63\x2\x2\x3CD\x3E7\x5T+\n\x3CE"+
		"\x3CF\f\b\x2\x2\x3CF\x3D0\am\x2\x2\x3D0\x3D1\aO\x2\x2\x3D1\x3E7\x5T+\t"+
		"\x3D2\x3D3\f\a\x2\x2\x3D3\x3D4\am\x2\x2\x3D4\x3D5\aO\x2\x2\x3D5\x3D6\a"+
		"\x41\x2\x2\x3D6\x3E7\x5T+\b\x3D7\x3D8\f\x6\x2\x2\x3D8\x3D9\am\x2\x2\x3D9"+
		"\x3DA\aO\x2\x2\x3DA\x3DB\a\x44\x2\x2\x3DB\x3E7\x5T+\a\x3DC\x3DD\f\x16"+
		"\x2\x2\x3DD\x3DE\a\x65\x2\x2\x3DE\x3DF\am\x2\x2\x3DF\x3E7\x5\x108\x85"+
		"\x2\x3E0\x3E1\f\x15\x2\x2\x3E1\x3E2\a\x65\x2\x2\x3E2\x3E7\x5\x108\x85"+
		"\x2\x3E3\x3E4\f\xE\x2\x2\x3E4\x3E5\a\x45\x2\x2\x3E5\x3E7\x5\xBA^\x2\x3E6"+
		"\x388\x3\x2\x2\x2\x3E6\x38C\x3\x2\x2\x2\x3E6\x390\x3\x2\x2\x2\x3E6\x394"+
		"\x3\x2\x2\x2\x3E6\x398\x3\x2\x2\x2\x3E6\x39B\x3\x2\x2\x2\x3E6\x39E\x3"+
		"\x2\x2\x2\x3E6\x3A1\x3\x2\x2\x2\x3E6\x3A4\x3\x2\x2\x2\x3E6\x3A7\x3\x2"+
		"\x2\x2\x3E6\x3AA\x3\x2\x2\x2\x3E6\x3AD\x3\x2\x2\x2\x3E6\x3B0\x3\x2\x2"+
		"\x2\x3E6\x3B3\x3\x2\x2\x2\x3E6\x3B6\x3\x2\x2\x2\x3E6\x3BC\x3\x2\x2\x2"+
		"\x3E6\x3BF\x3\x2\x2\x2\x3E6\x3C2\x3\x2\x2\x2\x3E6\x3C6\x3\x2\x2\x2\x3E6"+
		"\x3CA\x3\x2\x2\x2\x3E6\x3CE\x3\x2\x2\x2\x3E6\x3D2\x3\x2\x2\x2\x3E6\x3D7"+
		"\x3\x2\x2\x2\x3E6\x3DC\x3\x2\x2\x2\x3E6\x3E0\x3\x2\x2\x2\x3E6\x3E3\x3"+
		"\x2\x2\x2\x3E7\x3EA\x3\x2\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E8\x3E9\x3\x2"+
		"\x2\x2\x3E9U\x3\x2\x2\x2\x3EA\x3E8\x3\x2\x2\x2\x3EB\x3EC\x5\xACW\x2\x3EC"+
		"W\x3\x2\x2\x2\x3ED\x3EE\b-\x1\x2\x3EE\x3EF\x5\xEEx\x2\x3EF\x3F4\x3\x2"+
		"\x2\x2\x3F0\x3F1\f\x3\x2\x2\x3F1\x3F3\x5\\/\x2\x3F2\x3F0\x3\x2\x2\x2\x3F3"+
		"\x3F6\x3\x2\x2\x2\x3F4\x3F2\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5Y\x3"+
		"\x2\x2\x2\x3F6\x3F4\x3\x2\x2\x2\x3F7\x3FE\x5^\x30\x2\x3F8\x3FE\x5j\x36"+
		"\x2\x3F9\x3FE\x5\x66\x34\x2\x3FA\x3FE\x5l\x37\x2\x3FB\x3FE\x5\x32\x1A"+
		"\x2\x3FC\x3FE\x5`\x31\x2\x3FD\x3F7\x3\x2\x2\x2\x3FD\x3F8\x3\x2\x2\x2\x3FD"+
		"\x3F9\x3\x2\x2\x2\x3FD\x3FA\x3\x2\x2\x2\x3FD\x3FB\x3\x2\x2\x2\x3FD\x3FC"+
		"\x3\x2\x2\x2\x3FE[\x3\x2\x2\x2\x3FF\x400\x6/ \x3\x400\x401\a\x15\x2\x2"+
		"\x401\x40D\x5\xAAV\x2\x402\x403\x6/!\x3\x403\x404\a\x18\x2\x2\x404\x405"+
		"\x5\x102\x82\x2\x405\x406\a\x19\x2\x2\x406\x40D\x3\x2\x2\x2\x407\x408"+
		"\x6/\"\x3\x408\x409\a\x18\x2\x2\x409\x40A\x5T+\x2\x40A\x40B\a\x19\x2\x2"+
		"\x40B\x40D\x3\x2\x2\x2\x40C\x3FF\x3\x2\x2\x2\x40C\x402\x3\x2\x2\x2\x40C"+
		"\x407\x3\x2\x2\x2\x40D]\x3\x2\x2\x2\x40E\x40F\a?\x2\x2\x40F\x410\a\x16"+
		"\x2\x2\x410\x411\a\x17\x2\x2\x411_\x3\x2\x2\x2\x412\x414\aj\x2\x2\x413"+
		"\x412\x3\x2\x2\x2\x413\x414\x3\x2\x2\x2\x414\x415\x3\x2\x2\x2\x415\x416"+
		"\x5\x9EP\x2\x416\x418\a\x16\x2\x2\x417\x419\x5\x62\x32\x2\x418\x417\x3"+
		"\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41B\a\x17"+
		"\x2\x2\x41B\x61\x3\x2\x2\x2\x41C\x41D\b\x32\x1\x2\x41D\x41E\x5T+\x2\x41E"+
		"\x41F\x6\x32#\x3\x41F\x422\x3\x2\x2\x2\x420\x422\x5\x64\x33\x2\x421\x41C"+
		"\x3\x2\x2\x2\x421\x420\x3\x2\x2\x2\x422\x428\x3\x2\x2\x2\x423\x424\f\x3"+
		"\x2\x2\x424\x425\a\x13\x2\x2\x425\x427\x5\x64\x33\x2\x426\x423\x3\x2\x2"+
		"\x2\x427\x42A\x3\x2\x2\x2\x428\x426\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2"+
		"\x429\x63\x3\x2\x2\x2\x42A\x428\x3\x2\x2\x2\x42B\x42C\x5\xAAV\x2\x42C"+
		"\x42D\x5\x112\x8A\x2\x42D\x42E\x5T+\x2\x42E\x65\x3\x2\x2\x2\x42F\x430"+
		"\ax\x2\x2\x430\x431\a`\x2\x2\x431\x432\x5T+\x2\x432g\x3\x2\x2\x2\x433"+
		"\x434\a\x8F\x2\x2\x434\x435\x5T+\x2\x435\x436\a\x88\x2\x2\x436\x437\x5"+
		"T+\x2\x437i\x3\x2\x2\x2\x438\x439\a]\x2\x2\x439\x43A\x5\xAAV\x2\x43A\x43B"+
		"\a`\x2\x2\x43B\x43C\x5T+\x2\x43C\x43D\a\x8D\x2\x2\x43D\x43E\x5T+\x2\x43E"+
		"\x456\x3\x2\x2\x2\x43F\x440\a]\x2\x2\x440\x441\aq\x2\x2\x441\x442\x5\x9E"+
		"P\x2\x442\x443\a\x8D\x2\x2\x443\x444\x5T+\x2\x444\x456\x3\x2\x2\x2\x445"+
		"\x44C\a]\x2\x2\x446\x44D\a\x41\x2\x2\x447\x448\a}\x2\x2\x448\x449\x5T"+
		"+\x2\x449\x44A\a\x88\x2\x2\x44A\x44B\x5T+\x2\x44B\x44D\x3\x2\x2\x2\x44C"+
		"\x446\x3\x2\x2\x2\x44C\x447\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x44F"+
		"\a\x16\x2\x2\x44F\x450\x5\x9EP\x2\x450\x453\a\x17\x2\x2\x451\x452\a\x8D"+
		"\x2\x2\x452\x454\x5T+\x2\x453\x451\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454"+
		"\x456\x3\x2\x2\x2\x455\x438\x3\x2\x2\x2\x455\x43F\x3\x2\x2\x2\x455\x445"+
		"\x3\x2\x2\x2\x456k\x3\x2\x2\x2\x457\x458\a\x81\x2\x2\x458\x459\a\x16\x2"+
		"\x2\x459\x45F\x5X-\x2\x45A\x45B\a\x13\x2\x2\x45B\x45C\x5\x10C\x87\x2\x45C"+
		"\x45D\a-\x2\x2\x45D\x45E\x5X-\x2\x45E\x460\x3\x2\x2\x2\x45F\x45A\x3\x2"+
		"\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x462\a\x17\x2"+
		"\x2\x462m\x3\x2\x2\x2\x463\x464\x5\x106\x84\x2\x464\x465\x5\x112\x8A\x2"+
		"\x465\x466\x5T+\x2\x466o\x3\x2\x2\x2\x467\x468\x6\x39%\x3\x468\x469\a"+
		"\x15\x2\x2\x469\x470\x5\xAAV\x2\x46A\x46B\x6\x39&\x3\x46B\x46C\a\x18\x2"+
		"\x2\x46C\x46D\x5T+\x2\x46D\x46E\a\x19\x2\x2\x46E\x470\x3\x2\x2\x2\x46F"+
		"\x467\x3\x2\x2\x2\x46F\x46A\x3\x2\x2\x2\x470q\x3\x2\x2\x2\x471\x472\x5"+
		"\xD2j\x2\x472\x473\x5\x112\x8A\x2\x473\x474\x5T+\x2\x474s\x3\x2\x2\x2"+
		"\x475\x477\a\a\x2\x2\x476\x475\x3\x2\x2\x2\x477\x47A\x3\x2\x2\x2\x478"+
		"\x476\x3\x2\x2\x2\x478\x479\x3\x2\x2\x2\x479u\x3\x2\x2\x2\x47A\x478\x3"+
		"\x2\x2\x2\x47B\x47D\a\a\x2\x2\x47C\x47B\x3\x2\x2\x2\x47D\x47E\x3\x2\x2"+
		"\x2\x47E\x47C\x3\x2\x2\x2\x47E\x47F\x3\x2\x2\x2\x47Fw\x3\x2\x2\x2\x480"+
		"\x482\a\a\x2\x2\x481\x480\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x481"+
		"\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\a\x3"+
		"\x2\x2\x486y\x3\x2\x2\x2\x487\x489\a\a\x2\x2\x488\x487\x3\x2\x2\x2\x489"+
		"\x48C\x3\x2\x2\x2\x48A\x488\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48D"+
		"\x3\x2\x2\x2\x48C\x48A\x3\x2\x2\x2\x48D\x48E\a\x4\x2\x2\x48E{\x3\x2\x2"+
		"\x2\x48F\x490\al\x2\x2\x490}\x3\x2\x2\x2\x491\x493\x5\x80\x41\x2\x492"+
		"\x491\x3\x2\x2\x2\x492\x493\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x495"+
		"\x5t;\x2\x495\x496\a\x2\x2\x3\x496\x7F\x3\x2\x2\x2\x497\x498\b\x41\x1"+
		"\x2\x498\x499\x5\x82\x42\x2\x499\x4A0\x3\x2\x2\x2\x49A\x49B\f\x3\x2\x2"+
		"\x49B\x49C\x5v<\x2\x49C\x49D\x5\x82\x42\x2\x49D\x49F\x3\x2\x2\x2\x49E"+
		"\x49A\x3\x2\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0\x49E\x3\x2\x2\x2\x4A0\x4A1"+
		"\x3\x2\x2\x2\x4A1\x81\x3\x2\x2\x2\x4A2\x4A0\x3\x2\x2\x2\x4A3\x4A9\x5\n"+
		"\x6\x2\x4A4\x4A9\x5\xA2R\x2\x4A5\x4A9\x5\x84\x43\x2\x4A6\x4A9\x5\x86\x44"+
		"\x2\x4A7\x4A9\x5\xD4k\x2\x4A8\x4A3\x3\x2\x2\x2\x4A8\x4A4\x3\x2\x2\x2\x4A8"+
		"\x4A5\x3\x2\x2\x2\x4A8\x4A6\x3\x2\x2\x2\x4A8\x4A7\x3\x2\x2\x2\x4A9\x83"+
		"\x3\x2\x2\x2\x4AA\x4AB\x5\x1A\xE\x2\x4AB\x85\x3\x2\x2\x2\x4AC\x4AF\x5"+
		"\x2\x2\x2\x4AD\x4AF\x5\x4\x3\x2\x4AE\x4AC\x3\x2\x2\x2\x4AE\x4AD\x3\x2"+
		"\x2\x2\x4AF\x87\x3\x2\x2\x2\x4B0\x4B1\b\x45\x1\x2\x4B1\x4B2\x5\x6\x4\x2"+
		"\x4B2\x4B9\x3\x2\x2\x2\x4B3\x4B4\f\x3\x2\x2\x4B4\x4B5\x5v<\x2\x4B5\x4B6"+
		"\x5\x6\x4\x2\x4B6\x4B8\x3\x2\x2\x2\x4B7\x4B3\x3\x2\x2\x2\x4B8\x4BB\x3"+
		"\x2\x2\x2\x4B9\x4B7\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x89\x3\x2\x2"+
		"\x2\x4BB\x4B9\x3\x2\x2\x2\x4BC\x4BD\b\x46\x1\x2\x4BD\x4BE\x5\b\x5\x2\x4BE"+
		"\x4C5\x3\x2\x2\x2\x4BF\x4C0\f\x3\x2\x2\x4C0\x4C1\x5v<\x2\x4C1\x4C2\x5"+
		"\b\x5\x2\x4C2\x4C4\x3\x2\x2\x2\x4C3\x4BF\x3\x2\x2\x2\x4C4\x4C7\x3\x2\x2"+
		"\x2\x4C5\x4C3\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6\x8B\x3\x2\x2\x2\x4C7"+
		"\x4C5\x3\x2\x2\x2\x4C8\x4C9\bG\x1\x2\x4C9\x4CA\x5\xAEX\x2\x4CA\x4D0\x3"+
		"\x2\x2\x2\x4CB\x4CC\f\x3\x2\x2\x4CC\x4CD\a\x13\x2\x2\x4CD\x4CF\x5\xAE"+
		"X\x2\x4CE\x4CB\x3\x2\x2\x2\x4CF\x4D2\x3\x2\x2\x2\x4D0\x4CE\x3\x2\x2\x2"+
		"\x4D0\x4D1\x3\x2\x2\x2\x4D1\x8D\x3\x2\x2\x2\x4D2\x4D0\x3\x2\x2\x2\x4D3"+
		"\x4D4\a\x63\x2\x2\x4D4\x4DE\x5\x90I\x2\x4D5\x4D6\a\x63\x2\x2\x4D6\x4DE"+
		"\x5\x92J\x2\x4D7\x4D8\a\x63\x2\x2\x4D8\x4DE\x5\x96L\x2\x4D9\x4DA\a\x66"+
		"\x2\x2\x4DA\x4DE\a\x99\x2\x2\x4DB\x4DC\a\x66\x2\x2\x4DC\x4DE\x5T+\x2\x4DD"+
		"\x4D3\x3\x2\x2\x2\x4DD\x4D5\x3\x2\x2\x2\x4DD\x4D7\x3\x2\x2\x2\x4DD\x4D9"+
		"\x3\x2\x2\x2\x4DD\x4DB\x3\x2\x2\x2\x4DE\x8F\x3\x2\x2\x2\x4DF\x4E1\a\x18"+
		"\x2\x2\x4E0\x4E2\x5\x94K\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3\x2\x2\x2"+
		"\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4E4\a\x19\x2\x2\x4E4\x91\x3\x2\x2\x2\x4E5"+
		"\x4E7\a*\x2\x2\x4E6\x4E8\x5\x94K\x2\x4E7\x4E6\x3\x2\x2\x2\x4E7\x4E8\x3"+
		"\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EA\a(\x2\x2\x4EA\x93\x3\x2\x2\x2"+
		"\x4EB\x4EC\bK\x1\x2\x4EC\x4ED\x5T+\x2\x4ED\x4F3\x3\x2\x2\x2\x4EE\x4EF"+
		"\f\x3\x2\x2\x4EF\x4F0\a\x13\x2\x2\x4F0\x4F2\x5T+\x2\x4F1\x4EE\x3\x2\x2"+
		"\x2\x4F2\x4F5\x3\x2\x2\x2\x4F3\x4F1\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2"+
		"\x4F4\x95\x3\x2\x2\x2\x4F5\x4F3\x3\x2\x2\x2\x4F6\x4F7\a\x18\x2\x2\x4F7"+
		"\x4F8\x5T+\x2\x4F8\x4F9\a\x14\x2\x2\x4F9\x4FA\x5T+\x2\x4FA\x4FB\a\x19"+
		"\x2\x2\x4FB\x97\x3\x2\x2\x2\x4FC\x4FD\bM\x1\x2\x4FD\x4FE\x5\x9AN\x2\x4FE"+
		"\x509\x3\x2\x2\x2\x4FF\x500\f\x5\x2\x2\x500\x508\a,\x2\x2\x501\x502\f"+
		"\x4\x2\x2\x502\x503\a\x18\x2\x2\x503\x508\a\x19\x2\x2\x504\x505\f\x3\x2"+
		"\x2\x505\x506\a\x1A\x2\x2\x506\x508\a\x1B\x2\x2\x507\x4FF\x3\x2\x2\x2"+
		"\x507\x501\x3\x2\x2\x2\x507\x504\x3\x2\x2\x2\x508\x50B\x3\x2\x2\x2\x509"+
		"\x507\x3\x2\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x99\x3\x2\x2\x2\x50B\x509"+
		"\x3\x2\x2\x2\x50C\x50F\x5\x9CO\x2\x50D\x50F\x5\x9EP\x2\x50E\x50C\x3\x2"+
		"\x2\x2\x50E\x50D\x3\x2\x2\x2\x50F\x9B\x3\x2\x2\x2\x510\x51C\a\x34\x2\x2"+
		"\x511\x51C\a\x35\x2\x2\x512\x51C\a\x36\x2\x2\x513\x51C\a\x37\x2\x2\x514"+
		"\x51C\a\x38\x2\x2\x515\x51C\a?\x2\x2\x516\x51C\a\x39\x2\x2\x517\x51C\a"+
		";\x2\x2\x518\x51C\a:\x2\x2\x519\x51C\a<\x2\x2\x51A\x51C\a>\x2\x2\x51B"+
		"\x510\x3\x2\x2\x2\x51B\x511\x3\x2\x2\x2\x51B\x512\x3\x2\x2\x2\x51B\x513"+
		"\x3\x2\x2\x2\x51B\x514\x3\x2\x2\x2\x51B\x515\x3\x2\x2\x2\x51B\x516\x3"+
		"\x2\x2\x2\x51B\x517\x3\x2\x2\x2\x51B\x518\x3\x2\x2\x2\x51B\x519\x3\x2"+
		"\x2\x2\x51B\x51A\x3\x2\x2\x2\x51C\x9D\x3\x2\x2\x2\x51D\x51E\a\x95\x2\x2"+
		"\x51E\x9F\x3\x2\x2\x2\x51F\x520\a>\x2\x2\x520\xA1\x3\x2\x2\x2\x521\x525"+
		"\x5\f\a\x2\x522\x525\x5\x18\r\x2\x523\x525\x5\xE\b\x2\x524\x521\x3\x2"+
		"\x2\x2\x524\x522\x3\x2\x2\x2\x524\x523\x3\x2\x2\x2\x525\xA3\x3\x2\x2\x2"+
		"\x526\x527\bS\x1\x2\x527\x528\x5\xACW\x2\x528\x52E\x3\x2\x2\x2\x529\x52A"+
		"\f\x3\x2\x2\x52A\x52B\a\x13\x2\x2\x52B\x52D\x5\xACW\x2\x52C\x529\x3\x2"+
		"\x2\x2\x52D\x530\x3\x2\x2\x2\x52E\x52C\x3\x2\x2\x2\x52E\x52F\x3\x2\x2"+
		"\x2\x52F\xA5\x3\x2\x2\x2\x530\x52E\x3\x2\x2\x2\x531\x534\x5\xAAV\x2\x532"+
		"\x534\x5\xACW\x2\x533\x531\x3\x2\x2\x2\x533\x532\x3\x2\x2\x2\x534\xA7"+
		"\x3\x2\x2\x2\x535\x539\x5\xAAV\x2\x536\x539\x5\xACW\x2\x537\x539\x5\xAE"+
		"X\x2\x538\x535\x3\x2\x2\x2\x538\x536\x3\x2\x2\x2\x538\x537\x3\x2\x2\x2"+
		"\x539\xA9\x3\x2\x2\x2\x53A\x53B\a\x96\x2\x2\x53B\xAB\x3\x2\x2\x2\x53C"+
		"\x53D\a\x95\x2\x2\x53D\xAD\x3\x2\x2\x2\x53E\x53F\a\x94\x2\x2\x53F\xAF"+
		"\x3\x2\x2\x2\x540\x541\bY\x1\x2\x541\x542\x5\xB2Z\x2\x542\x548\x3\x2\x2"+
		"\x2\x543\x544\f\x3\x2\x2\x544\x545\a\x13\x2\x2\x545\x547\x5\xB2Z\x2\x546"+
		"\x543\x3\x2\x2\x2\x547\x54A\x3\x2\x2\x2\x548\x546\x3\x2\x2\x2\x548\x549"+
		"\x3\x2\x2\x2\x549\xB1\x3\x2\x2\x2\x54A\x548\x3\x2\x2\x2\x54B\x551\x5\xB8"+
		"]\x2\x54C\x54E\aj\x2\x2\x54D\x54C\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E"+
		"\x54F\x3\x2\x2\x2\x54F\x551\x5\xB4[\x2\x550\x54B\x3\x2\x2\x2\x550\x54D"+
		"\x3\x2\x2\x2\x551\xB3\x3\x2\x2\x2\x552\x555\x5\xB6\\\x2\x553\x555\x5,"+
		"\x17\x2\x554\x552\x3\x2\x2\x2\x554\x553\x3\x2\x2\x2\x555\xB5\x3\x2\x2"+
		"\x2\x556\x559\x5\xAAV\x2\x557\x558\a-\x2\x2\x558\x55A\x5\xF4{\x2\x559"+
		"\x557\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\xB7\x3\x2\x2\x2\x55B\x55C"+
		"\x5\xA0Q\x2\x55C\x55D\x5\xAAV\x2\x55D\xB9\x3\x2\x2\x2\x55E\x561\x5\x98"+
		"M\x2\x55F\x561\x5\xBC_\x2\x560\x55E\x3\x2\x2\x2\x560\x55F\x3\x2\x2\x2"+
		"\x561\xBB\x3\x2\x2\x2\x562\x563\b_\x1\x2\x563\x564\a\x44\x2\x2\x564\x56D"+
		"\x3\x2\x2\x2\x565\x566\f\x4\x2\x2\x566\x567\a\x18\x2\x2\x567\x56C\a\x19"+
		"\x2\x2\x568\x569\f\x3\x2\x2\x569\x56A\a\x1A\x2\x2\x56A\x56C\a\x1B\x2\x2"+
		"\x56B\x565\x3\x2\x2\x2\x56B\x568\x3\x2\x2\x2\x56C\x56F\x3\x2\x2\x2\x56D"+
		"\x56B\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\xBD\x3\x2\x2\x2\x56F\x56D"+
		"\x3\x2\x2\x2\x570\x571\b`\x1\x2\x571\x572\x5\xC0\x61\x2\x572\x579\x3\x2"+
		"\x2\x2\x573\x574\f\x3\x2\x2\x574\x575\x5v<\x2\x575\x576\x5\xC0\x61\x2"+
		"\x576\x578\x3\x2\x2\x2\x577\x573\x3\x2\x2\x2\x578\x57B\x3\x2\x2\x2\x579"+
		"\x577\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\xBF\x3\x2\x2\x2\x57B\x579"+
		"\x3\x2\x2\x2\x57C\x582\x5\x14\v\x2\x57D\x582\x5\x16\f\x2\x57E\x582\x5"+
		"$\x13\x2\x57F\x582\x5\"\x12\x2\x580\x582\x5\x12\n\x2\x581\x57C\x3\x2\x2"+
		"\x2\x581\x57D\x3\x2\x2\x2\x581\x57E\x3\x2\x2\x2\x581\x57F\x3\x2\x2\x2"+
		"\x581\x580\x3\x2\x2\x2\x582\xC1\x3\x2\x2\x2\x583\x584\b\x62\x1\x2\x584"+
		"\x585\x5\xC4\x63\x2\x585\x58C\x3\x2\x2\x2\x586\x587\f\x3\x2\x2\x587\x588"+
		"\x5v<\x2\x588\x589\x5\xC4\x63\x2\x589\x58B\x3\x2\x2\x2\x58A\x586\x3\x2"+
		"\x2\x2\x58B\x58E\x3\x2\x2\x2\x58C\x58A\x3\x2\x2\x2\x58C\x58D\x3\x2\x2"+
		"\x2\x58D\xC3\x3\x2\x2\x2\x58E\x58C\x3\x2\x2\x2\x58F\x592\x5\xC0\x61\x2"+
		"\x590\x592\x5&\x14\x2\x591\x58F\x3\x2\x2\x2\x591\x590\x3\x2\x2\x2\x592"+
		"\xC5\x3\x2\x2\x2\x593\x594\a\v\x2\x2\x594\x59E\x5\x160\xB1\x2\x595\x596"+
		"\a\f\x2\x2\x596\x59E\x5\x178\xBD\x2\x597\x598\a\r\x2\x2\x598\x59E\x5\xC8"+
		"\x65\x2\x599\x59A\a\xE\x2\x2\x59A\x59E\x5\xC8\x65\x2\x59B\x59C\a\xF\x2"+
		"\x2\x59C\x59E\x5\xCEh\x2\x59D\x593\x3\x2\x2\x2\x59D\x595\x3\x2\x2\x2\x59D"+
		"\x597\x3\x2\x2\x2\x59D\x599\x3\x2\x2\x2\x59D\x59B\x3\x2\x2\x2\x59E\xC7"+
		"\x3\x2\x2\x2\x59F\x5A1\x5\xA8U\x2\x5A0\x5A2\x5\xCA\x66\x2\x5A1\x5A0\x3"+
		"\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\xC9\x3\x2\x2\x2\x5A3\x5A4\a`\x2\x2"+
		"\x5A4\x5A5\x5\xCCg\x2\x5A5\x5A6\a\x11\x2\x2\x5A6\x5AB\x5\xA8U\x2\x5A7"+
		"\x5A8\a\x15\x2\x2\x5A8\x5AA\x5\xA8U\x2\x5A9\x5A7\x3\x2\x2\x2\x5AA\x5AD"+
		"\x3\x2\x2\x2\x5AB\x5A9\x3\x2\x2\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\xCB\x3\x2"+
		"\x2\x2\x5AD\x5AB\x3\x2\x2\x2\x5AE\x5AF\a\x96\x2\x2\x5AF\x5B0\x6g\x35\x3"+
		"\x5B0\xCD\x3\x2\x2\x2\x5B1\x5B3\x5\xA8U\x2\x5B2\x5B4\x5\xD0i\x2\x5B3\x5B2"+
		"\x3\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\xCF\x3\x2\x2\x2\x5B5\x5B6\a`\x2"+
		"\x2\x5B6\x5B7\x5\xCCg\x2\x5B7\x5B9\a\x11\x2\x2\x5B8\x5BA\a%\x2\x2\x5B9"+
		"\x5B8\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5C0"+
		"\x5\x132\x9A\x2\x5BC\x5BD\a%\x2\x2\x5BD\x5BF\x5\x132\x9A\x2\x5BE\x5BC"+
		"\x3\x2\x2\x2\x5BF\x5C2\x3\x2\x2\x2\x5C0\x5BE\x3\x2\x2\x2\x5C0\x5C1\x3"+
		"\x2\x2\x2\x5C1\x5C5\x3\x2\x2\x2\x5C2\x5C0\x3\x2\x2\x2\x5C3\x5C4\a\x15"+
		"\x2\x2\x5C4\x5C6\x5\x132\x9A\x2\x5C5\x5C3\x3\x2\x2\x2\x5C5\x5C6\x3\x2"+
		"\x2\x2\x5C6\xD1\x3\x2\x2\x2\x5C7\x5C8\bj\x1\x2\x5C8\x5C9\x5\xAAV\x2\x5C9"+
		"\x5CF\x3\x2\x2\x2\x5CA\x5CB\f\x3\x2\x2\x5CB\x5CC\a\x13\x2\x2\x5CC\x5CE"+
		"\x5\xAAV\x2\x5CD\x5CA\x3\x2\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF\x5CD\x3\x2"+
		"\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\xD3\x3\x2\x2\x2\x5D1\x5CF\x3\x2\x2\x2"+
		"\x5D2\x5D7\x5\"\x12\x2\x5D3\x5D7\x5$\x13\x2\x5D4\x5D7\x5&\x14\x2\x5D5"+
		"\x5D7\x5(\x15\x2\x5D6\x5D2\x3\x2\x2\x2\x5D6\x5D3\x3\x2\x2\x2\x5D6\x5D4"+
		"\x3\x2\x2\x2\x5D6\x5D5\x3\x2\x2\x2\x5D7\xD5\x3\x2\x2\x2\x5D8\x5D9\a\n"+
		"\x2\x2\x5D9\xD7\x3\x2\x2\x2\x5DA\x5DB\bm\x1\x2\x5DB\x5DC\x5\xDAn\x2\x5DC"+
		"\x5E3\x3\x2\x2\x2\x5DD\x5DE\f\x3\x2\x2\x5DE\x5DF\x5v<\x2\x5DF\x5E0\x5"+
		"\xDAn\x2\x5E0\x5E2\x3\x2\x2\x2\x5E1\x5DD\x3\x2\x2\x2\x5E2\x5E5\x3\x2\x2"+
		"\x2\x5E3\x5E1\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\xD9\x3\x2\x2\x2\x5E5"+
		"\x5E3\x3\x2\x2\x2\x5E6\x5E7\a\v\x2\x2\x5E7\x5F1\x5\x14C\xA7\x2\x5E8\x5E9"+
		"\a\f\x2\x2\x5E9\x5F1\x5\x166\xB4\x2\x5EA\x5EB\a\r\x2\x2\x5EB\x5F1\x5\xDC"+
		"o\x2\x5EC\x5ED\a\xE\x2\x2\x5ED\x5F1\x5\xDCo\x2\x5EE\x5EF\a\xF\x2\x2\x5EF"+
		"\x5F1\x5\xDEp\x2\x5F0\x5E6\x3\x2\x2\x2\x5F0\x5E8\x3\x2\x2\x2\x5F0\x5EA"+
		"\x3\x2\x2\x2\x5F0\x5EC\x3\x2\x2\x2\x5F0\x5EE\x3\x2\x2\x2\x5F1\xDB\x3\x2"+
		"\x2\x2\x5F2\x5F4\x5\x134\x9B\x2\x5F3\x5F5\a\x12\x2\x2\x5F4\x5F3\x3\x2"+
		"\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5F7\x3\x2\x2\x2\x5F6\x5F8\x5\xCA\x66"+
		"\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\xDD\x3\x2\x2\x2\x5F9"+
		"\x5FB\x5\x11C\x8F\x2\x5FA\x5FC\a\x12\x2\x2\x5FB\x5FA\x3\x2\x2\x2\x5FB"+
		"\x5FC\x3\x2\x2\x2\x5FC\x5FE\x3\x2\x2\x2\x5FD\x5FF\x5\xD0i\x2\x5FE\x5FD"+
		"\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF\xDF\x3\x2\x2\x2\x600\x601\bq\x1"+
		"\x2\x601\x602\x5.\x18\x2\x602\x609\x3\x2\x2\x2\x603\x604\f\x3\x2\x2\x604"+
		"\x605\x5v<\x2\x605\x606\x5.\x18\x2\x606\x608\x3\x2\x2\x2\x607\x603\x3"+
		"\x2\x2\x2\x608\x60B\x3\x2\x2\x2\x609\x607\x3\x2\x2\x2\x609\x60A\x3\x2"+
		"\x2\x2\x60A\xE1\x3\x2\x2\x2\x60B\x609\x3\x2\x2\x2\x60C\x60D\br\x1\x2\x60D"+
		"\x60E\x5*\x16\x2\x60E\x615\x3\x2\x2\x2\x60F\x610\f\x3\x2\x2\x610\x611"+
		"\x5v<\x2\x611\x612\x5*\x16\x2\x612\x614\x3\x2\x2\x2\x613\x60F\x3\x2\x2"+
		"\x2\x614\x617\x3\x2\x2\x2\x615\x613\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2"+
		"\x616\xE3\x3\x2\x2\x2\x617\x615\x3\x2\x2\x2\x618\x619\bs\x1\x2\x619\x61A"+
		"\x5@!\x2\x61A\x621\x3\x2\x2\x2\x61B\x61C\f\x3\x2\x2\x61C\x61D\x5v<\x2"+
		"\x61D\x61E\x5@!\x2\x61E\x620\x3\x2\x2\x2\x61F\x61B\x3\x2\x2\x2\x620\x623"+
		"\x3\x2\x2\x2\x621\x61F\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2\x622\xE5\x3\x2"+
		"\x2\x2\x623\x621\x3\x2\x2\x2\x624\x625\bt\x1\x2\x625\x626\x5P)\x2\x626"+
		"\x62D\x3\x2\x2\x2\x627\x628\f\x3\x2\x2\x628\x629\x5v<\x2\x629\x62A\x5"+
		"P)\x2\x62A\x62C\x3\x2\x2\x2\x62B\x627\x3\x2\x2\x2\x62C\x62F\x3\x2\x2\x2"+
		"\x62D\x62B\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\xE7\x3\x2\x2\x2\x62F"+
		"\x62D\x3\x2\x2\x2\x630\x631\a\x18\x2\x2\x631\x632\x5\xEAv\x2\x632\x633"+
		"\a\x14\x2\x2\x633\x634\x5\xEAv\x2\x634\x635\a\x19\x2\x2\x635\x63F\x3\x2"+
		"\x2\x2\x636\x637\a\x18\x2\x2\x637\x638\x5\xECw\x2\x638\x639\a\x19\x2\x2"+
		"\x639\x63F\x3\x2\x2\x2\x63A\x63B\a*\x2\x2\x63B\x63C\x5\xECw\x2\x63C\x63D"+
		"\a(\x2\x2\x63D\x63F\x3\x2\x2\x2\x63E\x630\x3\x2\x2\x2\x63E\x636\x3\x2"+
		"\x2\x2\x63E\x63A\x3\x2\x2\x2\x63F\xE9\x3\x2\x2\x2\x640\x64E\a\x92\x2\x2"+
		"\x641\x64E\a\x93\x2\x2\x642\x64E\a\x9A\x2\x2\x643\x64E\a\x9B\x2\x2\x644"+
		"\x64E\a\x91\x2\x2\x645\x64E\a\x9F\x2\x2\x646\x64E\a\x9E\x2\x2\x647\x64E"+
		"\a\x99\x2\x2\x648\x64E\a\x9C\x2\x2\x649\x64E\a\x9D\x2\x2\x64A\x64E\a\x90"+
		"\x2\x2\x64B\x64E\a\xA0\x2\x2\x64C\x64E\x5|?\x2\x64D\x640\x3\x2\x2\x2\x64D"+
		"\x641\x3\x2\x2\x2\x64D\x642\x3\x2\x2\x2\x64D\x643\x3\x2\x2\x2\x64D\x644"+
		"\x3\x2\x2\x2\x64D\x645\x3\x2\x2\x2\x64D\x646\x3\x2\x2\x2\x64D\x647\x3"+
		"\x2\x2\x2\x64D\x648\x3\x2\x2\x2\x64D\x649\x3\x2\x2\x2\x64D\x64A\x3\x2"+
		"\x2\x2\x64D\x64B\x3\x2\x2\x2\x64D\x64C\x3\x2\x2\x2\x64E\xEB\x3\x2\x2\x2"+
		"\x64F\x650\bw\x1\x2\x650\x651\x5\xEAv\x2\x651\x657\x3\x2\x2\x2\x652\x653"+
		"\f\x3\x2\x2\x653\x654\a\x13\x2\x2\x654\x656\x5\xEAv\x2\x655\x652\x3\x2"+
		"\x2\x2\x656\x659\x3\x2\x2\x2\x657\x655\x3\x2\x2\x2\x657\x658\x3\x2\x2"+
		"\x2\x658\xED\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x65A\x65F\x5\xF2z\x2\x65B"+
		"\x65F\x5\xF4{\x2\x65C\x65F\x5\xA8U\x2\x65D\x65F\x5\xF0y\x2\x65E\x65A\x3"+
		"\x2\x2\x2\x65E\x65B\x3\x2\x2\x2\x65E\x65C\x3\x2\x2\x2\x65E\x65D\x3\x2"+
		"\x2\x2\x65F\xEF\x3\x2\x2\x2\x660\x661\t\x4\x2\x2\x661\xF1\x3\x2\x2\x2"+
		"\x662\x663\a\x16\x2\x2\x663\x664\x5T+\x2\x664\x665\a\x17\x2\x2\x665\xF3"+
		"\x3\x2\x2\x2\x666\x669\x5\xEAv\x2\x667\x669\x5\xF6|\x2\x668\x666\x3\x2"+
		"\x2\x2\x668\x667\x3\x2\x2\x2\x669\xF5\x3\x2\x2\x2\x66A\x670\x5\x96L\x2"+
		"\x66B\x670\x5\x90I\x2\x66C\x670\x5\x92J\x2\x66D\x670\x5\xFA~\x2\x66E\x670"+
		"\x5\xF8}\x2\x66F\x66A\x3\x2\x2\x2\x66F\x66B\x3\x2\x2\x2\x66F\x66C\x3\x2"+
		"\x2\x2\x66F\x66D\x3\x2\x2\x2\x66F\x66E\x3\x2\x2\x2\x670\xF7\x3\x2\x2\x2"+
		"\x671\x673\a\x16\x2\x2\x672\x674\x5\xFC\x7F\x2\x673\x672\x3\x2\x2\x2\x673"+
		"\x674\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\a\x17\x2\x2\x676\xF9"+
		"\x3\x2\x2\x2\x677\x679\a\x1A\x2\x2\x678\x67A\x5\xFE\x80\x2\x679\x678\x3"+
		"\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67C\a\x1B"+
		"\x2\x2\x67C\xFB\x3\x2\x2\x2\x67D\x67E\b\x7F\x1\x2\x67E\x67F\x5T+\x2\x67F"+
		"\x685\x3\x2\x2\x2\x680\x681\f\x3\x2\x2\x681\x682\a\x13\x2\x2\x682\x684"+
		"\x5T+\x2\x683\x680\x3\x2\x2\x2\x684\x687\x3\x2\x2\x2\x685\x683\x3\x2\x2"+
		"\x2\x685\x686\x3\x2\x2\x2\x686\xFD\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x688"+
		"\x689\b\x80\x1\x2\x689\x68A\x5\x100\x81\x2\x68A\x690\x3\x2\x2\x2\x68B"+
		"\x68C\f\x3\x2\x2\x68C\x68D\a\x13\x2\x2\x68D\x68F\x5\x100\x81\x2\x68E\x68B"+
		"\x3\x2\x2\x2\x68F\x692\x3\x2\x2\x2\x690\x68E\x3\x2\x2\x2\x690\x691\x3"+
		"\x2\x2\x2\x691\xFF\x3\x2\x2\x2\x692\x690\x3\x2\x2\x2\x693\x694\x5T+\x2"+
		"\x694\x695\a\x11\x2\x2\x695\x696\x5T+\x2\x696\x101\x3\x2\x2\x2\x697\x698"+
		"\x5T+\x2\x698\x699\a\x11\x2\x2\x699\x69A\x5T+\x2\x69A\x6A1\x3\x2\x2\x2"+
		"\x69B\x69C\x5T+\x2\x69C\x69D\a\x11\x2\x2\x69D\x6A1\x3\x2\x2\x2\x69E\x69F"+
		"\a\x11\x2\x2\x69F\x6A1\x5T+\x2\x6A0\x697\x3\x2\x2\x2\x6A0\x69B\x3\x2\x2"+
		"\x2\x6A0\x69E\x3\x2\x2\x2\x6A1\x103\x3\x2\x2\x2\x6A2\x6A3\x5\xAAV\x2\x6A3"+
		"\x6A4\x5\x112\x8A\x2\x6A4\x6A5\x5T+\x2\x6A5\x105\x3\x2\x2\x2\x6A6\x6A7"+
		"\b\x84\x1\x2\x6A7\x6A8\x5\xAAV\x2\x6A8\x6AD\x3\x2\x2\x2\x6A9\x6AA\f\x3"+
		"\x2\x2\x6AA\x6AC\x5p\x39\x2\x6AB\x6A9\x3\x2\x2\x2\x6AC\x6AF\x3\x2\x2\x2"+
		"\x6AD\x6AB\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\x107\x3\x2\x2\x2\x6AF"+
		"\x6AD\x3\x2\x2\x2\x6B0\x6B1\x6\x85@\x3\x6B1\x6B2\a\x96\x2\x2\x6B2\x6B5"+
		"\x5\xBA^\x2\x6B3\x6B5\x5T+\x2\x6B4\x6B0\x3\x2\x2\x2\x6B4\x6B3\x3\x2\x2"+
		"\x2\x6B5\x109\x3\x2\x2\x2\x6B6\x6BD\a\"\x2\x2\x6B7\x6BD\a#\x2\x2\x6B8"+
		"\x6BD\x5\x114\x8B\x2\x6B9\x6BD\x5\x116\x8C\x2\x6BA\x6BD\x5\x118\x8D\x2"+
		"\x6BB\x6BD\x5\x11A\x8E\x2\x6BC\x6B6\x3\x2\x2\x2\x6BC\x6B7\x3\x2\x2\x2"+
		"\x6BC\x6B8\x3\x2\x2\x2\x6BC\x6B9\x3\x2\x2\x2\x6BC\x6BA\x3\x2\x2\x2\x6BC"+
		"\x6BB\x3\x2\x2\x2\x6BD\x10B\x3\x2\x2\x2\x6BE\x6BF\a\x96\x2\x2\x6BF\x6C0"+
		"\x6\x87\x41\x3\x6C0\x10D\x3\x2\x2\x2\x6C1\x6C2\a\x96\x2\x2\x6C2\x6C3\x6"+
		"\x88\x42\x3\x6C3\x10F\x3\x2\x2\x2\x6C4\x6C5\a\x96\x2\x2\x6C5\x6C6\x6\x89"+
		"\x43\x3\x6C6\x111\x3\x2\x2\x2\x6C7\x6C8\a-\x2\x2\x6C8\x113\x3\x2\x2\x2"+
		"\x6C9\x6CA\a$\x2\x2\x6CA\x115\x3\x2\x2\x2\x6CB\x6CC\a%\x2\x2\x6CC\x117"+
		"\x3\x2\x2\x2\x6CD\x6CE\a&\x2\x2\x6CE\x119\x3\x2\x2\x2\x6CF\x6D0\t\x5\x2"+
		"\x2\x6D0\x11B\x3\x2\x2\x2\x6D1\x6D2\a{\x2\x2\x6D2\x6D3\x5\x11E\x90\x2"+
		"\x6D3\x6D4\a\x12\x2\x2\x6D4\x6D9\x3\x2\x2\x2\x6D5\x6D6\x5\x11E\x90\x2"+
		"\x6D6\x6D7\a\x12\x2\x2\x6D7\x6D9\x3\x2\x2\x2\x6D8\x6D1\x3\x2\x2\x2\x6D8"+
		"\x6D5\x3\x2\x2\x2\x6D9\x11D\x3\x2\x2\x2\x6DA\x6DB\b\x90\x1\x2\x6DB\x6DC"+
		"\x5\x120\x91\x2\x6DC\x6E1\x3\x2\x2\x2\x6DD\x6DE\f\x3\x2\x2\x6DE\x6E0\x5"+
		"\x124\x93\x2\x6DF\x6DD\x3\x2\x2\x2\x6E0\x6E3\x3\x2\x2\x2\x6E1\x6DF\x3"+
		"\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x11F\x3\x2\x2\x2\x6E3\x6E1\x3\x2"+
		"\x2\x2\x6E4\x6EB\x5\x122\x92\x2\x6E5\x6EB\x5\x12C\x97\x2\x6E6\x6EB\x5"+
		"\x12E\x98\x2\x6E7\x6EB\x5\x130\x99\x2\x6E8\x6EB\x5\x126\x94\x2\x6E9\x6EB"+
		"\x5\x12A\x96\x2\x6EA\x6E4\x3\x2\x2\x2\x6EA\x6E5\x3\x2\x2\x2\x6EA\x6E6"+
		"\x3\x2\x2\x2\x6EA\x6E7\x3\x2\x2\x2\x6EA\x6E8\x3\x2\x2\x2\x6EA\x6E9\x3"+
		"\x2\x2\x2\x6EB\x121\x3\x2\x2\x2\x6EC\x6ED\x5\xF0y\x2\x6ED\x123\x3\x2\x2"+
		"\x2\x6EE\x6EF\a\x15\x2\x2\x6EF\x6F4\x5\x126\x94\x2\x6F0\x6F1\a\x15\x2"+
		"\x2\x6F1\x6F4\x5\x132\x9A\x2\x6F2\x6F4\x5\x12A\x96\x2\x6F3\x6EE\x3\x2"+
		"\x2\x2\x6F3\x6F0\x3\x2\x2\x2\x6F3\x6F2\x3\x2\x2\x2\x6F4\x125\x3\x2\x2"+
		"\x2\x6F5\x6F6\x5\x132\x9A\x2\x6F6\x6F8\a\x16\x2\x2\x6F7\x6F9\x5\x128\x95"+
		"\x2\x6F8\x6F7\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2"+
		"\x6FA\x6FB\a\x17\x2\x2\x6FB\x127\x3\x2\x2\x2\x6FC\x6FD\b\x95\x1\x2\x6FD"+
		"\x6FE\x5\x11E\x90\x2\x6FE\x704\x3\x2\x2\x2\x6FF\x700\f\x3\x2\x2\x700\x701"+
		"\a\x13\x2\x2\x701\x703\x5\x11E\x90\x2\x702\x6FF\x3\x2\x2\x2\x703\x706"+
		"\x3\x2\x2\x2\x704\x702\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x129\x3"+
		"\x2\x2\x2\x706\x704\x3\x2\x2\x2\x707\x708\a\x18\x2\x2\x708\x709\x5\x11E"+
		"\x90\x2\x709\x70A\a\x19\x2\x2\x70A\x12B\x3\x2\x2\x2\x70B\x70C\a\x16\x2"+
		"\x2\x70C\x70D\x5\x11E\x90\x2\x70D\x70E\a\x17\x2\x2\x70E\x12D\x3\x2\x2"+
		"\x2\x70F\x710\x5\x132\x9A\x2\x710\x12F\x3\x2\x2\x2\x711\x717\a\x9A\x2"+
		"\x2\x712\x717\a\x9C\x2\x2\x713\x717\a\x99\x2\x2\x714\x717\a\x90\x2\x2"+
		"\x715\x717\a\x91\x2\x2\x716\x711\x3\x2\x2\x2\x716\x712\x3\x2\x2\x2\x716"+
		"\x713\x3\x2\x2\x2\x716\x714\x3\x2\x2\x2\x716\x715\x3\x2\x2\x2\x717\x131"+
		"\x3\x2\x2\x2\x718\x719\t\x6\x2\x2\x719\x133\x3\x2\x2\x2\x71A\x71B\a{\x2"+
		"\x2\x71B\x71E\x5\x136\x9C\x2\x71C\x71E\x5\x136\x9C\x2\x71D\x71A\x3\x2"+
		"\x2\x2\x71D\x71C\x3\x2\x2\x2\x71E\x135\x3\x2\x2\x2\x71F\x720\b\x9C\x1"+
		"\x2\x720\x721\x5\x138\x9D\x2\x721\x726\x3\x2\x2\x2\x722\x723\f\x3\x2\x2"+
		"\x723\x725\x5\x13A\x9E\x2\x724\x722\x3\x2\x2\x2\x725\x728\x3\x2\x2\x2"+
		"\x726\x724\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x137\x3\x2\x2\x2\x728"+
		"\x726\x3\x2\x2\x2\x729\x72E\x5\x144\xA3\x2\x72A\x72E\x5\x146\xA4\x2\x72B"+
		"\x72E\x5\x148\xA5\x2\x72C\x72E\x5\x13C\x9F\x2\x72D\x729\x3\x2\x2\x2\x72D"+
		"\x72A\x3\x2\x2\x2\x72D\x72B\x3\x2\x2\x2\x72D\x72C\x3\x2\x2\x2\x72E\x139"+
		"\x3\x2\x2\x2\x72F\x730\a\x15\x2\x2\x730\x736\x5\x13C\x9F\x2\x731\x732"+
		"\a\x18\x2\x2\x732\x733\x5\x136\x9C\x2\x733\x734\a\x19\x2\x2\x734\x736"+
		"\x3\x2\x2\x2\x735\x72F\x3\x2\x2\x2\x735\x731\x3\x2\x2\x2\x736\x13B\x3"+
		"\x2\x2\x2\x737\x738\x5\x14A\xA6\x2\x738\x73A\a\x16\x2\x2\x739\x73B\x5"+
		"\x13E\xA0\x2\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C\x3"+
		"\x2\x2\x2\x73C\x73D\a\x17\x2\x2\x73D\x13D\x3\x2\x2\x2\x73E\x745\x5\x140"+
		"\xA1\x2\x73F\x745\x5\x142\xA2\x2\x740\x741\x5\x140\xA1\x2\x741\x742\a"+
		"\x13\x2\x2\x742\x743\x5\x142\xA2\x2\x743\x745\x3\x2\x2\x2\x744\x73E\x3"+
		"\x2\x2\x2\x744\x73F\x3\x2\x2\x2\x744\x740\x3\x2\x2\x2\x745\x13F\x3\x2"+
		"\x2\x2\x746\x747\b\xA1\x1\x2\x747\x748\x5\x136\x9C\x2\x748\x74E\x3\x2"+
		"\x2\x2\x749\x74A\f\x3\x2\x2\x74A\x74B\a\x13\x2\x2\x74B\x74D\x5\x136\x9C"+
		"\x2\x74C\x749\x3\x2\x2\x2\x74D\x750\x3\x2\x2\x2\x74E\x74C\x3\x2\x2\x2"+
		"\x74E\x74F\x3\x2\x2\x2\x74F\x141\x3\x2\x2\x2\x750\x74E\x3\x2\x2\x2\x751"+
		"\x752\b\xA2\x1\x2\x752\x753\x5\x14A\xA6\x2\x753\x754\a-\x2\x2\x754\x755"+
		"\x5\x136\x9C\x2\x755\x75E\x3\x2\x2\x2\x756\x757\f\x3\x2\x2\x757\x758\a"+
		"\x13\x2\x2\x758\x759\x5\x14A\xA6\x2\x759\x75A\a-\x2\x2\x75A\x75B\x5\x136"+
		"\x9C\x2\x75B\x75D\x3\x2\x2\x2\x75C\x756\x3\x2\x2\x2\x75D\x760\x3\x2\x2"+
		"\x2\x75E\x75C\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x143\x3\x2\x2\x2"+
		"\x760\x75E\x3\x2\x2\x2\x761\x762\a\x16\x2\x2\x762\x763\x5\x136\x9C\x2"+
		"\x763\x764\a\x17\x2\x2\x764\x145\x3\x2\x2\x2\x765\x766\b\xA4\x1\x2\x766"+
		"\x769\a\x98\x2\x2\x767\x769\x5\x14A\xA6\x2\x768\x765\x3\x2\x2\x2\x768"+
		"\x767\x3\x2\x2\x2\x769\x76F\x3\x2\x2\x2\x76A\x76B\f\x3\x2\x2\x76B\x76C"+
		"\a\x15\x2\x2\x76C\x76E\x5\x14A\xA6\x2\x76D\x76A\x3\x2\x2\x2\x76E\x771"+
		"\x3\x2\x2\x2\x76F\x76D\x3\x2\x2\x2\x76F\x770\x3\x2\x2\x2\x770\x147\x3"+
		"\x2\x2\x2\x771\x76F\x3\x2\x2\x2\x772\x778\a\x9A\x2\x2\x773\x778\a\x9C"+
		"\x2\x2\x774\x778\a\x99\x2\x2\x775\x778\a\x90\x2\x2\x776\x778\a\x91\x2"+
		"\x2\x777\x772\x3\x2\x2\x2\x777\x773\x3\x2\x2\x2\x777\x774\x3\x2\x2\x2"+
		"\x777\x775\x3\x2\x2\x2\x777\x776\x3\x2\x2\x2\x778\x149\x3\x2\x2\x2\x779"+
		"\x77A\t\a\x2\x2\x77A\x14B\x3\x2\x2\x2\x77B\x77C\a{\x2\x2\x77C\x77D\x5"+
		"\x14E\xA8\x2\x77D\x77E\a\x12\x2\x2\x77E\x783\x3\x2\x2\x2\x77F\x780\x5"+
		"\x14E\xA8\x2\x780\x781\a\x12\x2\x2\x781\x783\x3\x2\x2\x2\x782\x77B\x3"+
		"\x2\x2\x2\x782\x77F\x3\x2\x2\x2\x783\x14D\x3\x2\x2\x2\x784\x785\b\xA8"+
		"\x1\x2\x785\x786\x5\x150\xA9\x2\x786\x78B\x3\x2\x2\x2\x787\x788\f\x3\x2"+
		"\x2\x788\x78A\x5\x154\xAB\x2\x789\x787\x3\x2\x2\x2\x78A\x78D\x3\x2\x2"+
		"\x2\x78B\x789\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x14F\x3\x2\x2\x2"+
		"\x78D\x78B\x3\x2\x2\x2\x78E\x793\x5\x152\xAA\x2\x78F\x793\x5\x15C\xAF"+
		"\x2\x790\x793\x5\x15E\xB0\x2\x791\x793\x5\x162\xB2\x2\x792\x78E\x3\x2"+
		"\x2\x2\x792\x78F\x3\x2\x2\x2\x792\x790\x3\x2\x2\x2\x792\x791\x3\x2\x2"+
		"\x2\x793\x151\x3\x2\x2\x2\x794\x795\x5\xF0y\x2\x795\x153\x3\x2\x2\x2\x796"+
		"\x797\a\x15\x2\x2\x797\x79A\x5\x156\xAC\x2\x798\x79A\x5\x15A\xAE\x2\x799"+
		"\x796\x3\x2\x2\x2\x799\x798\x3\x2\x2\x2\x79A\x155\x3\x2\x2\x2\x79B\x79C"+
		"\x5\x164\xB3\x2\x79C\x79E\a\x16\x2\x2\x79D\x79F\x5\x158\xAD\x2\x79E\x79D"+
		"\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A1\a\x17"+
		"\x2\x2\x7A1\x157\x3\x2\x2\x2\x7A2\x7A3\b\xAD\x1\x2\x7A3\x7A4\x5\x14E\xA8"+
		"\x2\x7A4\x7AA\x3\x2\x2\x2\x7A5\x7A6\f\x3\x2\x2\x7A6\x7A7\a\x13\x2\x2\x7A7"+
		"\x7A9\x5\x14E\xA8\x2\x7A8\x7A5\x3\x2\x2\x2\x7A9\x7AC\x3\x2\x2\x2\x7AA"+
		"\x7A8\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x159\x3\x2\x2\x2\x7AC\x7AA"+
		"\x3\x2\x2\x2\x7AD\x7AE\a\x18\x2\x2\x7AE\x7AF\x5\x14E\xA8\x2\x7AF\x7B0"+
		"\a\x19\x2\x2\x7B0\x15B\x3\x2\x2\x2\x7B1\x7B2\a\x16\x2\x2\x7B2\x7B3\x5"+
		"\x14E\xA8\x2\x7B3\x7B4\a\x17\x2\x2\x7B4\x15D\x3\x2\x2\x2\x7B5\x7B6\b\xB0"+
		"\x1\x2\x7B6\x7B7\x5\x164\xB3\x2\x7B7\x7BD\x3\x2\x2\x2\x7B8\x7B9\f\x3\x2"+
		"\x2\x7B9\x7BA\a\x15\x2\x2\x7BA\x7BC\x5\x164\xB3\x2\x7BB\x7B8\x3\x2\x2"+
		"\x2\x7BC\x7BF\x3\x2\x2\x2\x7BD\x7BB\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2"+
		"\x7BE\x15F\x3\x2\x2\x2\x7BF\x7BD\x3\x2\x2\x2\x7C0\x7C1\b\xB1\x1\x2\x7C1"+
		"\x7C2\x5\x15E\xB0\x2\x7C2\x7C7\x3\x2\x2\x2\x7C3\x7C4\f\x3\x2\x2\x7C4\x7C6"+
		"\a\x98\x2\x2\x7C5\x7C3\x3\x2\x2\x2\x7C6\x7C9\x3\x2\x2\x2\x7C7\x7C5\x3"+
		"\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x161\x3\x2\x2\x2\x7C9\x7C7\x3\x2"+
		"\x2\x2\x7CA\x7D0\a\x9A\x2\x2\x7CB\x7D0\a\x9C\x2\x2\x7CC\x7D0\a\x99\x2"+
		"\x2\x7CD\x7D0\a\x90\x2\x2\x7CE\x7D0\a\x91\x2\x2\x7CF\x7CA\x3\x2\x2\x2"+
		"\x7CF\x7CB\x3\x2\x2\x2\x7CF\x7CC\x3\x2\x2\x2\x7CF\x7CD\x3\x2\x2\x2\x7CF"+
		"\x7CE\x3\x2\x2\x2\x7D0\x163\x3\x2\x2\x2\x7D1\x7D2\t\b\x2\x2\x7D2\x165"+
		"\x3\x2\x2\x2\x7D3\x7D4\a{\x2\x2\x7D4\x7D5\x5\x168\xB5\x2\x7D5\x7D6\a\x12"+
		"\x2\x2\x7D6\x7DB\x3\x2\x2\x2\x7D7\x7D8\x5\x168\xB5\x2\x7D8\x7D9\a\x12"+
		"\x2\x2\x7D9\x7DB\x3\x2\x2\x2\x7DA\x7D3\x3\x2\x2\x2\x7DA\x7D7\x3\x2\x2"+
		"\x2\x7DB\x167\x3\x2\x2\x2\x7DC\x7DD\b\xB5\x1\x2\x7DD\x7DE\x5\x16A\xB6"+
		"\x2\x7DE\x7E3\x3\x2\x2\x2\x7DF\x7E0\f\x3\x2\x2\x7E0\x7E2\x5\x16E\xB8\x2"+
		"\x7E1\x7DF\x3\x2\x2\x2\x7E2\x7E5\x3\x2\x2\x2\x7E3\x7E1\x3\x2\x2\x2\x7E3"+
		"\x7E4\x3\x2\x2\x2\x7E4\x169\x3\x2\x2\x2\x7E5\x7E3\x3\x2\x2\x2\x7E6\x7EB"+
		"\x5\x16C\xB7\x2\x7E7\x7EB\x5\x176\xBC\x2\x7E8\x7EB\x5\x178\xBD\x2\x7E9"+
		"\x7EB\x5\x17A\xBE\x2\x7EA\x7E6\x3\x2\x2\x2\x7EA\x7E7\x3\x2\x2\x2\x7EA"+
		"\x7E8\x3\x2\x2\x2\x7EA\x7E9\x3\x2\x2\x2\x7EB\x16B\x3\x2\x2\x2\x7EC\x7ED"+
		"\x5\xF0y\x2\x7ED\x16D\x3\x2\x2\x2\x7EE\x7EF\a\x15\x2\x2\x7EF\x7F2\x5\x170"+
		"\xB9\x2\x7F0\x7F2\x5\x174\xBB\x2\x7F1\x7EE\x3\x2\x2\x2\x7F1\x7F0\x3\x2"+
		"\x2\x2\x7F2\x16F\x3\x2\x2\x2\x7F3\x7F4\x5\x17C\xBF\x2\x7F4\x7F6\a\x16"+
		"\x2\x2\x7F5\x7F7\x5\x172\xBA\x2\x7F6\x7F5\x3\x2\x2\x2\x7F6\x7F7\x3\x2"+
		"\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x7F9\a\x17\x2\x2\x7F9\x171\x3\x2\x2"+
		"\x2\x7FA\x7FB\b\xBA\x1\x2\x7FB\x7FC\x5\x168\xB5\x2\x7FC\x802\x3\x2\x2"+
		"\x2\x7FD\x7FE\f\x3\x2\x2\x7FE\x7FF\a\x13\x2\x2\x7FF\x801\x5\x168\xB5\x2"+
		"\x800\x7FD\x3\x2\x2\x2\x801\x804\x3\x2\x2\x2\x802\x800\x3\x2\x2\x2\x802"+
		"\x803\x3\x2\x2\x2\x803\x173\x3\x2\x2\x2\x804\x802\x3\x2\x2\x2\x805\x806"+
		"\a\x18\x2\x2\x806\x807\x5\x168\xB5\x2\x807\x808\a\x19\x2\x2\x808\x175"+
		"\x3\x2\x2\x2\x809\x80A\a\x16\x2\x2\x80A\x80B\x5\x168\xB5\x2\x80B\x80C"+
		"\a\x17\x2\x2\x80C\x177\x3\x2\x2\x2\x80D\x80E\b\xBD\x1\x2\x80E\x811\a\x98"+
		"\x2\x2\x80F\x811\x5\x17C\xBF\x2\x810\x80D\x3\x2\x2\x2\x810\x80F\x3\x2"+
		"\x2\x2\x811\x817\x3\x2\x2\x2\x812\x813\f\x3\x2\x2\x813\x814\a\x15\x2\x2"+
		"\x814\x816\x5\x17C\xBF\x2\x815\x812\x3\x2\x2\x2\x816\x819\x3\x2\x2\x2"+
		"\x817\x815\x3\x2\x2\x2\x817\x818\x3\x2\x2\x2\x818\x179\x3\x2\x2\x2\x819"+
		"\x817\x3\x2\x2\x2\x81A\x820\a\x9A\x2\x2\x81B\x820\a\x9C\x2\x2\x81C\x820"+
		"\a\x99\x2\x2\x81D\x820\a\x90\x2\x2\x81E\x820\a\x91\x2\x2\x81F\x81A\x3"+
		"\x2\x2\x2\x81F\x81B\x3\x2\x2\x2\x81F\x81C\x3\x2\x2\x2\x81F\x81D\x3\x2"+
		"\x2\x2\x81F\x81E\x3\x2\x2\x2\x820\x17B\x3\x2\x2\x2\x821\x822\t\t\x2\x2"+
		"\x822\x17D\x3\x2\x2\x2\xA2\x184\x187\x1A0\x1A5\x1B0\x1B5\x1C0\x1C7\x1D4"+
		"\x1E2\x1FE\x205\x20E\x217\x220\x235\x23F\x244\x24A\x24F\x25B\x260\x278"+
		"\x283\x287\x29A\x2A4\x2AD\x2B6\x2BF\x2DC\x2EF\x2F5\x317\x320\x337\x345"+
		"\x34E\x357\x36E\x372\x386\x3E6\x3E8\x3F4\x3FD\x40C\x413\x418\x421\x428"+
		"\x44C\x453\x455\x45F\x46F\x478\x47E\x483\x48A\x492\x4A0\x4A8\x4AE\x4B9"+
		"\x4C5\x4D0\x4DD\x4E1\x4E7\x4F3\x507\x509\x50E\x51B\x524\x52E\x533\x538"+
		"\x548\x54D\x550\x554\x559\x560\x56B\x56D\x579\x581\x58C\x591\x59D\x5A1"+
		"\x5AB\x5B3\x5B9\x5C0\x5C5\x5CF\x5D6\x5E3\x5F0\x5F4\x5F7\x5FB\x5FE\x609"+
		"\x615\x621\x62D\x63E\x64D\x657\x65E\x668\x66F\x673\x679\x685\x690\x6A0"+
		"\x6AD\x6B4\x6BC\x6D8\x6E1\x6EA\x6F3\x6F8\x704\x716\x71D\x726\x72D\x735"+
		"\x73A\x744\x74E\x75E\x768\x76F\x777\x782\x78B\x792\x799\x79E\x7AA\x7BD"+
		"\x7C7\x7CF\x7DA\x7E3\x7EA\x7F1\x7F6\x802\x810\x817\x81F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace prompto.parser
