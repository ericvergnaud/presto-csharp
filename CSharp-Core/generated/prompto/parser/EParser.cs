//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prompto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class EParser : AbstractParser {
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, COMMENT=8, 
		JAVA=9, CSHARP=10, PYTHON2=11, PYTHON3=12, JAVASCRIPT=13, SWIFT=14, COLON=15, 
		SEMI=16, COMMA=17, RANGE=18, DOT=19, LPAR=20, RPAR=21, LBRAK=22, RBRAK=23, 
		LCURL=24, RCURL=25, QMARK=26, XMARK=27, AMP=28, AMP2=29, PIPE=30, PIPE2=31, 
		PLUS=32, MINUS=33, STAR=34, SLASH=35, BSLASH=36, PERCENT=37, GT=38, GTE=39, 
		LT=40, LTE=41, LTGT=42, EQ=43, XEQ=44, EQ2=45, TEQ=46, TILDE=47, LARROW=48, 
		RARROW=49, BOOLEAN=50, CHARACTER=51, TEXT=52, INTEGER=53, DECIMAL=54, 
		DATE=55, TIME=56, DATETIME=57, PERIOD=58, METHOD_T=59, CODE=60, DOCUMENT=61, 
		BLOB=62, IMAGE=63, UUID=64, ITERATOR=65, CURSOR=66, ABSTRACT=67, ALL=68, 
		ALWAYS=69, AND=70, ANY=71, AS=72, ASC=73, ATTR=74, ATTRIBUTE=75, ATTRIBUTES=76, 
		BINDINGS=77, BREAK=78, BY=79, CASE=80, CATCH=81, CATEGORY=82, CLASS=83, 
		CLOSE=84, CONTAINS=85, DEF=86, DEFAULT=87, DEFINE=88, DELETE=89, DESC=90, 
		DO=91, DOING=92, EACH=93, ELSE=94, ENUM=95, ENUMERATED=96, EXCEPT=97, 
		EXECUTE=98, EXPECTING=99, EXTENDS=100, FETCH=101, FILTERED=102, FINALLY=103, 
		FLUSH=104, FOR=105, FROM=106, GETTER=107, IF=108, IN=109, INDEX=110, INVOKE=111, 
		IS=112, MATCHING=113, METHOD=114, METHODS=115, MODULO=116, MUTABLE=117, 
		NATIVE=118, NONE=119, NOT=120, NOTHING=121, NULL=122, ON=123, ONE=124, 
		OPEN=125, OPERATOR=126, OR=127, ORDER=128, OTHERWISE=129, PASS=130, RAISE=131, 
		READ=132, RECEIVING=133, RESOURCE=134, RETURN=135, RETURNING=136, ROWS=137, 
		SELF=138, SETTER=139, SINGLETON=140, SORTED=141, STORABLE=142, STORE=143, 
		SWITCH=144, TEST=145, THIS=146, THROW=147, TO=148, TRY=149, VERIFYING=150, 
		WITH=151, WHEN=152, WHERE=153, WHILE=154, WRITE=155, BOOLEAN_LITERAL=156, 
		CHAR_LITERAL=157, MIN_INTEGER=158, MAX_INTEGER=159, SYMBOL_IDENTIFIER=160, 
		TYPE_IDENTIFIER=161, VARIABLE_IDENTIFIER=162, NATIVE_IDENTIFIER=163, DOLLAR_IDENTIFIER=164, 
		TEXT_LITERAL=165, UUID_LITERAL=166, INTEGER_LITERAL=167, HEXA_LITERAL=168, 
		DECIMAL_LITERAL=169, DATETIME_LITERAL=170, TIME_LITERAL=171, DATE_LITERAL=172, 
		PERIOD_LITERAL=173;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_category_declaration = 5, RULE_singleton_category_declaration = 6, 
		RULE_derived_list = 7, RULE_operator_method_declaration = 8, RULE_setter_method_declaration = 9, 
		RULE_native_setter_declaration = 10, RULE_getter_method_declaration = 11, 
		RULE_native_getter_declaration = 12, RULE_native_category_declaration = 13, 
		RULE_native_resource_declaration = 14, RULE_native_category_bindings = 15, 
		RULE_native_category_binding_list = 16, RULE_attribute_list = 17, RULE_abstract_method_declaration = 18, 
		RULE_concrete_method_declaration = 19, RULE_native_method_declaration = 20, 
		RULE_test_method_declaration = 21, RULE_assertion = 22, RULE_full_argument_list = 23, 
		RULE_typed_argument = 24, RULE_statement = 25, RULE_flush_statement = 26, 
		RULE_store_statement = 27, RULE_method_call_statement = 28, RULE_with_resource_statement = 29, 
		RULE_with_singleton_statement = 30, RULE_switch_statement = 31, RULE_switch_case_statement = 32, 
		RULE_for_each_statement = 33, RULE_do_while_statement = 34, RULE_while_statement = 35, 
		RULE_if_statement = 36, RULE_else_if_statement_list = 37, RULE_raise_statement = 38, 
		RULE_try_statement = 39, RULE_catch_statement = 40, RULE_break_statement = 41, 
		RULE_return_statement = 42, RULE_expression = 43, RULE_unresolved_expression = 44, 
		RULE_unresolved_selector = 45, RULE_invocation_expression = 46, RULE_invocation_trailer = 47, 
		RULE_instance_expression = 48, RULE_instance_selector = 49, RULE_document_expression = 50, 
		RULE_blob_expression = 51, RULE_constructor_expression = 52, RULE_write_statement = 53, 
		RULE_ambiguous_expression = 54, RULE_filtered_list_suffix = 55, RULE_fetch_store_expression = 56, 
		RULE_sorted_expression = 57, RULE_argument_assignment_list = 58, RULE_with_argument_assignment_list = 59, 
		RULE_argument_assignment = 60, RULE_assign_instance_statement = 61, RULE_child_instance = 62, 
		RULE_assign_tuple_statement = 63, RULE_lfs = 64, RULE_lfp = 65, RULE_indent = 66, 
		RULE_dedent = 67, RULE_null_literal = 68, RULE_declaration_list = 69, 
		RULE_declarations = 70, RULE_declaration = 71, RULE_resource_declaration = 72, 
		RULE_enum_declaration = 73, RULE_native_symbol_list = 74, RULE_category_symbol_list = 75, 
		RULE_symbol_list = 76, RULE_attribute_constraint = 77, RULE_list_literal = 78, 
		RULE_set_literal = 79, RULE_expression_list = 80, RULE_range_literal = 81, 
		RULE_typedef = 82, RULE_primary_type = 83, RULE_native_type = 84, RULE_category_type = 85, 
		RULE_mutable_category_type = 86, RULE_code_type = 87, RULE_category_declaration = 88, 
		RULE_type_identifier_list = 89, RULE_method_identifier = 90, RULE_identifier = 91, 
		RULE_variable_identifier = 92, RULE_attribute_identifier = 93, RULE_type_identifier = 94, 
		RULE_symbol_identifier = 95, RULE_argument_list = 96, RULE_argument = 97, 
		RULE_operator_argument = 98, RULE_named_argument = 99, RULE_code_argument = 100, 
		RULE_category_or_any_type = 101, RULE_any_type = 102, RULE_member_method_declaration_list = 103, 
		RULE_member_method_declaration = 104, RULE_native_member_method_declaration_list = 105, 
		RULE_native_member_method_declaration = 106, RULE_native_category_binding = 107, 
		RULE_python_category_binding = 108, RULE_python_module = 109, RULE_javascript_category_binding = 110, 
		RULE_javascript_module = 111, RULE_variable_identifier_list = 112, RULE_attribute_identifier_list = 113, 
		RULE_method_declaration = 114, RULE_comment_statement = 115, RULE_native_statement_list = 116, 
		RULE_native_statement = 117, RULE_python_native_statement = 118, RULE_javascript_native_statement = 119, 
		RULE_statement_list = 120, RULE_assertion_list = 121, RULE_switch_case_statement_list = 122, 
		RULE_catch_statement_list = 123, RULE_literal_collection = 124, RULE_atomic_literal = 125, 
		RULE_literal_list_literal = 126, RULE_selectable_expression = 127, RULE_this_expression = 128, 
		RULE_parenthesis_expression = 129, RULE_literal_expression = 130, RULE_collection_literal = 131, 
		RULE_tuple_literal = 132, RULE_dict_literal = 133, RULE_expression_tuple = 134, 
		RULE_dict_entry_list = 135, RULE_dict_entry = 136, RULE_slice_arguments = 137, 
		RULE_assign_variable_statement = 138, RULE_assignable_instance = 139, 
		RULE_is_expression = 140, RULE_read_all_expression = 141, RULE_read_one_expression = 142, 
		RULE_order_by_list = 143, RULE_order_by = 144, RULE_operator = 145, RULE_new_token = 146, 
		RULE_key_token = 147, RULE_module_token = 148, RULE_value_token = 149, 
		RULE_symbols_token = 150, RULE_assign = 151, RULE_multiply = 152, RULE_divide = 153, 
		RULE_idivide = 154, RULE_modulo = 155, RULE_javascript_statement = 156, 
		RULE_javascript_expression = 157, RULE_javascript_primary_expression = 158, 
		RULE_javascript_this_expression = 159, RULE_javascript_new_expression = 160, 
		RULE_javascript_selector_expression = 161, RULE_javascript_method_expression = 162, 
		RULE_javascript_arguments = 163, RULE_javascript_item_expression = 164, 
		RULE_javascript_parenthesis_expression = 165, RULE_javascript_identifier_expression = 166, 
		RULE_javascript_literal_expression = 167, RULE_javascript_identifier = 168, 
		RULE_python_statement = 169, RULE_python_expression = 170, RULE_python_primary_expression = 171, 
		RULE_python_selector_expression = 172, RULE_python_method_expression = 173, 
		RULE_python_argument_list = 174, RULE_python_ordinal_argument_list = 175, 
		RULE_python_named_argument_list = 176, RULE_python_parenthesis_expression = 177, 
		RULE_python_identifier_expression = 178, RULE_python_literal_expression = 179, 
		RULE_python_identifier = 180, RULE_java_statement = 181, RULE_java_expression = 182, 
		RULE_java_primary_expression = 183, RULE_java_this_expression = 184, RULE_java_new_expression = 185, 
		RULE_java_selector_expression = 186, RULE_java_method_expression = 187, 
		RULE_java_arguments = 188, RULE_java_item_expression = 189, RULE_java_parenthesis_expression = 190, 
		RULE_java_identifier_expression = 191, RULE_java_class_identifier_expression = 192, 
		RULE_java_literal_expression = 193, RULE_java_identifier = 194, RULE_csharp_statement = 195, 
		RULE_csharp_expression = 196, RULE_csharp_primary_expression = 197, RULE_csharp_this_expression = 198, 
		RULE_csharp_new_expression = 199, RULE_csharp_selector_expression = 200, 
		RULE_csharp_method_expression = 201, RULE_csharp_arguments = 202, RULE_csharp_item_expression = 203, 
		RULE_csharp_parenthesis_expression = 204, RULE_csharp_identifier_expression = 205, 
		RULE_csharp_literal_expression = 206, RULE_csharp_identifier = 207;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "operator_method_declaration", 
		"setter_method_declaration", "native_setter_declaration", "getter_method_declaration", 
		"native_getter_declaration", "native_category_declaration", "native_resource_declaration", 
		"native_category_bindings", "native_category_binding_list", "attribute_list", 
		"abstract_method_declaration", "concrete_method_declaration", "native_method_declaration", 
		"test_method_declaration", "assertion", "full_argument_list", "typed_argument", 
		"statement", "flush_statement", "store_statement", "method_call_statement", 
		"with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "break_statement", "return_statement", "expression", 
		"unresolved_expression", "unresolved_selector", "invocation_expression", 
		"invocation_trailer", "instance_expression", "instance_selector", "document_expression", 
		"blob_expression", "constructor_expression", "write_statement", "ambiguous_expression", 
		"filtered_list_suffix", "fetch_store_expression", "sorted_expression", 
		"argument_assignment_list", "with_argument_assignment_list", "argument_assignment", 
		"assign_instance_statement", "child_instance", "assign_tuple_statement", 
		"lfs", "lfp", "indent", "dedent", "null_literal", "declaration_list", 
		"declarations", "declaration", "resource_declaration", "enum_declaration", 
		"native_symbol_list", "category_symbol_list", "symbol_list", "attribute_constraint", 
		"list_literal", "set_literal", "expression_list", "range_literal", "typedef", 
		"primary_type", "native_type", "category_type", "mutable_category_type", 
		"code_type", "category_declaration", "type_identifier_list", "method_identifier", 
		"identifier", "variable_identifier", "attribute_identifier", "type_identifier", 
		"symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "javascript_category_binding", "javascript_module", "variable_identifier_list", 
		"attribute_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "read_all_expression", 
		"read_one_expression", "order_by_list", "order_by", "operator", "new_token", 
		"key_token", "module_token", "value_token", "symbols_token", "assign", 
		"multiply", "divide", "idivide", "modulo", "javascript_statement", "javascript_expression", 
		"javascript_primary_expression", "javascript_this_expression", "javascript_new_expression", 
		"javascript_selector_expression", "javascript_method_expression", "javascript_arguments", 
		"javascript_item_expression", "javascript_parenthesis_expression", "javascript_identifier_expression", 
		"javascript_literal_expression", "javascript_identifier", "python_statement", 
		"python_expression", "python_primary_expression", "python_selector_expression", 
		"python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
		"python_named_argument_list", "python_parenthesis_expression", "python_identifier_expression", 
		"python_literal_expression", "python_identifier", "java_statement", "java_expression", 
		"java_primary_expression", "java_this_expression", "java_new_expression", 
		"java_selector_expression", "java_method_expression", "java_arguments", 
		"java_item_expression", "java_parenthesis_expression", "java_identifier_expression", 
		"java_class_identifier_expression", "java_literal_expression", "java_identifier", 
		"csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_new_expression", "csharp_selector_expression", 
		"csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
		"csharp_parenthesis_expression", "csharp_identifier_expression", "csharp_literal_expression", 
		"csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", null, "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		"','", "'..'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
		"'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
		"'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Method'", 
		"'Code'", "'Document'", "'Blob'", "'Image'", "'UUID'", "'Iterator'", "'Cursor'", 
		"'abstract'", "'all'", "'always'", "'and'", "'any'", "'as'", null, "'attr'", 
		"'attribute'", "'attributes'", "'bindings'", "'break'", "'by'", "'case'", 
		"'catch'", "'category'", "'class'", "'close'", "'contains'", "'def'", 
		"'default'", "'define'", "'delete'", null, "'do'", "'doing'", "'each'", 
		"'else'", "'enum'", "'enumerated'", "'except'", "'execute'", "'expecting'", 
		"'extends'", "'fetch'", "'filtered'", "'finally'", "'flush'", "'for'", 
		"'from'", "'getter'", "'if'", "'in'", "'index'", "'invoke'", "'is'", "'matching'", 
		"'method'", "'methods'", "'modulo'", "'mutable'", "'native'", "'None'", 
		"'not'", null, "'null'", "'on'", "'one'", "'open'", "'operator'", "'or'", 
		"'order'", "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", 
		"'resource'", "'return'", "'returning'", "'rows'", "'self'", "'setter'", 
		"'singleton'", "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
		"'this'", "'throw'", "'to'", "'try'", "'verifying'", "'with'", "'when'", 
		"'where'", "'while'", "'write'", null, null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "COMMENT", 
		"JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
		"SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
		"STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
		"EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", "CHARACTER", 
		"TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
		"CODE", "DOCUMENT", "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "ABSTRACT", 
		"ALL", "ALWAYS", "AND", "ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
		"BINDINGS", "BREAK", "BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", 
		"CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", "DESC", "DO", "DOING", 
		"EACH", "ELSE", "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", 
		"EXTENDS", "FETCH", "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
		"IF", "IN", "INDEX", "INVOKE", "IS", "MATCHING", "METHOD", "METHODS", 
		"MODULO", "MUTABLE", "NATIVE", "NONE", "NOT", "NOTHING", "NULL", "ON", 
		"ONE", "OPEN", "OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", 
		"READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", "ROWS", "SELF", 
		"SETTER", "SINGLETON", "SORTED", "STORABLE", "STORE", "SWITCH", "TEST", 
		"THIS", "THROW", "TO", "TRY", "VERIFYING", "WITH", "WHEN", "WHERE", "WHILE", 
		"WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", 
		"SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
		"DOLLAR_IDENTIFIER", "TEXT_LITERAL", "UUID_LITERAL", "INTEGER_LITERAL", 
		"HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
		"DATE_LITERAL", "PERIOD_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(DEFINE);
			State = 417; _localctx.name = type_identifier();
			State = 418; Match(AS);
			State = 419; Match(ENUMERATED);
			State = 422;
			switch (TokenStream.La(1)) {
			case CATEGORY:
				{
				State = 420; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 421; _localctx.derived = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 429;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				{
				State = 424; _localctx.attrs = attribute_list();
				State = 425; Match(COMMA);
				State = 426; Match(AND);
				}
				}
				break;
			case 2:
				{
				State = 428; Match(WITH);
				}
				break;
			}
			State = 431; symbols_token();
			State = 432; Match(COLON);
			State = 433; indent();
			State = 434; _localctx.symbols = category_symbol_list();
			State = 435; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(DEFINE);
			State = 438; _localctx.name = type_identifier();
			State = 439; Match(AS);
			State = 440; Match(ENUMERATED);
			State = 441; _localctx.typ = native_type();
			State = 442; Match(WITH);
			State = 443; symbols_token();
			State = 444; Match(COLON);
			State = 445; indent();
			State = 446; _localctx.symbols = native_symbol_list();
			State = 447; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Value_tokenContext value_token() {
			return GetRuleContext<Value_tokenContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; _localctx.name = symbol_identifier();
			State = 450; Match(WITH);
			State = 451; _localctx.exp = expression(0);
			State = 452; Match(AS);
			State = 453; value_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; _localctx.name = symbol_identifier();
			State = 456; _localctx.args = with_argument_assignment_list(0);
			State = 459;
			_la = TokenStream.La(1);
			if (_la==AND) {
				{
				State = 457; Match(AND);
				State = 458; _localctx.arg = argument_assignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Attribute_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public Variable_identifier_listContext indices;
		public Variable_identifierContext index;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode INDEX() { return GetToken(EParser.INDEX, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(DEFINE);
			State = 462; _localctx.name = attribute_identifier();
			State = 463; Match(AS);
			State = 465;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 464; Match(STORABLE);
				}
			}

			State = 467; _localctx.typ = typedef(0);
			State = 468; Match(ATTRIBUTE);
			State = 470;
			_la = TokenStream.La(1);
			if (_la==IN || _la==MATCHING) {
				{
				State = 469; _localctx.match = attribute_constraint();
				}
			}

			State = 481;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 472; Match(WITH);
				State = 478;
				_la = TokenStream.La(1);
				if (_la==VARIABLE_IDENTIFIER) {
					{
					State = 473; _localctx.indices = variable_identifier_list();
					State = 476;
					_la = TokenStream.La(1);
					if (_la==AND) {
						{
						State = 474; Match(AND);
						State = 475; _localctx.index = variable_identifier();
						}
					}

					}
				}

				State = 480; Match(INDEX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(DEFINE);
			State = 484; _localctx.name = type_identifier();
			State = 485; Match(AS);
			State = 487;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 486; Match(STORABLE);
				}
			}

			State = 491;
			switch (TokenStream.La(1)) {
			case CATEGORY:
				{
				State = 489; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 490; _localctx.derived = derived_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 511;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				{
				State = 493; _localctx.attrs = attribute_list();
				State = 502;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 494; Match(COMMA);
					State = 495; Match(AND);
					State = 496; Match(METHODS);
					State = 497; Match(COLON);
					State = 498; indent();
					State = 499; _localctx.methods = member_method_declaration_list();
					State = 500; dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 504; Match(WITH);
				State = 505; Match(METHODS);
				State = 506; Match(COLON);
				State = 507; indent();
				State = 508; _localctx.methods = member_method_declaration_list();
				State = 509; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SINGLETON() { return GetToken(EParser.SINGLETON, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleton_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(DEFINE);
			State = 514; _localctx.name = type_identifier();
			State = 515; Match(AS);
			State = 516; Match(SINGLETON);
			State = 535;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				{
				State = 517; _localctx.attrs = attribute_list();
				State = 526;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 518; Match(COMMA);
					State = 519; Match(AND);
					State = 520; Match(METHODS);
					State = 521; Match(COLON);
					State = 522; indent();
					State = 523; _localctx.methods = member_method_declaration_list();
					State = 524; dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 528; Match(WITH);
				State = 529; Match(METHODS);
				State = 530; Match(COLON);
				State = 531; indent();
				State = 532; _localctx.methods = member_method_declaration_list();
				State = 533; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
	 
		public Derived_listContext() { }
		public virtual void CopyFrom(Derived_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DerivedListItemContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public DerivedListItemContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedListItem(this);
		}
	}
	public partial class DerivedListContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public DerivedListContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedList(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_derived_list);
		try {
			State = 542;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new DerivedListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 537; ((DerivedListContext)_localctx).items = type_identifier_list();
				}
				break;
			case 2:
				_localctx = new DerivedListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; ((DerivedListItemContext)_localctx).items = type_identifier_list();
				State = 539; Match(AND);
				State = 540; ((DerivedListItemContext)_localctx).item = type_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(EParser.OPERATOR, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(DEFINE);
			State = 545; _localctx.op = @operator();
			State = 546; Match(AS);
			State = 547; Match(OPERATOR);
			State = 548; Match(RECEIVING);
			State = 549; _localctx.arg = operator_argument();
			State = 552;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 550; Match(RETURNING);
				State = 551; _localctx.typ = typedef(0);
				}
			}

			State = 554; Match(DOING);
			State = 555; Match(COLON);
			State = 556; indent();
			State = 557; _localctx.stmts = statement_list();
			State = 558; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(DEFINE);
			State = 561; _localctx.name = variable_identifier();
			State = 562; Match(AS);
			State = 563; Match(SETTER);
			State = 564; Match(DOING);
			State = 565; Match(COLON);
			State = 566; indent();
			State = 567; _localctx.stmts = statement_list();
			State = 568; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_setter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public Native_setter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_setter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_setter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_setter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_setter_declarationContext native_setter_declaration() {
		Native_setter_declarationContext _localctx = new Native_setter_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_native_setter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; Match(DEFINE);
			State = 571; _localctx.name = variable_identifier();
			State = 572; Match(AS);
			State = 574;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 573; Match(NATIVE);
				}
			}

			State = 576; Match(SETTER);
			State = 577; Match(DOING);
			State = 578; Match(COLON);
			State = 579; indent();
			State = 580; _localctx.stmts = native_statement_list();
			State = 581; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(DEFINE);
			State = 584; _localctx.name = variable_identifier();
			State = 585; Match(AS);
			State = 586; Match(GETTER);
			State = 587; Match(DOING);
			State = 588; Match(COLON);
			State = 589; indent();
			State = 590; _localctx.stmts = statement_list();
			State = 591; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_getter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public Native_getter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_getter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_getter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_getter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_getter_declarationContext native_getter_declaration() {
		Native_getter_declarationContext _localctx = new Native_getter_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_native_getter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; Match(DEFINE);
			State = 594; _localctx.name = variable_identifier();
			State = 595; Match(AS);
			State = 597;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 596; Match(NATIVE);
				}
			}

			State = 599; Match(GETTER);
			State = 600; Match(DOING);
			State = 601; Match(COLON);
			State = 602; indent();
			State = 603; _localctx.stmts = native_statement_list();
			State = 604; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(DEFINE);
			State = 607; _localctx.name = type_identifier();
			State = 608; Match(AS);
			State = 610;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 609; Match(STORABLE);
				}
			}

			State = 612; Match(NATIVE);
			State = 613; Match(CATEGORY);
			State = 621;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				{
				State = 614; _localctx.attrs = attribute_list();
				State = 615; Match(COMMA);
				State = 616; Match(AND);
				State = 617; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 619; Match(WITH);
				State = 620; Match(BINDINGS);
				}
				break;
			}
			State = 623; Match(COLON);
			State = 624; indent();
			State = 625; _localctx.bindings = native_category_bindings();
			State = 626; dedent();
			State = 635;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 627; lfp();
				State = 628; Match(AND);
				State = 629; Match(METHODS);
				State = 630; Match(COLON);
				State = 631; indent();
				State = 632; _localctx.methods = native_member_method_declaration_list();
				State = 633; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(EParser.RESOURCE, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_native_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(DEFINE);
			State = 638; _localctx.name = type_identifier();
			State = 639; Match(AS);
			State = 640; Match(NATIVE);
			State = 641; Match(RESOURCE);
			State = 649;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				{
				State = 642; _localctx.attrs = attribute_list();
				State = 643; Match(COMMA);
				State = 644; Match(AND);
				State = 645; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 647; Match(WITH);
				State = 648; Match(BINDINGS);
				}
				break;
			}
			State = 651; Match(COLON);
			State = 652; indent();
			State = 653; _localctx.bindings = native_category_bindings();
			State = 654; dedent();
			State = 663;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 655; lfp();
				State = 656; Match(AND);
				State = 657; Match(METHODS);
				State = 658; Match(COLON);
				State = 659; indent();
				State = 660; _localctx.methods = native_member_method_declaration_list();
				State = 661; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 30, RULE_native_category_bindings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(DEFINE);
			State = 666; Match(CATEGORY);
			State = 667; Match(BINDINGS);
			State = 668; Match(AS);
			State = 669; Match(COLON);
			State = 670; indent();
			State = 671; _localctx.items = native_category_binding_list(0);
			State = 672; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 675; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 683;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 677;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 678; lfp();
					State = 679; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 685;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
	 
		public Attribute_listContext() { }
		public virtual void CopyFrom(Attribute_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttributeListContext : Attribute_listContext {
		public Attribute_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public AttributeListContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}
	public partial class AttributeListItemContext : Attribute_listContext {
		public Attribute_identifier_listContext items;
		public Attribute_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTES() { return GetToken(EParser.ATTRIBUTES, 0); }
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public AttributeListItemContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeListItem(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_attribute_list);
		try {
			State = 696;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new AttributeListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 686; Match(WITH);
				State = 687; Match(ATTRIBUTE);
				State = 688; ((AttributeListContext)_localctx).item = attribute_identifier();
				}
				break;
			case 2:
				_localctx = new AttributeListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 689; Match(WITH);
				State = 690; Match(ATTRIBUTES);
				State = 691; ((AttributeListItemContext)_localctx).items = attribute_identifier_list();
				State = 694;
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 692; Match(AND);
					State = 693; ((AttributeListItemContext)_localctx).item = attribute_identifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(EParser.ABSTRACT, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(DEFINE);
			State = 699; _localctx.name = method_identifier();
			State = 700; Match(AS);
			State = 701; Match(ABSTRACT);
			State = 702; Match(METHOD);
			State = 705;
			_la = TokenStream.La(1);
			if (_la==RECEIVING) {
				{
				State = 703; Match(RECEIVING);
				State = 704; _localctx.args = full_argument_list();
				}
			}

			State = 709;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 707; Match(RETURNING);
				State = 708; _localctx.typ = typedef(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; Match(DEFINE);
			State = 712; _localctx.name = method_identifier();
			State = 713; Match(AS);
			State = 714; Match(METHOD);
			State = 717;
			_la = TokenStream.La(1);
			if (_la==RECEIVING) {
				{
				State = 715; Match(RECEIVING);
				State = 716; _localctx.args = full_argument_list();
				}
			}

			State = 721;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 719; Match(RETURNING);
				State = 720; _localctx.typ = typedef(0);
				}
			}

			State = 723; Match(DOING);
			State = 724; Match(COLON);
			State = 725; indent();
			State = 726; _localctx.stmts = statement_list();
			State = 727; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(DEFINE);
			State = 730; _localctx.name = method_identifier();
			State = 731; Match(AS);
			State = 733;
			_la = TokenStream.La(1);
			if (_la==NATIVE) {
				{
				State = 732; Match(NATIVE);
				}
			}

			State = 735; Match(METHOD);
			State = 738;
			_la = TokenStream.La(1);
			if (_la==RECEIVING) {
				{
				State = 736; Match(RECEIVING);
				State = 737; _localctx.args = full_argument_list();
				}
			}

			State = 742;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 740; Match(RETURNING);
				State = 741; _localctx.typ = category_or_any_type();
				}
			}

			State = 744; Match(DOING);
			State = 745; Match(COLON);
			State = 746; indent();
			State = 747; _localctx.stmts = native_statement_list();
			State = 748; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ITerminalNode VERIFYING() { return GetToken(EParser.VERIFYING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; Match(DEFINE);
			State = 751; _localctx.name = Match(TEXT_LITERAL);
			State = 752; Match(AS);
			State = 753; Match(TEST);
			State = 754; Match(METHOD);
			State = 755; Match(DOING);
			State = 756; Match(COLON);
			State = 757; indent();
			State = 758; _localctx.stmts = statement_list();
			State = 759; dedent();
			State = 760; lfp();
			State = 761; Match(AND);
			State = 762; Match(VERIFYING);
			State = 769;
			switch (TokenStream.La(1)) {
			case COLON:
				{
				{
				State = 763; Match(COLON);
				State = 764; indent();
				State = 765; _localctx.exps = assertion_list();
				State = 766; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				State = 768; _localctx.error = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_argument_listContext : ParserRuleContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public Full_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFull_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFull_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_argument_listContext full_argument_list() {
		Full_argument_listContext _localctx = new Full_argument_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_full_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; _localctx.items = argument_list();
			State = 776;
			_la = TokenStream.La(1);
			if (_la==AND) {
				{
				State = 774; Match(AND);
				State = 775; _localctx.item = argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Category_or_any_typeContext typ;
		public Variable_identifierContext name;
		public Attribute_listContext attrs;
		public Literal_expressionContext value;
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 48, RULE_typed_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; _localctx.typ = category_or_any_type();
			State = 779; _localctx.name = variable_identifier();
			State = 781;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 780; _localctx.attrs = attribute_list();
				}
			}

			State = 785;
			_la = TokenStream.La(1);
			if (_la==EQ) {
				{
				State = 783; Match(EQ);
				State = 784; _localctx.value = literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommentStatementContext : StatementContext {
		public Comment_statementContext decl;
		public Comment_statementContext comment_statement() {
			return GetRuleContext<Comment_statementContext>(0);
		}
		public CommentStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCommentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCommentStatement(this);
		}
	}
	public partial class StoreStatementContext : StatementContext {
		public Store_statementContext stmt;
		public Store_statementContext store_statement() {
			return GetRuleContext<Store_statementContext>(0);
		}
		public StoreStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		public Break_statementContext stmt;
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_call_statementContext stmt;
		public Method_call_statementContext method_call_statement() {
			return GetRuleContext<Method_call_statementContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class FlushStatementContext : StatementContext {
		public Flush_statementContext stmt;
		public Flush_statementContext flush_statement() {
			return GetRuleContext<Flush_statementContext>(0);
		}
		public FlushStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		try {
			State = 806;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 2:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 788; ((MethodCallStatementContext)_localctx).stmt = method_call_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 789; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new StoreStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 790; ((StoreStatementContext)_localctx).stmt = store_statement();
				}
				break;
			case 5:
				_localctx = new FlushStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 791; ((FlushStatementContext)_localctx).stmt = flush_statement();
				}
				break;
			case 6:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 792; ((BreakStatementContext)_localctx).stmt = break_statement();
				}
				break;
			case 7:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 793; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 794; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 9:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 795; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 10:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 796; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 11:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 797; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 12:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 798; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 13:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 799; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 800; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 15:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 801; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 16:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 802; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 17:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 803; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 18:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 804; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 19:
				_localctx = new CommentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 805; ((CommentStatementContext)_localctx).decl = comment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_statementContext : ParserRuleContext {
		public ITerminalNode FLUSH() { return GetToken(EParser.FLUSH, 0); }
		public Flush_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFlush_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFlush_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flush_statementContext flush_statement() {
		Flush_statementContext _localctx = new Flush_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_flush_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(FLUSH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_statementContext : ParserRuleContext {
		public Expression_listContext to_del;
		public Expression_listContext to_add;
		public ITerminalNode DELETE() { return GetToken(EParser.DELETE, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public ITerminalNode STORE() { return GetToken(EParser.STORE, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Store_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStore_statement(this);
		}
	}

	[RuleVersion(0)]
	public Store_statementContext store_statement() {
		Store_statementContext _localctx = new Store_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_store_statement);
		try {
			State = 820;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 810; Match(DELETE);
				State = 811; _localctx.to_del = expression_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 812; Match(STORE);
				State = 813; _localctx.to_add = expression_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 814; Match(DELETE);
				State = 815; _localctx.to_del = expression_list();
				State = 816; Match(AND);
				State = 817; Match(STORE);
				State = 818; _localctx.to_add = expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_call_statementContext : ParserRuleContext {
		public Method_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call_statement; } }
	 
		public Method_call_statementContext() { }
		public virtual void CopyFrom(Method_call_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InvokeStatementContext : Method_call_statementContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvokeStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvokeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvokeStatement(this);
		}
	}
	public partial class UnresolvedWithArgsStatementContext : Method_call_statementContext {
		public Unresolved_expressionContext exp;
		public Argument_assignment_listContext args;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public UnresolvedWithArgsStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedWithArgsStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedWithArgsStatement(this);
		}
	}

	[RuleVersion(0)]
	public Method_call_statementContext method_call_statement() {
		Method_call_statementContext _localctx = new Method_call_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_method_call_statement);
		try {
			State = 827;
			switch (TokenStream.La(1)) {
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new UnresolvedWithArgsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 822; ((UnresolvedWithArgsStatementContext)_localctx).exp = unresolved_expression(0);
				State = 824;
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 823; ((UnresolvedWithArgsStatementContext)_localctx).args = argument_assignment_list();
					}
					break;
				}
				}
				break;
			case INVOKE:
				_localctx = new InvokeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 826; ((InvokeStatementContext)_localctx).exp = invocation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; Match(WITH);
			State = 830; _localctx.stmt = assign_variable_statement();
			State = 831; Match(COMMA);
			State = 832; Match(DO);
			State = 833; Match(COLON);
			State = 834; indent();
			State = 835; _localctx.stmts = statement_list();
			State = 836; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; Match(WITH);
			State = 839; _localctx.typ = type_identifier();
			State = 840; Match(COMMA);
			State = 841; Match(DO);
			State = 842; Match(COLON);
			State = 843; indent();
			State = 844; _localctx.stmts = statement_list();
			State = 845; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(SWITCH);
			State = 848; Match(ON);
			State = 849; _localctx.exp = expression(0);
			State = 850; Match(COLON);
			State = 851; indent();
			State = 852; _localctx.cases = switch_case_statement_list();
			State = 860;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 853; lfp();
				State = 854; Match(OTHERWISE);
				State = 855; Match(COLON);
				State = 856; indent();
				State = 857; _localctx.stmts = statement_list();
				State = 858; dedent();
				}
				break;
			}
			State = 862; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_switch_case_statement);
		try {
			State = 879;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 864; Match(WHEN);
				State = 865; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 866; Match(COLON);
				State = 867; indent();
				State = 868; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list();
				State = 869; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 871; Match(WHEN);
				State = 872; Match(IN);
				State = 873; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 874; Match(COLON);
				State = 875; indent();
				State = 876; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list();
				State = 877; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; Match(FOR);
			State = 882; Match(EACH);
			State = 883; _localctx.name1 = variable_identifier();
			State = 886;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 884; Match(COMMA);
				State = 885; _localctx.name2 = variable_identifier();
				}
			}

			State = 888; Match(IN);
			State = 889; _localctx.source = expression(0);
			State = 890; Match(COLON);
			State = 891; indent();
			State = 892; _localctx.stmts = statement_list();
			State = 893; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895; Match(DO);
			State = 896; Match(COLON);
			State = 897; indent();
			State = 898; _localctx.stmts = statement_list();
			State = 899; dedent();
			State = 900; lfp();
			State = 901; Match(WHILE);
			State = 902; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904; Match(WHILE);
			State = 905; _localctx.exp = expression(0);
			State = 906; Match(COLON);
			State = 907; indent();
			State = 908; _localctx.stmts = statement_list();
			State = 909; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911; Match(IF);
			State = 912; _localctx.exp = expression(0);
			State = 913; Match(COLON);
			State = 914; indent();
			State = 915; _localctx.stmts = statement_list();
			State = 916; dedent();
			State = 920;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 917; lfp();
				State = 918; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 929;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 922; lfp();
				State = 923; Match(ELSE);
				State = 924; Match(COLON);
				State = 925; indent();
				State = 926; _localctx.elseStmts = statement_list();
				State = 927; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 932; Match(ELSE);
			State = 933; Match(IF);
			State = 934; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 935; Match(COLON);
			State = 936; indent();
			State = 937; ((ElseIfStatementListContext)_localctx).stmts = statement_list();
			State = 938; dedent();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 952;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 940;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 941; lfp();
					State = 942; Match(ELSE);
					State = 943; Match(IF);
					State = 944; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 945; Match(COLON);
					State = 946; indent();
					State = 947; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list();
					State = 948; dedent();
					}
					} 
				}
				State = 954;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(EParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; Match(RAISE);
			State = 956; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode ALWAYS() { return GetToken(EParser.ALWAYS, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; Match(SWITCH);
			State = 959; Match(ON);
			State = 960; _localctx.name = variable_identifier();
			State = 961; Match(DOING);
			State = 962; Match(COLON);
			State = 963; indent();
			State = 964; _localctx.stmts = statement_list();
			State = 965; dedent();
			State = 966; lfs();
			State = 968;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 967; _localctx.handlers = catch_statement_list();
				}
				break;
			}
			State = 981;
			_la = TokenStream.La(1);
			if (_la==OTHERWISE || _la==WHEN) {
				{
				State = 973;
				switch (TokenStream.La(1)) {
				case OTHERWISE:
					{
					State = 970; Match(OTHERWISE);
					}
					break;
				case WHEN:
					{
					{
					State = 971; Match(WHEN);
					State = 972; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 975; Match(COLON);
				State = 976; indent();
				State = 977; _localctx.anyStmts = statement_list();
				State = 978; dedent();
				State = 979; lfs();
				}
			}

			State = 990;
			_la = TokenStream.La(1);
			if (_la==ALWAYS) {
				{
				State = 983; Match(ALWAYS);
				State = 984; Match(COLON);
				State = 985; indent();
				State = 986; _localctx.finalStmts = statement_list();
				State = 987; dedent();
				State = 988; lfs();
				}
			}

			State = 992; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_catch_statement);
		try {
			State = 1013;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 994; Match(WHEN);
				State = 995; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 996; Match(COLON);
				State = 997; indent();
				State = 998; ((CatchAtomicStatementContext)_localctx).stmts = statement_list();
				State = 999; dedent();
				State = 1000; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; Match(WHEN);
				State = 1003; Match(IN);
				State = 1004; Match(LBRAK);
				State = 1005; ((CatchCollectionStatementContext)_localctx).exp = symbol_list();
				State = 1006; Match(RBRAK);
				State = 1007; Match(COLON);
				State = 1008; indent();
				State = 1009; ((CatchCollectionStatementContext)_localctx).stmts = statement_list();
				State = 1010; dedent();
				State = 1011; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(EParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 82, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 84, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017; Match(RETURN);
			State = 1019;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1018; _localctx.exp = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class FetchStoreExpressionContext : ExpressionContext {
		public Fetch_store_expressionContext exp;
		public Fetch_store_expressionContext fetch_store_expression() {
			return GetRuleContext<Fetch_store_expressionContext>(0);
		}
		public FetchStoreExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchStoreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchStoreExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class DocumentExpressionContext : ExpressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class InvocationExpressionContext : ExpressionContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(EParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class AmbiguousExpressionContext : ExpressionContext {
		public Ambiguous_expressionContext exp;
		public Ambiguous_expressionContext ambiguous_expression() {
			return GetRuleContext<Ambiguous_expressionContext>(0);
		}
		public AmbiguousExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(EParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class ReadOneExpressionContext : ExpressionContext {
		public Read_one_expressionContext exp;
		public Read_one_expressionContext read_one_expression() {
			return GetRuleContext<Read_one_expressionContext>(0);
		}
		public ReadOneExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReadOneExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReadOneExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		public Unresolved_expressionContext exp;
		public Argument_assignment_listContext args;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Method_identifierContext name;
		public ITerminalNode METHOD_T() { return GetToken(EParser.METHOD_T, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class SortedExpressionContext : ExpressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}
	public partial class BlobExpressionContext : ExpressionContext {
		public Blob_expressionContext exp;
		public Blob_expressionContext blob_expression() {
			return GetRuleContext<Blob_expressionContext>(0);
		}
		public BlobExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlobExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlobExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class FilteredListExpressionContext : ExpressionContext {
		public ExpressionContext src;
		public Filtered_list_suffixContext filtered_list_suffix() {
			return GetRuleContext<Filtered_list_suffixContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FilteredListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFilteredListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFilteredListExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : ExpressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TILDE() { return GetToken(EParser.TILDE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(EParser.EXECUTE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(EParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class IteratorExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public IteratorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIteratorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIteratorExpression(this);
		}
	}
	public partial class UnresolvedExpressionContext : ExpressionContext {
		public Unresolved_expressionContext exp;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public UnresolvedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class ReadAllExpressionContext : ExpressionContext {
		public Read_all_expressionContext exp;
		public Read_all_expressionContext read_all_expression() {
			return GetRuleContext<Read_all_expressionContext>(0);
		}
		public ReadAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReadAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReadAllExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1022; Match(MINUS);
				State = 1023; ((MinusExpressionContext)_localctx).exp = expression(42);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1024; Match(NOT);
				State = 1025; ((NotExpressionContext)_localctx).exp = expression(41);
				}
				break;
			case 3:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1026; Match(CODE);
				State = 1027; Match(COLON);
				State = 1028; ((CodeExpressionContext)_localctx).exp = expression(14);
				}
				break;
			case 4:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1029; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 5:
				{
				_localctx = new UnresolvedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1030; ((UnresolvedExpressionContext)_localctx).exp = unresolved_expression(0);
				}
				break;
			case 6:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1031; ((MethodCallExpressionContext)_localctx).exp = unresolved_expression(0);
				State = 1032; ((MethodCallExpressionContext)_localctx).args = argument_assignment_list();
				}
				break;
			case 7:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1034; Match(EXECUTE);
				State = 1035; Match(COLON);
				State = 1036; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				}
				break;
			case 8:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1037; Match(METHOD_T);
				State = 1038; Match(COLON);
				State = 1039; ((ClosureExpressionContext)_localctx).name = method_identifier();
				}
				break;
			case 9:
				{
				_localctx = new BlobExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1040; ((BlobExpressionContext)_localctx).exp = blob_expression();
				}
				break;
			case 10:
				{
				_localctx = new DocumentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1041; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 11:
				{
				_localctx = new ConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1042; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			case 12:
				{
				_localctx = new FetchStoreExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1043; ((FetchStoreExpressionContext)_localctx).exp = fetch_store_expression();
				}
				break;
			case 13:
				{
				_localctx = new ReadAllExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1044; ((ReadAllExpressionContext)_localctx).exp = read_all_expression();
				}
				break;
			case 14:
				{
				_localctx = new ReadOneExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1045; ((ReadOneExpressionContext)_localctx).exp = read_one_expression();
				}
				break;
			case 15:
				{
				_localctx = new SortedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1046; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 16:
				{
				_localctx = new AmbiguousExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1047; ((AmbiguousExpressionContext)_localctx).exp = ambiguous_expression();
				}
				break;
			case 17:
				{
				_localctx = new InvocationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1048; ((InvocationExpressionContext)_localctx).exp = invocation_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1154;
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1051;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1052; multiply();
						State = 1053; ((MultiplyExpressionContext)_localctx).right = expression(41);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1055;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 1056; divide();
						State = 1057; ((DivideExpressionContext)_localctx).right = expression(40);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1059;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 1060; modulo();
						State = 1061; ((ModuloExpressionContext)_localctx).right = expression(39);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1063;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 1064; idivide();
						State = 1065; ((IntDivideExpressionContext)_localctx).right = expression(38);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1067;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1068;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 1069; ((AddExpressionContext)_localctx).right = expression(37);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1070;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 1071; Match(LT);
						State = 1072; ((LessThanExpressionContext)_localctx).right = expression(36);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1073;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 1074; Match(LTE);
						State = 1075; ((LessThanOrEqualExpressionContext)_localctx).right = expression(35);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1076;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1077; Match(GT);
						State = 1078; ((GreaterThanExpressionContext)_localctx).right = expression(34);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1079;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1080; Match(GTE);
						State = 1081; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(33);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1082;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1083; Match(EQ);
						State = 1084; ((EqualsExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1085;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1086; Match(LTGT);
						State = 1087; ((NotEqualsExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1088;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1089; Match(TILDE);
						State = 1090; ((RoughlyEqualsExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1091;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1092; Match(OR);
						State = 1093; ((OrExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1094;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1095; Match(AND);
						State = 1096; ((AndExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1097;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1098; Match(IF);
						State = 1099; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 1100; Match(ELSE);
						State = 1101; ((TernaryExpressionContext)_localctx).ifFalse = expression(25);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1103;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1104; Match(IN);
						State = 1105; ((InExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1106;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1107; Match(CONTAINS);
						State = 1108; ((ContainsExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1109;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1110; Match(CONTAINS);
						State = 1111; Match(ALL);
						State = 1112; ((ContainsAllExpressionContext)_localctx).right = expression(21);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1113;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1114; Match(CONTAINS);
						State = 1115; Match(ANY);
						State = 1116; ((ContainsAnyExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1117;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1118; Match(NOT);
						State = 1119; Match(IN);
						State = 1120; ((NotInExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1121;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1122; Match(NOT);
						State = 1123; Match(CONTAINS);
						State = 1124; ((NotContainsExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1125;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1126; Match(NOT);
						State = 1127; Match(CONTAINS);
						State = 1128; Match(ALL);
						State = 1129; ((NotContainsAllExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1130;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1131; Match(NOT);
						State = 1132; Match(CONTAINS);
						State = 1133; Match(ANY);
						State = 1134; ((NotContainsAnyExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 24:
						{
						_localctx = new IteratorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IteratorExpressionContext)_localctx).exp = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1135;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1136; Match(FOR);
						State = 1137; Match(EACH);
						State = 1138; ((IteratorExpressionContext)_localctx).name = variable_identifier();
						State = 1139; Match(IN);
						State = 1140; ((IteratorExpressionContext)_localctx).source = expression(2);
						}
						break;
					case 25:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1142;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1143; Match(IS);
						State = 1144; Match(NOT);
						State = 1145; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 26:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1146;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1147; Match(IS);
						State = 1148; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 27:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1149;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1150; Match(AS);
						State = 1151; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					case 28:
						{
						_localctx = new FilteredListExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FilteredListExpressionContext)_localctx).src = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1152;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1153; filtered_list_suffix();
						}
						break;
					}
					} 
				}
				State = 1158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_expression; } }
	 
		public Unresolved_expressionContext() { }
		public virtual void CopyFrom(Unresolved_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnresolvedSelectorContext : Unresolved_expressionContext {
		public Unresolved_expressionContext parent;
		public Unresolved_selectorContext selector;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Unresolved_selectorContext unresolved_selector() {
			return GetRuleContext<Unresolved_selectorContext>(0);
		}
		public UnresolvedSelectorContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedSelector(this);
		}
	}
	public partial class UnresolvedIdentifierContext : Unresolved_expressionContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnresolvedIdentifierContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_expressionContext unresolved_expression() {
		return unresolved_expression(0);
	}

	private Unresolved_expressionContext unresolved_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Unresolved_expressionContext _localctx = new Unresolved_expressionContext(Context, _parentState);
		Unresolved_expressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_unresolved_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnresolvedIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1160; ((UnresolvedIdentifierContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnresolvedSelectorContext(new Unresolved_expressionContext(_parentctx, _parentState));
					((UnresolvedSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_unresolved_expression);
					State = 1162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1163; ((UnresolvedSelectorContext)_localctx).selector = unresolved_selector();
					}
					} 
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_selectorContext : ParserRuleContext {
		public IdentifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Unresolved_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolved_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolved_selector(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_selectorContext unresolved_selector() {
		Unresolved_selectorContext _localctx = new Unresolved_selectorContext(Context, State);
		EnterRule(_localctx, 90, RULE_unresolved_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
			State = 1170; Match(DOT);
			State = 1171; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ITerminalNode INVOKE() { return GetToken(EParser.INVOKE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Invocation_trailerContext invocation_trailer() {
			return GetRuleContext<Invocation_trailerContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Invocation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_expressionContext invocation_expression() {
		Invocation_expressionContext _localctx = new Invocation_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_invocation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173; Match(INVOKE);
			State = 1174; Match(COLON);
			State = 1175; _localctx.name = variable_identifier();
			State = 1176; invocation_trailer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_trailerContext : ParserRuleContext {
		public Invocation_trailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_trailer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_trailer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_trailer(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_trailerContext invocation_trailer() {
		Invocation_trailerContext _localctx = new Invocation_trailerContext(Context, State);
		EnterRule(_localctx, 94, RULE_invocation_trailer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178;
			if (!(this.willBe(EParser.LF))) throw new FailedPredicateException(this, "$parser.willBe(EParser.LF)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1181; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 1183;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1184; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 1189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 98, RULE_instance_selector);
		try {
			State = 1203;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1190;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1191; Match(DOT);
				State = 1192; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1193;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1194; Match(LBRAK);
				State = 1195; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1196; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1198;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1199; Match(LBRAK);
				State = 1200; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1201; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(DOCUMENT);
			State = 1208;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 1206; Match(FROM);
				State = 1207; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Blob_expressionContext : ParserRuleContext {
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Blob_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blob_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlob_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlob_expression(this);
		}
	}

	[RuleVersion(0)]
	public Blob_expressionContext blob_expression() {
		Blob_expressionContext _localctx = new Blob_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_blob_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(BLOB);
			State = 1211; Match(FROM);
			State = 1212; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
	 
		public Constructor_expressionContext() { }
		public virtual void CopyFrom(Constructor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext firstArg;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorFrom(this);
		}
	}
	public partial class ConstructorNoFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorNoFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorNoFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorNoFrom(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_constructor_expression);
		int _la;
		try {
			State = 1235;
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new ConstructorFromContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1214; ((ConstructorFromContext)_localctx).typ = mutable_category_type();
				State = 1215; Match(FROM);
				State = 1216; ((ConstructorFromContext)_localctx).firstArg = expression(0);
				State = 1225;
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 1218;
					_la = TokenStream.La(1);
					if (_la==COMMA) {
						{
						State = 1217; Match(COMMA);
						}
					}

					State = 1220; ((ConstructorFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1223;
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 1221; Match(AND);
						State = 1222; ((ConstructorFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ConstructorNoFromContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1227; ((ConstructorNoFromContext)_localctx).typ = mutable_category_type();
				State = 1233;
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1228; ((ConstructorNoFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1231;
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						State = 1229; Match(AND);
						State = 1230; ((ConstructorNoFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237; Match(WRITE);
			State = 1238; _localctx.what = expression(0);
			State = 1239; Match(TO);
			State = 1240; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ambiguous_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext method;
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ambiguous_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguous_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguous_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguous_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ambiguous_expressionContext ambiguous_expression() {
		Ambiguous_expressionContext _localctx = new Ambiguous_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_ambiguous_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242; _localctx.method = unresolved_expression(0);
			State = 1243; Match(MINUS);
			State = 1244; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filtered_list_suffixContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext predicate;
		public ITerminalNode FILTERED() { return GetToken(EParser.FILTERED, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Filtered_list_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filtered_list_suffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFiltered_list_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFiltered_list_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Filtered_list_suffixContext filtered_list_suffix() {
		Filtered_list_suffixContext _localctx = new Filtered_list_suffixContext(Context, State);
		EnterRule(_localctx, 110, RULE_filtered_list_suffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246; Match(FILTERED);
			State = 1247; Match(WITH);
			State = 1248; _localctx.name = variable_identifier();
			State = 1249; Match(WHERE);
			State = 1250; _localctx.predicate = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_store_expressionContext : ParserRuleContext {
		public Fetch_store_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_store_expression; } }
	 
		public Fetch_store_expressionContext() { }
		public virtual void CopyFrom(Fetch_store_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchOneContext : Fetch_store_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext predicate;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchOneContext(Fetch_store_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchOne(this);
		}
	}
	public partial class FetchManyContext : Fetch_store_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext xstart;
		public ExpressionContext xstop;
		public ExpressionContext predicate;
		public Order_by_listContext orderby;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode ORDER() { return GetToken(EParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(EParser.BY, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Order_by_listContext order_by_list() {
			return GetRuleContext<Order_by_listContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchManyContext(Fetch_store_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchMany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchMany(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_store_expressionContext fetch_store_expression() {
		Fetch_store_expressionContext _localctx = new Fetch_store_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_fetch_store_expression);
		int _la;
		try {
			State = 1282;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				_localctx = new FetchOneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1252; Match(FETCH);
				State = 1253; Match(ONE);
				{
				State = 1255;
				_la = TokenStream.La(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1254; ((FetchOneContext)_localctx).typ = mutable_category_type();
					}
				}

				}
				State = 1257; Match(WHERE);
				State = 1258; ((FetchOneContext)_localctx).predicate = expression(0);
				}
				break;
			case 2:
				_localctx = new FetchManyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1259; Match(FETCH);
				State = 1271;
				switch (TokenStream.La(1)) {
				case ALL:
					{
					{
					State = 1260; Match(ALL);
					State = 1262;
					switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
					case 1:
						{
						State = 1261; ((FetchManyContext)_localctx).typ = mutable_category_type();
						}
						break;
					}
					}
					}
					break;
				case LPAR:
				case LBRAK:
				case LCURL:
				case MINUS:
				case LT:
				case METHOD_T:
				case CODE:
				case DOCUMENT:
				case BLOB:
				case EXECUTE:
				case FETCH:
				case INVOKE:
				case MUTABLE:
				case NOT:
				case NOTHING:
				case READ:
				case SELF:
				case SORTED:
				case THIS:
				case BOOLEAN_LITERAL:
				case CHAR_LITERAL:
				case MIN_INTEGER:
				case MAX_INTEGER:
				case SYMBOL_IDENTIFIER:
				case TYPE_IDENTIFIER:
				case VARIABLE_IDENTIFIER:
				case TEXT_LITERAL:
				case UUID_LITERAL:
				case INTEGER_LITERAL:
				case HEXA_LITERAL:
				case DECIMAL_LITERAL:
				case DATETIME_LITERAL:
				case TIME_LITERAL:
				case DATE_LITERAL:
				case PERIOD_LITERAL:
					{
					{
					State = 1265;
					switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
					case 1:
						{
						State = 1264; ((FetchManyContext)_localctx).typ = mutable_category_type();
						}
						break;
					}
					State = 1267; ((FetchManyContext)_localctx).xstart = expression(0);
					State = 1268; Match(TO);
					State = 1269; ((FetchManyContext)_localctx).xstop = expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1275;
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 1273; Match(WHERE);
					State = 1274; ((FetchManyContext)_localctx).predicate = expression(0);
					}
					break;
				}
				State = 1280;
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 1277; Match(ORDER);
					State = 1278; Match(BY);
					State = 1279; ((FetchManyContext)_localctx).orderby = order_by_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(EParser.SORTED, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284; Match(SORTED);
			State = 1286;
			_la = TokenStream.La(1);
			if (_la==DESC) {
				{
				State = 1285; Match(DESC);
				}
			}

			State = 1288; _localctx.source = instance_expression(0);
			State = 1294;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 1289; Match(WITH);
				State = 1290; _localctx.key = instance_expression(0);
				State = 1291; Match(AS);
				State = 1292; key_token();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListExpressionContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListExpression(this);
		}
	}
	public partial class ArgumentAssignmentListNoExpressionContext : Argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListNoExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListNoExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListNoExpression(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_argument_assignment_list);
		try {
			State = 1310;
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new ArgumentAssignmentListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1296;
				if (!(this.was(EParser.WS))) throw new FailedPredicateException(this, "$parser.was(EParser.WS)");
				State = 1297; ((ArgumentAssignmentListExpressionContext)_localctx).exp = expression(0);
				State = 1303;
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 1298; ((ArgumentAssignmentListExpressionContext)_localctx).items = with_argument_assignment_list(0);
					State = 1301;
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						State = 1299; Match(AND);
						State = 1300; ((ArgumentAssignmentListExpressionContext)_localctx).item = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ArgumentAssignmentListNoExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1305; ((ArgumentAssignmentListNoExpressionContext)_localctx).items = with_argument_assignment_list(0);
				State = 1308;
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 1306; Match(AND);
					State = 1307; ((ArgumentAssignmentListNoExpressionContext)_localctx).item = argument_assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_argument_assignment_listContext : ParserRuleContext {
		public With_argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_argument_assignment_list; } }
	 
		public With_argument_assignment_listContext() { }
		public virtual void CopyFrom(With_argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListContext : With_argument_assignment_listContext {
		public Argument_assignmentContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : With_argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public With_argument_assignment_listContext with_argument_assignment_list() {
		return with_argument_assignment_list(0);
	}

	private With_argument_assignment_listContext with_argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		With_argument_assignment_listContext _localctx = new With_argument_assignment_listContext(Context, _parentState);
		With_argument_assignment_listContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_with_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentAssignmentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1313; Match(WITH);
			State = 1314; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new With_argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_with_argument_assignment_list);
					State = 1316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1317; Match(COMMA);
					State = 1318; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 120, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; _localctx.exp = expression(0);
			State = 1325; Match(AS);
			State = 1326; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 122, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328; _localctx.inst = assignable_instance(0);
			State = 1329; assign();
			State = 1330; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 124, RULE_child_instance);
		try {
			State = 1340;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1332;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1333; Match(DOT);
				State = 1334; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1335;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1336; Match(LBRAK);
				State = 1337; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1338; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 126, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; _localctx.items = variable_identifier_list();
			State = 1343; assign();
			State = 1344; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 128, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1346; Match(LF);
					}
					} 
				}
				State = 1351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 130, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1352; Match(LF);
				}
				}
				State = 1355;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(EParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 132, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1357; Match(LF);
				}
				}
				State = 1360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			State = 1362; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(EParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 134, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LF) {
				{
				{
				State = 1364; Match(LF);
				}
				}
				State = 1369;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1370; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(EParser.NOTHING, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 136, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 138, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			_la = TokenStream.La(1);
			if (_la==COMMENT || _la==DEFINE) {
				{
				State = 1374; declarations();
				}
			}

			State = 1377; lfs();
			State = 1378; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 140, RULE_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380; declaration();
			State = 1386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1381; lfp();
					State = 1382; declaration();
					}
					} 
				}
				State = 1388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Comment_statementContext[] comment_statement() {
			return GetRuleContexts<Comment_statementContext>();
		}
		public Comment_statementContext comment_statement(int i) {
			return GetRuleContext<Comment_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMENT) {
				{
				{
				State = 1389; comment_statement();
				State = 1390; lfp();
				}
				}
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1402;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1397; attribute_declaration();
				}
				break;
			case 2:
				{
				State = 1398; category_declaration();
				}
				break;
			case 3:
				{
				State = 1399; resource_declaration();
				}
				break;
			case 4:
				{
				State = 1400; enum_declaration();
				}
				break;
			case 5:
				{
				State = 1401; method_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404; native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_enum_declaration);
		try {
			State = 1408;
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1406; enum_category_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1407; enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbolContext[] native_symbol() {
			return GetRuleContexts<Native_symbolContext>();
		}
		public Native_symbolContext native_symbol(int i) {
			return GetRuleContext<Native_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_native_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410; native_symbol();
			State = 1416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1411; lfp();
					State = 1412; native_symbol();
					}
					} 
				}
				State = 1418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbolContext[] category_symbol() {
			return GetRuleContexts<Category_symbolContext>();
		}
		public Category_symbolContext category_symbol(int i) {
			return GetRuleContext<Category_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, State);
		EnterRule(_localctx, 150, RULE_category_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419; category_symbol();
			State = 1425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1420; lfp();
					State = 1421; category_symbol();
					}
					} 
				}
				State = 1427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_identifierContext[] symbol_identifier() {
			return GetRuleContexts<Symbol_identifierContext>();
		}
		public Symbol_identifierContext symbol_identifier(int i) {
			return GetRuleContext<Symbol_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		Symbol_listContext _localctx = new Symbol_listContext(Context, State);
		EnterRule(_localctx, 152, RULE_symbol_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428; symbol_identifier();
			State = 1433;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1429; Match(COMMA);
				State = 1430; symbol_identifier();
				}
				}
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 154, RULE_attribute_constraint);
		try {
			State = 1446;
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1436; Match(IN);
				State = 1437; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1438; Match(IN);
				State = 1439; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1440; Match(IN);
				State = 1441; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1442; Match(MATCHING);
				State = 1443; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1444; Match(MATCHING);
				State = 1445; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 156, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1448; Match(MUTABLE);
				}
			}

			State = 1451; Match(LBRAK);
			State = 1453;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1452; expression_list();
				}
			}

			State = 1455; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 158, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1457; Match(MUTABLE);
				}
			}

			State = 1460; Match(LT);
			State = 1462;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1461; expression_list();
				}
			}

			State = 1464; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 160, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; expression(0);
			State = 1471;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1467; Match(COMMA);
				State = 1468; expression(0);
				}
				}
				State = 1473;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 162, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474; Match(LBRAK);
			State = 1475; _localctx.low = expression(0);
			State = 1476; Match(RANGE);
			State = 1477; _localctx.high = expression(0);
			State = 1478; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IteratorTypeContext : TypedefContext {
		public TypedefContext i;
		public ITerminalNode ITERATOR() { return GetToken(EParser.ITERATOR, 0); }
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public IteratorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIteratorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIteratorType(this);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class CursorTypeContext : TypedefContext {
		public TypedefContext c;
		public ITerminalNode CURSOR() { return GetToken(EParser.CURSOR, 0); }
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CursorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCursorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCursorType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case TYPE_IDENTIFIER:
				{
				_localctx = new PrimaryTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1481; ((PrimaryTypeContext)_localctx).p = primary_type();
				}
				break;
			case CURSOR:
				{
				_localctx = new CursorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1482; Match(CURSOR);
				State = 1483; Match(LT);
				State = 1484; ((CursorTypeContext)_localctx).c = typedef(0);
				State = 1485; Match(GT);
				}
				break;
			case ITERATOR:
				{
				_localctx = new IteratorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1487; Match(ITERATOR);
				State = 1488; Match(LT);
				State = 1489; ((IteratorTypeContext)_localctx).i = typedef(0);
				State = 1490; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1504;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1502;
					switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1494;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1495; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1496;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1497; Match(LBRAK);
						State = 1498; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1499;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1500; Match(LCURL);
						State = 1501; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 166, RULE_primary_type);
		try {
			State = 1509;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1507; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1508; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}
	public partial class DocumentTypeContext : Native_typeContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public DocumentTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class ImageTypeContext : Native_typeContext {
		public ITerminalNode IMAGE() { return GetToken(EParser.IMAGE, 0); }
		public ImageTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterImageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitImageType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class BlobTypeContext : Native_typeContext {
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public BlobTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlobType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlobType(this);
		}
	}
	public partial class UUIDTypeContext : Native_typeContext {
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public UUIDTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUUIDType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUUIDType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 168, RULE_native_type);
		try {
			State = 1525;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511; Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512; Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1513; Match(TEXT);
				}
				break;
			case IMAGE:
				_localctx = new ImageTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1514; Match(IMAGE);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1515; Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1516; Match(DECIMAL);
				}
				break;
			case DOCUMENT:
				_localctx = new DocumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1517; Match(DOCUMENT);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1518; Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1519; Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1520; Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1521; Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1522; Match(CODE);
				}
				break;
			case BLOB:
				_localctx = new BlobTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1523; Match(BLOB);
				}
				break;
			case UUID:
				_localctx = new UUIDTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1524; Match(UUID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 170, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mutable_category_typeContext : ParserRuleContext {
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Mutable_category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutable_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMutable_category_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMutable_category_type(this);
		}
	}

	[RuleVersion(0)]
	public Mutable_category_typeContext mutable_category_type() {
		Mutable_category_typeContext _localctx = new Mutable_category_typeContext(Context, State);
		EnterRule(_localctx, 172, RULE_mutable_category_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1529; Match(MUTABLE);
				}
			}

			State = 1532; category_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 174, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_category_declaration);
		try {
			State = 1539;
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1536; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case 2:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1537; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case 3:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1538; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterType_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitType_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, State);
		EnterRule(_localctx, 178, RULE_type_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; type_identifier();
			State = 1546;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1542; Match(COMMA);
				State = 1543; type_identifier();
				}
				}
				State = 1548;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethod_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethod_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 180, RULE_method_identifier);
		try {
			State = 1551;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1549; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1550; type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 182, RULE_identifier);
		try {
			State = 1556;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1553; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554; type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1555; symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 184, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public Attribute_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifierContext attribute_identifier() {
		Attribute_identifierContext _localctx = new Attribute_identifierContext(Context, State);
		EnterRule(_localctx, 186, RULE_attribute_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			_la = TokenStream.La(1);
			if ( !(_la==STORABLE || _la==VARIABLE_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 188, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 190, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 192, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566; argument();
			State = 1571;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1567; Match(COMMA);
				State = 1568; argument();
				}
				}
				State = 1573;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 194, RULE_argument);
		int _la;
		try {
			State = 1579;
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1574; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case 2:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1576;
				_la = TokenStream.La(1);
				if (_la==MUTABLE) {
					{
					State = 1575; Match(MUTABLE);
					}
				}

				State = 1578; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperator_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperator_argument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 196, RULE_operator_argument);
		try {
			State = 1583;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1581; named_argument();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case ANY:
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1582; typed_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 198, RULE_named_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; variable_identifier();
			State = 1588;
			_la = TokenStream.La(1);
			if (_la==EQ) {
				{
				State = 1586; Match(EQ);
				State = 1587; literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 200, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590; code_type();
			State = 1591; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_or_any_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_or_any_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 202, RULE_category_or_any_type);
		try {
			State = 1595;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593; typedef(0);
				}
				break;
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1594; any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1598; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1608;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1606;
					switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1600;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1601; Match(LBRAK);
						State = 1602; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1603;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1604; Match(LCURL);
						State = 1605; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declarationContext[] member_method_declaration() {
			return GetRuleContexts<Member_method_declarationContext>();
		}
		public Member_method_declarationContext member_method_declaration(int i) {
			return GetRuleContext<Member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 206, RULE_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611; member_method_declaration();
			State = 1617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1612; lfp();
					State = 1613; member_method_declaration();
					}
					} 
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_member_method_declaration);
		try {
			State = 1625;
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1620; setter_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1621; getter_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1622; concrete_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1623; abstract_method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1624; operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declarationContext[] native_member_method_declaration() {
			return GetRuleContexts<Native_member_method_declarationContext>();
		}
		public Native_member_method_declarationContext native_member_method_declaration(int i) {
			return GetRuleContext<Native_member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 210, RULE_native_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627; native_member_method_declaration();
			State = 1633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1628; lfp();
					State = 1629; native_member_method_declaration();
					}
					} 
				}
				State = 1635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Native_getter_declarationContext native_getter_declaration() {
			return GetRuleContext<Native_getter_declarationContext>(0);
		}
		public Native_setter_declarationContext native_setter_declaration() {
			return GetRuleContext<Native_setter_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 212, RULE_native_member_method_declaration);
		try {
			State = 1639;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1636; native_getter_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1637; native_setter_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1638; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 214, RULE_native_category_binding);
		try {
			State = 1651;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1641; Match(JAVA);
				State = 1642; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1643; Match(CSHARP);
				State = 1644; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1645; Match(PYTHON2);
				State = 1646; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1647; Match(PYTHON3);
				State = 1648; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1649; Match(JAVASCRIPT);
				State = 1650; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 216, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; identifier();
			State = 1655;
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1654; python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 218, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657; Match(FROM);
			State = 1658; module_token();
			State = 1659; Match(COLON);
			State = 1660; identifier();
			State = 1665;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1661; Match(DOT);
					State = 1662; identifier();
					}
					} 
				}
				State = 1667;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 220, RULE_javascript_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668; identifier();
			State = 1670;
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1669; javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(EParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(EParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 222, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(FROM);
			State = 1673; module_token();
			State = 1674; Match(COLON);
			State = 1676;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1675; Match(SLASH);
				}
			}

			State = 1678; javascript_identifier();
			State = 1683;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1679; Match(SLASH);
					State = 1680; javascript_identifier();
					}
					} 
				}
				State = 1685;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			State = 1688;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1686; Match(DOT);
				State = 1687; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, State);
		EnterRule(_localctx, 224, RULE_variable_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; variable_identifier();
			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1691; Match(COMMA);
				State = 1692; variable_identifier();
				}
				}
				State = 1697;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifier_listContext : ParserRuleContext {
		public Attribute_identifierContext[] attribute_identifier() {
			return GetRuleContexts<Attribute_identifierContext>();
		}
		public Attribute_identifierContext attribute_identifier(int i) {
			return GetRuleContext<Attribute_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Attribute_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifier_listContext attribute_identifier_list() {
		Attribute_identifier_listContext _localctx = new Attribute_identifier_listContext(Context, State);
		EnterRule(_localctx, 226, RULE_attribute_identifier_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; attribute_identifier();
			State = 1703;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1699; Match(COMMA);
					State = 1700; attribute_identifier();
					}
					} 
				}
				State = 1705;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 228, RULE_method_declaration);
		try {
			State = 1710;
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1706; abstract_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1707; concrete_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1708; native_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1709; test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_statementContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(EParser.COMMENT, 0); }
		public Comment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterComment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitComment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Comment_statementContext comment_statement() {
		Comment_statementContext _localctx = new Comment_statementContext(Context, State);
		EnterRule(_localctx, 230, RULE_comment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statementContext[] native_statement() {
			return GetRuleContexts<Native_statementContext>();
		}
		public Native_statementContext native_statement(int i) {
			return GetRuleContext<Native_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, State);
		EnterRule(_localctx, 232, RULE_native_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; native_statement();
			State = 1720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1715; lfp();
					State = 1716; native_statement();
					}
					} 
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 234, RULE_native_statement);
		try {
			State = 1733;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1723; Match(JAVA);
				State = 1724; java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725; Match(CSHARP);
				State = 1726; csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1727; Match(PYTHON2);
				State = 1728; python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1729; Match(PYTHON3);
				State = 1730; python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1731; Match(JAVASCRIPT);
				State = 1732; javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 236, RULE_python_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735; python_statement();
			State = 1737;
			_la = TokenStream.La(1);
			if (_la==SEMI) {
				{
				State = 1736; Match(SEMI);
				}
			}

			State = 1740;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1739; python_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 238, RULE_javascript_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1742; javascript_statement();
			State = 1744;
			_la = TokenStream.La(1);
			if (_la==SEMI) {
				{
				State = 1743; Match(SEMI);
				}
			}

			State = 1747;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1746; javascript_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 240, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749; statement();
			State = 1755;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1750; lfp();
					State = 1751; statement();
					}
					} 
				}
				State = 1757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public AssertionContext[] assertion() {
			return GetRuleContexts<AssertionContext>();
		}
		public AssertionContext assertion(int i) {
			return GetRuleContext<AssertionContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertion_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertion_list(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		Assertion_listContext _localctx = new Assertion_listContext(Context, State);
		EnterRule(_localctx, 242, RULE_assertion_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; assertion();
			State = 1764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1759; lfp();
					State = 1760; assertion();
					}
					} 
				}
				State = 1766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statementContext[] switch_case_statement() {
			return GetRuleContexts<Switch_case_statementContext>();
		}
		public Switch_case_statementContext switch_case_statement(int i) {
			return GetRuleContext<Switch_case_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitch_case_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitch_case_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, State);
		EnterRule(_localctx, 244, RULE_switch_case_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767; switch_case_statement();
			State = 1773;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1768; lfp();
					State = 1769; switch_case_statement();
					}
					} 
				}
				State = 1775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statementContext[] catch_statement() {
			return GetRuleContexts<Catch_statementContext>();
		}
		public Catch_statementContext catch_statement(int i) {
			return GetRuleContext<Catch_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatch_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatch_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, State);
		EnterRule(_localctx, 246, RULE_catch_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; catch_statement();
			State = 1782;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1777; lfp();
					State = 1778; catch_statement();
					}
					} 
				}
				State = 1784;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 248, RULE_literal_collection);
		try {
			State = 1799;
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1785; Match(LBRAK);
				State = 1786; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1787; Match(RANGE);
				State = 1788; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1789; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1791; Match(LBRAK);
				State = 1792; literal_list_literal();
				State = 1793; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1795; Match(LT);
				State = 1796; literal_list_literal();
				State = 1797; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(EParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(EParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(EParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class UUIDLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode UUID_LITERAL() { return GetToken(EParser.UUID_LITERAL, 0); }
		public UUIDLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUUIDLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUUIDLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(EParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(EParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(EParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(EParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 250, RULE_atomic_literal);
		try {
			State = 1815;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1801; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1802; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1803; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1804; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1805; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1806; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1807; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1808; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1809; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1810; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1811; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1812; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case UUID_LITERAL:
				_localctx = new UUIDLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1813; ((UUIDLiteralContext)_localctx).t = Match(UUID_LITERAL);
				}
				break;
			case NOTHING:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1814; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteral_list_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteral_list_literal(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, State);
		EnterRule(_localctx, 252, RULE_literal_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1817; atomic_literal();
			State = 1822;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1818; Match(COMMA);
				State = 1819; atomic_literal();
				}
				}
				State = 1824;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_selectable_expression);
		try {
			State = 1829;
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1825; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1826; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1827; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1828; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 258, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833; Match(LPAR);
			State = 1834; expression(0);
			State = 1835; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expression(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 260, RULE_literal_expression);
		try {
			State = 1839;
			switch (TokenStream.La(1)) {
			case NOTHING:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case UUID_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1837; atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
			case MUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1838; collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollection_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollection_literal(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 262, RULE_collection_literal);
		try {
			State = 1846;
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1841; range_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1842; list_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1843; set_literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1844; dict_literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1845; tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 264, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1848; Match(MUTABLE);
				}
			}

			State = 1851; Match(LPAR);
			State = 1853;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1852; expression_tuple();
				}
			}

			State = 1855; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 266, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1857; Match(MUTABLE);
				}
			}

			State = 1860; Match(LCURL);
			State = 1862;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1861; dict_entry_list();
				}
			}

			State = 1864; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExpression_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExpression_tuple(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, State);
		EnterRule(_localctx, 268, RULE_expression_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; expression(0);
			State = 1867; Match(COMMA);
			State = 1876;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT) | (1L << BLOB))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (EXECUTE - 98)) | (1L << (FETCH - 98)) | (1L << (INVOKE - 98)) | (1L << (MUTABLE - 98)) | (1L << (NOT - 98)) | (1L << (NOTHING - 98)) | (1L << (READ - 98)) | (1L << (SELF - 98)) | (1L << (SORTED - 98)) | (1L << (THIS - 98)) | (1L << (BOOLEAN_LITERAL - 98)) | (1L << (CHAR_LITERAL - 98)) | (1L << (MIN_INTEGER - 98)) | (1L << (MAX_INTEGER - 98)) | (1L << (SYMBOL_IDENTIFIER - 98)) | (1L << (TYPE_IDENTIFIER - 98)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (VARIABLE_IDENTIFIER - 162)) | (1L << (TEXT_LITERAL - 162)) | (1L << (UUID_LITERAL - 162)) | (1L << (INTEGER_LITERAL - 162)) | (1L << (HEXA_LITERAL - 162)) | (1L << (DECIMAL_LITERAL - 162)) | (1L << (DATETIME_LITERAL - 162)) | (1L << (TIME_LITERAL - 162)) | (1L << (DATE_LITERAL - 162)) | (1L << (PERIOD_LITERAL - 162)))) != 0)) {
				{
				State = 1868; expression(0);
				State = 1873;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1869; Match(COMMA);
					State = 1870; expression(0);
					}
					}
					State = 1875;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entryContext[] dict_entry() {
			return GetRuleContexts<Dict_entryContext>();
		}
		public Dict_entryContext dict_entry(int i) {
			return GetRuleContext<Dict_entryContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_entry_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_entry_list(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, State);
		EnterRule(_localctx, 270, RULE_dict_entry_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878; dict_entry();
			State = 1883;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1879; Match(COMMA);
				State = 1880; dict_entry();
				}
				}
				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 272, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1886; _localctx.key = expression(0);
			State = 1887; Match(COLON);
			State = 1888; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 274, RULE_slice_arguments);
		try {
			State = 1899;
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1890; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1891; Match(COLON);
				State = 1892; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1894; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1895; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1897; Match(COLON);
				State = 1898; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 276, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901; variable_identifier();
			State = 1902; assign();
			State = 1903; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 278;
		EnterRecursionRule(_localctx, 278, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1906; variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1912;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1908;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1909; child_instance();
					}
					} 
				}
				State = 1914;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 280, RULE_is_expression);
		try {
			State = 1919;
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1915;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1916; Match(VARIABLE_IDENTIFIER);
				State = 1917; category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1918; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_all_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_all_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_all_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRead_all_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRead_all_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_all_expressionContext read_all_expression() {
		Read_all_expressionContext _localctx = new Read_all_expressionContext(Context, State);
		EnterRule(_localctx, 282, RULE_read_all_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921; Match(READ);
			State = 1922; Match(ALL);
			State = 1923; Match(FROM);
			State = 1924; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_one_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_one_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_one_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRead_one_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRead_one_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_one_expressionContext read_one_expression() {
		Read_one_expressionContext _localctx = new Read_one_expressionContext(Context, State);
		EnterRule(_localctx, 284, RULE_read_one_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926; Match(READ);
			State = 1927; Match(ONE);
			State = 1928; Match(FROM);
			State = 1929; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_listContext : ParserRuleContext {
		public Order_byContext[] order_by() {
			return GetRuleContexts<Order_byContext>();
		}
		public Order_byContext order_by(int i) {
			return GetRuleContext<Order_byContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Order_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_listContext order_by_list() {
		Order_by_listContext _localctx = new Order_by_listContext(Context, State);
		EnterRule(_localctx, 286, RULE_order_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1931; order_by();
			State = 1936;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1932; Match(COMMA);
					State = 1933; order_by();
					}
					} 
				}
				State = 1938;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_byContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public ITerminalNode ASC() { return GetToken(EParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public Order_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by(this);
		}
	}

	[RuleVersion(0)]
	public Order_byContext order_by() {
		Order_byContext _localctx = new Order_byContext(Context, State);
		EnterRule(_localctx, 288, RULE_order_by);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939; variable_identifier();
			State = 1944;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1940; Match(DOT);
					State = 1941; variable_identifier();
					}
					} 
				}
				State = 1946;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			State = 1948;
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1947;
				_la = TokenStream.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 290, RULE_operator);
		try {
			State = 1956;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1952; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1953; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1954; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1955; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public New_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNew_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNew_token(this);
		}
	}

	[RuleVersion(0)]
	public New_tokenContext new_token() {
		New_tokenContext _localctx = new New_tokenContext(Context, State);
		EnterRule(_localctx, 292, RULE_new_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1959;
			if (!(this.isText(_localctx.i1,"new"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"new\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 294, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1962;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 296, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1965;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 298, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1968;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 300, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1971;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 302, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(EParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 304, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 306, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1977; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(EParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 308, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(EParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(EParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 310, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 312, RULE_javascript_statement);
		try {
			State = 1990;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1983; Match(RETURN);
				State = 1984; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1985; Match(SEMI);
				}
				break;
			case LPAR:
			case LBRAK:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1987; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1988; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 314;
		EnterRecursionRule(_localctx, 314, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1993; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1999;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1995;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1996; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 2001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_new_expressionContext javascript_new_expression() {
			return GetRuleContext<Javascript_new_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_javascript_primary_expression);
		try {
			State = 2009;
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2002; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2003; javascript_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2004; javascript_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2005; javascript_identifier_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2006; javascript_literal_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2007; javascript_method_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2008; javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 318, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_new_expressionContext javascript_new_expression() {
		Javascript_new_expressionContext _localctx = new Javascript_new_expressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_javascript_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2013; new_token();
			State = 2014; javascript_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaScriptMemberExpressionContext : Javascript_selector_expressionContext {
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavaScriptMemberExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMemberExpression(this);
		}
	}
	public partial class JavaScriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavaScriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptItemExpression(this);
		}
	}
	public partial class JavaScriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext method;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavaScriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_javascript_selector_expression);
		try {
			State = 2021;
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				_localctx = new JavaScriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2016; Match(DOT);
				State = 2017; ((JavaScriptMethodExpressionContext)_localctx).method = javascript_method_expression();
				}
				break;
			case 2:
				_localctx = new JavaScriptMemberExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2018; Match(DOT);
				State = 2019; ((JavaScriptMemberExpressionContext)_localctx).name = javascript_identifier();
				}
				break;
			case 3:
				_localctx = new JavaScriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2020; ((JavaScriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023; _localctx.name = javascript_identifier();
			State = 2024; Match(LPAR);
			State = 2026;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (SELF - 132)) | (1L << (TEST - 132)) | (1L << (THIS - 132)) | (1L << (WRITE - 132)) | (1L << (BOOLEAN_LITERAL - 132)) | (1L << (CHAR_LITERAL - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)) | (1L << (TEXT_LITERAL - 132)) | (1L << (INTEGER_LITERAL - 132)) | (1L << (DECIMAL_LITERAL - 132)))) != 0)) {
				{
				State = 2025; _localctx.args = javascript_arguments(0);
				}
			}

			State = 2028; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 326;
		EnterRecursionRule(_localctx, 326, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2031; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2038;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 2033;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2034; Match(COMMA);
					State = 2035; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 2040;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 328, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041; Match(LBRAK);
			State = 2042; _localctx.exp = javascript_expression(0);
			State = 2043; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 330, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045; Match(LPAR);
			State = 2046; _localctx.exp = javascript_expression(0);
			State = 2047; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, State);
		EnterRule(_localctx, 332, RULE_javascript_identifier_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_javascript_literal_expression);
		try {
			State = 2056;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2051; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2052; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2053; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2054; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2055; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 336, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2058;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (TEST - 132)) | (1L << (WRITE - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 338, RULE_python_statement);
		try {
			State = 2063;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2060; Match(RETURN);
				State = 2061; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2062; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 340;
		EnterRecursionRule(_localctx, 340, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2066; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2072;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 2068;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2069; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 2074;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 342, RULE_python_primary_expression);
		try {
			State = 2079;
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2077; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2078; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_python_selector_expression);
		try {
			State = 2087;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081; Match(DOT);
				State = 2082; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2083; Match(LBRAK);
				State = 2084; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 2085; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089; _localctx.name = python_identifier();
			State = 2090; Match(LPAR);
			State = 2092;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (SELF - 132)) | (1L << (TEST - 132)) | (1L << (THIS - 132)) | (1L << (WRITE - 132)) | (1L << (BOOLEAN_LITERAL - 132)) | (1L << (CHAR_LITERAL - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)) | (1L << (TEXT_LITERAL - 132)) | (1L << (INTEGER_LITERAL - 132)) | (1L << (DECIMAL_LITERAL - 132)))) != 0)) {
				{
				State = 2091; _localctx.args = python_argument_list();
				}
			}

			State = 2094; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 348, RULE_python_argument_list);
		try {
			State = 2102;
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2096; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2097; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2098; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 2099; Match(COMMA);
				State = 2100; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 350;
		EnterRecursionRule(_localctx, 350, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2105; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 2107;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2108; Match(COMMA);
					State = 2109; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 2114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 352;
		EnterRecursionRule(_localctx, 352, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2116; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 2117; Match(EQ);
			State = 2118; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 2120;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2121; Match(COMMA);
					State = 2122; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 2123; Match(EQ);
					State = 2124; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 2130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 354, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2131; Match(LPAR);
			State = 2132; _localctx.exp = python_expression(0);
			State = 2133; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonPromptoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPromptoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPromptoIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 356;
		EnterRecursionRule(_localctx, 356, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2136; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2137; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 2140;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2141; Match(DOT);
					State = 2142; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 2147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 358, RULE_python_literal_expression);
		try {
			State = 2153;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2148; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2149; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2150; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2151; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2152; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 360, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (SELF - 132)) | (1L << (TEST - 132)) | (1L << (THIS - 132)) | (1L << (WRITE - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 362, RULE_java_statement);
		try {
			State = 2164;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2157; Match(RETURN);
				State = 2158; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 2159; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2161; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 2162; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 364;
		EnterRecursionRule(_localctx, 364, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2167; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 2169;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2170; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 2175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_new_expressionContext java_new_expression() {
			return GetRuleContext<Java_new_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_java_primary_expression);
		try {
			State = 2181;
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2176; java_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2177; java_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2178; java_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2179; java_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2180; java_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public Java_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_new_expressionContext java_new_expression() {
		Java_new_expressionContext _localctx = new Java_new_expressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_java_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2185; new_token();
			State = 2186; java_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_java_selector_expression);
		try {
			State = 2191;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2188; Match(DOT);
				State = 2189; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2190; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2193; _localctx.name = java_identifier();
			State = 2194; Match(LPAR);
			State = 2196;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (SELF - 132)) | (1L << (TEST - 132)) | (1L << (THIS - 132)) | (1L << (WRITE - 132)) | (1L << (BOOLEAN_LITERAL - 132)) | (1L << (CHAR_LITERAL - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (NATIVE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)) | (1L << (TEXT_LITERAL - 132)) | (1L << (INTEGER_LITERAL - 132)) | (1L << (DECIMAL_LITERAL - 132)))) != 0)) {
				{
				State = 2195; _localctx.args = java_arguments(0);
				}
			}

			State = 2198; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 376;
		EnterRecursionRule(_localctx, 376, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2201; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 2203;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2204; Match(COMMA);
					State = 2205; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 2210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 378, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; Match(LBRAK);
			State = 2212; _localctx.exp = java_expression(0);
			State = 2213; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2215; Match(LPAR);
			State = 2216; _localctx.exp = java_expression(0);
			State = 2217; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 382;
		EnterRecursionRule(_localctx, 382, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2220; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 2222;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2223; Match(DOT);
					State = 2224; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 2229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 384;
		EnterRecursionRule(_localctx, 384, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2231; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 2233;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2234; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 2239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_java_literal_expression);
		try {
			State = 2245;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2240; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2241; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2242; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2243; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2244; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(EParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 388, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (TEST - 132)) | (1L << (WRITE - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (NATIVE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 390, RULE_csharp_statement);
		try {
			State = 2256;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2249; Match(RETURN);
				State = 2250; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 2251; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2253; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 2254; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 392;
		EnterRecursionRule(_localctx, 392, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2259; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 2261;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2262; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 2267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_new_expressionContext csharp_new_expression() {
			return GetRuleContext<Csharp_new_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_csharp_primary_expression);
		try {
			State = 2273;
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2268; csharp_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2269; csharp_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2270; csharp_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2271; csharp_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2272; csharp_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 396, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public Csharp_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_new_expressionContext csharp_new_expression() {
		Csharp_new_expressionContext _localctx = new Csharp_new_expressionContext(Context, State);
		EnterRule(_localctx, 398, RULE_csharp_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277; new_token();
			State = 2278; csharp_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_csharp_selector_expression);
		try {
			State = 2283;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2280; Match(DOT);
				State = 2281; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2282; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 402, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; _localctx.name = csharp_identifier();
			State = 2286; Match(LPAR);
			State = 2288;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (SELF - 132)) | (1L << (TEST - 132)) | (1L << (THIS - 132)) | (1L << (WRITE - 132)) | (1L << (BOOLEAN_LITERAL - 132)) | (1L << (CHAR_LITERAL - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)) | (1L << (DOLLAR_IDENTIFIER - 132)) | (1L << (TEXT_LITERAL - 132)) | (1L << (INTEGER_LITERAL - 132)) | (1L << (DECIMAL_LITERAL - 132)))) != 0)) {
				{
				State = 2287; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2290; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 404;
		EnterRecursionRule(_localctx, 404, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2293; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2295;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2296; Match(COMMA);
					State = 2297; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2303; Match(LBRAK);
			State = 2304; _localctx.exp = csharp_expression(0);
			State = 2305; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 408, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307; Match(LPAR);
			State = 2308; _localctx.exp = csharp_expression(0);
			State = 2309; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}
	public partial class CSharpPromptoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPromptoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 410;
		EnterRecursionRule(_localctx, 410, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2312; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2313; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2317; Match(DOT);
					State = 2318; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_csharp_literal_expression);
		try {
			State = 2329;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2324; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2325; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2326; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2327; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2328; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 414, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (TEST - 132)) | (1L << (WRITE - 132)) | (1L << (SYMBOL_IDENTIFIER - 132)) | (1L << (TYPE_IDENTIFIER - 132)) | (1L << (VARIABLE_IDENTIFIER - 132)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 37: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 44: return unresolved_expression_sempred((Unresolved_expressionContext)_localctx, predIndex);
		case 45: return unresolved_selector_sempred((Unresolved_selectorContext)_localctx, predIndex);
		case 47: return invocation_trailer_sempred((Invocation_trailerContext)_localctx, predIndex);
		case 48: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 49: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 58: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 59: return with_argument_assignment_list_sempred((With_argument_assignment_listContext)_localctx, predIndex);
		case 62: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 82: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 102: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 139: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 140: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 146: return new_token_sempred((New_tokenContext)_localctx, predIndex);
		case 147: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 148: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 149: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 150: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 157: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 163: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 170: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 175: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 176: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 178: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 182: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 188: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 191: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 192: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 196: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 202: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 205: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 40);
		case 3: return Precpred(Context, 39);
		case 4: return Precpred(Context, 38);
		case 5: return Precpred(Context, 37);
		case 6: return Precpred(Context, 36);
		case 7: return Precpred(Context, 35);
		case 8: return Precpred(Context, 34);
		case 9: return Precpred(Context, 33);
		case 10: return Precpred(Context, 32);
		case 11: return Precpred(Context, 29);
		case 12: return Precpred(Context, 28);
		case 13: return Precpred(Context, 27);
		case 14: return Precpred(Context, 26);
		case 15: return Precpred(Context, 25);
		case 16: return Precpred(Context, 24);
		case 17: return Precpred(Context, 22);
		case 18: return Precpred(Context, 21);
		case 19: return Precpred(Context, 20);
		case 20: return Precpred(Context, 19);
		case 21: return Precpred(Context, 18);
		case 22: return Precpred(Context, 17);
		case 23: return Precpred(Context, 16);
		case 24: return Precpred(Context, 15);
		case 25: return Precpred(Context, 1);
		case 26: return Precpred(Context, 31);
		case 27: return Precpred(Context, 30);
		case 28: return Precpred(Context, 23);
		case 29: return Precpred(Context, 8);
		}
		return true;
	}
	private bool unresolved_expression_sempred(Unresolved_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool unresolved_selector_sempred(Unresolved_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool invocation_trailer_sempred(Invocation_trailerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return this.willBe(EParser.LF);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.wasNot(EParser.WS);
		case 35: return this.wasNot(EParser.WS);
		case 36: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return this.was(EParser.WS);
		}
		return true;
	}
	private bool with_argument_assignment_list_sempred(With_argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return this.wasNot(EParser.WS);
		case 40: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 5);
		case 42: return Precpred(Context, 4);
		case 43: return Precpred(Context, 3);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 2);
		case 45: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return this.willBeAOrAn();
		}
		return true;
	}
	private bool new_token_sempred(New_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return this.isText(_localctx.i1,"new");
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xAF\x920\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5"+
		"\x2\x1A9\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1B0\n\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\x1CE\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1D4"+
		"\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1D9\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6"+
		"\x1DF\n\x6\x5\x6\x1E1\n\x6\x3\x6\x5\x6\x1E4\n\x6\x3\a\x3\a\x3\a\x3\a\x5"+
		"\a\x1EA\n\a\x3\a\x3\a\x5\a\x1EE\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x5\a\x1F9\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x202"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\x211\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x21A\n\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\x221\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x5\n\x22B\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\x241\n\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x258\n\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x265\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x270\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x27E"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x5\x10\x28C\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x29A\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x2AC\n\x12\f\x12\xE\x12"+
		"\x2AF\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x2B9\n\x13\x5\x13\x2BB\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x5\x14\x2C4\n\x14\x3\x14\x3\x14\x5\x14\x2C8\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x2D0\n\x15\x3\x15\x3\x15\x5\x15"+
		"\x2D4\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x5\x16\x2E0\n\x16\x3\x16\x3\x16\x3\x16\x5\x16\x2E5\n\x16\x3"+
		"\x16\x3\x16\x5\x16\x2E9\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x304\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\x30B\n\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x310\n\x1A\x3\x1A\x3\x1A\x5\x1A\x314\n\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x329\n"+
		"\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x337\n\x1D\x3\x1E\x3\x1E\x5\x1E\x33B\n\x1E\x3"+
		"\x1E\x5\x1E\x33E\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x35F\n!\x3!\x3!\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x372\n"+
		"\"\x3#\x3#\x3#\x3#\x3#\x5#\x379\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x39B\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x3A4"+
		"\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x3B9\n\'\f\'\xE\'\x3BC\v\'\x3(\x3(\x3"+
		"(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3CB\n)\x3)\x3)\x3)\x5)"+
		"\x3D0\n)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3D8\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x5)\x3E1\n)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3F8\n*\x3+\x3+\x3,\x3,\x5,\x3FE\n,\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x41C\n-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x485\n-\f-\xE-\x488\v"+
		"-\x3.\x3.\x3.\x3.\x3.\a.\x48F\n.\f.\xE.\x492\v.\x3/\x3/\x3/\x3/\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\a\x32\x4A4\n\x32\f\x32\xE\x32\x4A7\v\x32\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x5\x33\x4B6\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x4BB\n\x34\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4C5\n\x36\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x4CA\n\x36\x5\x36\x4CC\n\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x5\x36\x4D2\n\x36\x5\x36\x4D4\n\x36\x5\x36\x4D6\n\x36\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x5:\x4EA\n:\x3:\x3:\x3:\x3:\x3:\x5:"+
		"\x4F1\n:\x3:\x5:\x4F4\n:\x3:\x3:\x3:\x3:\x5:\x4FA\n:\x3:\x3:\x5:\x4FE"+
		"\n:\x3:\x3:\x3:\x5:\x503\n:\x5:\x505\n:\x3;\x3;\x5;\x509\n;\x3;\x3;\x3"+
		";\x3;\x3;\x3;\x5;\x511\n;\x3<\x3<\x3<\x3<\x3<\x5<\x518\n<\x5<\x51A\n<"+
		"\x3<\x3<\x3<\x5<\x51F\n<\x5<\x521\n<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\a=\x52A"+
		"\n=\f=\xE=\x52D\v=\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3"+
		"@\x3@\x3@\x3@\x5@\x53F\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\a\x42\x546"+
		"\n\x42\f\x42\xE\x42\x549\v\x42\x3\x43\x6\x43\x54C\n\x43\r\x43\xE\x43\x54D"+
		"\x3\x44\x6\x44\x551\n\x44\r\x44\xE\x44\x552\x3\x44\x3\x44\x3\x45\a\x45"+
		"\x558\n\x45\f\x45\xE\x45\x55B\v\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x5"+
		"G\x562\nG\x3G\x3G\x3G\x3H\x3H\x3H\x3H\aH\x56B\nH\fH\xEH\x56E\vH\x3I\x3"+
		"I\x3I\aI\x573\nI\fI\xEI\x576\vI\x3I\x3I\x3I\x3I\x3I\x5I\x57D\nI\x3J\x3"+
		"J\x3K\x3K\x5K\x583\nK\x3L\x3L\x3L\x3L\aL\x589\nL\fL\xEL\x58C\vL\x3M\x3"+
		"M\x3M\x3M\aM\x592\nM\fM\xEM\x595\vM\x3N\x3N\x3N\aN\x59A\nN\fN\xEN\x59D"+
		"\vN\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x5A9\nO\x3P\x5P\x5AC\n"+
		"P\x3P\x3P\x5P\x5B0\nP\x3P\x3P\x3Q\x5Q\x5B5\nQ\x3Q\x3Q\x5Q\x5B9\nQ\x3Q"+
		"\x3Q\x3R\x3R\x3R\aR\x5C0\nR\fR\xER\x5C3\vR\x3S\x3S\x3S\x3S\x3S\x3S\x3"+
		"T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x5D7\nT\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\aT\x5E1\nT\fT\xET\x5E4\vT\x3U\x3U\x5U\x5E8\nU\x3"+
		"V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x5F8\nV\x3W"+
		"\x3W\x3X\x5X\x5FD\nX\x3X\x3X\x3Y\x3Y\x3Z\x3Z\x3Z\x5Z\x606\nZ\x3[\x3[\x3"+
		"[\a[\x60B\n[\f[\xE[\x60E\v[\x3\\\x3\\\x5\\\x612\n\\\x3]\x3]\x3]\x5]\x617"+
		"\n]\x3^\x3^\x3_\x3_\x3`\x3`\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\a\x62\x624"+
		"\n\x62\f\x62\xE\x62\x627\v\x62\x3\x63\x3\x63\x5\x63\x62B\n\x63\x3\x63"+
		"\x5\x63\x62E\n\x63\x3\x64\x3\x64\x5\x64\x632\n\x64\x3\x65\x3\x65\x3\x65"+
		"\x5\x65\x637\n\x65\x3\x66\x3\x66\x3\x66\x3g\x3g\x5g\x63E\ng\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\ah\x649\nh\fh\xEh\x64C\vh\x3i\x3i\x3i\x3i\a"+
		"i\x652\ni\fi\xEi\x655\vi\x3j\x3j\x3j\x3j\x3j\x5j\x65C\nj\x3k\x3k\x3k\x3"+
		"k\ak\x662\nk\fk\xEk\x665\vk\x3l\x3l\x3l\x5l\x66A\nl\x3m\x3m\x3m\x3m\x3"+
		"m\x3m\x3m\x3m\x3m\x3m\x5m\x676\nm\x3n\x3n\x5n\x67A\nn\x3o\x3o\x3o\x3o"+
		"\x3o\x3o\ao\x682\no\fo\xEo\x685\vo\x3p\x3p\x5p\x689\np\x3q\x3q\x3q\x3"+
		"q\x5q\x68F\nq\x3q\x3q\x3q\aq\x694\nq\fq\xEq\x697\vq\x3q\x3q\x5q\x69B\n"+
		"q\x3r\x3r\x3r\ar\x6A0\nr\fr\xEr\x6A3\vr\x3s\x3s\x3s\as\x6A8\ns\fs\xEs"+
		"\x6AB\vs\x3t\x3t\x3t\x3t\x5t\x6B1\nt\x3u\x3u\x3v\x3v\x3v\x3v\av\x6B9\n"+
		"v\fv\xEv\x6BC\vv\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x6C8\nw\x3"+
		"x\x3x\x5x\x6CC\nx\x3x\x5x\x6CF\nx\x3y\x3y\x5y\x6D3\ny\x3y\x5y\x6D6\ny"+
		"\x3z\x3z\x3z\x3z\az\x6DC\nz\fz\xEz\x6DF\vz\x3{\x3{\x3{\x3{\a{\x6E5\n{"+
		"\f{\xE{\x6E8\v{\x3|\x3|\x3|\x3|\a|\x6EE\n|\f|\xE|\x6F1\v|\x3}\x3}\x3}"+
		"\x3}\a}\x6F7\n}\f}\xE}\x6FA\v}\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x3"+
		"~\x3~\x3~\x3~\x3~\x5~\x70A\n~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F"+
		"\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x71A\n"+
		"\x7F\x3\x80\x3\x80\x3\x80\a\x80\x71F\n\x80\f\x80\xE\x80\x722\v\x80\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\x5\x81\x728\n\x81\x3\x82\x3\x82\x3\x83\x3\x83"+
		"\x3\x83\x3\x83\x3\x84\x3\x84\x5\x84\x732\n\x84\x3\x85\x3\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\x739\n\x85\x3\x86\x5\x86\x73C\n\x86\x3\x86\x3\x86\x5"+
		"\x86\x740\n\x86\x3\x86\x3\x86\x3\x87\x5\x87\x745\n\x87\x3\x87\x3\x87\x5"+
		"\x87\x749\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\a\x88"+
		"\x752\n\x88\f\x88\xE\x88\x755\v\x88\x5\x88\x757\n\x88\x3\x89\x3\x89\x3"+
		"\x89\a\x89\x75C\n\x89\f\x89\xE\x89\x75F\v\x89\x3\x8A\x3\x8A\x3\x8A\x3"+
		"\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5"+
		"\x8B\x76E\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D"+
		"\x3\x8D\a\x8D\x779\n\x8D\f\x8D\xE\x8D\x77C\v\x8D\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x5\x8E\x782\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\a\x91\x791\n\x91\f\x91"+
		"\xE\x91\x794\v\x91\x3\x92\x3\x92\x3\x92\a\x92\x799\n\x92\f\x92\xE\x92"+
		"\x79C\v\x92\x3\x92\x5\x92\x79F\n\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93"+
		"\x3\x93\x5\x93\x7A7\n\x93\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3"+
		"\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x98\x3\x99\x3"+
		"\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x7C9\n\x9E\x3\x9F\x3\x9F"+
		"\x3\x9F\x3\x9F\x3\x9F\a\x9F\x7D0\n\x9F\f\x9F\xE\x9F\x7D3\v\x9F\x3\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x7DC\n\xA0\x3\xA1\x3"+
		"\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x7E8"+
		"\n\xA3\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x7ED\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\a\xA5\x7F7\n\xA5\f\xA5\xE\xA5\x7FA\v"+
		"\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x3"+
		"\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x80B\n\xA9\x3\xAA\x3\xAA"+
		"\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x812\n\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3"+
		"\xAC\a\xAC\x819\n\xAC\f\xAC\xE\xAC\x81C\v\xAC\x3\xAD\x3\xAD\x3\xAD\x3"+
		"\xAD\x5\xAD\x822\n\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE"+
		"\x82A\n\xAE\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x82F\n\xAF\x3\xAF\x3\xAF\x3\xB0"+
		"\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x839\n\xB0\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\a\xB1\x841\n\xB1\f\xB1\xE\xB1\x844\v\xB1\x3"+
		"\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3"+
		"\xB2\a\xB2\x851\n\xB2\f\xB2\xE\xB2\x854\v\xB2\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x85D\n\xB4\x3\xB4\x3\xB4\x3\xB4\a\xB4"+
		"\x862\n\xB4\f\xB4\xE\xB4\x865\v\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x86C\n\xB5\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x5\xB7\x877\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8"+
		"\x87E\n\xB8\f\xB8\xE\xB8\x881\v\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x5\xB9\x888\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3"+
		"\xBC\x5\xBC\x892\n\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x897\n\xBD\x3\xBD\x3"+
		"\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x8A1\n\xBE\f\xBE"+
		"\xE\xBE\x8A4\v\xBE\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\a\xC1\x8B4\n\xC1\f\xC1"+
		"\xE\xC1\x8B7\v\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\a\xC2\x8BE\n\xC2"+
		"\f\xC2\xE\xC2\x8C1\v\xC2\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x8C8"+
		"\n\xC3\x3\xC4\x3\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5"+
		"\x5\xC5\x8D3\n\xC5\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\a\xC6\x8DA\n\xC6"+
		"\f\xC6\xE\xC6\x8DD\v\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x8E4"+
		"\n\xC7\x3\xC8\x3\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xCA\x3\xCA\x3\xCA\x5\xCA"+
		"\x8EE\n\xCA\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x8F3\n\xCB\x3\xCB\x3\xCB\x3\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\a\xCC\x8FD\n\xCC\f\xCC\xE\xCC\x900"+
		"\v\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCE\x3\xCE\x3\xCE\x3\xCE\x3\xCF"+
		"\x3\xCF\x3\xCF\x5\xCF\x90D\n\xCF\x3\xCF\x3\xCF\x3\xCF\a\xCF\x912\n\xCF"+
		"\f\xCF\xE\xCF\x915\v\xCF\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x91C"+
		"\n\xD0\x3\xD1\x3\xD1\x3\xD1\x2\x18\"LXZ\x62x\xA6\xCE\x118\x13C\x148\x156"+
		"\x160\x162\x166\x16E\x17A\x180\x182\x18A\x196\x19C\xD2\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE"+
		"\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2"+
		"\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6"+
		"\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C\x10E\x110\x112\x114"+
		"\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128\x12A\x12C\x12E\x130"+
		"\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144\x146\x148\x14A\x14C"+
		"\x14E\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160\x162\x164\x166\x168"+
		"\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C\x17E\x180\x182\x184"+
		"\x186\x188\x18A\x18C\x18E\x190\x192\x194\x196\x198\x19A\x19C\x19E\x1A0"+
		"\x2\v\x3\x2\"#\x4\x2\x90\x90\xA4\xA4\x4\x2\x8C\x8C\x94\x94\x4\x2KK\\\\"+
		"\x4\x2\'\'vv\b\x2\x34<\x86\x86\x93\x93\x9D\x9D\xA2\xA4\xA6\xA6\b\x2\x34"+
		"<\x86\x86\x8C\x8C\x93\x94\x9D\x9D\xA2\xA4\a\x2\x34<\x86\x86\x93\x93\x9D"+
		"\x9D\xA2\xA6\a\x2\x34<\x86\x86\x93\x93\x9D\x9D\xA2\xA4\x9A6\x2\x1A2\x3"+
		"\x2\x2\x2\x4\x1B7\x3\x2\x2\x2\x6\x1C3\x3\x2\x2\x2\b\x1C9\x3\x2\x2\x2\n"+
		"\x1CF\x3\x2\x2\x2\f\x1E5\x3\x2\x2\x2\xE\x203\x3\x2\x2\x2\x10\x220\x3\x2"+
		"\x2\x2\x12\x222\x3\x2\x2\x2\x14\x232\x3\x2\x2\x2\x16\x23C\x3\x2\x2\x2"+
		"\x18\x249\x3\x2\x2\x2\x1A\x253\x3\x2\x2\x2\x1C\x260\x3\x2\x2\x2\x1E\x27F"+
		"\x3\x2\x2\x2 \x29B\x3\x2\x2\x2\"\x2A4\x3\x2\x2\x2$\x2BA\x3\x2\x2\x2&\x2BC"+
		"\x3\x2\x2\x2(\x2C9\x3\x2\x2\x2*\x2DB\x3\x2\x2\x2,\x2F0\x3\x2\x2\x2.\x305"+
		"\x3\x2\x2\x2\x30\x307\x3\x2\x2\x2\x32\x30C\x3\x2\x2\x2\x34\x328\x3\x2"+
		"\x2\x2\x36\x32A\x3\x2\x2\x2\x38\x336\x3\x2\x2\x2:\x33D\x3\x2\x2\x2<\x33F"+
		"\x3\x2\x2\x2>\x348\x3\x2\x2\x2@\x351\x3\x2\x2\x2\x42\x371\x3\x2\x2\x2"+
		"\x44\x373\x3\x2\x2\x2\x46\x381\x3\x2\x2\x2H\x38A\x3\x2\x2\x2J\x391\x3"+
		"\x2\x2\x2L\x3A5\x3\x2\x2\x2N\x3BD\x3\x2\x2\x2P\x3C0\x3\x2\x2\x2R\x3F7"+
		"\x3\x2\x2\x2T\x3F9\x3\x2\x2\x2V\x3FB\x3\x2\x2\x2X\x41B\x3\x2\x2\x2Z\x489"+
		"\x3\x2\x2\x2\\\x493\x3\x2\x2\x2^\x497\x3\x2\x2\x2`\x49C\x3\x2\x2\x2\x62"+
		"\x49E\x3\x2\x2\x2\x64\x4B5\x3\x2\x2\x2\x66\x4B7\x3\x2\x2\x2h\x4BC\x3\x2"+
		"\x2\x2j\x4D5\x3\x2\x2\x2l\x4D7\x3\x2\x2\x2n\x4DC\x3\x2\x2\x2p\x4E0\x3"+
		"\x2\x2\x2r\x504\x3\x2\x2\x2t\x506\x3\x2\x2\x2v\x520\x3\x2\x2\x2x\x522"+
		"\x3\x2\x2\x2z\x52E\x3\x2\x2\x2|\x532\x3\x2\x2\x2~\x53E\x3\x2\x2\x2\x80"+
		"\x540\x3\x2\x2\x2\x82\x547\x3\x2\x2\x2\x84\x54B\x3\x2\x2\x2\x86\x550\x3"+
		"\x2\x2\x2\x88\x559\x3\x2\x2\x2\x8A\x55E\x3\x2\x2\x2\x8C\x561\x3\x2\x2"+
		"\x2\x8E\x566\x3\x2\x2\x2\x90\x574\x3\x2\x2\x2\x92\x57E\x3\x2\x2\x2\x94"+
		"\x582\x3\x2\x2\x2\x96\x584\x3\x2\x2\x2\x98\x58D\x3\x2\x2\x2\x9A\x596\x3"+
		"\x2\x2\x2\x9C\x5A8\x3\x2\x2\x2\x9E\x5AB\x3\x2\x2\x2\xA0\x5B4\x3\x2\x2"+
		"\x2\xA2\x5BC\x3\x2\x2\x2\xA4\x5C4\x3\x2\x2\x2\xA6\x5D6\x3\x2\x2\x2\xA8"+
		"\x5E7\x3\x2\x2\x2\xAA\x5F7\x3\x2\x2\x2\xAC\x5F9\x3\x2\x2\x2\xAE\x5FC\x3"+
		"\x2\x2\x2\xB0\x600\x3\x2\x2\x2\xB2\x605\x3\x2\x2\x2\xB4\x607\x3\x2\x2"+
		"\x2\xB6\x611\x3\x2\x2\x2\xB8\x616\x3\x2\x2\x2\xBA\x618\x3\x2\x2\x2\xBC"+
		"\x61A\x3\x2\x2\x2\xBE\x61C\x3\x2\x2\x2\xC0\x61E\x3\x2\x2\x2\xC2\x620\x3"+
		"\x2\x2\x2\xC4\x62D\x3\x2\x2\x2\xC6\x631\x3\x2\x2\x2\xC8\x633\x3\x2\x2"+
		"\x2\xCA\x638\x3\x2\x2\x2\xCC\x63D\x3\x2\x2\x2\xCE\x63F\x3\x2\x2\x2\xD0"+
		"\x64D\x3\x2\x2\x2\xD2\x65B\x3\x2\x2\x2\xD4\x65D\x3\x2\x2\x2\xD6\x669\x3"+
		"\x2\x2\x2\xD8\x675\x3\x2\x2\x2\xDA\x677\x3\x2\x2\x2\xDC\x67B\x3\x2\x2"+
		"\x2\xDE\x686\x3\x2\x2\x2\xE0\x68A\x3\x2\x2\x2\xE2\x69C\x3\x2\x2\x2\xE4"+
		"\x6A4\x3\x2\x2\x2\xE6\x6B0\x3\x2\x2\x2\xE8\x6B2\x3\x2\x2\x2\xEA\x6B4\x3"+
		"\x2\x2\x2\xEC\x6C7\x3\x2\x2\x2\xEE\x6C9\x3\x2\x2\x2\xF0\x6D0\x3\x2\x2"+
		"\x2\xF2\x6D7\x3\x2\x2\x2\xF4\x6E0\x3\x2\x2\x2\xF6\x6E9\x3\x2\x2\x2\xF8"+
		"\x6F2\x3\x2\x2\x2\xFA\x709\x3\x2\x2\x2\xFC\x719\x3\x2\x2\x2\xFE\x71B\x3"+
		"\x2\x2\x2\x100\x727\x3\x2\x2\x2\x102\x729\x3\x2\x2\x2\x104\x72B\x3\x2"+
		"\x2\x2\x106\x731\x3\x2\x2\x2\x108\x738\x3\x2\x2\x2\x10A\x73B\x3\x2\x2"+
		"\x2\x10C\x744\x3\x2\x2\x2\x10E\x74C\x3\x2\x2\x2\x110\x758\x3\x2\x2\x2"+
		"\x112\x760\x3\x2\x2\x2\x114\x76D\x3\x2\x2\x2\x116\x76F\x3\x2\x2\x2\x118"+
		"\x773\x3\x2\x2\x2\x11A\x781\x3\x2\x2\x2\x11C\x783\x3\x2\x2\x2\x11E\x788"+
		"\x3\x2\x2\x2\x120\x78D\x3\x2\x2\x2\x122\x795\x3\x2\x2\x2\x124\x7A6\x3"+
		"\x2\x2\x2\x126\x7A8\x3\x2\x2\x2\x128\x7AB\x3\x2\x2\x2\x12A\x7AE\x3\x2"+
		"\x2\x2\x12C\x7B1\x3\x2\x2\x2\x12E\x7B4\x3\x2\x2\x2\x130\x7B7\x3\x2\x2"+
		"\x2\x132\x7B9\x3\x2\x2\x2\x134\x7BB\x3\x2\x2\x2\x136\x7BD\x3\x2\x2\x2"+
		"\x138\x7BF\x3\x2\x2\x2\x13A\x7C8\x3\x2\x2\x2\x13C\x7CA\x3\x2\x2\x2\x13E"+
		"\x7DB\x3\x2\x2\x2\x140\x7DD\x3\x2\x2\x2\x142\x7DF\x3\x2\x2\x2\x144\x7E7"+
		"\x3\x2\x2\x2\x146\x7E9\x3\x2\x2\x2\x148\x7F0\x3\x2\x2\x2\x14A\x7FB\x3"+
		"\x2\x2\x2\x14C\x7FF\x3\x2\x2\x2\x14E\x803\x3\x2\x2\x2\x150\x80A\x3\x2"+
		"\x2\x2\x152\x80C\x3\x2\x2\x2\x154\x811\x3\x2\x2\x2\x156\x813\x3\x2\x2"+
		"\x2\x158\x821\x3\x2\x2\x2\x15A\x829\x3\x2\x2\x2\x15C\x82B\x3\x2\x2\x2"+
		"\x15E\x838\x3\x2\x2\x2\x160\x83A\x3\x2\x2\x2\x162\x845\x3\x2\x2\x2\x164"+
		"\x855\x3\x2\x2\x2\x166\x85C\x3\x2\x2\x2\x168\x86B\x3\x2\x2\x2\x16A\x86D"+
		"\x3\x2\x2\x2\x16C\x876\x3\x2\x2\x2\x16E\x878\x3\x2\x2\x2\x170\x887\x3"+
		"\x2\x2\x2\x172\x889\x3\x2\x2\x2\x174\x88B\x3\x2\x2\x2\x176\x891\x3\x2"+
		"\x2\x2\x178\x893\x3\x2\x2\x2\x17A\x89A\x3\x2\x2\x2\x17C\x8A5\x3\x2\x2"+
		"\x2\x17E\x8A9\x3\x2\x2\x2\x180\x8AD\x3\x2\x2\x2\x182\x8B8\x3\x2\x2\x2"+
		"\x184\x8C7\x3\x2\x2\x2\x186\x8C9\x3\x2\x2\x2\x188\x8D2\x3\x2\x2\x2\x18A"+
		"\x8D4\x3\x2\x2\x2\x18C\x8E3\x3\x2\x2\x2\x18E\x8E5\x3\x2\x2\x2\x190\x8E7"+
		"\x3\x2\x2\x2\x192\x8ED\x3\x2\x2\x2\x194\x8EF\x3\x2\x2\x2\x196\x8F6\x3"+
		"\x2\x2\x2\x198\x901\x3\x2\x2\x2\x19A\x905\x3\x2\x2\x2\x19C\x90C\x3\x2"+
		"\x2\x2\x19E\x91B\x3\x2\x2\x2\x1A0\x91D\x3\x2\x2\x2\x1A2\x1A3\aZ\x2\x2"+
		"\x1A3\x1A4\x5\xBE`\x2\x1A4\x1A5\aJ\x2\x2\x1A5\x1A8\a\x62\x2\x2\x1A6\x1A9"+
		"\aT\x2\x2\x1A7\x1A9\x5\xBE`\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A7\x3\x2\x2"+
		"\x2\x1A9\x1AF\x3\x2\x2\x2\x1AA\x1AB\x5$\x13\x2\x1AB\x1AC\a\x13\x2\x2\x1AC"+
		"\x1AD\aH\x2\x2\x1AD\x1B0\x3\x2\x2\x2\x1AE\x1B0\a\x99\x2\x2\x1AF\x1AA\x3"+
		"\x2\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x5\x12E"+
		"\x98\x2\x1B2\x1B3\a\x11\x2\x2\x1B3\x1B4\x5\x86\x44\x2\x1B4\x1B5\x5\x98"+
		"M\x2\x1B5\x1B6\x5\x88\x45\x2\x1B6\x3\x3\x2\x2\x2\x1B7\x1B8\aZ\x2\x2\x1B8"+
		"\x1B9\x5\xBE`\x2\x1B9\x1BA\aJ\x2\x2\x1BA\x1BB\a\x62\x2\x2\x1BB\x1BC\x5"+
		"\xAAV\x2\x1BC\x1BD\a\x99\x2\x2\x1BD\x1BE\x5\x12E\x98\x2\x1BE\x1BF\a\x11"+
		"\x2\x2\x1BF\x1C0\x5\x86\x44\x2\x1C0\x1C1\x5\x96L\x2\x1C1\x1C2\x5\x88\x45"+
		"\x2\x1C2\x5\x3\x2\x2\x2\x1C3\x1C4\x5\xC0\x61\x2\x1C4\x1C5\a\x99\x2\x2"+
		"\x1C5\x1C6\x5X-\x2\x1C6\x1C7\aJ\x2\x2\x1C7\x1C8\x5\x12C\x97\x2\x1C8\a"+
		"\x3\x2\x2\x2\x1C9\x1CA\x5\xC0\x61\x2\x1CA\x1CD\x5x=\x2\x1CB\x1CC\aH\x2"+
		"\x2\x1CC\x1CE\x5z>\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE"+
		"\t\x3\x2\x2\x2\x1CF\x1D0\aZ\x2\x2\x1D0\x1D1\x5\xBC_\x2\x1D1\x1D3\aJ\x2"+
		"\x2\x1D2\x1D4\a\x90\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2"+
		"\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x5\xA6T\x2\x1D6\x1D8\aM\x2\x2\x1D7\x1D9"+
		"\x5\x9CO\x2\x1D8\x1D7\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1E3\x3\x2"+
		"\x2\x2\x1DA\x1E0\a\x99\x2\x2\x1DB\x1DE\x5\xE2r\x2\x1DC\x1DD\aH\x2\x2\x1DD"+
		"\x1DF\x5\xBA^\x2\x1DE\x1DC\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1"+
		"\x3\x2\x2\x2\x1E0\x1DB\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E2\x3"+
		"\x2\x2\x2\x1E2\x1E4\ap\x2\x2\x1E3\x1DA\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2"+
		"\x2\x1E4\v\x3\x2\x2\x2\x1E5\x1E6\aZ\x2\x2\x1E6\x1E7\x5\xBE`\x2\x1E7\x1E9"+
		"\aJ\x2\x2\x1E8\x1EA\a\x90\x2\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9\x1EA\x3\x2"+
		"\x2\x2\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1EE\aT\x2\x2\x1EC\x1EE\x5\x10\t\x2"+
		"\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1EE\x201\x3\x2\x2\x2\x1EF"+
		"\x1F8\x5$\x13\x2\x1F0\x1F1\a\x13\x2\x2\x1F1\x1F2\aH\x2\x2\x1F2\x1F3\a"+
		"u\x2\x2\x1F3\x1F4\a\x11\x2\x2\x1F4\x1F5\x5\x86\x44\x2\x1F5\x1F6\x5\xD0"+
		"i\x2\x1F6\x1F7\x5\x88\x45\x2\x1F7\x1F9\x3\x2\x2\x2\x1F8\x1F0\x3\x2\x2"+
		"\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x202\x3\x2\x2\x2\x1FA\x1FB\a\x99\x2\x2"+
		"\x1FB\x1FC\au\x2\x2\x1FC\x1FD\a\x11\x2\x2\x1FD\x1FE\x5\x86\x44\x2\x1FE"+
		"\x1FF\x5\xD0i\x2\x1FF\x200\x5\x88\x45\x2\x200\x202\x3\x2\x2\x2\x201\x1EF"+
		"\x3\x2\x2\x2\x201\x1FA\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\r\x3\x2"+
		"\x2\x2\x203\x204\aZ\x2\x2\x204\x205\x5\xBE`\x2\x205\x206\aJ\x2\x2\x206"+
		"\x219\a\x8E\x2\x2\x207\x210\x5$\x13\x2\x208\x209\a\x13\x2\x2\x209\x20A"+
		"\aH\x2\x2\x20A\x20B\au\x2\x2\x20B\x20C\a\x11\x2\x2\x20C\x20D\x5\x86\x44"+
		"\x2\x20D\x20E\x5\xD0i\x2\x20E\x20F\x5\x88\x45\x2\x20F\x211\x3\x2\x2\x2"+
		"\x210\x208\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x21A\x3\x2\x2\x2\x212"+
		"\x213\a\x99\x2\x2\x213\x214\au\x2\x2\x214\x215\a\x11\x2\x2\x215\x216\x5"+
		"\x86\x44\x2\x216\x217\x5\xD0i\x2\x217\x218\x5\x88\x45\x2\x218\x21A\x3"+
		"\x2\x2\x2\x219\x207\x3\x2\x2\x2\x219\x212\x3\x2\x2\x2\x219\x21A\x3\x2"+
		"\x2\x2\x21A\xF\x3\x2\x2\x2\x21B\x221\x5\xB4[\x2\x21C\x21D\x5\xB4[\x2\x21D"+
		"\x21E\aH\x2\x2\x21E\x21F\x5\xBE`\x2\x21F\x221\x3\x2\x2\x2\x220\x21B\x3"+
		"\x2\x2\x2\x220\x21C\x3\x2\x2\x2\x221\x11\x3\x2\x2\x2\x222\x223\aZ\x2\x2"+
		"\x223\x224\x5\x124\x93\x2\x224\x225\aJ\x2\x2\x225\x226\a\x80\x2\x2\x226"+
		"\x227\a\x87\x2\x2\x227\x22A\x5\xC6\x64\x2\x228\x229\a\x8A\x2\x2\x229\x22B"+
		"\x5\xA6T\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\x3\x2"+
		"\x2\x2\x22C\x22D\a^\x2\x2\x22D\x22E\a\x11\x2\x2\x22E\x22F\x5\x86\x44\x2"+
		"\x22F\x230\x5\xF2z\x2\x230\x231\x5\x88\x45\x2\x231\x13\x3\x2\x2\x2\x232"+
		"\x233\aZ\x2\x2\x233\x234\x5\xBA^\x2\x234\x235\aJ\x2\x2\x235\x236\a\x8D"+
		"\x2\x2\x236\x237\a^\x2\x2\x237\x238\a\x11\x2\x2\x238\x239\x5\x86\x44\x2"+
		"\x239\x23A\x5\xF2z\x2\x23A\x23B\x5\x88\x45\x2\x23B\x15\x3\x2\x2\x2\x23C"+
		"\x23D\aZ\x2\x2\x23D\x23E\x5\xBA^\x2\x23E\x240\aJ\x2\x2\x23F\x241\ax\x2"+
		"\x2\x240\x23F\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2"+
		"\x242\x243\a\x8D\x2\x2\x243\x244\a^\x2\x2\x244\x245\a\x11\x2\x2\x245\x246"+
		"\x5\x86\x44\x2\x246\x247\x5\xEAv\x2\x247\x248\x5\x88\x45\x2\x248\x17\x3"+
		"\x2\x2\x2\x249\x24A\aZ\x2\x2\x24A\x24B\x5\xBA^\x2\x24B\x24C\aJ\x2\x2\x24C"+
		"\x24D\am\x2\x2\x24D\x24E\a^\x2\x2\x24E\x24F\a\x11\x2\x2\x24F\x250\x5\x86"+
		"\x44\x2\x250\x251\x5\xF2z\x2\x251\x252\x5\x88\x45\x2\x252\x19\x3\x2\x2"+
		"\x2\x253\x254\aZ\x2\x2\x254\x255\x5\xBA^\x2\x255\x257\aJ\x2\x2\x256\x258"+
		"\ax\x2\x2\x257\x256\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\x3\x2"+
		"\x2\x2\x259\x25A\am\x2\x2\x25A\x25B\a^\x2\x2\x25B\x25C\a\x11\x2\x2\x25C"+
		"\x25D\x5\x86\x44\x2\x25D\x25E\x5\xEAv\x2\x25E\x25F\x5\x88\x45\x2\x25F"+
		"\x1B\x3\x2\x2\x2\x260\x261\aZ\x2\x2\x261\x262\x5\xBE`\x2\x262\x264\aJ"+
		"\x2\x2\x263\x265\a\x90\x2\x2\x264\x263\x3\x2\x2\x2\x264\x265\x3\x2\x2"+
		"\x2\x265\x266\x3\x2\x2\x2\x266\x267\ax\x2\x2\x267\x26F\aT\x2\x2\x268\x269"+
		"\x5$\x13\x2\x269\x26A\a\x13\x2\x2\x26A\x26B\aH\x2\x2\x26B\x26C\aO\x2\x2"+
		"\x26C\x270\x3\x2\x2\x2\x26D\x26E\a\x99\x2\x2\x26E\x270\aO\x2\x2\x26F\x268"+
		"\x3\x2\x2\x2\x26F\x26D\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x272\a\x11"+
		"\x2\x2\x272\x273\x5\x86\x44\x2\x273\x274\x5 \x11\x2\x274\x27D\x5\x88\x45"+
		"\x2\x275\x276\x5\x84\x43\x2\x276\x277\aH\x2\x2\x277\x278\au\x2\x2\x278"+
		"\x279\a\x11\x2\x2\x279\x27A\x5\x86\x44\x2\x27A\x27B\x5\xD4k\x2\x27B\x27C"+
		"\x5\x88\x45\x2\x27C\x27E\x3\x2\x2\x2\x27D\x275\x3\x2\x2\x2\x27D\x27E\x3"+
		"\x2\x2\x2\x27E\x1D\x3\x2\x2\x2\x27F\x280\aZ\x2\x2\x280\x281\x5\xBE`\x2"+
		"\x281\x282\aJ\x2\x2\x282\x283\ax\x2\x2\x283\x28B\a\x88\x2\x2\x284\x285"+
		"\x5$\x13\x2\x285\x286\a\x13\x2\x2\x286\x287\aH\x2\x2\x287\x288\aO\x2\x2"+
		"\x288\x28C\x3\x2\x2\x2\x289\x28A\a\x99\x2\x2\x28A\x28C\aO\x2\x2\x28B\x284"+
		"\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2\x28D\x28E\a\x11"+
		"\x2\x2\x28E\x28F\x5\x86\x44\x2\x28F\x290\x5 \x11\x2\x290\x299\x5\x88\x45"+
		"\x2\x291\x292\x5\x84\x43\x2\x292\x293\aH\x2\x2\x293\x294\au\x2\x2\x294"+
		"\x295\a\x11\x2\x2\x295\x296\x5\x86\x44\x2\x296\x297\x5\xD4k\x2\x297\x298"+
		"\x5\x88\x45\x2\x298\x29A\x3\x2\x2\x2\x299\x291\x3\x2\x2\x2\x299\x29A\x3"+
		"\x2\x2\x2\x29A\x1F\x3\x2\x2\x2\x29B\x29C\aZ\x2\x2\x29C\x29D\aT\x2\x2\x29D"+
		"\x29E\aO\x2\x2\x29E\x29F\aJ\x2\x2\x29F\x2A0\a\x11\x2\x2\x2A0\x2A1\x5\x86"+
		"\x44\x2\x2A1\x2A2\x5\"\x12\x2\x2A2\x2A3\x5\x88\x45\x2\x2A3!\x3\x2\x2\x2"+
		"\x2A4\x2A5\b\x12\x1\x2\x2A5\x2A6\x5\xD8m\x2\x2A6\x2AD\x3\x2\x2\x2\x2A7"+
		"\x2A8\f\x3\x2\x2\x2A8\x2A9\x5\x84\x43\x2\x2A9\x2AA\x5\xD8m\x2\x2AA\x2AC"+
		"\x3\x2\x2\x2\x2AB\x2A7\x3\x2\x2\x2\x2AC\x2AF\x3\x2\x2\x2\x2AD\x2AB\x3"+
		"\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE#\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2"+
		"\x2B0\x2B1\a\x99\x2\x2\x2B1\x2B2\aM\x2\x2\x2B2\x2BB\x5\xBC_\x2\x2B3\x2B4"+
		"\a\x99\x2\x2\x2B4\x2B5\aN\x2\x2\x2B5\x2B8\x5\xE4s\x2\x2B6\x2B7\aH\x2\x2"+
		"\x2B7\x2B9\x5\xBC_\x2\x2B8\x2B6\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9"+
		"\x2BB\x3\x2\x2\x2\x2BA\x2B0\x3\x2\x2\x2\x2BA\x2B3\x3\x2\x2\x2\x2BB%\x3"+
		"\x2\x2\x2\x2BC\x2BD\aZ\x2\x2\x2BD\x2BE\x5\xB6\\\x2\x2BE\x2BF\aJ\x2\x2"+
		"\x2BF\x2C0\a\x45\x2\x2\x2C0\x2C3\at\x2\x2\x2C1\x2C2\a\x87\x2\x2\x2C2\x2C4"+
		"\x5\x30\x19\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C7\x3"+
		"\x2\x2\x2\x2C5\x2C6\a\x8A\x2\x2\x2C6\x2C8\x5\xA6T\x2\x2C7\x2C5\x3\x2\x2"+
		"\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\'\x3\x2\x2\x2\x2C9\x2CA\aZ\x2\x2\x2CA\x2CB"+
		"\x5\xB6\\\x2\x2CB\x2CC\aJ\x2\x2\x2CC\x2CF\at\x2\x2\x2CD\x2CE\a\x87\x2"+
		"\x2\x2CE\x2D0\x5\x30\x19\x2\x2CF\x2CD\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2"+
		"\x2D0\x2D3\x3\x2\x2\x2\x2D1\x2D2\a\x8A\x2\x2\x2D2\x2D4\x5\xA6T\x2\x2D3"+
		"\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6"+
		"\a^\x2\x2\x2D6\x2D7\a\x11\x2\x2\x2D7\x2D8\x5\x86\x44\x2\x2D8\x2D9\x5\xF2"+
		"z\x2\x2D9\x2DA\x5\x88\x45\x2\x2DA)\x3\x2\x2\x2\x2DB\x2DC\aZ\x2\x2\x2DC"+
		"\x2DD\x5\xB6\\\x2\x2DD\x2DF\aJ\x2\x2\x2DE\x2E0\ax\x2\x2\x2DF\x2DE\x3\x2"+
		"\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E4\at\x2\x2"+
		"\x2E2\x2E3\a\x87\x2\x2\x2E3\x2E5\x5\x30\x19\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4"+
		"\x2E5\x3\x2\x2\x2\x2E5\x2E8\x3\x2\x2\x2\x2E6\x2E7\a\x8A\x2\x2\x2E7\x2E9"+
		"\x5\xCCg\x2\x2E8\x2E6\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EA\x3\x2"+
		"\x2\x2\x2EA\x2EB\a^\x2\x2\x2EB\x2EC\a\x11\x2\x2\x2EC\x2ED\x5\x86\x44\x2"+
		"\x2ED\x2EE\x5\xEAv\x2\x2EE\x2EF\x5\x88\x45\x2\x2EF+\x3\x2\x2\x2\x2F0\x2F1"+
		"\aZ\x2\x2\x2F1\x2F2\a\xA7\x2\x2\x2F2\x2F3\aJ\x2\x2\x2F3\x2F4\a\x93\x2"+
		"\x2\x2F4\x2F5\at\x2\x2\x2F5\x2F6\a^\x2\x2\x2F6\x2F7\a\x11\x2\x2\x2F7\x2F8"+
		"\x5\x86\x44\x2\x2F8\x2F9\x5\xF2z\x2\x2F9\x2FA\x5\x88\x45\x2\x2FA\x2FB"+
		"\x5\x84\x43\x2\x2FB\x2FC\aH\x2\x2\x2FC\x303\a\x98\x2\x2\x2FD\x2FE\a\x11"+
		"\x2\x2\x2FE\x2FF\x5\x86\x44\x2\x2FF\x300\x5\xF4{\x2\x300\x301\x5\x88\x45"+
		"\x2\x301\x304\x3\x2\x2\x2\x302\x304\x5\xC0\x61\x2\x303\x2FD\x3\x2\x2\x2"+
		"\x303\x302\x3\x2\x2\x2\x304-\x3\x2\x2\x2\x305\x306\x5X-\x2\x306/\x3\x2"+
		"\x2\x2\x307\x30A\x5\xC2\x62\x2\x308\x309\aH\x2\x2\x309\x30B\x5\xC4\x63"+
		"\x2\x30A\x308\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x31\x3\x2\x2\x2\x30C"+
		"\x30D\x5\xCCg\x2\x30D\x30F\x5\xBA^\x2\x30E\x310\x5$\x13\x2\x30F\x30E\x3"+
		"\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x313\x3\x2\x2\x2\x311\x312\a-\x2"+
		"\x2\x312\x314\x5\x106\x84\x2\x313\x311\x3\x2\x2\x2\x313\x314\x3\x2\x2"+
		"\x2\x314\x33\x3\x2\x2\x2\x315\x329\x5|?\x2\x316\x329\x5:\x1E\x2\x317\x329"+
		"\x5\x80\x41\x2\x318\x329\x5\x38\x1D\x2\x319\x329\x5\x36\x1C\x2\x31A\x329"+
		"\x5T+\x2\x31B\x329\x5V,\x2\x31C\x329\x5J&\x2\x31D\x329\x5@!\x2\x31E\x329"+
		"\x5\x44#\x2\x31F\x329\x5H%\x2\x320\x329\x5\x46$\x2\x321\x329\x5N(\x2\x322"+
		"\x329\x5P)\x2\x323\x329\x5l\x37\x2\x324\x329\x5<\x1F\x2\x325\x329\x5>"+
		" \x2\x326\x329\x5(\x15\x2\x327\x329\x5\xE8u\x2\x328\x315\x3\x2\x2\x2\x328"+
		"\x316\x3\x2\x2\x2\x328\x317\x3\x2\x2\x2\x328\x318\x3\x2\x2\x2\x328\x319"+
		"\x3\x2\x2\x2\x328\x31A\x3\x2\x2\x2\x328\x31B\x3\x2\x2\x2\x328\x31C\x3"+
		"\x2\x2\x2\x328\x31D\x3\x2\x2\x2\x328\x31E\x3\x2\x2\x2\x328\x31F\x3\x2"+
		"\x2\x2\x328\x320\x3\x2\x2\x2\x328\x321\x3\x2\x2\x2\x328\x322\x3\x2\x2"+
		"\x2\x328\x323\x3\x2\x2\x2\x328\x324\x3\x2\x2\x2\x328\x325\x3\x2\x2\x2"+
		"\x328\x326\x3\x2\x2\x2\x328\x327\x3\x2\x2\x2\x329\x35\x3\x2\x2\x2\x32A"+
		"\x32B\aj\x2\x2\x32B\x37\x3\x2\x2\x2\x32C\x32D\a[\x2\x2\x32D\x337\x5\xA2"+
		"R\x2\x32E\x32F\a\x91\x2\x2\x32F\x337\x5\xA2R\x2\x330\x331\a[\x2\x2\x331"+
		"\x332\x5\xA2R\x2\x332\x333\aH\x2\x2\x333\x334\a\x91\x2\x2\x334\x335\x5"+
		"\xA2R\x2\x335\x337\x3\x2\x2\x2\x336\x32C\x3\x2\x2\x2\x336\x32E\x3\x2\x2"+
		"\x2\x336\x330\x3\x2\x2\x2\x337\x39\x3\x2\x2\x2\x338\x33A\x5Z.\x2\x339"+
		"\x33B\x5v<\x2\x33A\x339\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33E\x3"+
		"\x2\x2\x2\x33C\x33E\x5^\x30\x2\x33D\x338\x3\x2\x2\x2\x33D\x33C\x3\x2\x2"+
		"\x2\x33E;\x3\x2\x2\x2\x33F\x340\a\x99\x2\x2\x340\x341\x5\x116\x8C\x2\x341"+
		"\x342\a\x13\x2\x2\x342\x343\a]\x2\x2\x343\x344\a\x11\x2\x2\x344\x345\x5"+
		"\x86\x44\x2\x345\x346\x5\xF2z\x2\x346\x347\x5\x88\x45\x2\x347=\x3\x2\x2"+
		"\x2\x348\x349\a\x99\x2\x2\x349\x34A\x5\xBE`\x2\x34A\x34B\a\x13\x2\x2\x34B"+
		"\x34C\a]\x2\x2\x34C\x34D\a\x11\x2\x2\x34D\x34E\x5\x86\x44\x2\x34E\x34F"+
		"\x5\xF2z\x2\x34F\x350\x5\x88\x45\x2\x350?\x3\x2\x2\x2\x351\x352\a\x92"+
		"\x2\x2\x352\x353\a}\x2\x2\x353\x354\x5X-\x2\x354\x355\a\x11\x2\x2\x355"+
		"\x356\x5\x86\x44\x2\x356\x35E\x5\xF6|\x2\x357\x358\x5\x84\x43\x2\x358"+
		"\x359\a\x83\x2\x2\x359\x35A\a\x11\x2\x2\x35A\x35B\x5\x86\x44\x2\x35B\x35C"+
		"\x5\xF2z\x2\x35C\x35D\x5\x88\x45\x2\x35D\x35F\x3\x2\x2\x2\x35E\x357\x3"+
		"\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x361\x5\x88"+
		"\x45\x2\x361\x41\x3\x2\x2\x2\x362\x363\a\x9A\x2\x2\x363\x364\x5\xFC\x7F"+
		"\x2\x364\x365\a\x11\x2\x2\x365\x366\x5\x86\x44\x2\x366\x367\x5\xF2z\x2"+
		"\x367\x368\x5\x88\x45\x2\x368\x372\x3\x2\x2\x2\x369\x36A\a\x9A\x2\x2\x36A"+
		"\x36B\ao\x2\x2\x36B\x36C\x5\xFA~\x2\x36C\x36D\a\x11\x2\x2\x36D\x36E\x5"+
		"\x86\x44\x2\x36E\x36F\x5\xF2z\x2\x36F\x370\x5\x88\x45\x2\x370\x372\x3"+
		"\x2\x2\x2\x371\x362\x3\x2\x2\x2\x371\x369\x3\x2\x2\x2\x372\x43\x3\x2\x2"+
		"\x2\x373\x374\ak\x2\x2\x374\x375\a_\x2\x2\x375\x378\x5\xBA^\x2\x376\x377"+
		"\a\x13\x2\x2\x377\x379\x5\xBA^\x2\x378\x376\x3\x2\x2\x2\x378\x379\x3\x2"+
		"\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37B\ao\x2\x2\x37B\x37C\x5X-\x2\x37C"+
		"\x37D\a\x11\x2\x2\x37D\x37E\x5\x86\x44\x2\x37E\x37F\x5\xF2z\x2\x37F\x380"+
		"\x5\x88\x45\x2\x380\x45\x3\x2\x2\x2\x381\x382\a]\x2\x2\x382\x383\a\x11"+
		"\x2\x2\x383\x384\x5\x86\x44\x2\x384\x385\x5\xF2z\x2\x385\x386\x5\x88\x45"+
		"\x2\x386\x387\x5\x84\x43\x2\x387\x388\a\x9C\x2\x2\x388\x389\x5X-\x2\x389"+
		"G\x3\x2\x2\x2\x38A\x38B\a\x9C\x2\x2\x38B\x38C\x5X-\x2\x38C\x38D\a\x11"+
		"\x2\x2\x38D\x38E\x5\x86\x44\x2\x38E\x38F\x5\xF2z\x2\x38F\x390\x5\x88\x45"+
		"\x2\x390I\x3\x2\x2\x2\x391\x392\an\x2\x2\x392\x393\x5X-\x2\x393\x394\a"+
		"\x11\x2\x2\x394\x395\x5\x86\x44\x2\x395\x396\x5\xF2z\x2\x396\x39A\x5\x88"+
		"\x45\x2\x397\x398\x5\x84\x43\x2\x398\x399\x5L\'\x2\x399\x39B\x3\x2\x2"+
		"\x2\x39A\x397\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x3A3\x3\x2\x2\x2"+
		"\x39C\x39D\x5\x84\x43\x2\x39D\x39E\a`\x2\x2\x39E\x39F\a\x11\x2\x2\x39F"+
		"\x3A0\x5\x86\x44\x2\x3A0\x3A1\x5\xF2z\x2\x3A1\x3A2\x5\x88\x45\x2\x3A2"+
		"\x3A4\x3\x2\x2\x2\x3A3\x39C\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4K\x3"+
		"\x2\x2\x2\x3A5\x3A6\b\'\x1\x2\x3A6\x3A7\a`\x2\x2\x3A7\x3A8\an\x2\x2\x3A8"+
		"\x3A9\x5X-\x2\x3A9\x3AA\a\x11\x2\x2\x3AA\x3AB\x5\x86\x44\x2\x3AB\x3AC"+
		"\x5\xF2z\x2\x3AC\x3AD\x5\x88\x45\x2\x3AD\x3BA\x3\x2\x2\x2\x3AE\x3AF\f"+
		"\x3\x2\x2\x3AF\x3B0\x5\x84\x43\x2\x3B0\x3B1\a`\x2\x2\x3B1\x3B2\an\x2\x2"+
		"\x3B2\x3B3\x5X-\x2\x3B3\x3B4\a\x11\x2\x2\x3B4\x3B5\x5\x86\x44\x2\x3B5"+
		"\x3B6\x5\xF2z\x2\x3B6\x3B7\x5\x88\x45\x2\x3B7\x3B9\x3\x2\x2\x2\x3B8\x3AE"+
		"\x3\x2\x2\x2\x3B9\x3BC\x3\x2\x2\x2\x3BA\x3B8\x3\x2\x2\x2\x3BA\x3BB\x3"+
		"\x2\x2\x2\x3BBM\x3\x2\x2\x2\x3BC\x3BA\x3\x2\x2\x2\x3BD\x3BE\a\x85\x2\x2"+
		"\x3BE\x3BF\x5X-\x2\x3BFO\x3\x2\x2\x2\x3C0\x3C1\a\x92\x2\x2\x3C1\x3C2\a"+
		"}\x2\x2\x3C2\x3C3\x5\xBA^\x2\x3C3\x3C4\a^\x2\x2\x3C4\x3C5\a\x11\x2\x2"+
		"\x3C5\x3C6\x5\x86\x44\x2\x3C6\x3C7\x5\xF2z\x2\x3C7\x3C8\x5\x88\x45\x2"+
		"\x3C8\x3CA\x5\x82\x42\x2\x3C9\x3CB\x5\xF8}\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA"+
		"\x3CB\x3\x2\x2\x2\x3CB\x3D7\x3\x2\x2\x2\x3CC\x3D0\a\x83\x2\x2\x3CD\x3CE"+
		"\a\x9A\x2\x2\x3CE\x3D0\aI\x2\x2\x3CF\x3CC\x3\x2\x2\x2\x3CF\x3CD\x3\x2"+
		"\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x3D2\a\x11\x2\x2\x3D2\x3D3\x5\x86\x44"+
		"\x2\x3D3\x3D4\x5\xF2z\x2\x3D4\x3D5\x5\x88\x45\x2\x3D5\x3D6\x5\x82\x42"+
		"\x2\x3D6\x3D8\x3\x2\x2\x2\x3D7\x3CF\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2"+
		"\x3D8\x3E0\x3\x2\x2\x2\x3D9\x3DA\aG\x2\x2\x3DA\x3DB\a\x11\x2\x2\x3DB\x3DC"+
		"\x5\x86\x44\x2\x3DC\x3DD\x5\xF2z\x2\x3DD\x3DE\x5\x88\x45\x2\x3DE\x3DF"+
		"\x5\x82\x42\x2\x3DF\x3E1\x3\x2\x2\x2\x3E0\x3D9\x3\x2\x2\x2\x3E0\x3E1\x3"+
		"\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E3\x5\x82\x42\x2\x3E3Q\x3\x2\x2"+
		"\x2\x3E4\x3E5\a\x9A\x2\x2\x3E5\x3E6\x5\xC0\x61\x2\x3E6\x3E7\a\x11\x2\x2"+
		"\x3E7\x3E8\x5\x86\x44\x2\x3E8\x3E9\x5\xF2z\x2\x3E9\x3EA\x5\x88\x45\x2"+
		"\x3EA\x3EB\x5\x82\x42\x2\x3EB\x3F8\x3\x2\x2\x2\x3EC\x3ED\a\x9A\x2\x2\x3ED"+
		"\x3EE\ao\x2\x2\x3EE\x3EF\a\x18\x2\x2\x3EF\x3F0\x5\x9AN\x2\x3F0\x3F1\a"+
		"\x19\x2\x2\x3F1\x3F2\a\x11\x2\x2\x3F2\x3F3\x5\x86\x44\x2\x3F3\x3F4\x5"+
		"\xF2z\x2\x3F4\x3F5\x5\x88\x45\x2\x3F5\x3F6\x5\x82\x42\x2\x3F6\x3F8\x3"+
		"\x2\x2\x2\x3F7\x3E4\x3\x2\x2\x2\x3F7\x3EC\x3\x2\x2\x2\x3F8S\x3\x2\x2\x2"+
		"\x3F9\x3FA\aP\x2\x2\x3FAU\x3\x2\x2\x2\x3FB\x3FD\a\x89\x2\x2\x3FC\x3FE"+
		"\x5X-\x2\x3FD\x3FC\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FEW\x3\x2\x2\x2"+
		"\x3FF\x400\b-\x1\x2\x400\x401\a#\x2\x2\x401\x41C\x5X-,\x402\x403\az\x2"+
		"\x2\x403\x41C\x5X-+\x404\x405\a>\x2\x2\x405\x406\a\x11\x2\x2\x406\x41C"+
		"\x5X-\x10\x407\x41C\x5\x62\x32\x2\x408\x41C\x5Z.\x2\x409\x40A\x5Z.\x2"+
		"\x40A\x40B\x5v<\x2\x40B\x41C\x3\x2\x2\x2\x40C\x40D\a\x64\x2\x2\x40D\x40E"+
		"\a\x11\x2\x2\x40E\x41C\x5\xBA^\x2\x40F\x410\a=\x2\x2\x410\x411\a\x11\x2"+
		"\x2\x411\x41C\x5\xB6\\\x2\x412\x41C\x5h\x35\x2\x413\x41C\x5\x66\x34\x2"+
		"\x414\x41C\x5j\x36\x2\x415\x41C\x5r:\x2\x416\x41C\x5\x11C\x8F\x2\x417"+
		"\x41C\x5\x11E\x90\x2\x418\x41C\x5t;\x2\x419\x41C\x5n\x38\x2\x41A\x41C"+
		"\x5^\x30\x2\x41B\x3FF\x3\x2\x2\x2\x41B\x402\x3\x2\x2\x2\x41B\x404\x3\x2"+
		"\x2\x2\x41B\x407\x3\x2\x2\x2\x41B\x408\x3\x2\x2\x2\x41B\x409\x3\x2\x2"+
		"\x2\x41B\x40C\x3\x2\x2\x2\x41B\x40F\x3\x2\x2\x2\x41B\x412\x3\x2\x2\x2"+
		"\x41B\x413\x3\x2\x2\x2\x41B\x414\x3\x2\x2\x2\x41B\x415\x3\x2\x2\x2\x41B"+
		"\x416\x3\x2\x2\x2\x41B\x417\x3\x2\x2\x2\x41B\x418\x3\x2\x2\x2\x41B\x419"+
		"\x3\x2\x2\x2\x41B\x41A\x3\x2\x2\x2\x41C\x486\x3\x2\x2\x2\x41D\x41E\f*"+
		"\x2\x2\x41E\x41F\x5\x132\x9A\x2\x41F\x420\x5X-+\x420\x485\x3\x2\x2\x2"+
		"\x421\x422\f)\x2\x2\x422\x423\x5\x134\x9B\x2\x423\x424\x5X-*\x424\x485"+
		"\x3\x2\x2\x2\x425\x426\f(\x2\x2\x426\x427\x5\x138\x9D\x2\x427\x428\x5"+
		"X-)\x428\x485\x3\x2\x2\x2\x429\x42A\f\'\x2\x2\x42A\x42B\x5\x136\x9C\x2"+
		"\x42B\x42C\x5X-(\x42C\x485\x3\x2\x2\x2\x42D\x42E\f&\x2\x2\x42E\x42F\t"+
		"\x2\x2\x2\x42F\x485\x5X-\'\x430\x431\f%\x2\x2\x431\x432\a*\x2\x2\x432"+
		"\x485\x5X-&\x433\x434\f$\x2\x2\x434\x435\a+\x2\x2\x435\x485\x5X-%\x436"+
		"\x437\f#\x2\x2\x437\x438\a(\x2\x2\x438\x485\x5X-$\x439\x43A\f\"\x2\x2"+
		"\x43A\x43B\a)\x2\x2\x43B\x485\x5X-#\x43C\x43D\f\x1F\x2\x2\x43D\x43E\a"+
		"-\x2\x2\x43E\x485\x5X- \x43F\x440\f\x1E\x2\x2\x440\x441\a,\x2\x2\x441"+
		"\x485\x5X-\x1F\x442\x443\f\x1D\x2\x2\x443\x444\a\x31\x2\x2\x444\x485\x5"+
		"X-\x1E\x445\x446\f\x1C\x2\x2\x446\x447\a\x81\x2\x2\x447\x485\x5X-\x1D"+
		"\x448\x449\f\x1B\x2\x2\x449\x44A\aH\x2\x2\x44A\x485\x5X-\x1C\x44B\x44C"+
		"\f\x1A\x2\x2\x44C\x44D\an\x2\x2\x44D\x44E\x5X-\x2\x44E\x44F\a`\x2\x2\x44F"+
		"\x450\x5X-\x1B\x450\x485\x3\x2\x2\x2\x451\x452\f\x18\x2\x2\x452\x453\a"+
		"o\x2\x2\x453\x485\x5X-\x19\x454\x455\f\x17\x2\x2\x455\x456\aW\x2\x2\x456"+
		"\x485\x5X-\x18\x457\x458\f\x16\x2\x2\x458\x459\aW\x2\x2\x459\x45A\a\x46"+
		"\x2\x2\x45A\x485\x5X-\x17\x45B\x45C\f\x15\x2\x2\x45C\x45D\aW\x2\x2\x45D"+
		"\x45E\aI\x2\x2\x45E\x485\x5X-\x16\x45F\x460\f\x14\x2\x2\x460\x461\az\x2"+
		"\x2\x461\x462\ao\x2\x2\x462\x485\x5X-\x15\x463\x464\f\x13\x2\x2\x464\x465"+
		"\az\x2\x2\x465\x466\aW\x2\x2\x466\x485\x5X-\x14\x467\x468\f\x12\x2\x2"+
		"\x468\x469\az\x2\x2\x469\x46A\aW\x2\x2\x46A\x46B\a\x46\x2\x2\x46B\x485"+
		"\x5X-\x13\x46C\x46D\f\x11\x2\x2\x46D\x46E\az\x2\x2\x46E\x46F\aW\x2\x2"+
		"\x46F\x470\aI\x2\x2\x470\x485\x5X-\x12\x471\x472\f\x3\x2\x2\x472\x473"+
		"\ak\x2\x2\x473\x474\a_\x2\x2\x474\x475\x5\xBA^\x2\x475\x476\ao\x2\x2\x476"+
		"\x477\x5X-\x4\x477\x485\x3\x2\x2\x2\x478\x479\f!\x2\x2\x479\x47A\ar\x2"+
		"\x2\x47A\x47B\az\x2\x2\x47B\x485\x5\x11A\x8E\x2\x47C\x47D\f \x2\x2\x47D"+
		"\x47E\ar\x2\x2\x47E\x485\x5\x11A\x8E\x2\x47F\x480\f\x19\x2\x2\x480\x481"+
		"\aJ\x2\x2\x481\x485\x5\xCCg\x2\x482\x483\f\n\x2\x2\x483\x485\x5p\x39\x2"+
		"\x484\x41D\x3\x2\x2\x2\x484\x421\x3\x2\x2\x2\x484\x425\x3\x2\x2\x2\x484"+
		"\x429\x3\x2\x2\x2\x484\x42D\x3\x2\x2\x2\x484\x430\x3\x2\x2\x2\x484\x433"+
		"\x3\x2\x2\x2\x484\x436\x3\x2\x2\x2\x484\x439\x3\x2\x2\x2\x484\x43C\x3"+
		"\x2\x2\x2\x484\x43F\x3\x2\x2\x2\x484\x442\x3\x2\x2\x2\x484\x445\x3\x2"+
		"\x2\x2\x484\x448\x3\x2\x2\x2\x484\x44B\x3\x2\x2\x2\x484\x451\x3\x2\x2"+
		"\x2\x484\x454\x3\x2\x2\x2\x484\x457\x3\x2\x2\x2\x484\x45B\x3\x2\x2\x2"+
		"\x484\x45F\x3\x2\x2\x2\x484\x463\x3\x2\x2\x2\x484\x467\x3\x2\x2\x2\x484"+
		"\x46C\x3\x2\x2\x2\x484\x471\x3\x2\x2\x2\x484\x478\x3\x2\x2\x2\x484\x47C"+
		"\x3\x2\x2\x2\x484\x47F\x3\x2\x2\x2\x484\x482\x3\x2\x2\x2\x485\x488\x3"+
		"\x2\x2\x2\x486\x484\x3\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487Y\x3\x2\x2\x2"+
		"\x488\x486\x3\x2\x2\x2\x489\x48A\b.\x1\x2\x48A\x48B\x5\xB8]\x2\x48B\x490"+
		"\x3\x2\x2\x2\x48C\x48D\f\x3\x2\x2\x48D\x48F\x5\\/\x2\x48E\x48C\x3\x2\x2"+
		"\x2\x48F\x492\x3\x2\x2\x2\x490\x48E\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2"+
		"\x491[\x3\x2\x2\x2\x492\x490\x3\x2\x2\x2\x493\x494\x6/!\x3\x494\x495\a"+
		"\x15\x2\x2\x495\x496\x5\xB8]\x2\x496]\x3\x2\x2\x2\x497\x498\aq\x2\x2\x498"+
		"\x499\a\x11\x2\x2\x499\x49A\x5\xBA^\x2\x49A\x49B\x5`\x31\x2\x49B_\x3\x2"+
		"\x2\x2\x49C\x49D\x6\x31\"\x3\x49D\x61\x3\x2\x2\x2\x49E\x49F\b\x32\x1\x2"+
		"\x49F\x4A0\x5\x100\x81\x2\x4A0\x4A5\x3\x2\x2\x2\x4A1\x4A2\f\x3\x2\x2\x4A2"+
		"\x4A4\x5\x64\x33\x2\x4A3\x4A1\x3\x2\x2\x2\x4A4\x4A7\x3\x2\x2\x2\x4A5\x4A3"+
		"\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x63\x3\x2\x2\x2\x4A7\x4A5\x3\x2"+
		"\x2\x2\x4A8\x4A9\x6\x33$\x3\x4A9\x4AA\a\x15\x2\x2\x4AA\x4B6\x5\xBA^\x2"+
		"\x4AB\x4AC\x6\x33%\x3\x4AC\x4AD\a\x18\x2\x2\x4AD\x4AE\x5\x114\x8B\x2\x4AE"+
		"\x4AF\a\x19\x2\x2\x4AF\x4B6\x3\x2\x2\x2\x4B0\x4B1\x6\x33&\x3\x4B1\x4B2"+
		"\a\x18\x2\x2\x4B2\x4B3\x5X-\x2\x4B3\x4B4\a\x19\x2\x2\x4B4\x4B6\x3\x2\x2"+
		"\x2\x4B5\x4A8\x3\x2\x2\x2\x4B5\x4AB\x3\x2\x2\x2\x4B5\x4B0\x3\x2\x2\x2"+
		"\x4B6\x65\x3\x2\x2\x2\x4B7\x4BA\a?\x2\x2\x4B8\x4B9\al\x2\x2\x4B9\x4BB"+
		"\x5X-\x2\x4BA\x4B8\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BBg\x3\x2\x2\x2"+
		"\x4BC\x4BD\a@\x2\x2\x4BD\x4BE\al\x2\x2\x4BE\x4BF\x5X-\x2\x4BFi\x3\x2\x2"+
		"\x2\x4C0\x4C1\x5\xAEX\x2\x4C1\x4C2\al\x2\x2\x4C2\x4CB\x5X-\x2\x4C3\x4C5"+
		"\a\x13\x2\x2\x4C4\x4C3\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C6\x3"+
		"\x2\x2\x2\x4C6\x4C9\x5x=\x2\x4C7\x4C8\aH\x2\x2\x4C8\x4CA\x5z>\x2\x4C9"+
		"\x4C7\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CC\x3\x2\x2\x2\x4CB\x4C4"+
		"\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4D6\x3\x2\x2\x2\x4CD\x4D3\x5"+
		"\xAEX\x2\x4CE\x4D1\x5x=\x2\x4CF\x4D0\aH\x2\x2\x4D0\x4D2\x5z>\x2\x4D1\x4CF"+
		"\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D4\x3\x2\x2\x2\x4D3\x4CE\x3"+
		"\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4D6\x3\x2\x2\x2\x4D5\x4C0\x3\x2"+
		"\x2\x2\x4D5\x4CD\x3\x2\x2\x2\x4D6k\x3\x2\x2\x2\x4D7\x4D8\a\x9D\x2\x2\x4D8"+
		"\x4D9\x5X-\x2\x4D9\x4DA\a\x96\x2\x2\x4DA\x4DB\x5X-\x2\x4DBm\x3\x2\x2\x2"+
		"\x4DC\x4DD\x5Z.\x2\x4DD\x4DE\a#\x2\x2\x4DE\x4DF\x5X-\x2\x4DFo\x3\x2\x2"+
		"\x2\x4E0\x4E1\ah\x2\x2\x4E1\x4E2\a\x99\x2\x2\x4E2\x4E3\x5\xBA^\x2\x4E3"+
		"\x4E4\a\x9B\x2\x2\x4E4\x4E5\x5X-\x2\x4E5q\x3\x2\x2\x2\x4E6\x4E7\ag\x2"+
		"\x2\x4E7\x4E9\a~\x2\x2\x4E8\x4EA\x5\xAEX\x2\x4E9\x4E8\x3\x2\x2\x2\x4E9"+
		"\x4EA\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4EC\a\x9B\x2\x2\x4EC\x505"+
		"\x5X-\x2\x4ED\x4F9\ag\x2\x2\x4EE\x4F0\a\x46\x2\x2\x4EF\x4F1\x5\xAEX\x2"+
		"\x4F0\x4EF\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4FA\x3\x2\x2\x2\x4F2"+
		"\x4F4\x5\xAEX\x2\x4F3\x4F2\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F5"+
		"\x3\x2\x2\x2\x4F5\x4F6\x5X-\x2\x4F6\x4F7\a\x96\x2\x2\x4F7\x4F8\x5X-\x2"+
		"\x4F8\x4FA\x3\x2\x2\x2\x4F9\x4EE\x3\x2\x2\x2\x4F9\x4F3\x3\x2\x2\x2\x4FA"+
		"\x4FD\x3\x2\x2\x2\x4FB\x4FC\a\x9B\x2\x2\x4FC\x4FE\x5X-\x2\x4FD\x4FB\x3"+
		"\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x502\x3\x2\x2\x2\x4FF\x500\a\x82"+
		"\x2\x2\x500\x501\aQ\x2\x2\x501\x503\x5\x120\x91\x2\x502\x4FF\x3\x2\x2"+
		"\x2\x502\x503\x3\x2\x2\x2\x503\x505\x3\x2\x2\x2\x504\x4E6\x3\x2\x2\x2"+
		"\x504\x4ED\x3\x2\x2\x2\x505s\x3\x2\x2\x2\x506\x508\a\x8F\x2\x2\x507\x509"+
		"\a\\\x2\x2\x508\x507\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50A\x3\x2"+
		"\x2\x2\x50A\x510\x5\x62\x32\x2\x50B\x50C\a\x99\x2\x2\x50C\x50D\x5\x62"+
		"\x32\x2\x50D\x50E\aJ\x2\x2\x50E\x50F\x5\x128\x95\x2\x50F\x511\x3\x2\x2"+
		"\x2\x510\x50B\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511u\x3\x2\x2\x2\x512"+
		"\x513\x6<\'\x3\x513\x519\x5X-\x2\x514\x517\x5x=\x2\x515\x516\aH\x2\x2"+
		"\x516\x518\x5z>\x2\x517\x515\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518\x51A"+
		"\x3\x2\x2\x2\x519\x514\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x521\x3"+
		"\x2\x2\x2\x51B\x51E\x5x=\x2\x51C\x51D\aH\x2\x2\x51D\x51F\x5z>\x2\x51E"+
		"\x51C\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x521\x3\x2\x2\x2\x520\x512"+
		"\x3\x2\x2\x2\x520\x51B\x3\x2\x2\x2\x521w\x3\x2\x2\x2\x522\x523\b=\x1\x2"+
		"\x523\x524\a\x99\x2\x2\x524\x525\x5z>\x2\x525\x52B\x3\x2\x2\x2\x526\x527"+
		"\f\x3\x2\x2\x527\x528\a\x13\x2\x2\x528\x52A\x5z>\x2\x529\x526\x3\x2\x2"+
		"\x2\x52A\x52D\x3\x2\x2\x2\x52B\x529\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2"+
		"\x52Cy\x3\x2\x2\x2\x52D\x52B\x3\x2\x2\x2\x52E\x52F\x5X-\x2\x52F\x530\a"+
		"J\x2\x2\x530\x531\x5\xBA^\x2\x531{\x3\x2\x2\x2\x532\x533\x5\x118\x8D\x2"+
		"\x533\x534\x5\x130\x99\x2\x534\x535\x5X-\x2\x535}\x3\x2\x2\x2\x536\x537"+
		"\x6@)\x3\x537\x538\a\x15\x2\x2\x538\x53F\x5\xBA^\x2\x539\x53A\x6@*\x3"+
		"\x53A\x53B\a\x18\x2\x2\x53B\x53C\x5X-\x2\x53C\x53D\a\x19\x2\x2\x53D\x53F"+
		"\x3\x2\x2\x2\x53E\x536\x3\x2\x2\x2\x53E\x539\x3\x2\x2\x2\x53F\x7F\x3\x2"+
		"\x2\x2\x540\x541\x5\xE2r\x2\x541\x542\x5\x130\x99\x2\x542\x543\x5X-\x2"+
		"\x543\x81\x3\x2\x2\x2\x544\x546\a\a\x2\x2\x545\x544\x3\x2\x2\x2\x546\x549"+
		"\x3\x2\x2\x2\x547\x545\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x83\x3\x2"+
		"\x2\x2\x549\x547\x3\x2\x2\x2\x54A\x54C\a\a\x2\x2\x54B\x54A\x3\x2\x2\x2"+
		"\x54C\x54D\x3\x2\x2\x2\x54D\x54B\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E"+
		"\x85\x3\x2\x2\x2\x54F\x551\a\a\x2\x2\x550\x54F\x3\x2\x2\x2\x551\x552\x3"+
		"\x2\x2\x2\x552\x550\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553\x554\x3\x2"+
		"\x2\x2\x554\x555\a\x3\x2\x2\x555\x87\x3\x2\x2\x2\x556\x558\a\a\x2\x2\x557"+
		"\x556\x3\x2\x2\x2\x558\x55B\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2\x559\x55A"+
		"\x3\x2\x2\x2\x55A\x55C\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55C\x55D\a\x4"+
		"\x2\x2\x55D\x89\x3\x2\x2\x2\x55E\x55F\a{\x2\x2\x55F\x8B\x3\x2\x2\x2\x560"+
		"\x562\x5\x8EH\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562\x563"+
		"\x3\x2\x2\x2\x563\x564\x5\x82\x42\x2\x564\x565\a\x2\x2\x3\x565\x8D\x3"+
		"\x2\x2\x2\x566\x56C\x5\x90I\x2\x567\x568\x5\x84\x43\x2\x568\x569\x5\x90"+
		"I\x2\x569\x56B\x3\x2\x2\x2\x56A\x567\x3\x2\x2\x2\x56B\x56E\x3\x2\x2\x2"+
		"\x56C\x56A\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x8F\x3\x2\x2\x2\x56E"+
		"\x56C\x3\x2\x2\x2\x56F\x570\x5\xE8u\x2\x570\x571\x5\x84\x43\x2\x571\x573"+
		"\x3\x2\x2\x2\x572\x56F\x3\x2\x2\x2\x573\x576\x3\x2\x2\x2\x574\x572\x3"+
		"\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x57C\x3\x2\x2\x2\x576\x574\x3\x2"+
		"\x2\x2\x577\x57D\x5\n\x6\x2\x578\x57D\x5\xB2Z\x2\x579\x57D\x5\x92J\x2"+
		"\x57A\x57D\x5\x94K\x2\x57B\x57D\x5\xE6t\x2\x57C\x577\x3\x2\x2\x2\x57C"+
		"\x578\x3\x2\x2\x2\x57C\x579\x3\x2\x2\x2\x57C\x57A\x3\x2\x2\x2\x57C\x57B"+
		"\x3\x2\x2\x2\x57D\x91\x3\x2\x2\x2\x57E\x57F\x5\x1E\x10\x2\x57F\x93\x3"+
		"\x2\x2\x2\x580\x583\x5\x2\x2\x2\x581\x583\x5\x4\x3\x2\x582\x580\x3\x2"+
		"\x2\x2\x582\x581\x3\x2\x2\x2\x583\x95\x3\x2\x2\x2\x584\x58A\x5\x6\x4\x2"+
		"\x585\x586\x5\x84\x43\x2\x586\x587\x5\x6\x4\x2\x587\x589\x3\x2\x2\x2\x588"+
		"\x585\x3\x2\x2\x2\x589\x58C\x3\x2\x2\x2\x58A\x588\x3\x2\x2\x2\x58A\x58B"+
		"\x3\x2\x2\x2\x58B\x97\x3\x2\x2\x2\x58C\x58A\x3\x2\x2\x2\x58D\x593\x5\b"+
		"\x5\x2\x58E\x58F\x5\x84\x43\x2\x58F\x590\x5\b\x5\x2\x590\x592\x3\x2\x2"+
		"\x2\x591\x58E\x3\x2\x2\x2\x592\x595\x3\x2\x2\x2\x593\x591\x3\x2\x2\x2"+
		"\x593\x594\x3\x2\x2\x2\x594\x99\x3\x2\x2\x2\x595\x593\x3\x2\x2\x2\x596"+
		"\x59B\x5\xC0\x61\x2\x597\x598\a\x13\x2\x2\x598\x59A\x5\xC0\x61\x2\x599"+
		"\x597\x3\x2\x2\x2\x59A\x59D\x3\x2\x2\x2\x59B\x599\x3\x2\x2\x2\x59B\x59C"+
		"\x3\x2\x2\x2\x59C\x9B\x3\x2\x2\x2\x59D\x59B\x3\x2\x2\x2\x59E\x59F\ao\x2"+
		"\x2\x59F\x5A9\x5\x9EP\x2\x5A0\x5A1\ao\x2\x2\x5A1\x5A9\x5\xA0Q\x2\x5A2"+
		"\x5A3\ao\x2\x2\x5A3\x5A9\x5\xA4S\x2\x5A4\x5A5\as\x2\x2\x5A5\x5A9\a\xA7"+
		"\x2\x2\x5A6\x5A7\as\x2\x2\x5A7\x5A9\x5X-\x2\x5A8\x59E\x3\x2\x2\x2\x5A8"+
		"\x5A0\x3\x2\x2\x2\x5A8\x5A2\x3\x2\x2\x2\x5A8\x5A4\x3\x2\x2\x2\x5A8\x5A6"+
		"\x3\x2\x2\x2\x5A9\x9D\x3\x2\x2\x2\x5AA\x5AC\aw\x2\x2\x5AB\x5AA\x3\x2\x2"+
		"\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AF\a\x18\x2\x2"+
		"\x5AE\x5B0\x5\xA2R\x2\x5AF\x5AE\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0"+
		"\x5B1\x3\x2\x2\x2\x5B1\x5B2\a\x19\x2\x2\x5B2\x9F\x3\x2\x2\x2\x5B3\x5B5"+
		"\aw\x2\x2\x5B4\x5B3\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B6\x3\x2"+
		"\x2\x2\x5B6\x5B8\a*\x2\x2\x5B7\x5B9\x5\xA2R\x2\x5B8\x5B7\x3\x2\x2\x2\x5B8"+
		"\x5B9\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA\x5BB\a(\x2\x2\x5BB\xA1\x3"+
		"\x2\x2\x2\x5BC\x5C1\x5X-\x2\x5BD\x5BE\a\x13\x2\x2\x5BE\x5C0\x5X-\x2\x5BF"+
		"\x5BD\x3\x2\x2\x2\x5C0\x5C3\x3\x2\x2\x2\x5C1\x5BF\x3\x2\x2\x2\x5C1\x5C2"+
		"\x3\x2\x2\x2\x5C2\xA3\x3\x2\x2\x2\x5C3\x5C1\x3\x2\x2\x2\x5C4\x5C5\a\x18"+
		"\x2\x2\x5C5\x5C6\x5X-\x2\x5C6\x5C7\a\x14\x2\x2\x5C7\x5C8\x5X-\x2\x5C8"+
		"\x5C9\a\x19\x2\x2\x5C9\xA5\x3\x2\x2\x2\x5CA\x5CB\bT\x1\x2\x5CB\x5D7\x5"+
		"\xA8U\x2\x5CC\x5CD\a\x44\x2\x2\x5CD\x5CE\a*\x2\x2\x5CE\x5CF\x5\xA6T\x2"+
		"\x5CF\x5D0\a(\x2\x2\x5D0\x5D7\x3\x2\x2\x2\x5D1\x5D2\a\x43\x2\x2\x5D2\x5D3"+
		"\a*\x2\x2\x5D3\x5D4\x5\xA6T\x2\x5D4\x5D5\a(\x2\x2\x5D5\x5D7\x3\x2\x2\x2"+
		"\x5D6\x5CA\x3\x2\x2\x2\x5D6\x5CC\x3\x2\x2\x2\x5D6\x5D1\x3\x2\x2\x2\x5D7"+
		"\x5E2\x3\x2\x2\x2\x5D8\x5D9\f\a\x2\x2\x5D9\x5E1\a,\x2\x2\x5DA\x5DB\f\x6"+
		"\x2\x2\x5DB\x5DC\a\x18\x2\x2\x5DC\x5E1\a\x19\x2\x2\x5DD\x5DE\f\x5\x2\x2"+
		"\x5DE\x5DF\a\x1A\x2\x2\x5DF\x5E1\a\x1B\x2\x2\x5E0\x5D8\x3\x2\x2\x2\x5E0"+
		"\x5DA\x3\x2\x2\x2\x5E0\x5DD\x3\x2\x2\x2\x5E1\x5E4\x3\x2\x2\x2\x5E2\x5E0"+
		"\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\xA7\x3\x2\x2\x2\x5E4\x5E2\x3\x2"+
		"\x2\x2\x5E5\x5E8\x5\xAAV\x2\x5E6\x5E8\x5\xACW\x2\x5E7\x5E5\x3\x2\x2\x2"+
		"\x5E7\x5E6\x3\x2\x2\x2\x5E8\xA9\x3\x2\x2\x2\x5E9\x5F8\a\x34\x2\x2\x5EA"+
		"\x5F8\a\x35\x2\x2\x5EB\x5F8\a\x36\x2\x2\x5EC\x5F8\a\x41\x2\x2\x5ED\x5F8"+
		"\a\x37\x2\x2\x5EE\x5F8\a\x38\x2\x2\x5EF\x5F8\a?\x2\x2\x5F0\x5F8\a\x39"+
		"\x2\x2\x5F1\x5F8\a;\x2\x2\x5F2\x5F8\a:\x2\x2\x5F3\x5F8\a<\x2\x2\x5F4\x5F8"+
		"\a>\x2\x2\x5F5\x5F8\a@\x2\x2\x5F6\x5F8\a\x42\x2\x2\x5F7\x5E9\x3\x2\x2"+
		"\x2\x5F7\x5EA\x3\x2\x2\x2\x5F7\x5EB\x3\x2\x2\x2\x5F7\x5EC\x3\x2\x2\x2"+
		"\x5F7\x5ED\x3\x2\x2\x2\x5F7\x5EE\x3\x2\x2\x2\x5F7\x5EF\x3\x2\x2\x2\x5F7"+
		"\x5F0\x3\x2\x2\x2\x5F7\x5F1\x3\x2\x2\x2\x5F7\x5F2\x3\x2\x2\x2\x5F7\x5F3"+
		"\x3\x2\x2\x2\x5F7\x5F4\x3\x2\x2\x2\x5F7\x5F5\x3\x2\x2\x2\x5F7\x5F6\x3"+
		"\x2\x2\x2\x5F8\xAB\x3\x2\x2\x2\x5F9\x5FA\a\xA3\x2\x2\x5FA\xAD\x3\x2\x2"+
		"\x2\x5FB\x5FD\aw\x2\x2\x5FC\x5FB\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD"+
		"\x5FE\x3\x2\x2\x2\x5FE\x5FF\x5\xACW\x2\x5FF\xAF\x3\x2\x2\x2\x600\x601"+
		"\a>\x2\x2\x601\xB1\x3\x2\x2\x2\x602\x606\x5\f\a\x2\x603\x606\x5\x1C\xF"+
		"\x2\x604\x606\x5\xE\b\x2\x605\x602\x3\x2\x2\x2\x605\x603\x3\x2\x2\x2\x605"+
		"\x604\x3\x2\x2\x2\x606\xB3\x3\x2\x2\x2\x607\x60C\x5\xBE`\x2\x608\x609"+
		"\a\x13\x2\x2\x609\x60B\x5\xBE`\x2\x60A\x608\x3\x2\x2\x2\x60B\x60E\x3\x2"+
		"\x2\x2\x60C\x60A\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\xB5\x3\x2\x2\x2"+
		"\x60E\x60C\x3\x2\x2\x2\x60F\x612\x5\xBA^\x2\x610\x612\x5\xBE`\x2\x611"+
		"\x60F\x3\x2\x2\x2\x611\x610\x3\x2\x2\x2\x612\xB7\x3\x2\x2\x2\x613\x617"+
		"\x5\xBA^\x2\x614\x617\x5\xBE`\x2\x615\x617\x5\xC0\x61\x2\x616\x613\x3"+
		"\x2\x2\x2\x616\x614\x3\x2\x2\x2\x616\x615\x3\x2\x2\x2\x617\xB9\x3\x2\x2"+
		"\x2\x618\x619\a\xA4\x2\x2\x619\xBB\x3\x2\x2\x2\x61A\x61B\t\x3\x2\x2\x61B"+
		"\xBD\x3\x2\x2\x2\x61C\x61D\a\xA3\x2\x2\x61D\xBF\x3\x2\x2\x2\x61E\x61F"+
		"\a\xA2\x2\x2\x61F\xC1\x3\x2\x2\x2\x620\x625\x5\xC4\x63\x2\x621\x622\a"+
		"\x13\x2\x2\x622\x624\x5\xC4\x63\x2\x623\x621\x3\x2\x2\x2\x624\x627\x3"+
		"\x2\x2\x2\x625\x623\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2\x626\xC3\x3\x2\x2"+
		"\x2\x627\x625\x3\x2\x2\x2\x628\x62E\x5\xCA\x66\x2\x629\x62B\aw\x2\x2\x62A"+
		"\x629\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62E"+
		"\x5\xC6\x64\x2\x62D\x628\x3\x2\x2\x2\x62D\x62A\x3\x2\x2\x2\x62E\xC5\x3"+
		"\x2\x2\x2\x62F\x632\x5\xC8\x65\x2\x630\x632\x5\x32\x1A\x2\x631\x62F\x3"+
		"\x2\x2\x2\x631\x630\x3\x2\x2\x2\x632\xC7\x3\x2\x2\x2\x633\x636\x5\xBA"+
		"^\x2\x634\x635\a-\x2\x2\x635\x637\x5\x106\x84\x2\x636\x634\x3\x2\x2\x2"+
		"\x636\x637\x3\x2\x2\x2\x637\xC9\x3\x2\x2\x2\x638\x639\x5\xB0Y\x2\x639"+
		"\x63A\x5\xBA^\x2\x63A\xCB\x3\x2\x2\x2\x63B\x63E\x5\xA6T\x2\x63C\x63E\x5"+
		"\xCEh\x2\x63D\x63B\x3\x2\x2\x2\x63D\x63C\x3\x2\x2\x2\x63E\xCD\x3\x2\x2"+
		"\x2\x63F\x640\bh\x1\x2\x640\x641\aI\x2\x2\x641\x64A\x3\x2\x2\x2\x642\x643"+
		"\f\x4\x2\x2\x643\x644\a\x18\x2\x2\x644\x649\a\x19\x2\x2\x645\x646\f\x3"+
		"\x2\x2\x646\x647\a\x1A\x2\x2\x647\x649\a\x1B\x2\x2\x648\x642\x3\x2\x2"+
		"\x2\x648\x645\x3\x2\x2\x2\x649\x64C\x3\x2\x2\x2\x64A\x648\x3\x2\x2\x2"+
		"\x64A\x64B\x3\x2\x2\x2\x64B\xCF\x3\x2\x2\x2\x64C\x64A\x3\x2\x2\x2\x64D"+
		"\x653\x5\xD2j\x2\x64E\x64F\x5\x84\x43\x2\x64F\x650\x5\xD2j\x2\x650\x652"+
		"\x3\x2\x2\x2\x651\x64E\x3\x2\x2\x2\x652\x655\x3\x2\x2\x2\x653\x651\x3"+
		"\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\xD1\x3\x2\x2\x2\x655\x653\x3\x2\x2"+
		"\x2\x656\x65C\x5\x14\v\x2\x657\x65C\x5\x18\r\x2\x658\x65C\x5(\x15\x2\x659"+
		"\x65C\x5&\x14\x2\x65A\x65C\x5\x12\n\x2\x65B\x656\x3\x2\x2\x2\x65B\x657"+
		"\x3\x2\x2\x2\x65B\x658\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65B\x65A\x3"+
		"\x2\x2\x2\x65C\xD3\x3\x2\x2\x2\x65D\x663\x5\xD6l\x2\x65E\x65F\x5\x84\x43"+
		"\x2\x65F\x660\x5\xD6l\x2\x660\x662\x3\x2\x2\x2\x661\x65E\x3\x2\x2\x2\x662"+
		"\x665\x3\x2\x2\x2\x663\x661\x3\x2\x2\x2\x663\x664\x3\x2\x2\x2\x664\xD5"+
		"\x3\x2\x2\x2\x665\x663\x3\x2\x2\x2\x666\x66A\x5\x1A\xE\x2\x667\x66A\x5"+
		"\x16\f\x2\x668\x66A\x5*\x16\x2\x669\x666\x3\x2\x2\x2\x669\x667\x3\x2\x2"+
		"\x2\x669\x668\x3\x2\x2\x2\x66A\xD7\x3\x2\x2\x2\x66B\x66C\a\v\x2\x2\x66C"+
		"\x676\x5\x182\xC2\x2\x66D\x66E\a\f\x2\x2\x66E\x676\x5\x19C\xCF\x2\x66F"+
		"\x670\a\r\x2\x2\x670\x676\x5\xDAn\x2\x671\x672\a\xE\x2\x2\x672\x676\x5"+
		"\xDAn\x2\x673\x674\a\xF\x2\x2\x674\x676\x5\xDEp\x2\x675\x66B\x3\x2\x2"+
		"\x2\x675\x66D\x3\x2\x2\x2\x675\x66F\x3\x2\x2\x2\x675\x671\x3\x2\x2\x2"+
		"\x675\x673\x3\x2\x2\x2\x676\xD9\x3\x2\x2\x2\x677\x679\x5\xB8]\x2\x678"+
		"\x67A\x5\xDCo\x2\x679\x678\x3\x2\x2\x2\x679\x67A\x3\x2\x2\x2\x67A\xDB"+
		"\x3\x2\x2\x2\x67B\x67C\al\x2\x2\x67C\x67D\x5\x12A\x96\x2\x67D\x67E\a\x11"+
		"\x2\x2\x67E\x683\x5\xB8]\x2\x67F\x680\a\x15\x2\x2\x680\x682\x5\xB8]\x2"+
		"\x681\x67F\x3\x2\x2\x2\x682\x685\x3\x2\x2\x2\x683\x681\x3\x2\x2\x2\x683"+
		"\x684\x3\x2\x2\x2\x684\xDD\x3\x2\x2\x2\x685\x683\x3\x2\x2\x2\x686\x688"+
		"\x5\xB8]\x2\x687\x689\x5\xE0q\x2\x688\x687\x3\x2\x2\x2\x688\x689\x3\x2"+
		"\x2\x2\x689\xDF\x3\x2\x2\x2\x68A\x68B\al\x2\x2\x68B\x68C\x5\x12A\x96\x2"+
		"\x68C\x68E\a\x11\x2\x2\x68D\x68F\a%\x2\x2\x68E\x68D\x3\x2\x2\x2\x68E\x68F"+
		"\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x695\x5\x152\xAA\x2\x691\x692"+
		"\a%\x2\x2\x692\x694\x5\x152\xAA\x2\x693\x691\x3\x2\x2\x2\x694\x697\x3"+
		"\x2\x2\x2\x695\x693\x3\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x69A\x3\x2"+
		"\x2\x2\x697\x695\x3\x2\x2\x2\x698\x699\a\x15\x2\x2\x699\x69B\x5\x152\xAA"+
		"\x2\x69A\x698\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\xE1\x3\x2\x2\x2\x69C"+
		"\x6A1\x5\xBA^\x2\x69D\x69E\a\x13\x2\x2\x69E\x6A0\x5\xBA^\x2\x69F\x69D"+
		"\x3\x2\x2\x2\x6A0\x6A3\x3\x2\x2\x2\x6A1\x69F\x3\x2\x2\x2\x6A1\x6A2\x3"+
		"\x2\x2\x2\x6A2\xE3\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2\x2\x6A4\x6A9\x5\xBC"+
		"_\x2\x6A5\x6A6\a\x13\x2\x2\x6A6\x6A8\x5\xBC_\x2\x6A7\x6A5\x3\x2\x2\x2"+
		"\x6A8\x6AB\x3\x2\x2\x2\x6A9\x6A7\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA"+
		"\xE5\x3\x2\x2\x2\x6AB\x6A9\x3\x2\x2\x2\x6AC\x6B1\x5&\x14\x2\x6AD\x6B1"+
		"\x5(\x15\x2\x6AE\x6B1\x5*\x16\x2\x6AF\x6B1\x5,\x17\x2\x6B0\x6AC\x3\x2"+
		"\x2\x2\x6B0\x6AD\x3\x2\x2\x2\x6B0\x6AE\x3\x2\x2\x2\x6B0\x6AF\x3\x2\x2"+
		"\x2\x6B1\xE7\x3\x2\x2\x2\x6B2\x6B3\a\n\x2\x2\x6B3\xE9\x3\x2\x2\x2\x6B4"+
		"\x6BA\x5\xECw\x2\x6B5\x6B6\x5\x84\x43\x2\x6B6\x6B7\x5\xECw\x2\x6B7\x6B9"+
		"\x3\x2\x2\x2\x6B8\x6B5\x3\x2\x2\x2\x6B9\x6BC\x3\x2\x2\x2\x6BA\x6B8\x3"+
		"\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\xEB\x3\x2\x2\x2\x6BC\x6BA\x3\x2\x2"+
		"\x2\x6BD\x6BE\a\v\x2\x2\x6BE\x6C8\x5\x16C\xB7\x2\x6BF\x6C0\a\f\x2\x2\x6C0"+
		"\x6C8\x5\x188\xC5\x2\x6C1\x6C2\a\r\x2\x2\x6C2\x6C8\x5\xEEx\x2\x6C3\x6C4"+
		"\a\xE\x2\x2\x6C4\x6C8\x5\xEEx\x2\x6C5\x6C6\a\xF\x2\x2\x6C6\x6C8\x5\xF0"+
		"y\x2\x6C7\x6BD\x3\x2\x2\x2\x6C7\x6BF\x3\x2\x2\x2\x6C7\x6C1\x3\x2\x2\x2"+
		"\x6C7\x6C3\x3\x2\x2\x2\x6C7\x6C5\x3\x2\x2\x2\x6C8\xED\x3\x2\x2\x2\x6C9"+
		"\x6CB\x5\x154\xAB\x2\x6CA\x6CC\a\x12\x2\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB"+
		"\x6CC\x3\x2\x2\x2\x6CC\x6CE\x3\x2\x2\x2\x6CD\x6CF\x5\xDCo\x2\x6CE\x6CD"+
		"\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\xEF\x3\x2\x2\x2\x6D0\x6D2\x5\x13A"+
		"\x9E\x2\x6D1\x6D3\a\x12\x2\x2\x6D2\x6D1\x3\x2\x2\x2\x6D2\x6D3\x3\x2\x2"+
		"\x2\x6D3\x6D5\x3\x2\x2\x2\x6D4\x6D6\x5\xE0q\x2\x6D5\x6D4\x3\x2\x2\x2\x6D5"+
		"\x6D6\x3\x2\x2\x2\x6D6\xF1\x3\x2\x2\x2\x6D7\x6DD\x5\x34\x1B\x2\x6D8\x6D9"+
		"\x5\x84\x43\x2\x6D9\x6DA\x5\x34\x1B\x2\x6DA\x6DC\x3\x2\x2\x2\x6DB\x6D8"+
		"\x3\x2\x2\x2\x6DC\x6DF\x3\x2\x2\x2\x6DD\x6DB\x3\x2\x2\x2\x6DD\x6DE\x3"+
		"\x2\x2\x2\x6DE\xF3\x3\x2\x2\x2\x6DF\x6DD\x3\x2\x2\x2\x6E0\x6E6\x5.\x18"+
		"\x2\x6E1\x6E2\x5\x84\x43\x2\x6E2\x6E3\x5.\x18\x2\x6E3\x6E5\x3\x2\x2\x2"+
		"\x6E4\x6E1\x3\x2\x2\x2\x6E5\x6E8\x3\x2\x2\x2\x6E6\x6E4\x3\x2\x2\x2\x6E6"+
		"\x6E7\x3\x2\x2\x2\x6E7\xF5\x3\x2\x2\x2\x6E8\x6E6\x3\x2\x2\x2\x6E9\x6EF"+
		"\x5\x42\"\x2\x6EA\x6EB\x5\x84\x43\x2\x6EB\x6EC\x5\x42\"\x2\x6EC\x6EE\x3"+
		"\x2\x2\x2\x6ED\x6EA\x3\x2\x2\x2\x6EE\x6F1\x3\x2\x2\x2\x6EF\x6ED\x3\x2"+
		"\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\xF7\x3\x2\x2\x2\x6F1\x6EF\x3\x2\x2\x2"+
		"\x6F2\x6F8\x5R*\x2\x6F3\x6F4\x5\x84\x43\x2\x6F4\x6F5\x5R*\x2\x6F5\x6F7"+
		"\x3\x2\x2\x2\x6F6\x6F3\x3\x2\x2\x2\x6F7\x6FA\x3\x2\x2\x2\x6F8\x6F6\x3"+
		"\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\xF9\x3\x2\x2\x2\x6FA\x6F8\x3\x2\x2"+
		"\x2\x6FB\x6FC\a\x18\x2\x2\x6FC\x6FD\x5\xFC\x7F\x2\x6FD\x6FE\a\x14\x2\x2"+
		"\x6FE\x6FF\x5\xFC\x7F\x2\x6FF\x700\a\x19\x2\x2\x700\x70A\x3\x2\x2\x2\x701"+
		"\x702\a\x18\x2\x2\x702\x703\x5\xFE\x80\x2\x703\x704\a\x19\x2\x2\x704\x70A"+
		"\x3\x2\x2\x2\x705\x706\a*\x2\x2\x706\x707\x5\xFE\x80\x2\x707\x708\a(\x2"+
		"\x2\x708\x70A\x3\x2\x2\x2\x709\x6FB\x3\x2\x2\x2\x709\x701\x3\x2\x2\x2"+
		"\x709\x705\x3\x2\x2\x2\x70A\xFB\x3\x2\x2\x2\x70B\x71A\a\xA0\x2\x2\x70C"+
		"\x71A\a\xA1\x2\x2\x70D\x71A\a\xA9\x2\x2\x70E\x71A\a\xAA\x2\x2\x70F\x71A"+
		"\a\x9F\x2\x2\x710\x71A\a\xAE\x2\x2\x711\x71A\a\xAD\x2\x2\x712\x71A\a\xA7"+
		"\x2\x2\x713\x71A\a\xAB\x2\x2\x714\x71A\a\xAC\x2\x2\x715\x71A\a\x9E\x2"+
		"\x2\x716\x71A\a\xAF\x2\x2\x717\x71A\a\xA8\x2\x2\x718\x71A\x5\x8A\x46\x2"+
		"\x719\x70B\x3\x2\x2\x2\x719\x70C\x3\x2\x2\x2\x719\x70D\x3\x2\x2\x2\x719"+
		"\x70E\x3\x2\x2\x2\x719\x70F\x3\x2\x2\x2\x719\x710\x3\x2\x2\x2\x719\x711"+
		"\x3\x2\x2\x2\x719\x712\x3\x2\x2\x2\x719\x713\x3\x2\x2\x2\x719\x714\x3"+
		"\x2\x2\x2\x719\x715\x3\x2\x2\x2\x719\x716\x3\x2\x2\x2\x719\x717\x3\x2"+
		"\x2\x2\x719\x718\x3\x2\x2\x2\x71A\xFD\x3\x2\x2\x2\x71B\x720\x5\xFC\x7F"+
		"\x2\x71C\x71D\a\x13\x2\x2\x71D\x71F\x5\xFC\x7F\x2\x71E\x71C\x3\x2\x2\x2"+
		"\x71F\x722\x3\x2\x2\x2\x720\x71E\x3\x2\x2\x2\x720\x721\x3\x2\x2\x2\x721"+
		"\xFF\x3\x2\x2\x2\x722\x720\x3\x2\x2\x2\x723\x728\x5\x104\x83\x2\x724\x728"+
		"\x5\x106\x84\x2\x725\x728\x5\xB8]\x2\x726\x728\x5\x102\x82\x2\x727\x723"+
		"\x3\x2\x2\x2\x727\x724\x3\x2\x2\x2\x727\x725\x3\x2\x2\x2\x727\x726\x3"+
		"\x2\x2\x2\x728\x101\x3\x2\x2\x2\x729\x72A\t\x4\x2\x2\x72A\x103\x3\x2\x2"+
		"\x2\x72B\x72C\a\x16\x2\x2\x72C\x72D\x5X-\x2\x72D\x72E\a\x17\x2\x2\x72E"+
		"\x105\x3\x2\x2\x2\x72F\x732\x5\xFC\x7F\x2\x730\x732\x5\x108\x85\x2\x731"+
		"\x72F\x3\x2\x2\x2\x731\x730\x3\x2\x2\x2\x732\x107\x3\x2\x2\x2\x733\x739"+
		"\x5\xA4S\x2\x734\x739\x5\x9EP\x2\x735\x739\x5\xA0Q\x2\x736\x739\x5\x10C"+
		"\x87\x2\x737\x739\x5\x10A\x86\x2\x738\x733\x3\x2\x2\x2\x738\x734\x3\x2"+
		"\x2\x2\x738\x735\x3\x2\x2\x2\x738\x736\x3\x2\x2\x2\x738\x737\x3\x2\x2"+
		"\x2\x739\x109\x3\x2\x2\x2\x73A\x73C\aw\x2\x2\x73B\x73A\x3\x2\x2\x2\x73B"+
		"\x73C\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x73F\a\x16\x2\x2\x73E\x740"+
		"\x5\x10E\x88\x2\x73F\x73E\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x741"+
		"\x3\x2\x2\x2\x741\x742\a\x17\x2\x2\x742\x10B\x3\x2\x2\x2\x743\x745\aw"+
		"\x2\x2\x744\x743\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x746\x3\x2\x2"+
		"\x2\x746\x748\a\x1A\x2\x2\x747\x749\x5\x110\x89\x2\x748\x747\x3\x2\x2"+
		"\x2\x748\x749\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74B\a\x1B\x2\x2"+
		"\x74B\x10D\x3\x2\x2\x2\x74C\x74D\x5X-\x2\x74D\x756\a\x13\x2\x2\x74E\x753"+
		"\x5X-\x2\x74F\x750\a\x13\x2\x2\x750\x752\x5X-\x2\x751\x74F\x3\x2\x2\x2"+
		"\x752\x755\x3\x2\x2\x2\x753\x751\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754"+
		"\x757\x3\x2\x2\x2\x755\x753\x3\x2\x2\x2\x756\x74E\x3\x2\x2\x2\x756\x757"+
		"\x3\x2\x2\x2\x757\x10F\x3\x2\x2\x2\x758\x75D\x5\x112\x8A\x2\x759\x75A"+
		"\a\x13\x2\x2\x75A\x75C\x5\x112\x8A\x2\x75B\x759\x3\x2\x2\x2\x75C\x75F"+
		"\x3\x2\x2\x2\x75D\x75B\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x111\x3"+
		"\x2\x2\x2\x75F\x75D\x3\x2\x2\x2\x760\x761\x5X-\x2\x761\x762\a\x11\x2\x2"+
		"\x762\x763\x5X-\x2\x763\x113\x3\x2\x2\x2\x764\x765\x5X-\x2\x765\x766\a"+
		"\x11\x2\x2\x766\x767\x5X-\x2\x767\x76E\x3\x2\x2\x2\x768\x769\x5X-\x2\x769"+
		"\x76A\a\x11\x2\x2\x76A\x76E\x3\x2\x2\x2\x76B\x76C\a\x11\x2\x2\x76C\x76E"+
		"\x5X-\x2\x76D\x764\x3\x2\x2\x2\x76D\x768\x3\x2\x2\x2\x76D\x76B\x3\x2\x2"+
		"\x2\x76E\x115\x3\x2\x2\x2\x76F\x770\x5\xBA^\x2\x770\x771\x5\x130\x99\x2"+
		"\x771\x772\x5X-\x2\x772\x117\x3\x2\x2\x2\x773\x774\b\x8D\x1\x2\x774\x775"+
		"\x5\xBA^\x2\x775\x77A\x3\x2\x2\x2\x776\x777\f\x3\x2\x2\x777\x779\x5~@"+
		"\x2\x778\x776\x3\x2\x2\x2\x779\x77C\x3\x2\x2\x2\x77A\x778\x3\x2\x2\x2"+
		"\x77A\x77B\x3\x2\x2\x2\x77B\x119\x3\x2\x2\x2\x77C\x77A\x3\x2\x2\x2\x77D"+
		"\x77E\x6\x8E\x31\x3\x77E\x77F\a\xA4\x2\x2\x77F\x782\x5\xCCg\x2\x780\x782"+
		"\x5X-\x2\x781\x77D\x3\x2\x2\x2\x781\x780\x3\x2\x2\x2\x782\x11B\x3\x2\x2"+
		"\x2\x783\x784\a\x86\x2\x2\x784\x785\a\x46\x2\x2\x785\x786\al\x2\x2\x786"+
		"\x787\x5X-\x2\x787\x11D\x3\x2\x2\x2\x788\x789\a\x86\x2\x2\x789\x78A\a"+
		"~\x2\x2\x78A\x78B\al\x2\x2\x78B\x78C\x5X-\x2\x78C\x11F\x3\x2\x2\x2\x78D"+
		"\x792\x5\x122\x92\x2\x78E\x78F\a\x13\x2\x2\x78F\x791\x5\x122\x92\x2\x790"+
		"\x78E\x3\x2\x2\x2\x791\x794\x3\x2\x2\x2\x792\x790\x3\x2\x2\x2\x792\x793"+
		"\x3\x2\x2\x2\x793\x121\x3\x2\x2\x2\x794\x792\x3\x2\x2\x2\x795\x79A\x5"+
		"\xBA^\x2\x796\x797\a\x15\x2\x2\x797\x799\x5\xBA^\x2\x798\x796\x3\x2\x2"+
		"\x2\x799\x79C\x3\x2\x2\x2\x79A\x798\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2"+
		"\x79B\x79E\x3\x2\x2\x2\x79C\x79A\x3\x2\x2\x2\x79D\x79F\t\x5\x2\x2\x79E"+
		"\x79D\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x123\x3\x2\x2\x2\x7A0\x7A7"+
		"\a\"\x2\x2\x7A1\x7A7\a#\x2\x2\x7A2\x7A7\x5\x132\x9A\x2\x7A3\x7A7\x5\x134"+
		"\x9B\x2\x7A4\x7A7\x5\x136\x9C\x2\x7A5\x7A7\x5\x138\x9D\x2\x7A6\x7A0\x3"+
		"\x2\x2\x2\x7A6\x7A1\x3\x2\x2\x2\x7A6\x7A2\x3\x2\x2\x2\x7A6\x7A3\x3\x2"+
		"\x2\x2\x7A6\x7A4\x3\x2\x2\x2\x7A6\x7A5\x3\x2\x2\x2\x7A7\x125\x3\x2\x2"+
		"\x2\x7A8\x7A9\a\xA4\x2\x2\x7A9\x7AA\x6\x94\x32\x3\x7AA\x127\x3\x2\x2\x2"+
		"\x7AB\x7AC\a\xA4\x2\x2\x7AC\x7AD\x6\x95\x33\x3\x7AD\x129\x3\x2\x2\x2\x7AE"+
		"\x7AF\a\xA4\x2\x2\x7AF\x7B0\x6\x96\x34\x3\x7B0\x12B\x3\x2\x2\x2\x7B1\x7B2"+
		"\a\xA4\x2\x2\x7B2\x7B3\x6\x97\x35\x3\x7B3\x12D\x3\x2\x2\x2\x7B4\x7B5\a"+
		"\xA4\x2\x2\x7B5\x7B6\x6\x98\x36\x3\x7B6\x12F\x3\x2\x2\x2\x7B7\x7B8\a-"+
		"\x2\x2\x7B8\x131\x3\x2\x2\x2\x7B9\x7BA\a$\x2\x2\x7BA\x133\x3\x2\x2\x2"+
		"\x7BB\x7BC\a%\x2\x2\x7BC\x135\x3\x2\x2\x2\x7BD\x7BE\a&\x2\x2\x7BE\x137"+
		"\x3\x2\x2\x2\x7BF\x7C0\t\x6\x2\x2\x7C0\x139\x3\x2\x2\x2\x7C1\x7C2\a\x89"+
		"\x2\x2\x7C2\x7C3\x5\x13C\x9F\x2\x7C3\x7C4\a\x12\x2\x2\x7C4\x7C9\x3\x2"+
		"\x2\x2\x7C5\x7C6\x5\x13C\x9F\x2\x7C6\x7C7\a\x12\x2\x2\x7C7\x7C9\x3\x2"+
		"\x2\x2\x7C8\x7C1\x3\x2\x2\x2\x7C8\x7C5\x3\x2\x2\x2\x7C9\x13B\x3\x2\x2"+
		"\x2\x7CA\x7CB\b\x9F\x1\x2\x7CB\x7CC\x5\x13E\xA0\x2\x7CC\x7D1\x3\x2\x2"+
		"\x2\x7CD\x7CE\f\x3\x2\x2\x7CE\x7D0\x5\x144\xA3\x2\x7CF\x7CD\x3\x2\x2\x2"+
		"\x7D0\x7D3\x3\x2\x2\x2\x7D1\x7CF\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2"+
		"\x13D\x3\x2\x2\x2\x7D3\x7D1\x3\x2\x2\x2\x7D4\x7DC\x5\x140\xA1\x2\x7D5"+
		"\x7DC\x5\x142\xA2\x2\x7D6\x7DC\x5\x14C\xA7\x2\x7D7\x7DC\x5\x14E\xA8\x2"+
		"\x7D8\x7DC\x5\x150\xA9\x2\x7D9\x7DC\x5\x146\xA4\x2\x7DA\x7DC\x5\x14A\xA6"+
		"\x2\x7DB\x7D4\x3\x2\x2\x2\x7DB\x7D5\x3\x2\x2\x2\x7DB\x7D6\x3\x2\x2\x2"+
		"\x7DB\x7D7\x3\x2\x2\x2\x7DB\x7D8\x3\x2\x2\x2\x7DB\x7D9\x3\x2\x2\x2\x7DB"+
		"\x7DA\x3\x2\x2\x2\x7DC\x13F\x3\x2\x2\x2\x7DD\x7DE\x5\x102\x82\x2\x7DE"+
		"\x141\x3\x2\x2\x2\x7DF\x7E0\x5\x126\x94\x2\x7E0\x7E1\x5\x146\xA4\x2\x7E1"+
		"\x143\x3\x2\x2\x2\x7E2\x7E3\a\x15\x2\x2\x7E3\x7E8\x5\x146\xA4\x2\x7E4"+
		"\x7E5\a\x15\x2\x2\x7E5\x7E8\x5\x152\xAA\x2\x7E6\x7E8\x5\x14A\xA6\x2\x7E7"+
		"\x7E2\x3\x2\x2\x2\x7E7\x7E4\x3\x2\x2\x2\x7E7\x7E6\x3\x2\x2\x2\x7E8\x145"+
		"\x3\x2\x2\x2\x7E9\x7EA\x5\x152\xAA\x2\x7EA\x7EC\a\x16\x2\x2\x7EB\x7ED"+
		"\x5\x148\xA5\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE"+
		"\x3\x2\x2\x2\x7EE\x7EF\a\x17\x2\x2\x7EF\x147\x3\x2\x2\x2\x7F0\x7F1\b\xA5"+
		"\x1\x2\x7F1\x7F2\x5\x13C\x9F\x2\x7F2\x7F8\x3\x2\x2\x2\x7F3\x7F4\f\x3\x2"+
		"\x2\x7F4\x7F5\a\x13\x2\x2\x7F5\x7F7\x5\x13C\x9F\x2\x7F6\x7F3\x3\x2\x2"+
		"\x2\x7F7\x7FA\x3\x2\x2\x2\x7F8\x7F6\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2"+
		"\x7F9\x149\x3\x2\x2\x2\x7FA\x7F8\x3\x2\x2\x2\x7FB\x7FC\a\x18\x2\x2\x7FC"+
		"\x7FD\x5\x13C\x9F\x2\x7FD\x7FE\a\x19\x2\x2\x7FE\x14B\x3\x2\x2\x2\x7FF"+
		"\x800\a\x16\x2\x2\x800\x801\x5\x13C\x9F\x2\x801\x802\a\x17\x2\x2\x802"+
		"\x14D\x3\x2\x2\x2\x803\x804\x5\x152\xAA\x2\x804\x14F\x3\x2\x2\x2\x805"+
		"\x80B\a\xA9\x2\x2\x806\x80B\a\xAB\x2\x2\x807\x80B\a\xA7\x2\x2\x808\x80B"+
		"\a\x9E\x2\x2\x809\x80B\a\x9F\x2\x2\x80A\x805\x3\x2\x2\x2\x80A\x806\x3"+
		"\x2\x2\x2\x80A\x807\x3\x2\x2\x2\x80A\x808\x3\x2\x2\x2\x80A\x809\x3\x2"+
		"\x2\x2\x80B\x151\x3\x2\x2\x2\x80C\x80D\t\a\x2\x2\x80D\x153\x3\x2\x2\x2"+
		"\x80E\x80F\a\x89\x2\x2\x80F\x812\x5\x156\xAC\x2\x810\x812\x5\x156\xAC"+
		"\x2\x811\x80E\x3\x2\x2\x2\x811\x810\x3\x2\x2\x2\x812\x155\x3\x2\x2\x2"+
		"\x813\x814\b\xAC\x1\x2\x814\x815\x5\x158\xAD\x2\x815\x81A\x3\x2\x2\x2"+
		"\x816\x817\f\x3\x2\x2\x817\x819\x5\x15A\xAE\x2\x818\x816\x3\x2\x2\x2\x819"+
		"\x81C\x3\x2\x2\x2\x81A\x818\x3\x2\x2\x2\x81A\x81B\x3\x2\x2\x2\x81B\x157"+
		"\x3\x2\x2\x2\x81C\x81A\x3\x2\x2\x2\x81D\x822\x5\x164\xB3\x2\x81E\x822"+
		"\x5\x166\xB4\x2\x81F\x822\x5\x168\xB5\x2\x820\x822\x5\x15C\xAF\x2\x821"+
		"\x81D\x3\x2\x2\x2\x821\x81E\x3\x2\x2\x2\x821\x81F\x3\x2\x2\x2\x821\x820"+
		"\x3\x2\x2\x2\x822\x159\x3\x2\x2\x2\x823\x824\a\x15\x2\x2\x824\x82A\x5"+
		"\x15C\xAF\x2\x825\x826\a\x18\x2\x2\x826\x827\x5\x156\xAC\x2\x827\x828"+
		"\a\x19\x2\x2\x828\x82A\x3\x2\x2\x2\x829\x823\x3\x2\x2\x2\x829\x825\x3"+
		"\x2\x2\x2\x82A\x15B\x3\x2\x2\x2\x82B\x82C\x5\x16A\xB6\x2\x82C\x82E\a\x16"+
		"\x2\x2\x82D\x82F\x5\x15E\xB0\x2\x82E\x82D\x3\x2\x2\x2\x82E\x82F\x3\x2"+
		"\x2\x2\x82F\x830\x3\x2\x2\x2\x830\x831\a\x17\x2\x2\x831\x15D\x3\x2\x2"+
		"\x2\x832\x839\x5\x160\xB1\x2\x833\x839\x5\x162\xB2\x2\x834\x835\x5\x160"+
		"\xB1\x2\x835\x836\a\x13\x2\x2\x836\x837\x5\x162\xB2\x2\x837\x839\x3\x2"+
		"\x2\x2\x838\x832\x3\x2\x2\x2\x838\x833\x3\x2\x2\x2\x838\x834\x3\x2\x2"+
		"\x2\x839\x15F\x3\x2\x2\x2\x83A\x83B\b\xB1\x1\x2\x83B\x83C\x5\x156\xAC"+
		"\x2\x83C\x842\x3\x2\x2\x2\x83D\x83E\f\x3\x2\x2\x83E\x83F\a\x13\x2\x2\x83F"+
		"\x841\x5\x156\xAC\x2\x840\x83D\x3\x2\x2\x2\x841\x844\x3\x2\x2\x2\x842"+
		"\x840\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x161\x3\x2\x2\x2\x844\x842"+
		"\x3\x2\x2\x2\x845\x846\b\xB2\x1\x2\x846\x847\x5\x16A\xB6\x2\x847\x848"+
		"\a-\x2\x2\x848\x849\x5\x156\xAC\x2\x849\x852\x3\x2\x2\x2\x84A\x84B\f\x3"+
		"\x2\x2\x84B\x84C\a\x13\x2\x2\x84C\x84D\x5\x16A\xB6\x2\x84D\x84E\a-\x2"+
		"\x2\x84E\x84F\x5\x156\xAC\x2\x84F\x851\x3\x2\x2\x2\x850\x84A\x3\x2\x2"+
		"\x2\x851\x854\x3\x2\x2\x2\x852\x850\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2"+
		"\x853\x163\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2\x855\x856\a\x16\x2\x2\x856"+
		"\x857\x5\x156\xAC\x2\x857\x858\a\x17\x2\x2\x858\x165\x3\x2\x2\x2\x859"+
		"\x85A\b\xB4\x1\x2\x85A\x85D\a\xA6\x2\x2\x85B\x85D\x5\x16A\xB6\x2\x85C"+
		"\x859\x3\x2\x2\x2\x85C\x85B\x3\x2\x2\x2\x85D\x863\x3\x2\x2\x2\x85E\x85F"+
		"\f\x3\x2\x2\x85F\x860\a\x15\x2\x2\x860\x862\x5\x16A\xB6\x2\x861\x85E\x3"+
		"\x2\x2\x2\x862\x865\x3\x2\x2\x2\x863\x861\x3\x2\x2\x2\x863\x864\x3\x2"+
		"\x2\x2\x864\x167\x3\x2\x2\x2\x865\x863\x3\x2\x2\x2\x866\x86C\a\xA9\x2"+
		"\x2\x867\x86C\a\xAB\x2\x2\x868\x86C\a\xA7\x2\x2\x869\x86C\a\x9E\x2\x2"+
		"\x86A\x86C\a\x9F\x2\x2\x86B\x866\x3\x2\x2\x2\x86B\x867\x3\x2\x2\x2\x86B"+
		"\x868\x3\x2\x2\x2\x86B\x869\x3\x2\x2\x2\x86B\x86A\x3\x2\x2\x2\x86C\x169"+
		"\x3\x2\x2\x2\x86D\x86E\t\b\x2\x2\x86E\x16B\x3\x2\x2\x2\x86F\x870\a\x89"+
		"\x2\x2\x870\x871\x5\x16E\xB8\x2\x871\x872\a\x12\x2\x2\x872\x877\x3\x2"+
		"\x2\x2\x873\x874\x5\x16E\xB8\x2\x874\x875\a\x12\x2\x2\x875\x877\x3\x2"+
		"\x2\x2\x876\x86F\x3\x2\x2\x2\x876\x873\x3\x2\x2\x2\x877\x16D\x3\x2\x2"+
		"\x2\x878\x879\b\xB8\x1\x2\x879\x87A\x5\x170\xB9\x2\x87A\x87F\x3\x2\x2"+
		"\x2\x87B\x87C\f\x3\x2\x2\x87C\x87E\x5\x176\xBC\x2\x87D\x87B\x3\x2\x2\x2"+
		"\x87E\x881\x3\x2\x2\x2\x87F\x87D\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880"+
		"\x16F\x3\x2\x2\x2\x881\x87F\x3\x2\x2\x2\x882\x888\x5\x172\xBA\x2\x883"+
		"\x888\x5\x174\xBB\x2\x884\x888\x5\x17E\xC0\x2\x885\x888\x5\x180\xC1\x2"+
		"\x886\x888\x5\x184\xC3\x2\x887\x882\x3\x2\x2\x2\x887\x883\x3\x2\x2\x2"+
		"\x887\x884\x3\x2\x2\x2\x887\x885\x3\x2\x2\x2\x887\x886\x3\x2\x2\x2\x888"+
		"\x171\x3\x2\x2\x2\x889\x88A\x5\x102\x82\x2\x88A\x173\x3\x2\x2\x2\x88B"+
		"\x88C\x5\x126\x94\x2\x88C\x88D\x5\x178\xBD\x2\x88D\x175\x3\x2\x2\x2\x88E"+
		"\x88F\a\x15\x2\x2\x88F\x892\x5\x178\xBD\x2\x890\x892\x5\x17C\xBF\x2\x891"+
		"\x88E\x3\x2\x2\x2\x891\x890\x3\x2\x2\x2\x892\x177\x3\x2\x2\x2\x893\x894"+
		"\x5\x186\xC4\x2\x894\x896\a\x16\x2\x2\x895\x897\x5\x17A\xBE\x2\x896\x895"+
		"\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x899\a\x17"+
		"\x2\x2\x899\x179\x3\x2\x2\x2\x89A\x89B\b\xBE\x1\x2\x89B\x89C\x5\x16E\xB8"+
		"\x2\x89C\x8A2\x3\x2\x2\x2\x89D\x89E\f\x3\x2\x2\x89E\x89F\a\x13\x2\x2\x89F"+
		"\x8A1\x5\x16E\xB8\x2\x8A0\x89D\x3\x2\x2\x2\x8A1\x8A4\x3\x2\x2\x2\x8A2"+
		"\x8A0\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x17B\x3\x2\x2\x2\x8A4\x8A2"+
		"\x3\x2\x2\x2\x8A5\x8A6\a\x18\x2\x2\x8A6\x8A7\x5\x16E\xB8\x2\x8A7\x8A8"+
		"\a\x19\x2\x2\x8A8\x17D\x3\x2\x2\x2\x8A9\x8AA\a\x16\x2\x2\x8AA\x8AB\x5"+
		"\x16E\xB8\x2\x8AB\x8AC\a\x17\x2\x2\x8AC\x17F\x3\x2\x2\x2\x8AD\x8AE\b\xC1"+
		"\x1\x2\x8AE\x8AF\x5\x186\xC4\x2\x8AF\x8B5\x3\x2\x2\x2\x8B0\x8B1\f\x3\x2"+
		"\x2\x8B1\x8B2\a\x15\x2\x2\x8B2\x8B4\x5\x186\xC4\x2\x8B3\x8B0\x3\x2\x2"+
		"\x2\x8B4\x8B7\x3\x2\x2\x2\x8B5\x8B3\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2"+
		"\x8B6\x181\x3\x2\x2\x2\x8B7\x8B5\x3\x2\x2\x2\x8B8\x8B9\b\xC2\x1\x2\x8B9"+
		"\x8BA\x5\x180\xC1\x2\x8BA\x8BF\x3\x2\x2\x2\x8BB\x8BC\f\x3\x2\x2\x8BC\x8BE"+
		"\a\xA6\x2\x2\x8BD\x8BB\x3\x2\x2\x2\x8BE\x8C1\x3\x2\x2\x2\x8BF\x8BD\x3"+
		"\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x183\x3\x2\x2\x2\x8C1\x8BF\x3\x2"+
		"\x2\x2\x8C2\x8C8\a\xA9\x2\x2\x8C3\x8C8\a\xAB\x2\x2\x8C4\x8C8\a\xA7\x2"+
		"\x2\x8C5\x8C8\a\x9E\x2\x2\x8C6\x8C8\a\x9F\x2\x2\x8C7\x8C2\x3\x2\x2\x2"+
		"\x8C7\x8C3\x3\x2\x2\x2\x8C7\x8C4\x3\x2\x2\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7"+
		"\x8C6\x3\x2\x2\x2\x8C8\x185\x3\x2\x2\x2\x8C9\x8CA\t\t\x2\x2\x8CA\x187"+
		"\x3\x2\x2\x2\x8CB\x8CC\a\x89\x2\x2\x8CC\x8CD\x5\x18A\xC6\x2\x8CD\x8CE"+
		"\a\x12\x2\x2\x8CE\x8D3\x3\x2\x2\x2\x8CF\x8D0\x5\x18A\xC6\x2\x8D0\x8D1"+
		"\a\x12\x2\x2\x8D1\x8D3\x3\x2\x2\x2\x8D2\x8CB\x3\x2\x2\x2\x8D2\x8CF\x3"+
		"\x2\x2\x2\x8D3\x189\x3\x2\x2\x2\x8D4\x8D5\b\xC6\x1\x2\x8D5\x8D6\x5\x18C"+
		"\xC7\x2\x8D6\x8DB\x3\x2\x2\x2\x8D7\x8D8\f\x3\x2\x2\x8D8\x8DA\x5\x192\xCA"+
		"\x2\x8D9\x8D7\x3\x2\x2\x2\x8DA\x8DD\x3\x2\x2\x2\x8DB\x8D9\x3\x2\x2\x2"+
		"\x8DB\x8DC\x3\x2\x2\x2\x8DC\x18B\x3\x2\x2\x2\x8DD\x8DB\x3\x2\x2\x2\x8DE"+
		"\x8E4\x5\x18E\xC8\x2\x8DF\x8E4\x5\x190\xC9\x2\x8E0\x8E4\x5\x19A\xCE\x2"+
		"\x8E1\x8E4\x5\x19C\xCF\x2\x8E2\x8E4\x5\x19E\xD0\x2\x8E3\x8DE\x3\x2\x2"+
		"\x2\x8E3\x8DF\x3\x2\x2\x2\x8E3\x8E0\x3\x2\x2\x2\x8E3\x8E1\x3\x2\x2\x2"+
		"\x8E3\x8E2\x3\x2\x2\x2\x8E4\x18D\x3\x2\x2\x2\x8E5\x8E6\x5\x102\x82\x2"+
		"\x8E6\x18F\x3\x2\x2\x2\x8E7\x8E8\x5\x126\x94\x2\x8E8\x8E9\x5\x194\xCB"+
		"\x2\x8E9\x191\x3\x2\x2\x2\x8EA\x8EB\a\x15\x2\x2\x8EB\x8EE\x5\x194\xCB"+
		"\x2\x8EC\x8EE\x5\x198\xCD\x2\x8ED\x8EA\x3\x2\x2\x2\x8ED\x8EC\x3\x2\x2"+
		"\x2\x8EE\x193\x3\x2\x2\x2\x8EF\x8F0\x5\x1A0\xD1\x2\x8F0\x8F2\a\x16\x2"+
		"\x2\x8F1\x8F3\x5\x196\xCC\x2\x8F2\x8F1\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2"+
		"\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8F5\a\x17\x2\x2\x8F5\x195\x3\x2\x2\x2"+
		"\x8F6\x8F7\b\xCC\x1\x2\x8F7\x8F8\x5\x18A\xC6\x2\x8F8\x8FE\x3\x2\x2\x2"+
		"\x8F9\x8FA\f\x3\x2\x2\x8FA\x8FB\a\x13\x2\x2\x8FB\x8FD\x5\x18A\xC6\x2\x8FC"+
		"\x8F9\x3\x2\x2\x2\x8FD\x900\x3\x2\x2\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FF"+
		"\x3\x2\x2\x2\x8FF\x197\x3\x2\x2\x2\x900\x8FE\x3\x2\x2\x2\x901\x902\a\x18"+
		"\x2\x2\x902\x903\x5\x18A\xC6\x2\x903\x904\a\x19\x2\x2\x904\x199\x3\x2"+
		"\x2\x2\x905\x906\a\x16\x2\x2\x906\x907\x5\x18A\xC6\x2\x907\x908\a\x17"+
		"\x2\x2\x908\x19B\x3\x2\x2\x2\x909\x90A\b\xCF\x1\x2\x90A\x90D\a\xA6\x2"+
		"\x2\x90B\x90D\x5\x1A0\xD1\x2\x90C\x909\x3\x2\x2\x2\x90C\x90B\x3\x2\x2"+
		"\x2\x90D\x913\x3\x2\x2\x2\x90E\x90F\f\x3\x2\x2\x90F\x910\a\x15\x2\x2\x910"+
		"\x912\x5\x1A0\xD1\x2\x911\x90E\x3\x2\x2\x2\x912\x915\x3\x2\x2\x2\x913"+
		"\x911\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x19D\x3\x2\x2\x2\x915\x913"+
		"\x3\x2\x2\x2\x916\x91C\a\xA9\x2\x2\x917\x91C\a\xAB\x2\x2\x918\x91C\a\xA7"+
		"\x2\x2\x919\x91C\a\x9E\x2\x2\x91A\x91C\a\x9F\x2\x2\x91B\x916\x3\x2\x2"+
		"\x2\x91B\x917\x3\x2\x2\x2\x91B\x918\x3\x2\x2\x2\x91B\x919\x3\x2\x2\x2"+
		"\x91B\x91A\x3\x2\x2\x2\x91C\x19F\x3\x2\x2\x2\x91D\x91E\t\n\x2\x2\x91E"+
		"\x1A1\x3\x2\x2\x2\xC7\x1A8\x1AF\x1CD\x1D3\x1D8\x1DE\x1E0\x1E3\x1E9\x1ED"+
		"\x1F8\x201\x210\x219\x220\x22A\x240\x257\x264\x26F\x27D\x28B\x299\x2AD"+
		"\x2B8\x2BA\x2C3\x2C7\x2CF\x2D3\x2DF\x2E4\x2E8\x303\x30A\x30F\x313\x328"+
		"\x336\x33A\x33D\x35E\x371\x378\x39A\x3A3\x3BA\x3CA\x3CF\x3D7\x3E0\x3F7"+
		"\x3FD\x41B\x484\x486\x490\x4A5\x4B5\x4BA\x4C4\x4C9\x4CB\x4D1\x4D3\x4D5"+
		"\x4E9\x4F0\x4F3\x4F9\x4FD\x502\x504\x508\x510\x517\x519\x51E\x520\x52B"+
		"\x53E\x547\x54D\x552\x559\x561\x56C\x574\x57C\x582\x58A\x593\x59B\x5A8"+
		"\x5AB\x5AF\x5B4\x5B8\x5C1\x5D6\x5E0\x5E2\x5E7\x5F7\x5FC\x605\x60C\x611"+
		"\x616\x625\x62A\x62D\x631\x636\x63D\x648\x64A\x653\x65B\x663\x669\x675"+
		"\x679\x683\x688\x68E\x695\x69A\x6A1\x6A9\x6B0\x6BA\x6C7\x6CB\x6CE\x6D2"+
		"\x6D5\x6DD\x6E6\x6EF\x6F8\x709\x719\x720\x727\x731\x738\x73B\x73F\x744"+
		"\x748\x753\x756\x75D\x76D\x77A\x781\x792\x79A\x79E\x7A6\x7C8\x7D1\x7DB"+
		"\x7E7\x7EC\x7F8\x80A\x811\x81A\x821\x829\x82E\x838\x842\x852\x85C\x863"+
		"\x86B\x876\x87F\x887\x891\x896\x8A2\x8B5\x8BF\x8C7\x8D2\x8DB\x8E3\x8ED"+
		"\x8F2\x8FE\x90C\x913\x91B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace prompto.parser
