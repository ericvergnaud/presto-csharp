//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prompto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class EParser : AbstractParser {
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, COMMENT=8, 
		JAVA=9, CSHARP=10, PYTHON2=11, PYTHON3=12, JAVASCRIPT=13, SWIFT=14, COLON=15, 
		SEMI=16, COMMA=17, RANGE=18, DOT=19, LPAR=20, RPAR=21, LBRAK=22, RBRAK=23, 
		LCURL=24, RCURL=25, QMARK=26, XMARK=27, AMP=28, AMP2=29, PIPE=30, PIPE2=31, 
		PLUS=32, MINUS=33, STAR=34, SLASH=35, BSLASH=36, PERCENT=37, GT=38, GTE=39, 
		LT=40, LTE=41, LTGT=42, EQ=43, XEQ=44, EQ2=45, TEQ=46, TILDE=47, LARROW=48, 
		RARROW=49, BOOLEAN=50, CHARACTER=51, TEXT=52, INTEGER=53, DECIMAL=54, 
		DATE=55, TIME=56, DATETIME=57, PERIOD=58, METHOD_T=59, CODE=60, DOCUMENT=61, 
		BLOB=62, IMAGE=63, UUID=64, ABSTRACT=65, ALL=66, ALWAYS=67, AND=68, ANY=69, 
		AS=70, ASC=71, ATTR=72, ATTRIBUTE=73, ATTRIBUTES=74, BINDINGS=75, BY=76, 
		CASE=77, CATCH=78, CATEGORY=79, CLASS=80, CLOSE=81, CONTAINS=82, DEF=83, 
		DEFAULT=84, DEFINE=85, DESC=86, DO=87, DOING=88, EACH=89, ELSE=90, ENUM=91, 
		ENUMERATED=92, EXCEPT=93, EXECUTE=94, EXPECTING=95, EXTENDS=96, FETCH=97, 
		FINALLY=98, FOR=99, FROM=100, GETTER=101, IF=102, IN=103, INDEX=104, INVOKE=105, 
		IS=106, MATCHING=107, METHOD=108, METHODS=109, MODULO=110, MUTABLE=111, 
		NATIVE=112, NONE=113, NOT=114, NOTHING=115, NULL=116, ON=117, ONE=118, 
		OPEN=119, OPERATOR=120, OR=121, ORDER=122, OTHERWISE=123, PASS=124, RAISE=125, 
		READ=126, RECEIVING=127, RESOURCE=128, RETURN=129, RETURNING=130, ROWS=131, 
		SELF=132, SETTER=133, SINGLETON=134, SORTED=135, STORABLE=136, STORE=137, 
		SWITCH=138, TEST=139, THIS=140, THROW=141, TO=142, TRY=143, VERIFYING=144, 
		WITH=145, WHEN=146, WHERE=147, WHILE=148, WRITE=149, BOOLEAN_LITERAL=150, 
		CHAR_LITERAL=151, MIN_INTEGER=152, MAX_INTEGER=153, SYMBOL_IDENTIFIER=154, 
		TYPE_IDENTIFIER=155, VARIABLE_IDENTIFIER=156, NATIVE_IDENTIFIER=157, DOLLAR_IDENTIFIER=158, 
		TEXT_LITERAL=159, INTEGER_LITERAL=160, HEXA_LITERAL=161, DECIMAL_LITERAL=162, 
		DATETIME_LITERAL=163, TIME_LITERAL=164, DATE_LITERAL=165, PERIOD_LITERAL=166;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_category_declaration = 5, RULE_singleton_category_declaration = 6, 
		RULE_derived_list = 7, RULE_operator_method_declaration = 8, RULE_setter_method_declaration = 9, 
		RULE_getter_method_declaration = 10, RULE_native_category_declaration = 11, 
		RULE_native_resource_declaration = 12, RULE_native_category_bindings = 13, 
		RULE_native_category_binding_list = 14, RULE_attribute_list = 15, RULE_abstract_method_declaration = 16, 
		RULE_concrete_method_declaration = 17, RULE_native_method_declaration = 18, 
		RULE_test_method_declaration = 19, RULE_assertion = 20, RULE_full_argument_list = 21, 
		RULE_typed_argument = 22, RULE_statement = 23, RULE_store_statement = 24, 
		RULE_method_call_statement = 25, RULE_with_resource_statement = 26, RULE_with_singleton_statement = 27, 
		RULE_switch_statement = 28, RULE_switch_case_statement = 29, RULE_for_each_statement = 30, 
		RULE_do_while_statement = 31, RULE_while_statement = 32, RULE_if_statement = 33, 
		RULE_else_if_statement_list = 34, RULE_raise_statement = 35, RULE_try_statement = 36, 
		RULE_catch_statement = 37, RULE_return_statement = 38, RULE_expression = 39, 
		RULE_unresolved_expression = 40, RULE_unresolved_selector = 41, RULE_invocation_expression = 42, 
		RULE_invocation_trailer = 43, RULE_instance_expression = 44, RULE_instance_selector = 45, 
		RULE_document_expression = 46, RULE_constructor_expression = 47, RULE_read_expression = 48, 
		RULE_write_statement = 49, RULE_ambiguous_expression = 50, RULE_fetch_expression = 51, 
		RULE_sorted_expression = 52, RULE_argument_assignment_list = 53, RULE_with_argument_assignment_list = 54, 
		RULE_argument_assignment = 55, RULE_assign_instance_statement = 56, RULE_child_instance = 57, 
		RULE_assign_tuple_statement = 58, RULE_lfs = 59, RULE_lfp = 60, RULE_indent = 61, 
		RULE_dedent = 62, RULE_null_literal = 63, RULE_declaration_list = 64, 
		RULE_declarations = 65, RULE_declaration = 66, RULE_resource_declaration = 67, 
		RULE_enum_declaration = 68, RULE_native_symbol_list = 69, RULE_category_symbol_list = 70, 
		RULE_symbol_list = 71, RULE_attribute_constraint = 72, RULE_list_literal = 73, 
		RULE_set_literal = 74, RULE_expression_list = 75, RULE_range_literal = 76, 
		RULE_typedef = 77, RULE_primary_type = 78, RULE_native_type = 79, RULE_category_type = 80, 
		RULE_mutable_category_type = 81, RULE_code_type = 82, RULE_category_declaration = 83, 
		RULE_type_identifier_list = 84, RULE_method_identifier = 85, RULE_identifier = 86, 
		RULE_variable_identifier = 87, RULE_type_identifier = 88, RULE_symbol_identifier = 89, 
		RULE_argument_list = 90, RULE_argument = 91, RULE_operator_argument = 92, 
		RULE_named_argument = 93, RULE_code_argument = 94, RULE_category_or_any_type = 95, 
		RULE_any_type = 96, RULE_member_method_declaration_list = 97, RULE_member_method_declaration = 98, 
		RULE_native_member_method_declaration_list = 99, RULE_native_member_method_declaration = 100, 
		RULE_native_category_binding = 101, RULE_python_category_binding = 102, 
		RULE_python_module = 103, RULE_module_token = 104, RULE_javascript_category_binding = 105, 
		RULE_javascript_module = 106, RULE_variable_identifier_list = 107, RULE_method_declaration = 108, 
		RULE_comment_statement = 109, RULE_native_statement_list = 110, RULE_native_statement = 111, 
		RULE_python_native_statement = 112, RULE_javascript_native_statement = 113, 
		RULE_statement_list = 114, RULE_assertion_list = 115, RULE_switch_case_statement_list = 116, 
		RULE_catch_statement_list = 117, RULE_literal_collection = 118, RULE_atomic_literal = 119, 
		RULE_literal_list_literal = 120, RULE_selectable_expression = 121, RULE_this_expression = 122, 
		RULE_parenthesis_expression = 123, RULE_literal_expression = 124, RULE_collection_literal = 125, 
		RULE_tuple_literal = 126, RULE_dict_literal = 127, RULE_expression_tuple = 128, 
		RULE_dict_entry_list = 129, RULE_dict_entry = 130, RULE_slice_arguments = 131, 
		RULE_assign_variable_statement = 132, RULE_assignable_instance = 133, 
		RULE_is_expression = 134, RULE_order_by_list = 135, RULE_order_by = 136, 
		RULE_operator = 137, RULE_new_token = 138, RULE_key_token = 139, RULE_value_token = 140, 
		RULE_symbols_token = 141, RULE_assign = 142, RULE_multiply = 143, RULE_divide = 144, 
		RULE_idivide = 145, RULE_modulo = 146, RULE_javascript_statement = 147, 
		RULE_javascript_expression = 148, RULE_javascript_primary_expression = 149, 
		RULE_javascript_this_expression = 150, RULE_javascript_new_expression = 151, 
		RULE_javascript_selector_expression = 152, RULE_javascript_method_expression = 153, 
		RULE_javascript_arguments = 154, RULE_javascript_item_expression = 155, 
		RULE_javascript_parenthesis_expression = 156, RULE_javascript_identifier_expression = 157, 
		RULE_javascript_literal_expression = 158, RULE_javascript_identifier = 159, 
		RULE_python_statement = 160, RULE_python_expression = 161, RULE_python_primary_expression = 162, 
		RULE_python_selector_expression = 163, RULE_python_method_expression = 164, 
		RULE_python_argument_list = 165, RULE_python_ordinal_argument_list = 166, 
		RULE_python_named_argument_list = 167, RULE_python_parenthesis_expression = 168, 
		RULE_python_identifier_expression = 169, RULE_python_literal_expression = 170, 
		RULE_python_identifier = 171, RULE_java_statement = 172, RULE_java_expression = 173, 
		RULE_java_primary_expression = 174, RULE_java_this_expression = 175, RULE_java_new_expression = 176, 
		RULE_java_selector_expression = 177, RULE_java_method_expression = 178, 
		RULE_java_arguments = 179, RULE_java_item_expression = 180, RULE_java_parenthesis_expression = 181, 
		RULE_java_identifier_expression = 182, RULE_java_class_identifier_expression = 183, 
		RULE_java_literal_expression = 184, RULE_java_identifier = 185, RULE_csharp_statement = 186, 
		RULE_csharp_expression = 187, RULE_csharp_primary_expression = 188, RULE_csharp_this_expression = 189, 
		RULE_csharp_new_expression = 190, RULE_csharp_selector_expression = 191, 
		RULE_csharp_method_expression = 192, RULE_csharp_arguments = 193, RULE_csharp_item_expression = 194, 
		RULE_csharp_parenthesis_expression = 195, RULE_csharp_identifier_expression = 196, 
		RULE_csharp_literal_expression = 197, RULE_csharp_identifier = 198;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "operator_method_declaration", 
		"setter_method_declaration", "getter_method_declaration", "native_category_declaration", 
		"native_resource_declaration", "native_category_bindings", "native_category_binding_list", 
		"attribute_list", "abstract_method_declaration", "concrete_method_declaration", 
		"native_method_declaration", "test_method_declaration", "assertion", "full_argument_list", 
		"typed_argument", "statement", "store_statement", "method_call_statement", 
		"with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "return_statement", "expression", "unresolved_expression", 
		"unresolved_selector", "invocation_expression", "invocation_trailer", 
		"instance_expression", "instance_selector", "document_expression", "constructor_expression", 
		"read_expression", "write_statement", "ambiguous_expression", "fetch_expression", 
		"sorted_expression", "argument_assignment_list", "with_argument_assignment_list", 
		"argument_assignment", "assign_instance_statement", "child_instance", 
		"assign_tuple_statement", "lfs", "lfp", "indent", "dedent", "null_literal", 
		"declaration_list", "declarations", "declaration", "resource_declaration", 
		"enum_declaration", "native_symbol_list", "category_symbol_list", "symbol_list", 
		"attribute_constraint", "list_literal", "set_literal", "expression_list", 
		"range_literal", "typedef", "primary_type", "native_type", "category_type", 
		"mutable_category_type", "code_type", "category_declaration", "type_identifier_list", 
		"method_identifier", "identifier", "variable_identifier", "type_identifier", 
		"symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "module_token", "javascript_category_binding", "javascript_module", 
		"variable_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "order_by_list", 
		"order_by", "operator", "new_token", "key_token", "value_token", "symbols_token", 
		"assign", "multiply", "divide", "idivide", "modulo", "javascript_statement", 
		"javascript_expression", "javascript_primary_expression", "javascript_this_expression", 
		"javascript_new_expression", "javascript_selector_expression", "javascript_method_expression", 
		"javascript_arguments", "javascript_item_expression", "javascript_parenthesis_expression", 
		"javascript_identifier_expression", "javascript_literal_expression", "javascript_identifier", 
		"python_statement", "python_expression", "python_primary_expression", 
		"python_selector_expression", "python_method_expression", "python_argument_list", 
		"python_ordinal_argument_list", "python_named_argument_list", "python_parenthesis_expression", 
		"python_identifier_expression", "python_literal_expression", "python_identifier", 
		"java_statement", "java_expression", "java_primary_expression", "java_this_expression", 
		"java_new_expression", "java_selector_expression", "java_method_expression", 
		"java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_new_expression", "csharp_selector_expression", 
		"csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
		"csharp_parenthesis_expression", "csharp_identifier_expression", "csharp_literal_expression", 
		"csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", null, "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		"','", "'..'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
		"'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
		"'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Method'", 
		"'Code'", "'Document'", "'Blob'", "'Image'", "'UUID'", "'abstract'", "'all'", 
		"'always'", "'and'", "'any'", "'as'", null, "'attr'", "'attribute'", "'attributes'", 
		"'bindings'", "'by'", "'case'", "'catch'", "'category'", "'class'", "'close'", 
		"'contains'", "'def'", "'default'", "'define'", null, "'do'", "'doing'", 
		"'each'", "'else'", "'enum'", "'enumerated'", "'except'", "'execute'", 
		"'expecting'", "'extends'", "'fetch'", "'finally'", "'for'", "'from'", 
		"'getter'", "'if'", "'in'", "'index'", "'invoke'", "'is'", "'matching'", 
		"'method'", "'methods'", "'modulo'", "'mutable'", "'native'", "'None'", 
		"'not'", null, "'null'", "'on'", "'one'", "'open'", "'operator'", "'or'", 
		"'order'", "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", 
		"'resource'", "'return'", "'returning'", "'rows'", "'self'", "'setter'", 
		"'singleton'", "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
		"'this'", "'throw'", "'to'", "'try'", "'verifying'", "'with'", "'when'", 
		"'where'", "'while'", "'write'", null, null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "COMMENT", 
		"JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
		"SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
		"STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
		"EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", "CHARACTER", 
		"TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
		"CODE", "DOCUMENT", "BLOB", "IMAGE", "UUID", "ABSTRACT", "ALL", "ALWAYS", 
		"AND", "ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
		"BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", "DEF", 
		"DEFAULT", "DEFINE", "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
		"EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", "FINALLY", "FOR", 
		"FROM", "GETTER", "IF", "IN", "INDEX", "INVOKE", "IS", "MATCHING", "METHOD", 
		"METHODS", "MODULO", "MUTABLE", "NATIVE", "NONE", "NOT", "NOTHING", "NULL", 
		"ON", "ONE", "OPEN", "OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", 
		"READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", "ROWS", "SELF", 
		"SETTER", "SINGLETON", "SORTED", "STORABLE", "STORE", "SWITCH", "TEST", 
		"THIS", "THROW", "TO", "TRY", "VERIFYING", "WITH", "WHEN", "WHERE", "WHILE", 
		"WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", 
		"SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
		"DOLLAR_IDENTIFIER", "TEXT_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
		"DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", "DATE_LITERAL", 
		"PERIOD_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(DEFINE);
			State = 399; _localctx.name = type_identifier();
			State = 400; Match(AS);
			State = 401; Match(ENUMERATED);
			State = 404;
			switch (TokenStream.La(1)) {
			case CATEGORY:
				{
				State = 402; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 403; _localctx.derived = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 411;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				{
				State = 406; _localctx.attrs = attribute_list();
				State = 407; Match(COMMA);
				State = 408; Match(AND);
				}
				}
				break;
			case 2:
				{
				State = 410; Match(WITH);
				}
				break;
			}
			State = 413; symbols_token();
			State = 414; Match(COLON);
			State = 415; indent();
			State = 416; _localctx.symbols = category_symbol_list(0);
			State = 417; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(DEFINE);
			State = 420; _localctx.name = type_identifier();
			State = 421; Match(AS);
			State = 422; Match(ENUMERATED);
			State = 423; _localctx.typ = native_type();
			State = 424; Match(WITH);
			State = 425; symbols_token();
			State = 426; Match(COLON);
			State = 427; indent();
			State = 428; _localctx.symbols = native_symbol_list(0);
			State = 429; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Value_tokenContext value_token() {
			return GetRuleContext<Value_tokenContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; _localctx.name = symbol_identifier();
			State = 432; Match(WITH);
			State = 433; _localctx.exp = expression(0);
			State = 434; Match(AS);
			State = 435; value_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; _localctx.name = symbol_identifier();
			State = 438; _localctx.args = with_argument_assignment_list(0);
			State = 441;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 439; Match(AND);
				State = 440; _localctx.arg = argument_assignment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public Variable_identifier_listContext indices;
		public Variable_identifierContext index;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode INDEX() { return GetToken(EParser.INDEX, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(DEFINE);
			State = 444; _localctx.name = variable_identifier();
			State = 445; Match(AS);
			State = 447;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 446; Match(STORABLE);
				}
			}

			State = 449; _localctx.typ = typedef(0);
			State = 450; Match(ATTRIBUTE);
			State = 452;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 451; _localctx.match = attribute_constraint();
				}
				break;
			}
			State = 462;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 454; Match(WITH);
				State = 455; _localctx.indices = variable_identifier_list(0);
				State = 458;
				_la = TokenStream.La(1);
				if (_la==AND) {
					{
					State = 456; Match(AND);
					State = 457; _localctx.index = variable_identifier();
					}
				}

				State = 460; Match(INDEX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(DEFINE);
			State = 465; _localctx.name = type_identifier();
			State = 466; Match(AS);
			State = 468;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 467; Match(STORABLE);
				}
			}

			State = 472;
			switch (TokenStream.La(1)) {
			case CATEGORY:
				{
				State = 470; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 471; _localctx.derived = derived_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 492;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 474; _localctx.attrs = attribute_list();
				State = 483;
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 475; Match(COMMA);
					State = 476; Match(AND);
					State = 477; Match(METHODS);
					State = 478; Match(COLON);
					State = 479; indent();
					State = 480; _localctx.methods = member_method_declaration_list(0);
					State = 481; dedent();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 485; Match(WITH);
				State = 486; Match(METHODS);
				State = 487; Match(COLON);
				State = 488; indent();
				State = 489; _localctx.methods = member_method_declaration_list(0);
				State = 490; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SINGLETON() { return GetToken(EParser.SINGLETON, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleton_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494; Match(DEFINE);
			State = 495; _localctx.name = type_identifier();
			State = 496; Match(AS);
			State = 497; Match(SINGLETON);
			State = 516;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				{
				State = 498; _localctx.attrs = attribute_list();
				State = 507;
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 499; Match(COMMA);
					State = 500; Match(AND);
					State = 501; Match(METHODS);
					State = 502; Match(COLON);
					State = 503; indent();
					State = 504; _localctx.methods = member_method_declaration_list(0);
					State = 505; dedent();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 509; Match(WITH);
				State = 510; Match(METHODS);
				State = 511; Match(COLON);
				State = 512; indent();
				State = 513; _localctx.methods = member_method_declaration_list(0);
				State = 514; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
	 
		public Derived_listContext() { }
		public virtual void CopyFrom(Derived_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DerivedListItemContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public DerivedListItemContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedListItem(this);
		}
	}
	public partial class DerivedListContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public DerivedListContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedList(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_derived_list);
		try {
			State = 523;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new DerivedListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; ((DerivedListContext)_localctx).items = type_identifier_list(0);
				}
				break;
			case 2:
				_localctx = new DerivedListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; ((DerivedListItemContext)_localctx).items = type_identifier_list(0);
				State = 520; Match(AND);
				State = 521; ((DerivedListItemContext)_localctx).item = type_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(EParser.OPERATOR, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(DEFINE);
			State = 526; _localctx.op = @operator();
			State = 527; Match(AS);
			State = 528; Match(OPERATOR);
			State = 529; Match(RECEIVING);
			State = 530; _localctx.arg = operator_argument();
			State = 533;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 531; Match(RETURNING);
				State = 532; _localctx.typ = typedef(0);
				}
			}

			State = 535; Match(DOING);
			State = 536; Match(COLON);
			State = 537; indent();
			State = 538; _localctx.stmts = statement_list(0);
			State = 539; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; Match(DEFINE);
			State = 542; _localctx.name = variable_identifier();
			State = 543; Match(SETTER);
			State = 544; Match(DOING);
			State = 545; Match(COLON);
			State = 546; indent();
			State = 547; _localctx.stmts = statement_list(0);
			State = 548; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(DEFINE);
			State = 551; _localctx.name = variable_identifier();
			State = 552; Match(GETTER);
			State = 553; Match(DOING);
			State = 554; Match(COLON);
			State = 555; indent();
			State = 556; _localctx.stmts = statement_list(0);
			State = 557; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(DEFINE);
			State = 560; _localctx.name = type_identifier();
			State = 561; Match(AS);
			State = 563;
			_la = TokenStream.La(1);
			if (_la==STORABLE) {
				{
				State = 562; Match(STORABLE);
				}
			}

			State = 565; Match(NATIVE);
			State = 566; Match(CATEGORY);
			State = 574;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				{
				State = 567; _localctx.attrs = attribute_list();
				State = 568; Match(COMMA);
				State = 569; Match(AND);
				State = 570; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 572; Match(WITH);
				State = 573; Match(BINDINGS);
				}
				break;
			}
			State = 576; Match(COLON);
			State = 577; indent();
			State = 578; _localctx.bindings = native_category_bindings();
			State = 579; dedent();
			State = 588;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 580; lfp();
				State = 581; Match(AND);
				State = 582; Match(METHODS);
				State = 583; Match(COLON);
				State = 584; indent();
				State = 585; _localctx.methods = native_member_method_declaration_list(0);
				State = 586; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(EParser.RESOURCE, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_native_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(DEFINE);
			State = 591; _localctx.name = type_identifier();
			State = 592; Match(AS);
			State = 593; Match(NATIVE);
			State = 594; Match(RESOURCE);
			State = 602;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				{
				State = 595; _localctx.attrs = attribute_list();
				State = 596; Match(COMMA);
				State = 597; Match(AND);
				State = 598; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 600; Match(WITH);
				State = 601; Match(BINDINGS);
				}
				break;
			}
			State = 604; Match(COLON);
			State = 605; indent();
			State = 606; _localctx.bindings = native_category_bindings();
			State = 607; dedent();
			State = 616;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 608; lfp();
				State = 609; Match(AND);
				State = 610; Match(METHODS);
				State = 611; Match(COLON);
				State = 612; indent();
				State = 613; _localctx.methods = native_member_method_declaration_list(0);
				State = 614; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_category_bindings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(DEFINE);
			State = 619; Match(CATEGORY);
			State = 620; Match(BINDINGS);
			State = 621; Match(AS);
			State = 622; Match(COLON);
			State = 623; indent();
			State = 624; _localctx.items = native_category_binding_list(0);
			State = 625; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 628; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 630;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 631; lfp();
					State = 632; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
	 
		public Attribute_listContext() { }
		public virtual void CopyFrom(Attribute_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttributeListContext : Attribute_listContext {
		public Variable_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AttributeListContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}
	public partial class AttributeListItemContext : Attribute_listContext {
		public Variable_identifier_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTES() { return GetToken(EParser.ATTRIBUTES, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AttributeListItemContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeListItem(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute_list);
		try {
			State = 649;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new AttributeListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 639; Match(WITH);
				State = 640; Match(ATTRIBUTE);
				State = 641; ((AttributeListContext)_localctx).item = variable_identifier();
				}
				break;
			case 2:
				_localctx = new AttributeListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 642; Match(WITH);
				State = 643; Match(ATTRIBUTES);
				State = 644; ((AttributeListItemContext)_localctx).items = variable_identifier_list(0);
				State = 647;
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 645; Match(AND);
					State = 646; ((AttributeListItemContext)_localctx).item = variable_identifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(EParser.ABSTRACT, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_abstract_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(DEFINE);
			State = 652; _localctx.name = method_identifier();
			State = 653; Match(AS);
			State = 654; Match(ABSTRACT);
			State = 655; Match(METHOD);
			State = 658;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 656; Match(RECEIVING);
				State = 657; _localctx.args = full_argument_list();
				}
				break;
			}
			State = 662;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 660; Match(RETURNING);
				State = 661; _localctx.typ = typedef(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(DEFINE);
			State = 665; _localctx.name = method_identifier();
			State = 666; Match(AS);
			State = 667; Match(METHOD);
			State = 670;
			_la = TokenStream.La(1);
			if (_la==RECEIVING) {
				{
				State = 668; Match(RECEIVING);
				State = 669; _localctx.args = full_argument_list();
				}
			}

			State = 674;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 672; Match(RETURNING);
				State = 673; _localctx.typ = typedef(0);
				}
			}

			State = 676; Match(DOING);
			State = 677; Match(COLON);
			State = 678; indent();
			State = 679; _localctx.stmts = statement_list(0);
			State = 680; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(DEFINE);
			State = 683; _localctx.name = method_identifier();
			State = 684; Match(AS);
			State = 685; Match(NATIVE);
			State = 686; Match(METHOD);
			State = 689;
			_la = TokenStream.La(1);
			if (_la==RECEIVING) {
				{
				State = 687; Match(RECEIVING);
				State = 688; _localctx.args = full_argument_list();
				}
			}

			State = 693;
			_la = TokenStream.La(1);
			if (_la==RETURNING) {
				{
				State = 691; Match(RETURNING);
				State = 692; _localctx.typ = category_or_any_type();
				}
			}

			State = 695; Match(DOING);
			State = 696; Match(COLON);
			State = 697; indent();
			State = 698; _localctx.stmts = native_statement_list(0);
			State = 699; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ITerminalNode VERIFYING() { return GetToken(EParser.VERIFYING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701; Match(DEFINE);
			State = 702; _localctx.name = Match(TEXT_LITERAL);
			State = 703; Match(AS);
			State = 704; Match(TEST);
			State = 705; Match(METHOD);
			State = 706; Match(DOING);
			State = 707; Match(COLON);
			State = 708; indent();
			State = 709; _localctx.stmts = statement_list(0);
			State = 710; dedent();
			State = 711; lfp();
			State = 712; Match(AND);
			State = 713; Match(VERIFYING);
			State = 720;
			switch (TokenStream.La(1)) {
			case COLON:
				{
				{
				State = 714; Match(COLON);
				State = 715; indent();
				State = 716; _localctx.exps = assertion_list(0);
				State = 717; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				State = 719; _localctx.error = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_argument_listContext : ParserRuleContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public Full_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFull_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFull_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_argument_listContext full_argument_list() {
		Full_argument_listContext _localctx = new Full_argument_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_full_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; _localctx.items = argument_list(0);
			State = 727;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 725; Match(AND);
				State = 726; _localctx.item = argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Category_or_any_typeContext typ;
		public Variable_identifierContext name;
		public Attribute_listContext attrs;
		public Literal_expressionContext value;
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_typed_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; _localctx.typ = category_or_any_type();
			State = 730; _localctx.name = variable_identifier();
			State = 732;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 731; _localctx.attrs = attribute_list();
				}
				break;
			}
			State = 736;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 734; Match(EQ);
				State = 735; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommentStatementContext : StatementContext {
		public Comment_statementContext decl;
		public Comment_statementContext comment_statement() {
			return GetRuleContext<Comment_statementContext>(0);
		}
		public CommentStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCommentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCommentStatement(this);
		}
	}
	public partial class StoreStatementContext : StatementContext {
		public Store_statementContext stmt;
		public Store_statementContext store_statement() {
			return GetRuleContext<Store_statementContext>(0);
		}
		public StoreStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_call_statementContext stmt;
		public Method_call_statementContext method_call_statement() {
			return GetRuleContext<Method_call_statementContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_statement);
		try {
			State = 755;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 738; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 2:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 739; ((MethodCallStatementContext)_localctx).stmt = method_call_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 740; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new StoreStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 741; ((StoreStatementContext)_localctx).stmt = store_statement();
				}
				break;
			case 5:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 742; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 6:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 743; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 7:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 744; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 8:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 745; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 9:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 746; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 10:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 747; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 11:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 748; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 12:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 749; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 13:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 750; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 14:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 751; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 15:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 752; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 16:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 753; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 17:
				_localctx = new CommentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 754; ((CommentStatementContext)_localctx).decl = comment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_statementContext : ParserRuleContext {
		public Expression_listContext exps;
		public ITerminalNode STORE() { return GetToken(EParser.STORE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Store_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStore_statement(this);
		}
	}

	[RuleVersion(0)]
	public Store_statementContext store_statement() {
		Store_statementContext _localctx = new Store_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_store_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757; Match(STORE);
			State = 758; _localctx.exps = expression_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_call_statementContext : ParserRuleContext {
		public Method_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call_statement; } }
	 
		public Method_call_statementContext() { }
		public virtual void CopyFrom(Method_call_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InvokeStatementContext : Method_call_statementContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvokeStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvokeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvokeStatement(this);
		}
	}
	public partial class UnresolvedWithArgsStatementContext : Method_call_statementContext {
		public Unresolved_expressionContext exp;
		public Argument_assignment_listContext args;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public UnresolvedWithArgsStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedWithArgsStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedWithArgsStatement(this);
		}
	}

	[RuleVersion(0)]
	public Method_call_statementContext method_call_statement() {
		Method_call_statementContext _localctx = new Method_call_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_method_call_statement);
		try {
			State = 765;
			switch (TokenStream.La(1)) {
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new UnresolvedWithArgsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 760; ((UnresolvedWithArgsStatementContext)_localctx).exp = unresolved_expression(0);
				State = 762;
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 761; ((UnresolvedWithArgsStatementContext)_localctx).args = argument_assignment_list();
					}
					break;
				}
				}
				break;
			case INVOKE:
				_localctx = new InvokeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; ((InvokeStatementContext)_localctx).exp = invocation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(WITH);
			State = 768; _localctx.stmt = assign_variable_statement();
			State = 769; Match(COMMA);
			State = 770; Match(DO);
			State = 771; Match(COLON);
			State = 772; indent();
			State = 773; _localctx.stmts = statement_list(0);
			State = 774; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(WITH);
			State = 777; _localctx.typ = type_identifier();
			State = 778; Match(COMMA);
			State = 779; Match(DO);
			State = 780; Match(COLON);
			State = 781; indent();
			State = 782; _localctx.stmts = statement_list(0);
			State = 783; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(SWITCH);
			State = 786; Match(ON);
			State = 787; _localctx.exp = expression(0);
			State = 788; Match(COLON);
			State = 789; indent();
			State = 790; _localctx.cases = switch_case_statement_list(0);
			State = 798;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 791; lfp();
				State = 792; Match(OTHERWISE);
				State = 793; Match(COLON);
				State = 794; indent();
				State = 795; _localctx.stmts = statement_list(0);
				State = 796; dedent();
				}
				break;
			}
			State = 800; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_switch_case_statement);
		try {
			State = 817;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 802; Match(WHEN);
				State = 803; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 804; Match(COLON);
				State = 805; indent();
				State = 806; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 807; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 809; Match(WHEN);
				State = 810; Match(IN);
				State = 811; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 812; Match(COLON);
				State = 813; indent();
				State = 814; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 815; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(FOR);
			State = 820; Match(EACH);
			State = 821; _localctx.name1 = variable_identifier();
			State = 824;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 822; Match(COMMA);
				State = 823; _localctx.name2 = variable_identifier();
				}
			}

			State = 826; Match(IN);
			State = 827; _localctx.source = expression(0);
			State = 828; Match(COLON);
			State = 829; indent();
			State = 830; _localctx.stmts = statement_list(0);
			State = 831; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; Match(DO);
			State = 834; Match(COLON);
			State = 835; indent();
			State = 836; _localctx.stmts = statement_list(0);
			State = 837; dedent();
			State = 838; lfp();
			State = 839; Match(WHILE);
			State = 840; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; Match(WHILE);
			State = 843; _localctx.exp = expression(0);
			State = 844; Match(COLON);
			State = 845; indent();
			State = 846; _localctx.stmts = statement_list(0);
			State = 847; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(IF);
			State = 850; _localctx.exp = expression(0);
			State = 851; Match(COLON);
			State = 852; indent();
			State = 853; _localctx.stmts = statement_list(0);
			State = 854; dedent();
			State = 858;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 855; lfp();
				State = 856; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 867;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 860; lfp();
				State = 861; Match(ELSE);
				State = 862; Match(COLON);
				State = 863; indent();
				State = 864; _localctx.elseStmts = statement_list(0);
				State = 865; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 870; Match(ELSE);
			State = 871; Match(IF);
			State = 872; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 873; Match(COLON);
			State = 874; indent();
			State = 875; ((ElseIfStatementListContext)_localctx).stmts = statement_list(0);
			State = 876; dedent();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 890;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 878;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 879; lfp();
					State = 880; Match(ELSE);
					State = 881; Match(IF);
					State = 882; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 883; Match(COLON);
					State = 884; indent();
					State = 885; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list(0);
					State = 886; dedent();
					}
					} 
				}
				State = 892;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(EParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893; Match(RAISE);
			State = 894; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode ALWAYS() { return GetToken(EParser.ALWAYS, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_try_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; Match(SWITCH);
			State = 897; Match(ON);
			State = 898; _localctx.name = variable_identifier();
			State = 899; Match(DOING);
			State = 900; Match(COLON);
			State = 901; indent();
			State = 902; _localctx.stmts = statement_list(0);
			State = 903; dedent();
			State = 904; lfs();
			State = 906;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 905; _localctx.handlers = catch_statement_list(0);
				}
				break;
			}
			State = 919;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 911;
				switch (TokenStream.La(1)) {
				case OTHERWISE:
					{
					State = 908; Match(OTHERWISE);
					}
					break;
				case WHEN:
					{
					{
					State = 909; Match(WHEN);
					State = 910; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 913; Match(COLON);
				State = 914; indent();
				State = 915; _localctx.anyStmts = statement_list(0);
				State = 916; dedent();
				State = 917; lfs();
				}
				break;
			}
			State = 928;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 921; Match(ALWAYS);
				State = 922; Match(COLON);
				State = 923; indent();
				State = 924; _localctx.finalStmts = statement_list(0);
				State = 925; dedent();
				State = 926; lfs();
				}
				break;
			}
			State = 930; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_catch_statement);
		try {
			State = 951;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 932; Match(WHEN);
				State = 933; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 934; Match(COLON);
				State = 935; indent();
				State = 936; ((CatchAtomicStatementContext)_localctx).stmts = statement_list(0);
				State = 937; dedent();
				State = 938; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 940; Match(WHEN);
				State = 941; Match(IN);
				State = 942; Match(LBRAK);
				State = 943; ((CatchCollectionStatementContext)_localctx).exp = symbol_list(0);
				State = 944; Match(RBRAK);
				State = 945; Match(COLON);
				State = 946; indent();
				State = 947; ((CatchCollectionStatementContext)_localctx).stmts = statement_list(0);
				State = 948; dedent();
				State = 949; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(RETURN);
			State = 955;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 954; _localctx.exp = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class ReadExpressionContext : ExpressionContext {
		public Read_expressionContext exp;
		public Read_expressionContext read_expression() {
			return GetRuleContext<Read_expressionContext>(0);
		}
		public ReadExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReadExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class DocumentExpressionContext : ExpressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class InvocationExpressionContext : ExpressionContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(EParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class AmbiguousExpressionContext : ExpressionContext {
		public Ambiguous_expressionContext exp;
		public Ambiguous_expressionContext ambiguous_expression() {
			return GetRuleContext<Ambiguous_expressionContext>(0);
		}
		public AmbiguousExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(EParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		public Unresolved_expressionContext exp;
		public Argument_assignment_listContext args;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class FetchExpressionContext : ExpressionContext {
		public Fetch_expressionContext exp;
		public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public FetchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Method_identifierContext name;
		public ITerminalNode METHOD_T() { return GetToken(EParser.METHOD_T, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class SortedExpressionContext : ExpressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : ExpressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TILDE() { return GetToken(EParser.TILDE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(EParser.EXECUTE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(EParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class IteratorExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public IteratorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIteratorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIteratorExpression(this);
		}
	}
	public partial class UnresolvedExpressionContext : ExpressionContext {
		public Unresolved_expressionContext exp;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public UnresolvedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 958; Match(MINUS);
				State = 959; ((MinusExpressionContext)_localctx).exp = expression(39);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 960; Match(NOT);
				State = 961; ((NotExpressionContext)_localctx).exp = expression(38);
				}
				break;
			case 3:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 962; Match(CODE);
				State = 963; Match(COLON);
				State = 964; ((CodeExpressionContext)_localctx).exp = expression(11);
				}
				break;
			case 4:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 965; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 5:
				{
				_localctx = new UnresolvedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 966; ((UnresolvedExpressionContext)_localctx).exp = unresolved_expression(0);
				}
				break;
			case 6:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 967; ((MethodCallExpressionContext)_localctx).exp = unresolved_expression(0);
				State = 968; ((MethodCallExpressionContext)_localctx).args = argument_assignment_list();
				}
				break;
			case 7:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 970; Match(EXECUTE);
				State = 971; Match(COLON);
				State = 972; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				}
				break;
			case 8:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 973; Match(METHOD_T);
				State = 974; Match(COLON);
				State = 975; ((ClosureExpressionContext)_localctx).name = method_identifier();
				}
				break;
			case 9:
				{
				_localctx = new DocumentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 976; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 10:
				{
				_localctx = new ConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 977; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			case 11:
				{
				_localctx = new FetchExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 978; ((FetchExpressionContext)_localctx).exp = fetch_expression();
				}
				break;
			case 12:
				{
				_localctx = new ReadExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 979; ((ReadExpressionContext)_localctx).exp = read_expression();
				}
				break;
			case 13:
				{
				_localctx = new SortedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 980; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 14:
				{
				_localctx = new AmbiguousExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 981; ((AmbiguousExpressionContext)_localctx).exp = ambiguous_expression();
				}
				break;
			case 15:
				{
				_localctx = new InvocationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 982; ((InvocationExpressionContext)_localctx).exp = invocation_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1088;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1086;
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 985;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 986; multiply();
						State = 987; ((MultiplyExpressionContext)_localctx).right = expression(38);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 989;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 990; divide();
						State = 991; ((DivideExpressionContext)_localctx).right = expression(37);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 993;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 994; modulo();
						State = 995; ((ModuloExpressionContext)_localctx).right = expression(36);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 997;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 998; idivide();
						State = 999; ((IntDivideExpressionContext)_localctx).right = expression(35);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1001;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1002;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 1003; ((AddExpressionContext)_localctx).right = expression(34);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1004;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1005; Match(LT);
						State = 1006; ((LessThanExpressionContext)_localctx).right = expression(33);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1007;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1008; Match(LTE);
						State = 1009; ((LessThanOrEqualExpressionContext)_localctx).right = expression(32);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1010;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1011; Match(GT);
						State = 1012; ((GreaterThanExpressionContext)_localctx).right = expression(31);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1013;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1014; Match(GTE);
						State = 1015; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1016;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1017; Match(EQ);
						State = 1018; ((EqualsExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1019;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1020; Match(LTGT);
						State = 1021; ((NotEqualsExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1022;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1023; Match(TILDE);
						State = 1024; ((RoughlyEqualsExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1025;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1026; Match(OR);
						State = 1027; ((OrExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1028;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1029; Match(AND);
						State = 1030; ((AndExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1031;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1032; Match(IF);
						State = 1033; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 1034; Match(ELSE);
						State = 1035; ((TernaryExpressionContext)_localctx).ifFalse = expression(22);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1037;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1038; Match(IN);
						State = 1039; ((InExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1040;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1041; Match(CONTAINS);
						State = 1042; ((ContainsExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1043;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1044; Match(CONTAINS);
						State = 1045; Match(ALL);
						State = 1046; ((ContainsAllExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1047;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1048; Match(CONTAINS);
						State = 1049; Match(ANY);
						State = 1050; ((ContainsAnyExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1051;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1052; Match(NOT);
						State = 1053; Match(IN);
						State = 1054; ((NotInExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1055;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1056; Match(NOT);
						State = 1057; Match(CONTAINS);
						State = 1058; ((NotContainsExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1059;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1060; Match(NOT);
						State = 1061; Match(CONTAINS);
						State = 1062; Match(ALL);
						State = 1063; ((NotContainsAllExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1064;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1065; Match(NOT);
						State = 1066; Match(CONTAINS);
						State = 1067; Match(ANY);
						State = 1068; ((NotContainsAnyExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 24:
						{
						_localctx = new IteratorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IteratorExpressionContext)_localctx).exp = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1069;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1070; Match(FOR);
						State = 1071; Match(EACH);
						State = 1072; ((IteratorExpressionContext)_localctx).name = variable_identifier();
						State = 1073; Match(IN);
						State = 1074; ((IteratorExpressionContext)_localctx).source = expression(2);
						}
						break;
					case 25:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1076;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1077; Match(IS);
						State = 1078; Match(NOT);
						State = 1079; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 26:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1080;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1081; Match(IS);
						State = 1082; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 27:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1083;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1084; Match(AS);
						State = 1085; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					}
					} 
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_expression; } }
	 
		public Unresolved_expressionContext() { }
		public virtual void CopyFrom(Unresolved_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnresolvedSelectorContext : Unresolved_expressionContext {
		public Unresolved_expressionContext parent;
		public Unresolved_selectorContext selector;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Unresolved_selectorContext unresolved_selector() {
			return GetRuleContext<Unresolved_selectorContext>(0);
		}
		public UnresolvedSelectorContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedSelector(this);
		}
	}
	public partial class UnresolvedIdentifierContext : Unresolved_expressionContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnresolvedIdentifierContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_expressionContext unresolved_expression() {
		return unresolved_expression(0);
	}

	private Unresolved_expressionContext unresolved_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Unresolved_expressionContext _localctx = new Unresolved_expressionContext(Context, _parentState);
		Unresolved_expressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_unresolved_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnresolvedIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1092; ((UnresolvedIdentifierContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1098;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnresolvedSelectorContext(new Unresolved_expressionContext(_parentctx, _parentState));
					((UnresolvedSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_unresolved_expression);
					State = 1094;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1095; ((UnresolvedSelectorContext)_localctx).selector = unresolved_selector();
					}
					} 
				}
				State = 1100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_selectorContext : ParserRuleContext {
		public IdentifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Unresolved_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolved_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolved_selector(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_selectorContext unresolved_selector() {
		Unresolved_selectorContext _localctx = new Unresolved_selectorContext(Context, State);
		EnterRule(_localctx, 82, RULE_unresolved_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
			State = 1102; Match(DOT);
			State = 1103; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ITerminalNode INVOKE() { return GetToken(EParser.INVOKE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Invocation_trailerContext invocation_trailer() {
			return GetRuleContext<Invocation_trailerContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Invocation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_expressionContext invocation_expression() {
		Invocation_expressionContext _localctx = new Invocation_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_invocation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; Match(INVOKE);
			State = 1106; Match(COLON);
			State = 1107; _localctx.name = variable_identifier();
			State = 1108; invocation_trailer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_trailerContext : ParserRuleContext {
		public Invocation_trailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_trailer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_trailer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_trailer(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_trailerContext invocation_trailer() {
		Invocation_trailerContext _localctx = new Invocation_trailerContext(Context, State);
		EnterRule(_localctx, 86, RULE_invocation_trailer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			if (!(this.willBe(EParser.LF))) throw new FailedPredicateException(this, "$parser.willBe(EParser.LF)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1113; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 1115;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1116; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 1121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 90, RULE_instance_selector);
		try {
			State = 1135;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1122;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1123; Match(DOT);
				State = 1124; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1126; Match(LBRAK);
				State = 1127; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1128; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1131; Match(LBRAK);
				State = 1132; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1133; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137; Match(DOCUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
	 
		public Constructor_expressionContext() { }
		public virtual void CopyFrom(Constructor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext firstArg;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorFrom(this);
		}
	}
	public partial class ConstructorNoFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorNoFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorNoFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorNoFrom(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_constructor_expression);
		int _la;
		try {
			State = 1160;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new ConstructorFromContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1139; ((ConstructorFromContext)_localctx).typ = mutable_category_type();
				State = 1140; Match(FROM);
				State = 1141; ((ConstructorFromContext)_localctx).firstArg = expression(0);
				State = 1150;
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 1143;
					_la = TokenStream.La(1);
					if (_la==COMMA) {
						{
						State = 1142; Match(COMMA);
						}
					}

					State = 1145; ((ConstructorFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1148;
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						State = 1146; Match(AND);
						State = 1147; ((ConstructorFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ConstructorNoFromContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1152; ((ConstructorNoFromContext)_localctx).typ = mutable_category_type();
				State = 1158;
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 1153; ((ConstructorNoFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1156;
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 1154; Match(AND);
						State = 1155; ((ConstructorNoFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRead_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRead_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_expressionContext read_expression() {
		Read_expressionContext _localctx = new Read_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_read_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162; Match(READ);
			State = 1163; Match(FROM);
			State = 1164; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 98, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166; Match(WRITE);
			State = 1167; _localctx.what = expression(0);
			State = 1168; Match(TO);
			State = 1169; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ambiguous_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext method;
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ambiguous_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguous_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguous_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguous_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ambiguous_expressionContext ambiguous_expression() {
		Ambiguous_expressionContext _localctx = new Ambiguous_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_ambiguous_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; _localctx.method = unresolved_expression(0);
			State = 1172; Match(MINUS);
			State = 1173; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
	 
		public Fetch_expressionContext() { }
		public virtual void CopyFrom(Fetch_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchOneContext : Fetch_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchOneContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchOne(this);
		}
	}
	public partial class FetchListContext : Fetch_expressionContext {
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FetchListContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchList(this);
		}
	}
	public partial class FetchAllContext : Fetch_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext xstart;
		public ExpressionContext xstop;
		public ExpressionContext xfilter;
		public Order_by_listContext xorder;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode ORDER() { return GetToken(EParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(EParser.BY, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Order_by_listContext order_by_list() {
			return GetRuleContext<Order_by_listContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchAllContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchAll(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_fetch_expression);
		int _la;
		try {
			State = 1213;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				_localctx = new FetchListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175; Match(FETCH);
				State = 1176; Match(ANY);
				State = 1177; ((FetchListContext)_localctx).name = variable_identifier();
				State = 1178; Match(FROM);
				State = 1179; ((FetchListContext)_localctx).source = expression(0);
				State = 1180; Match(WHERE);
				State = 1181; ((FetchListContext)_localctx).xfilter = expression(0);
				}
				break;
			case 2:
				_localctx = new FetchOneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1183; Match(FETCH);
				State = 1184; Match(ONE);
				{
				State = 1186;
				_la = TokenStream.La(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1185; ((FetchOneContext)_localctx).typ = mutable_category_type();
					}
				}

				}
				State = 1188; Match(WHERE);
				State = 1189; ((FetchOneContext)_localctx).xfilter = expression(0);
				}
				break;
			case 3:
				_localctx = new FetchAllContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1190; Match(FETCH);
				State = 1202;
				switch (TokenStream.La(1)) {
				case ALL:
					{
					{
					State = 1191; Match(ALL);
					State = 1193;
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 1192; ((FetchAllContext)_localctx).typ = mutable_category_type();
						}
						break;
					}
					}
					}
					break;
				case LPAR:
				case LBRAK:
				case LCURL:
				case MINUS:
				case LT:
				case METHOD_T:
				case CODE:
				case DOCUMENT:
				case EXECUTE:
				case FETCH:
				case INVOKE:
				case MUTABLE:
				case NOT:
				case NOTHING:
				case READ:
				case SELF:
				case SORTED:
				case THIS:
				case BOOLEAN_LITERAL:
				case CHAR_LITERAL:
				case MIN_INTEGER:
				case MAX_INTEGER:
				case SYMBOL_IDENTIFIER:
				case TYPE_IDENTIFIER:
				case VARIABLE_IDENTIFIER:
				case TEXT_LITERAL:
				case INTEGER_LITERAL:
				case HEXA_LITERAL:
				case DECIMAL_LITERAL:
				case DATETIME_LITERAL:
				case TIME_LITERAL:
				case DATE_LITERAL:
				case PERIOD_LITERAL:
					{
					{
					State = 1196;
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 1195; ((FetchAllContext)_localctx).typ = mutable_category_type();
						}
						break;
					}
					State = 1198; ((FetchAllContext)_localctx).xstart = expression(0);
					State = 1199; Match(TO);
					State = 1200; ((FetchAllContext)_localctx).xstop = expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1206;
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1204; Match(WHERE);
					State = 1205; ((FetchAllContext)_localctx).xfilter = expression(0);
					}
					break;
				}
				State = 1211;
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 1208; Match(ORDER);
					State = 1209; Match(BY);
					State = 1210; ((FetchAllContext)_localctx).xorder = order_by_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(EParser.SORTED, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_sorted_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215; Match(SORTED);
			State = 1216; _localctx.source = instance_expression(0);
			State = 1222;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 1217; Match(WITH);
				State = 1218; _localctx.key = instance_expression(0);
				State = 1219; Match(AS);
				State = 1220; key_token();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListExpressionContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListExpression(this);
		}
	}
	public partial class ArgumentAssignmentListNoExpressionContext : Argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListNoExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListNoExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListNoExpression(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, State);
		EnterRule(_localctx, 106, RULE_argument_assignment_list);
		try {
			State = 1238;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				_localctx = new ArgumentAssignmentListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1224;
				if (!(this.was(EParser.WS))) throw new FailedPredicateException(this, "$parser.was(EParser.WS)");
				State = 1225; ((ArgumentAssignmentListExpressionContext)_localctx).exp = expression(0);
				State = 1231;
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 1226; ((ArgumentAssignmentListExpressionContext)_localctx).items = with_argument_assignment_list(0);
					State = 1229;
					switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
					case 1:
						{
						State = 1227; Match(AND);
						State = 1228; ((ArgumentAssignmentListExpressionContext)_localctx).item = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ArgumentAssignmentListNoExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1233; ((ArgumentAssignmentListNoExpressionContext)_localctx).items = with_argument_assignment_list(0);
				State = 1236;
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 1234; Match(AND);
					State = 1235; ((ArgumentAssignmentListNoExpressionContext)_localctx).item = argument_assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_argument_assignment_listContext : ParserRuleContext {
		public With_argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_argument_assignment_list; } }
	 
		public With_argument_assignment_listContext() { }
		public virtual void CopyFrom(With_argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListContext : With_argument_assignment_listContext {
		public Argument_assignmentContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : With_argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public With_argument_assignment_listContext with_argument_assignment_list() {
		return with_argument_assignment_list(0);
	}

	private With_argument_assignment_listContext with_argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		With_argument_assignment_listContext _localctx = new With_argument_assignment_listContext(Context, _parentState);
		With_argument_assignment_listContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_with_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentAssignmentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1241; Match(WITH);
			State = 1242; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new With_argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_with_argument_assignment_list);
					State = 1244;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1245; Match(COMMA);
					State = 1246; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 110, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252; _localctx.exp = expression(0);
			State = 1253; Match(AS);
			State = 1254; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 112, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; _localctx.inst = assignable_instance(0);
			State = 1257; assign();
			State = 1258; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 114, RULE_child_instance);
		try {
			State = 1268;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1261; Match(DOT);
				State = 1262; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1264; Match(LBRAK);
				State = 1265; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1266; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 116, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; _localctx.items = variable_identifier_list(0);
			State = 1271; assign();
			State = 1272; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 118, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1274; Match(LF);
					}
					} 
				}
				State = 1279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 120, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1280; Match(LF);
				}
				}
				State = 1283;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(EParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 122, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1285; Match(LF);
				}
				}
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			State = 1290; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(EParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 124, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LF) {
				{
				{
				State = 1292; Match(LF);
				}
				}
				State = 1297;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1298; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(EParser.NOTHING, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 126, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public DeclarationsContext items;
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 128, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			_la = TokenStream.La(1);
			if (_la==COMMENT || _la==DEFINE) {
				{
				State = 1302; ((FullDeclarationListContext)_localctx).items = declarations(0);
				}
			}

			State = 1305; lfs();
			State = 1306; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationListItemContext : DeclarationsContext {
		public DeclarationsContext items;
		public DeclarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListItemContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclarationListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclarationListItem(this);
		}
	}
	public partial class DeclarationListContext : DeclarationsContext {
		public DeclarationContext item;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(Context, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DeclarationListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1309; ((DeclarationListContext)_localctx).item = declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1317;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListItemContext(new DeclarationsContext(_parentctx, _parentState));
					((DeclarationListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_declarations);
					State = 1311;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1312; lfp();
					State = 1313; ((DeclarationListItemContext)_localctx).item = declaration();
					}
					} 
				}
				State = 1319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Comment_statementContext[] comment_statement() {
			return GetRuleContexts<Comment_statementContext>();
		}
		public Comment_statementContext comment_statement(int i) {
			return GetRuleContext<Comment_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMENT) {
				{
				{
				State = 1320; comment_statement();
				State = 1321; lfp();
				}
				}
				State = 1327;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1333;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 1328; attribute_declaration();
				}
				break;
			case 2:
				{
				State = 1329; category_declaration();
				}
				break;
			case 3:
				{
				State = 1330; resource_declaration();
				}
				break;
			case 4:
				{
				State = 1331; enum_declaration();
				}
				break;
			case 5:
				{
				State = 1332; method_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext decl;
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; _localctx.decl = native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
	 
		public Enum_declarationContext() { }
		public virtual void CopyFrom(Enum_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumCategoryDeclarationContext : Enum_declarationContext {
		public Enum_category_declarationContext decl;
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public EnumCategoryDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnumCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnumCategoryDeclaration(this);
		}
	}
	public partial class EnumNativeDeclarationContext : Enum_declarationContext {
		public Enum_native_declarationContext decl;
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public EnumNativeDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnumNativeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnumNativeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_enum_declaration);
		try {
			State = 1339;
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				_localctx = new EnumCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1337; ((EnumCategoryDeclarationContext)_localctx).decl = enum_category_declaration();
				}
				break;
			case 2:
				_localctx = new EnumNativeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1338; ((EnumNativeDeclarationContext)_localctx).decl = enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
	 
		public Native_symbol_listContext() { }
		public virtual void CopyFrom(Native_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeSymbolListContext : Native_symbol_listContext {
		public Native_symbolContext item;
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolList(this);
		}
	}
	public partial class NativeSymbolListItemContext : Native_symbol_listContext {
		public Native_symbol_listContext items;
		public Native_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListItemContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		return native_symbol_list(0);
	}

	private Native_symbol_listContext native_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, _parentState);
		Native_symbol_listContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_native_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeSymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1342; ((NativeSymbolListContext)_localctx).item = native_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeSymbolListItemContext(new Native_symbol_listContext(_parentctx, _parentState));
					((NativeSymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_symbol_list);
					State = 1344;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1345; lfp();
					State = 1346; ((NativeSymbolListItemContext)_localctx).item = native_symbol();
					}
					} 
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
	 
		public Category_symbol_listContext() { }
		public virtual void CopyFrom(Category_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategorySymbolListItemContext : Category_symbol_listContext {
		public Category_symbol_listContext items;
		public Category_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListItemContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolListItem(this);
		}
	}
	public partial class CategorySymbolListContext : Category_symbol_listContext {
		public Category_symbolContext item;
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolList(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		return category_symbol_list(0);
	}

	private Category_symbol_listContext category_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, _parentState);
		Category_symbol_listContext _prevctx = _localctx;
		int _startState = 140;
		EnterRecursionRule(_localctx, 140, RULE_category_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategorySymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1354; ((CategorySymbolListContext)_localctx).item = category_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1362;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategorySymbolListItemContext(new Category_symbol_listContext(_parentctx, _parentState));
					((CategorySymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_category_symbol_list);
					State = 1356;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1357; lfp();
					State = 1358; ((CategorySymbolListItemContext)_localctx).item = category_symbol();
					}
					} 
				}
				State = 1364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
	 
		public Symbol_listContext() { }
		public virtual void CopyFrom(Symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolListContext : Symbol_listContext {
		public Symbol_identifierContext item;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
	}
	public partial class SymbolListItemContext : Symbol_listContext {
		public Symbol_listContext items;
		public Symbol_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListItemContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		return symbol_list(0);
	}

	private Symbol_listContext symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_listContext _localctx = new Symbol_listContext(Context, _parentState);
		Symbol_listContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1366; ((SymbolListContext)_localctx).item = symbol_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SymbolListItemContext(new Symbol_listContext(_parentctx, _parentState));
					((SymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_list);
					State = 1368;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1369; Match(COMMA);
					State = 1370; ((SymbolListItemContext)_localctx).item = symbol_identifier();
					}
					} 
				}
				State = 1375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 144, RULE_attribute_constraint);
		try {
			State = 1386;
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; Match(IN);
				State = 1377; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1378; Match(IN);
				State = 1379; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1380; Match(IN);
				State = 1381; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1382; Match(MATCHING);
				State = 1383; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1384; Match(MATCHING);
				State = 1385; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 146, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; Match(LBRAK);
			State = 1390;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (EXECUTE - 94)) | (1L << (FETCH - 94)) | (1L << (INVOKE - 94)) | (1L << (MUTABLE - 94)) | (1L << (NOT - 94)) | (1L << (NOTHING - 94)) | (1L << (READ - 94)) | (1L << (SELF - 94)) | (1L << (SORTED - 94)) | (1L << (THIS - 94)) | (1L << (BOOLEAN_LITERAL - 94)) | (1L << (CHAR_LITERAL - 94)) | (1L << (MIN_INTEGER - 94)) | (1L << (MAX_INTEGER - 94)) | (1L << (SYMBOL_IDENTIFIER - 94)) | (1L << (TYPE_IDENTIFIER - 94)) | (1L << (VARIABLE_IDENTIFIER - 94)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TEXT_LITERAL - 159)) | (1L << (INTEGER_LITERAL - 159)) | (1L << (HEXA_LITERAL - 159)) | (1L << (DECIMAL_LITERAL - 159)) | (1L << (DATETIME_LITERAL - 159)) | (1L << (TIME_LITERAL - 159)) | (1L << (DATE_LITERAL - 159)) | (1L << (PERIOD_LITERAL - 159)))) != 0)) {
				{
				State = 1389; _localctx.items = expression_list(0);
				}
			}

			State = 1392; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 148, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394; Match(LT);
			State = 1396;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (EXECUTE - 94)) | (1L << (FETCH - 94)) | (1L << (INVOKE - 94)) | (1L << (MUTABLE - 94)) | (1L << (NOT - 94)) | (1L << (NOTHING - 94)) | (1L << (READ - 94)) | (1L << (SELF - 94)) | (1L << (SORTED - 94)) | (1L << (THIS - 94)) | (1L << (BOOLEAN_LITERAL - 94)) | (1L << (CHAR_LITERAL - 94)) | (1L << (MIN_INTEGER - 94)) | (1L << (MAX_INTEGER - 94)) | (1L << (SYMBOL_IDENTIFIER - 94)) | (1L << (TYPE_IDENTIFIER - 94)) | (1L << (VARIABLE_IDENTIFIER - 94)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TEXT_LITERAL - 159)) | (1L << (INTEGER_LITERAL - 159)) | (1L << (HEXA_LITERAL - 159)) | (1L << (DECIMAL_LITERAL - 159)) | (1L << (DATETIME_LITERAL - 159)) | (1L << (TIME_LITERAL - 159)) | (1L << (DATE_LITERAL - 159)) | (1L << (PERIOD_LITERAL - 159)))) != 0)) {
				{
				State = 1395; _localctx.items = expression_list(0);
				}
			}

			State = 1398; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	 
		public Expression_listContext() { }
		public virtual void CopyFrom(Expression_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueListContext : Expression_listContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}
	public partial class ValueListItemContext : Expression_listContext {
		public Expression_listContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListItemContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValueListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValueListItem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 150;
		EnterRecursionRule(_localctx, 150, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1401; ((ValueListContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueListItemContext(new Expression_listContext(_parentctx, _parentState));
					((ValueListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 1403;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1404; Match(COMMA);
					State = 1405; ((ValueListItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 152, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411; Match(LBRAK);
			State = 1412; _localctx.low = expression(0);
			State = 1413; Match(RANGE);
			State = 1414; _localctx.high = expression(0);
			State = 1415; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1418; ((PrimaryTypeContext)_localctx).p = primary_type();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1428;
					switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1420;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1421; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1422;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1423; Match(LBRAK);
						State = 1424; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1425;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1426; Match(LCURL);
						State = 1427; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_primary_type);
		try {
			State = 1435;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1434; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}
	public partial class DocumentTypeContext : Native_typeContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public DocumentTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class ImageTypeContext : Native_typeContext {
		public ITerminalNode IMAGE() { return GetToken(EParser.IMAGE, 0); }
		public ImageTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterImageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitImageType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class BlobTypeContext : Native_typeContext {
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public BlobTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlobType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlobType(this);
		}
	}
	public partial class UUIDTypeContext : Native_typeContext {
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public UUIDTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUUIDType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUUIDType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 158, RULE_native_type);
		try {
			State = 1451;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1437; Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1438; Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1439; Match(TEXT);
				}
				break;
			case IMAGE:
				_localctx = new ImageTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1440; Match(IMAGE);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1441; Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1442; Match(DECIMAL);
				}
				break;
			case DOCUMENT:
				_localctx = new DocumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1443; Match(DOCUMENT);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1444; Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1445; Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1446; Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1447; Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1448; Match(CODE);
				}
				break;
			case BLOB:
				_localctx = new BlobTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1449; Match(BLOB);
				}
				break;
			case UUID:
				_localctx = new UUIDTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1450; Match(UUID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 160, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mutable_category_typeContext : ParserRuleContext {
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Mutable_category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutable_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMutable_category_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMutable_category_type(this);
		}
	}

	[RuleVersion(0)]
	public Mutable_category_typeContext mutable_category_type() {
		Mutable_category_typeContext _localctx = new Mutable_category_typeContext(Context, State);
		EnterRule(_localctx, 162, RULE_mutable_category_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1455; Match(MUTABLE);
				}
			}

			State = 1458; category_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 164, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 166, RULE_category_declaration);
		try {
			State = 1465;
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1462; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case 2:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1463; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case 3:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1464; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
	 
		public Type_identifier_listContext() { }
		public virtual void CopyFrom(Type_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierListContext : Type_identifier_listContext {
		public Type_identifierContext item;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierList(this);
		}
	}
	public partial class TypeIdentifierListItemContext : Type_identifier_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListItemContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierListItem(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		return type_identifier_list(0);
	}

	private Type_identifier_listContext type_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, _parentState);
		Type_identifier_listContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_type_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TypeIdentifierListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1468; ((TypeIdentifierListContext)_localctx).item = type_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdentifierListItemContext(new Type_identifier_listContext(_parentctx, _parentState));
					((TypeIdentifierListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type_identifier_list);
					State = 1470;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1471; Match(COMMA);
					State = 1472; ((TypeIdentifierListItemContext)_localctx).item = type_identifier();
					}
					} 
				}
				State = 1477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
	 
		public Method_identifierContext() { }
		public virtual void CopyFrom(Method_identifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodVariableIdentifierContext : Method_identifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MethodVariableIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodVariableIdentifier(this);
		}
	}
	public partial class MethodTypeIdentifierContext : Method_identifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public MethodTypeIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_method_identifier);
		try {
			State = 1480;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new MethodVariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478; ((MethodVariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new MethodTypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479; ((MethodTypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext name;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_identifier);
		try {
			State = 1485;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1482; ((VariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1483; ((TypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1484; ((SymbolIdentifierContext)_localctx).name = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 176, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	 
		public Argument_listContext() { }
		public virtual void CopyFrom(Argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentListItemContext : Argument_listContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListItemContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentListItem(this);
		}
	}
	public partial class ArgumentListContext : Argument_listContext {
		public ArgumentContext item;
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 180;
		EnterRecursionRule(_localctx, 180, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1494; ((ArgumentListContext)_localctx).item = argument();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1501;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListItemContext(new Argument_listContext(_parentctx, _parentState));
					((ArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 1496;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1497; Match(COMMA);
					State = 1498; ((ArgumentListItemContext)_localctx).item = argument();
					}
					} 
				}
				State = 1503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 182, RULE_argument);
		int _la;
		try {
			State = 1509;
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1504; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case 2:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1506;
				_la = TokenStream.La(1);
				if (_la==MUTABLE) {
					{
					State = 1505; Match(MUTABLE);
					}
				}

				State = 1508; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
	 
		public Operator_argumentContext() { }
		public virtual void CopyFrom(Operator_argumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypedArgumentContext : Operator_argumentContext {
		public Typed_argumentContext arg;
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public TypedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypedArgument(this);
		}
	}
	public partial class NamedArgumentContext : Operator_argumentContext {
		public Named_argumentContext arg;
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public NamedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 184, RULE_operator_argument);
		try {
			State = 1513;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511; ((NamedArgumentContext)_localctx).arg = named_argument();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ANY:
			case TYPE_IDENTIFIER:
				_localctx = new TypedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512; ((TypedArgumentContext)_localctx).arg = typed_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Literal_expressionContext value;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 186, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515; _localctx.name = variable_identifier();
			State = 1518;
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1516; Match(EQ);
				State = 1517; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 188, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520; code_type();
			State = 1521; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
	 
		public Category_or_any_typeContext() { }
		public virtual void CopyFrom(Category_or_any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyArgumentTypeContext : Category_or_any_typeContext {
		public Any_typeContext typ;
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyArgumentType(this);
		}
	}
	public partial class CategoryArgumentTypeContext : Category_or_any_typeContext {
		public TypedefContext typ;
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CategoryArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryArgumentType(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 190, RULE_category_or_any_type);
		try {
			State = 1525;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case TYPE_IDENTIFIER:
				_localctx = new CategoryArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1523; ((CategoryArgumentTypeContext)_localctx).typ = typedef(0);
				}
				break;
			case ANY:
				_localctx = new AnyArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1524; ((AnyArgumentTypeContext)_localctx).typ = any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 192;
		EnterRecursionRule(_localctx, 192, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1528; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1538;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1536;
					switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyListTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1530;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1531; Match(LBRAK);
						State = 1532; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyDictTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1533;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1534; Match(LCURL);
						State = 1535; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1540;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
	 
		public Member_method_declaration_listContext() { }
		public virtual void CopyFrom(Member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryMethodListItemContext : Member_method_declaration_listContext {
		public Member_method_declaration_listContext items;
		public Member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListItemContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodListItem(this);
		}
	}
	public partial class CategoryMethodListContext : Member_method_declaration_listContext {
		public Member_method_declarationContext item;
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodList(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		return member_method_declaration_list(0);
	}

	private Member_method_declaration_listContext member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, _parentState);
		Member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1542; ((CategoryMethodListContext)_localctx).item = member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1550;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategoryMethodListItemContext(new Member_method_declaration_listContext(_parentctx, _parentState));
					((CategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_member_method_declaration_list);
					State = 1544;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1545; lfp();
					State = 1546; ((CategoryMethodListItemContext)_localctx).item = member_method_declaration();
					}
					} 
				}
				State = 1552;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_member_method_declaration);
		try {
			State = 1558;
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1553; setter_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554; getter_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1555; concrete_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1556; abstract_method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1557; operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
	 
		public Native_member_method_declaration_listContext() { }
		public virtual void CopyFrom(Native_member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryMethodListContext : Native_member_method_declaration_listContext {
		public Native_member_method_declarationContext item;
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodList(this);
		}
	}
	public partial class NativeCategoryMethodListItemContext : Native_member_method_declaration_listContext {
		public Native_member_method_declaration_listContext items;
		public Native_member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListItemContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		return native_member_method_declaration_list(0);
	}

	private Native_member_method_declaration_listContext native_member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, _parentState);
		Native_member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 198;
		EnterRecursionRule(_localctx, 198, RULE_native_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1561; ((NativeCategoryMethodListContext)_localctx).item = native_member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryMethodListItemContext(new Native_member_method_declaration_listContext(_parentctx, _parentState));
					((NativeCategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_member_method_declaration_list);
					State = 1563;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1564; lfp();
					State = 1565; ((NativeCategoryMethodListItemContext)_localctx).item = native_member_method_declaration();
					}
					} 
				}
				State = 1571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_native_member_method_declaration);
		try {
			State = 1574;
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1572; member_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1573; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 202, RULE_native_category_binding);
		try {
			State = 1586;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1576; Match(JAVA);
				State = 1577; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1578; Match(CSHARP);
				State = 1579; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1580; Match(PYTHON2);
				State = 1581; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1582; Match(PYTHON3);
				State = 1583; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1584; Match(JAVASCRIPT);
				State = 1585; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Python_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 204, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588; _localctx.id_ = identifier();
			State = 1590;
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 1589; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 206, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592; Match(FROM);
			State = 1593; module_token();
			State = 1594; Match(COLON);
			State = 1595; identifier();
			State = 1600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1596; Match(DOT);
					State = 1597; identifier();
					}
					} 
				}
				State = 1602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 208, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1604;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Javascript_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 210, RULE_javascript_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606; _localctx.id_ = identifier();
			State = 1608;
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1607; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(EParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(EParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 212, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(FROM);
			State = 1611; module_token();
			State = 1612; Match(COLON);
			State = 1614;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1613; Match(SLASH);
				}
			}

			State = 1616; javascript_identifier();
			State = 1621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1617; Match(SLASH);
					State = 1618; javascript_identifier();
					}
					} 
				}
				State = 1623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 1626;
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1624; Match(DOT);
				State = 1625; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
	 
		public Variable_identifier_listContext() { }
		public virtual void CopyFrom(Variable_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableListContext : Variable_identifier_listContext {
		public Variable_identifierContext item;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
	}
	public partial class VariableListItemContext : Variable_identifier_listContext {
		public Variable_identifier_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListItemContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariableListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariableListItem(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		return variable_identifier_list(0);
	}

	private Variable_identifier_listContext variable_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, _parentState);
		Variable_identifier_listContext _prevctx = _localctx;
		int _startState = 214;
		EnterRecursionRule(_localctx, 214, RULE_variable_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new VariableListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1629; ((VariableListContext)_localctx).item = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableListItemContext(new Variable_identifier_listContext(_parentctx, _parentState));
					((VariableListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_variable_identifier_list);
					State = 1631;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1632; Match(COMMA);
					State = 1633; ((VariableListItemContext)_localctx).item = variable_identifier();
					}
					} 
				}
				State = 1638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
	 
		public Method_declarationContext() { }
		public virtual void CopyFrom(Method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeMethodContext : Method_declarationContext {
		public Native_method_declarationContext decl;
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public NativeMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeMethod(this);
		}
	}
	public partial class AbstractMethodContext : Method_declarationContext {
		public Abstract_method_declarationContext decl;
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public AbstractMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAbstractMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAbstractMethod(this);
		}
	}
	public partial class ConcreteMethodContext : Method_declarationContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ConcreteMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcreteMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcreteMethod(this);
		}
	}
	public partial class TestMethodContext : Method_declarationContext {
		public Test_method_declarationContext decl;
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public TestMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTestMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTestMethod(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 216, RULE_method_declaration);
		try {
			State = 1643;
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				_localctx = new AbstractMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1639; ((AbstractMethodContext)_localctx).decl = abstract_method_declaration();
				}
				break;
			case 2:
				_localctx = new ConcreteMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1640; ((ConcreteMethodContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 3:
				_localctx = new NativeMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1641; ((NativeMethodContext)_localctx).decl = native_method_declaration();
				}
				break;
			case 4:
				_localctx = new TestMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1642; ((TestMethodContext)_localctx).decl = test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_statementContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(EParser.COMMENT, 0); }
		public Comment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterComment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitComment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Comment_statementContext comment_statement() {
		Comment_statementContext _localctx = new Comment_statementContext(Context, State);
		EnterRule(_localctx, 218, RULE_comment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
	 
		public Native_statement_listContext() { }
		public virtual void CopyFrom(Native_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeStatementListItemContext : Native_statement_listContext {
		public Native_statement_listContext items;
		public Native_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListItemContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementListItem(this);
		}
	}
	public partial class NativeStatementListContext : Native_statement_listContext {
		public Native_statementContext item;
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		return native_statement_list(0);
	}

	private Native_statement_listContext native_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, _parentState);
		Native_statement_listContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_native_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1648; ((NativeStatementListContext)_localctx).item = native_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeStatementListItemContext(new Native_statement_listContext(_parentctx, _parentState));
					((NativeStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_statement_list);
					State = 1650;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1651; lfp();
					State = 1652; ((NativeStatementListItemContext)_localctx).item = native_statement();
					}
					} 
				}
				State = 1658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public Csharp_statementContext stmt;
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public Java_statementContext stmt;
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public Javascript_native_statementContext stmt;
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 222, RULE_native_statement);
		try {
			State = 1669;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1659; Match(JAVA);
				State = 1660; ((JavaNativeStatementContext)_localctx).stmt = java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1661; Match(CSHARP);
				State = 1662; ((CSharpNativeStatementContext)_localctx).stmt = csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1663; Match(PYTHON2);
				State = 1664; ((Python2NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1665; Match(PYTHON3);
				State = 1666; ((Python3NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1667; Match(JAVASCRIPT);
				State = 1668; ((JavaScriptNativeStatementContext)_localctx).stmt = javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext stmt;
		public Python_moduleContext module;
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 224, RULE_python_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; _localctx.stmt = python_statement();
			State = 1673;
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1672; Match(SEMI);
				}
				break;
			}
			State = 1676;
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1675; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext stmt;
		public Javascript_moduleContext module;
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 226, RULE_javascript_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; _localctx.stmt = javascript_statement();
			State = 1680;
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1679; Match(SEMI);
				}
				break;
			}
			State = 1683;
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 1682; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
	 
		public Statement_listContext() { }
		public virtual void CopyFrom(Statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementListContext : Statement_listContext {
		public StatementContext item;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}
	public partial class StatementListItemContext : Statement_listContext {
		public Statement_listContext items;
		public StatementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListItemContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 228;
		EnterRecursionRule(_localctx, 228, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new StatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1686; ((StatementListContext)_localctx).item = statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1694;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementListItemContext(new Statement_listContext(_parentctx, _parentState));
					((StatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 1688;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1689; lfp();
					State = 1690; ((StatementListItemContext)_localctx).item = statement();
					}
					} 
				}
				State = 1696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
	 
		public Assertion_listContext() { }
		public virtual void CopyFrom(Assertion_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssertionListContext : Assertion_listContext {
		public AssertionContext item;
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertionList(this);
		}
	}
	public partial class AssertionListItemContext : Assertion_listContext {
		public Assertion_listContext items;
		public AssertionContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListItemContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertionListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertionListItem(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		return assertion_list(0);
	}

	private Assertion_listContext assertion_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assertion_listContext _localctx = new Assertion_listContext(Context, _parentState);
		Assertion_listContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_assertion_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AssertionListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1698; ((AssertionListContext)_localctx).item = assertion();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1706;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssertionListItemContext(new Assertion_listContext(_parentctx, _parentState));
					((AssertionListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assertion_list);
					State = 1700;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1701; lfp();
					State = 1702; ((AssertionListItemContext)_localctx).item = assertion();
					}
					} 
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
	 
		public Switch_case_statement_listContext() { }
		public virtual void CopyFrom(Switch_case_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseStatementListContext : Switch_case_statement_listContext {
		public Switch_case_statementContext item;
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementList(this);
		}
	}
	public partial class SwitchCaseStatementListItemContext : Switch_case_statement_listContext {
		public Switch_case_statement_listContext items;
		public Switch_case_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListItemContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		return switch_case_statement_list(0);
	}

	private Switch_case_statement_listContext switch_case_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, _parentState);
		Switch_case_statement_listContext _prevctx = _localctx;
		int _startState = 232;
		EnterRecursionRule(_localctx, 232, RULE_switch_case_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SwitchCaseStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1710; ((SwitchCaseStatementListContext)_localctx).item = switch_case_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1718;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SwitchCaseStatementListItemContext(new Switch_case_statement_listContext(_parentctx, _parentState));
					((SwitchCaseStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_switch_case_statement_list);
					State = 1712;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1713; lfp();
					State = 1714; ((SwitchCaseStatementListItemContext)_localctx).item = switch_case_statement();
					}
					} 
				}
				State = 1720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
	 
		public Catch_statement_listContext() { }
		public virtual void CopyFrom(Catch_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchStatementListContext : Catch_statement_listContext {
		public Catch_statementContext item;
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementList(this);
		}
	}
	public partial class CatchStatementListItemContext : Catch_statement_listContext {
		public Catch_statement_listContext items;
		public Catch_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListItemContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		return catch_statement_list(0);
	}

	private Catch_statement_listContext catch_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, _parentState);
		Catch_statement_listContext _prevctx = _localctx;
		int _startState = 234;
		EnterRecursionRule(_localctx, 234, RULE_catch_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CatchStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1722; ((CatchStatementListContext)_localctx).item = catch_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CatchStatementListItemContext(new Catch_statement_listContext(_parentctx, _parentState));
					((CatchStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_catch_statement_list);
					State = 1724;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1725; lfp();
					State = 1726; ((CatchStatementListItemContext)_localctx).item = catch_statement();
					}
					} 
				}
				State = 1732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 236, RULE_literal_collection);
		try {
			State = 1747;
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1733; Match(LBRAK);
				State = 1734; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1735; Match(RANGE);
				State = 1736; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1737; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1739; Match(LBRAK);
				State = 1740; ((LiteralListLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1741; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1743; Match(LT);
				State = 1744; ((LiteralSetLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1745; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(EParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(EParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(EParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(EParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(EParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(EParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(EParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 238, RULE_atomic_literal);
		try {
			State = 1762;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1749; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1751; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1752; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1753; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1754; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1755; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1756; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1757; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1758; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1759; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1760; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case NOTHING:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1761; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
	 
		public Literal_list_literalContext() { }
		public virtual void CopyFrom(Literal_list_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListContext : Literal_list_literalContext {
		public Atomic_literalContext item;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}
	public partial class LiteralListItemContext : Literal_list_literalContext {
		public Literal_list_literalContext items;
		public Atomic_literalContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListItemContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralListItem(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		return literal_list_literal(0);
	}

	private Literal_list_literalContext literal_list_literal(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, _parentState);
		Literal_list_literalContext _prevctx = _localctx;
		int _startState = 240;
		EnterRecursionRule(_localctx, 240, RULE_literal_list_literal, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LiteralListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1765; ((LiteralListContext)_localctx).item = atomic_literal();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1772;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LiteralListItemContext(new Literal_list_literalContext(_parentctx, _parentState));
					((LiteralListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_literal_list_literal);
					State = 1767;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1768; Match(COMMA);
					State = 1769; ((LiteralListItemContext)_localctx).item = atomic_literal();
					}
					} 
				}
				State = 1774;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_selectable_expression);
		try {
			State = 1779;
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1775; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1776; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1777; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1778; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 244, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1781;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 246, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783; Match(LPAR);
			State = 1784; _localctx.exp = expression(0);
			State = 1785; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
	 
		public Literal_expressionContext() { }
		public virtual void CopyFrom(Literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CollectionLiteralContext : Literal_expressionContext {
		public Collection_literalContext exp;
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public CollectionLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollectionLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollectionLiteral(this);
		}
	}
	public partial class AtomicLiteralContext : Literal_expressionContext {
		public Atomic_literalContext exp;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public AtomicLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAtomicLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAtomicLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 248, RULE_literal_expression);
		try {
			State = 1789;
			switch (TokenStream.La(1)) {
			case NOTHING:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				_localctx = new AtomicLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1787; ((AtomicLiteralContext)_localctx).exp = atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
				_localctx = new CollectionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1788; ((CollectionLiteralContext)_localctx).exp = collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
	 
		public Collection_literalContext() { }
		public virtual void CopyFrom(Collection_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListLiteralContext : Collection_literalContext {
		public List_literalContext exp;
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public ListLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
	}
	public partial class RangeLiteralContext : Collection_literalContext {
		public Range_literalContext exp;
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRangeLiteral(this);
		}
	}
	public partial class TupleLiteralContext : Collection_literalContext {
		public Tuple_literalContext exp;
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public TupleLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTupleLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTupleLiteral(this);
		}
	}
	public partial class SetLiteralContext : Collection_literalContext {
		public Set_literalContext exp;
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public SetLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetLiteral(this);
		}
	}
	public partial class DictLiteralContext : Collection_literalContext {
		public Dict_literalContext exp;
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public DictLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 250, RULE_collection_literal);
		try {
			State = 1796;
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				_localctx = new RangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1791; ((RangeLiteralContext)_localctx).exp = range_literal();
				}
				break;
			case 2:
				_localctx = new ListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1792; ((ListLiteralContext)_localctx).exp = list_literal();
				}
				break;
			case 3:
				_localctx = new SetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1793; ((SetLiteralContext)_localctx).exp = set_literal();
				}
				break;
			case 4:
				_localctx = new DictLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1794; ((DictLiteralContext)_localctx).exp = dict_literal();
				}
				break;
			case 5:
				_localctx = new TupleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1795; ((TupleLiteralContext)_localctx).exp = tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public Expression_tupleContext items;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 252, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798; Match(LPAR);
			State = 1800;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (EXECUTE - 94)) | (1L << (FETCH - 94)) | (1L << (INVOKE - 94)) | (1L << (MUTABLE - 94)) | (1L << (NOT - 94)) | (1L << (NOTHING - 94)) | (1L << (READ - 94)) | (1L << (SELF - 94)) | (1L << (SORTED - 94)) | (1L << (THIS - 94)) | (1L << (BOOLEAN_LITERAL - 94)) | (1L << (CHAR_LITERAL - 94)) | (1L << (MIN_INTEGER - 94)) | (1L << (MAX_INTEGER - 94)) | (1L << (SYMBOL_IDENTIFIER - 94)) | (1L << (TYPE_IDENTIFIER - 94)) | (1L << (VARIABLE_IDENTIFIER - 94)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TEXT_LITERAL - 159)) | (1L << (INTEGER_LITERAL - 159)) | (1L << (HEXA_LITERAL - 159)) | (1L << (DECIMAL_LITERAL - 159)) | (1L << (DATETIME_LITERAL - 159)) | (1L << (TIME_LITERAL - 159)) | (1L << (DATE_LITERAL - 159)) | (1L << (PERIOD_LITERAL - 159)))) != 0)) {
				{
				State = 1799; _localctx.items = expression_tuple(0);
				}
			}

			State = 1802; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public Dict_entry_listContext items;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 254, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804; Match(LCURL);
			State = 1806;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (EXECUTE - 94)) | (1L << (FETCH - 94)) | (1L << (INVOKE - 94)) | (1L << (MUTABLE - 94)) | (1L << (NOT - 94)) | (1L << (NOTHING - 94)) | (1L << (READ - 94)) | (1L << (SELF - 94)) | (1L << (SORTED - 94)) | (1L << (THIS - 94)) | (1L << (BOOLEAN_LITERAL - 94)) | (1L << (CHAR_LITERAL - 94)) | (1L << (MIN_INTEGER - 94)) | (1L << (MAX_INTEGER - 94)) | (1L << (SYMBOL_IDENTIFIER - 94)) | (1L << (TYPE_IDENTIFIER - 94)) | (1L << (VARIABLE_IDENTIFIER - 94)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TEXT_LITERAL - 159)) | (1L << (INTEGER_LITERAL - 159)) | (1L << (HEXA_LITERAL - 159)) | (1L << (DECIMAL_LITERAL - 159)) | (1L << (DATETIME_LITERAL - 159)) | (1L << (TIME_LITERAL - 159)) | (1L << (DATE_LITERAL - 159)) | (1L << (PERIOD_LITERAL - 159)))) != 0)) {
				{
				State = 1805; _localctx.items = dict_entry_list(0);
				}
			}

			State = 1808; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
	 
		public Expression_tupleContext() { }
		public virtual void CopyFrom(Expression_tupleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTupleContext : Expression_tupleContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValueTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValueTuple(this);
		}
	}
	public partial class ValueTupleItemContext : Expression_tupleContext {
		public Expression_tupleContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleItemContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValueTupleItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValueTupleItem(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		return expression_tuple(0);
	}

	private Expression_tupleContext expression_tuple(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, _parentState);
		Expression_tupleContext _prevctx = _localctx;
		int _startState = 256;
		EnterRecursionRule(_localctx, 256, RULE_expression_tuple, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueTupleContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1811; ((ValueTupleContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1818;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueTupleItemContext(new Expression_tupleContext(_parentctx, _parentState));
					((ValueTupleItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_tuple);
					State = 1813;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1814; Match(COMMA);
					State = 1815; ((ValueTupleItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
	 
		public Dict_entry_listContext() { }
		public virtual void CopyFrom(Dict_entry_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DictEntryListContext : Dict_entry_listContext {
		public Dict_entryContext item;
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictEntryList(this);
		}
	}
	public partial class DictEntryListItemContext : Dict_entry_listContext {
		public Dict_entry_listContext items;
		public Dict_entryContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListItemContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictEntryListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictEntryListItem(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		return dict_entry_list(0);
	}

	private Dict_entry_listContext dict_entry_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, _parentState);
		Dict_entry_listContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_dict_entry_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DictEntryListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1822; ((DictEntryListContext)_localctx).item = dict_entry();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1829;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DictEntryListItemContext(new Dict_entry_listContext(_parentctx, _parentState));
					((DictEntryListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_dict_entry_list);
					State = 1824;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1825; Match(COMMA);
					State = 1826; ((DictEntryListItemContext)_localctx).item = dict_entry();
					}
					} 
				}
				State = 1831;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,139,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 260, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832; _localctx.key = expression(0);
			State = 1833; Match(COLON);
			State = 1834; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 262, RULE_slice_arguments);
		try {
			State = 1845;
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1836; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1837; Match(COLON);
				State = 1838; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1840; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1841; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1843; Match(COLON);
				State = 1844; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 264, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847; _localctx.name = variable_identifier();
			State = 1848; assign();
			State = 1849; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext parent;
		public Child_instanceContext child;
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 266;
		EnterRecursionRule(_localctx, 266, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1852; ((RootInstanceContext)_localctx).name = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1858;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					((ChildInstanceContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1854;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1855; ((ChildInstanceContext)_localctx).child = child_instance();
					}
					} 
				}
				State = 1860;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public Category_or_any_typeContext typ;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 268, RULE_is_expression);
		try {
			State = 1865;
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1861;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1862; Match(VARIABLE_IDENTIFIER);
				State = 1863; ((IsATypeExpressionContext)_localctx).typ = category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1864; ((IsOtherExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_listContext : ParserRuleContext {
		public Order_byContext[] order_by() {
			return GetRuleContexts<Order_byContext>();
		}
		public Order_byContext order_by(int i) {
			return GetRuleContext<Order_byContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Order_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_listContext order_by_list() {
		Order_by_listContext _localctx = new Order_by_listContext(Context, State);
		EnterRule(_localctx, 270, RULE_order_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; order_by();
			State = 1872;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1868; Match(COMMA);
					State = 1869; order_by();
					}
					} 
				}
				State = 1874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_byContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public ITerminalNode ASC() { return GetToken(EParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public Order_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by(this);
		}
	}

	[RuleVersion(0)]
	public Order_byContext order_by() {
		Order_byContext _localctx = new Order_byContext(Context, State);
		EnterRule(_localctx, 272, RULE_order_by);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875; variable_identifier();
			State = 1880;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1876; Match(DOT);
					State = 1877; variable_identifier();
					}
					} 
				}
				State = 1882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			State = 1884;
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1883;
				_la = TokenStream.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 274, RULE_operator);
		try {
			State = 1892;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1886; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1887; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1888; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1889; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1890; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1891; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public New_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNew_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNew_token(this);
		}
	}

	[RuleVersion(0)]
	public New_tokenContext new_token() {
		New_tokenContext _localctx = new New_tokenContext(Context, State);
		EnterRule(_localctx, 276, RULE_new_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1895;
			if (!(this.isText(_localctx.i1,"new"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"new\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 278, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1898;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 280, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1901;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 282, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1904;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 284, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(EParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 286, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 288, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1910; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(EParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 290, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(EParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(EParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 292, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 294, RULE_javascript_statement);
		try {
			State = 1923;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1916; Match(RETURN);
				State = 1917; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1918; Match(SEMI);
				}
				break;
			case LPAR:
			case LBRAK:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1921; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 296;
		EnterRecursionRule(_localctx, 296, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1926; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1932;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1928;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1929; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 1934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_new_expressionContext javascript_new_expression() {
			return GetRuleContext<Javascript_new_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_javascript_primary_expression);
		try {
			State = 1942;
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1935; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1936; javascript_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1937; javascript_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1938; javascript_identifier_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1939; javascript_literal_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1940; javascript_method_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1941; javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 300, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_new_expressionContext javascript_new_expression() {
		Javascript_new_expressionContext _localctx = new Javascript_new_expressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_javascript_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; new_token();
			State = 1947; javascript_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaScriptMemberExpressionContext : Javascript_selector_expressionContext {
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavaScriptMemberExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMemberExpression(this);
		}
	}
	public partial class JavaScriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavaScriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptItemExpression(this);
		}
	}
	public partial class JavaScriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext method;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavaScriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_javascript_selector_expression);
		try {
			State = 1954;
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				_localctx = new JavaScriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1949; Match(DOT);
				State = 1950; ((JavaScriptMethodExpressionContext)_localctx).method = javascript_method_expression();
				}
				break;
			case 2:
				_localctx = new JavaScriptMemberExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; Match(DOT);
				State = 1952; ((JavaScriptMemberExpressionContext)_localctx).name = javascript_identifier();
				}
				break;
			case 3:
				_localctx = new JavaScriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1953; ((JavaScriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956; _localctx.name = javascript_identifier();
			State = 1957; Match(LPAR);
			State = 1959;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (SELF - 126)) | (1L << (TEST - 126)) | (1L << (THIS - 126)) | (1L << (WRITE - 126)) | (1L << (BOOLEAN_LITERAL - 126)) | (1L << (CHAR_LITERAL - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)) | (1L << (TEXT_LITERAL - 126)) | (1L << (INTEGER_LITERAL - 126)) | (1L << (DECIMAL_LITERAL - 126)))) != 0)) {
				{
				State = 1958; _localctx.args = javascript_arguments(0);
				}
			}

			State = 1961; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 308;
		EnterRecursionRule(_localctx, 308, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1964; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1971;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 1966;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1967; Match(COMMA);
					State = 1968; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 1973;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974; Match(LBRAK);
			State = 1975; _localctx.exp = javascript_expression(0);
			State = 1976; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978; Match(LPAR);
			State = 1979; _localctx.exp = javascript_expression(0);
			State = 1980; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_javascript_identifier_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_javascript_literal_expression);
		try {
			State = 1989;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1985; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1986; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1987; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1988; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 318, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (TEST - 126)) | (1L << (WRITE - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 320, RULE_python_statement);
		try {
			State = 1996;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1993; Match(RETURN);
				State = 1994; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1995; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 322;
		EnterRecursionRule(_localctx, 322, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1999; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2005;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 2001;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2002; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 2007;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_python_primary_expression);
		try {
			State = 2012;
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2008; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2009; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2010; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2011; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_python_selector_expression);
		try {
			State = 2020;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014; Match(DOT);
				State = 2015; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2016; Match(LBRAK);
				State = 2017; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 2018; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 328, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; _localctx.name = python_identifier();
			State = 2023; Match(LPAR);
			State = 2025;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (SELF - 126)) | (1L << (TEST - 126)) | (1L << (THIS - 126)) | (1L << (WRITE - 126)) | (1L << (BOOLEAN_LITERAL - 126)) | (1L << (CHAR_LITERAL - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)) | (1L << (TEXT_LITERAL - 126)) | (1L << (INTEGER_LITERAL - 126)) | (1L << (DECIMAL_LITERAL - 126)))) != 0)) {
				{
				State = 2024; _localctx.args = python_argument_list();
				}
			}

			State = 2027; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 330, RULE_python_argument_list);
		try {
			State = 2035;
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2029; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2030; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2031; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 2032; Match(COMMA);
				State = 2033; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 332;
		EnterRecursionRule(_localctx, 332, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2038; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2045;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 2040;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2041; Match(COMMA);
					State = 2042; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 2047;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 334;
		EnterRecursionRule(_localctx, 334, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2049; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 2050; Match(EQ);
			State = 2051; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2061;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 2053;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2054; Match(COMMA);
					State = 2055; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 2056; Match(EQ);
					State = 2057; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 2063;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(LPAR);
			State = 2065; _localctx.exp = python_expression(0);
			State = 2066; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonPromptoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPromptoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPromptoIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 338;
		EnterRecursionRule(_localctx, 338, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2069; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2070; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2078;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 2073;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2074; Match(DOT);
					State = 2075; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 2080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 340, RULE_python_literal_expression);
		try {
			State = 2086;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2082; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2083; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2084; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2085; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 342, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (SELF - 126)) | (1L << (TEST - 126)) | (1L << (THIS - 126)) | (1L << (WRITE - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 344, RULE_java_statement);
		try {
			State = 2097;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2090; Match(RETURN);
				State = 2091; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 2092; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2094; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 2095; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 346;
		EnterRecursionRule(_localctx, 346, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2100; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 2102;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2103; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 2108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_new_expressionContext java_new_expression() {
			return GetRuleContext<Java_new_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 348, RULE_java_primary_expression);
		try {
			State = 2114;
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2109; java_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2110; java_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2111; java_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2112; java_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2113; java_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 350, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public Java_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_new_expressionContext java_new_expression() {
		Java_new_expressionContext _localctx = new Java_new_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_java_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2118; new_token();
			State = 2119; java_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 354, RULE_java_selector_expression);
		try {
			State = 2124;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2121; Match(DOT);
				State = 2122; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2123; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126; _localctx.name = java_identifier();
			State = 2127; Match(LPAR);
			State = 2129;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (SELF - 126)) | (1L << (TEST - 126)) | (1L << (THIS - 126)) | (1L << (WRITE - 126)) | (1L << (BOOLEAN_LITERAL - 126)) | (1L << (CHAR_LITERAL - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (NATIVE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)) | (1L << (TEXT_LITERAL - 126)) | (1L << (INTEGER_LITERAL - 126)) | (1L << (DECIMAL_LITERAL - 126)))) != 0)) {
				{
				State = 2128; _localctx.args = java_arguments(0);
				}
			}

			State = 2131; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 358;
		EnterRecursionRule(_localctx, 358, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2134; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 2136;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2137; Match(COMMA);
					State = 2138; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 2143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2144; Match(LBRAK);
			State = 2145; _localctx.exp = java_expression(0);
			State = 2146; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148; Match(LPAR);
			State = 2149; _localctx.exp = java_expression(0);
			State = 2150; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 364;
		EnterRecursionRule(_localctx, 364, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2153; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 2155;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2156; Match(DOT);
					State = 2157; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 2162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 366;
		EnterRecursionRule(_localctx, 366, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2164; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 2166;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2167; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 2172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_java_literal_expression);
		try {
			State = 2178;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2173; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2174; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2175; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2176; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2177; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(EParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 370, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (TEST - 126)) | (1L << (WRITE - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (NATIVE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 372, RULE_csharp_statement);
		try {
			State = 2189;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2182; Match(RETURN);
				State = 2183; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 2184; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2186; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 2187; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 374;
		EnterRecursionRule(_localctx, 374, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2192; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 2194;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2195; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 2200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_new_expressionContext csharp_new_expression() {
			return GetRuleContext<Csharp_new_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_csharp_primary_expression);
		try {
			State = 2206;
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2201; csharp_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2202; csharp_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2203; csharp_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2204; csharp_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2205; csharp_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 378, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2208; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public Csharp_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_new_expressionContext csharp_new_expression() {
		Csharp_new_expressionContext _localctx = new Csharp_new_expressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_csharp_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210; new_token();
			State = 2211; csharp_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 382, RULE_csharp_selector_expression);
		try {
			State = 2216;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2213; Match(DOT);
				State = 2214; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2215; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 384, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218; _localctx.name = csharp_identifier();
			State = 2219; Match(LPAR);
			State = 2221;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (SELF - 126)) | (1L << (TEST - 126)) | (1L << (THIS - 126)) | (1L << (WRITE - 126)) | (1L << (BOOLEAN_LITERAL - 126)) | (1L << (CHAR_LITERAL - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)) | (1L << (DOLLAR_IDENTIFIER - 126)) | (1L << (TEXT_LITERAL - 126)) | (1L << (INTEGER_LITERAL - 126)) | (1L << (DECIMAL_LITERAL - 126)))) != 0)) {
				{
				State = 2220; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2223; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 386;
		EnterRecursionRule(_localctx, 386, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2226; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2228;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2229; Match(COMMA);
					State = 2230; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 388, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2236; Match(LBRAK);
			State = 2237; _localctx.exp = csharp_expression(0);
			State = 2238; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 390, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240; Match(LPAR);
			State = 2241; _localctx.exp = csharp_expression(0);
			State = 2242; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}
	public partial class CSharpPromptoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPromptoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 392;
		EnterRecursionRule(_localctx, 392, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2245; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2246; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2249;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2250; Match(DOT);
					State = 2251; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_csharp_literal_expression);
		try {
			State = 2262;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2257; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2258; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2259; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2260; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2261; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 396, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (READ - 126)) | (1L << (TEST - 126)) | (1L << (WRITE - 126)) | (1L << (SYMBOL_IDENTIFIER - 126)) | (1L << (TYPE_IDENTIFIER - 126)) | (1L << (VARIABLE_IDENTIFIER - 126)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 34: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 39: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 40: return unresolved_expression_sempred((Unresolved_expressionContext)_localctx, predIndex);
		case 41: return unresolved_selector_sempred((Unresolved_selectorContext)_localctx, predIndex);
		case 43: return invocation_trailer_sempred((Invocation_trailerContext)_localctx, predIndex);
		case 44: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 45: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 53: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 54: return with_argument_assignment_list_sempred((With_argument_assignment_listContext)_localctx, predIndex);
		case 57: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 65: return declarations_sempred((DeclarationsContext)_localctx, predIndex);
		case 69: return native_symbol_list_sempred((Native_symbol_listContext)_localctx, predIndex);
		case 70: return category_symbol_list_sempred((Category_symbol_listContext)_localctx, predIndex);
		case 71: return symbol_list_sempred((Symbol_listContext)_localctx, predIndex);
		case 75: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 77: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 84: return type_identifier_list_sempred((Type_identifier_listContext)_localctx, predIndex);
		case 90: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		case 96: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 97: return member_method_declaration_list_sempred((Member_method_declaration_listContext)_localctx, predIndex);
		case 99: return native_member_method_declaration_list_sempred((Native_member_method_declaration_listContext)_localctx, predIndex);
		case 104: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 107: return variable_identifier_list_sempred((Variable_identifier_listContext)_localctx, predIndex);
		case 110: return native_statement_list_sempred((Native_statement_listContext)_localctx, predIndex);
		case 114: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 115: return assertion_list_sempred((Assertion_listContext)_localctx, predIndex);
		case 116: return switch_case_statement_list_sempred((Switch_case_statement_listContext)_localctx, predIndex);
		case 117: return catch_statement_list_sempred((Catch_statement_listContext)_localctx, predIndex);
		case 120: return literal_list_literal_sempred((Literal_list_literalContext)_localctx, predIndex);
		case 128: return expression_tuple_sempred((Expression_tupleContext)_localctx, predIndex);
		case 129: return dict_entry_list_sempred((Dict_entry_listContext)_localctx, predIndex);
		case 133: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 134: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 138: return new_token_sempred((New_tokenContext)_localctx, predIndex);
		case 139: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 140: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 141: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 148: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 154: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 161: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 166: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 167: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 169: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 173: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 179: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 182: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 183: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 187: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 193: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 196: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 37);
		case 3: return Precpred(Context, 36);
		case 4: return Precpred(Context, 35);
		case 5: return Precpred(Context, 34);
		case 6: return Precpred(Context, 33);
		case 7: return Precpred(Context, 32);
		case 8: return Precpred(Context, 31);
		case 9: return Precpred(Context, 30);
		case 10: return Precpred(Context, 29);
		case 11: return Precpred(Context, 26);
		case 12: return Precpred(Context, 25);
		case 13: return Precpred(Context, 24);
		case 14: return Precpred(Context, 23);
		case 15: return Precpred(Context, 22);
		case 16: return Precpred(Context, 21);
		case 17: return Precpred(Context, 19);
		case 18: return Precpred(Context, 18);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		case 22: return Precpred(Context, 14);
		case 23: return Precpred(Context, 13);
		case 24: return Precpred(Context, 12);
		case 25: return Precpred(Context, 1);
		case 26: return Precpred(Context, 28);
		case 27: return Precpred(Context, 27);
		case 28: return Precpred(Context, 20);
		}
		return true;
	}
	private bool unresolved_expression_sempred(Unresolved_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool unresolved_selector_sempred(Unresolved_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool invocation_trailer_sempred(Invocation_trailerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.willBe(EParser.LF);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.wasNot(EParser.WS);
		case 34: return this.wasNot(EParser.WS);
		case 35: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.was(EParser.WS);
		}
		return true;
	}
	private bool with_argument_assignment_list_sempred(With_argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.wasNot(EParser.WS);
		case 39: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_symbol_list_sempred(Native_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool category_symbol_list_sempred(Category_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_list_sempred(Symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 3);
		case 46: return Precpred(Context, 2);
		case 47: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_identifier_list_sempred(Type_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 2);
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_method_declaration_list_sempred(Member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_member_method_declaration_list_sempred(Native_member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool variable_identifier_list_sempred(Variable_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_statement_list_sempred(Native_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assertion_list_sempred(Assertion_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool switch_case_statement_list_sempred(Switch_case_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool catch_statement_list_sempred(Catch_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool literal_list_literal_sempred(Literal_list_literalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_tuple_sempred(Expression_tupleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dict_entry_list_sempred(Dict_entry_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return this.willBeAOrAn();
		}
		return true;
	}
	private bool new_token_sempred(New_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return this.isText(_localctx.i1,"new");
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xA8\x8DD\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x197\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x5\x2\x19E\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x1BC\n\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x5\x6\x1C2\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1C7\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6\x1CD\n\x6\x3\x6\x3\x6\x5\x6\x1D1\n\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x5\a\x1D7\n\a\x3\a\x3\a\x5\a\x1DB\n\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1E6\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x5\a\x1EF\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x5\b\x1FE\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"\x207\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x20E\n\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\x218\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x236\n\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x241\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x24F\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x25D\n\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x26B"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x27D\n\x10\f\x10\xE\x10"+
		"\x280\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\x28A\n\x11\x5\x11\x28C\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x5\x12\x295\n\x12\x3\x12\x3\x12\x5\x12\x299\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x2A1\n\x13\x3\x13\x3\x13\x5\x13"+
		"\x2A5\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x2B4\n\x14\x3\x14\x3\x14\x5\x14"+
		"\x2B8\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x2D3\n\x15\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17\x2DA\n\x17\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x2DF\n\x18\x3\x18\x3\x18\x5\x18\x2E3\n\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2F6\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x5\x1B\x2FD\n\x1B\x3\x1B\x5\x1B\x300\n\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x321\n"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x334\n\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x5 \x33B\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x35D\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#"+
		"\x366\n#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\a$\x37B\n$\f$\xE$\x37E\v$\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x5&\x38D\n&\x3&\x3&\x3&\x5&\x392\n&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x5&\x39A\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x3A3\n&\x3&\x3"+
		"&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x3BA\n\'\x3(\x3(\x5(\x3BE\n(\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3DA\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\a)\x441\n)\f)\xE)\x444\v)\x3*\x3*\x3*\x3*\x3*\a"+
		"*\x44B\n*\f*\xE*\x44E\v*\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3,\x3-\x3-\x3"+
		".\x3.\x3.\x3.\x3.\a.\x460\n.\f.\xE.\x463\v.\x3/\x3/\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x472\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x5\x31\x47A\n\x31\x3\x31\x3\x31\x3\x31\x5\x31\x47F\n\x31\x5\x31"+
		"\x481\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x487\n\x31\x5\x31\x489"+
		"\n\x31\x5\x31\x48B\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4A5\n\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4AC\n\x35\x3\x35\x5\x35\x4AF"+
		"\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4B5\n\x35\x3\x35\x3\x35\x5"+
		"\x35\x4B9\n\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4BE\n\x35\x5\x35\x4C0\n\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4C9\n\x36\x3"+
		"\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x4D0\n\x37\x5\x37\x4D2\n\x37\x3"+
		"\x37\x3\x37\x3\x37\x5\x37\x4D7\n\x37\x5\x37\x4D9\n\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x4E2\n\x38\f\x38\xE\x38\x4E5\v"+
		"\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x5;\x4F7\n;\x3<\x3<\x3<\x3<\x3=\a=\x4FE\n=\f=\xE=\x501\v=\x3"+
		">\x6>\x504\n>\r>\xE>\x505\x3?\x6?\x509\n?\r?\xE?\x50A\x3?\x3?\x3@\a@\x510"+
		"\n@\f@\xE@\x513\v@\x3@\x3@\x3\x41\x3\x41\x3\x42\x5\x42\x51A\n\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\a\x43"+
		"\x526\n\x43\f\x43\xE\x43\x529\v\x43\x3\x44\x3\x44\x3\x44\a\x44\x52E\n"+
		"\x44\f\x44\xE\x44\x531\v\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44"+
		"\x538\n\x44\x3\x45\x3\x45\x3\x46\x3\x46\x5\x46\x53E\n\x46\x3G\x3G\x3G"+
		"\x3G\x3G\x3G\x3G\aG\x547\nG\fG\xEG\x54A\vG\x3H\x3H\x3H\x3H\x3H\x3H\x3"+
		"H\aH\x553\nH\fH\xEH\x556\vH\x3I\x3I\x3I\x3I\x3I\x3I\aI\x55E\nI\fI\xEI"+
		"\x561\vI\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x56D\nJ\x3K\x3K\x5"+
		"K\x571\nK\x3K\x3K\x3L\x3L\x5L\x577\nL\x3L\x3L\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\aM\x581\nM\fM\xEM\x584\vM\x3N\x3N\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\aO\x597\nO\fO\xEO\x59A\vO\x3P\x3P\x5P\x59E\n"+
		"P\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x5AE\nQ"+
		"\x3R\x3R\x3S\x5S\x5B3\nS\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x5U\x5BC\nU\x3V\x3"+
		"V\x3V\x3V\x3V\x3V\aV\x5C4\nV\fV\xEV\x5C7\vV\x3W\x3W\x5W\x5CB\nW\x3X\x3"+
		"X\x3X\x5X\x5D0\nX\x3Y\x3Y\x3Z\x3Z\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x3\\\x3"+
		"\\\a\\\x5DE\n\\\f\\\xE\\\x5E1\v\\\x3]\x3]\x5]\x5E5\n]\x3]\x5]\x5E8\n]"+
		"\x3^\x3^\x5^\x5EC\n^\x3_\x3_\x3_\x5_\x5F1\n_\x3`\x3`\x3`\x3\x61\x3\x61"+
		"\x5\x61\x5F8\n\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3"+
		"\x62\x3\x62\a\x62\x603\n\x62\f\x62\xE\x62\x606\v\x62\x3\x63\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x60F\n\x63\f\x63\xE\x63\x612\v"+
		"\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x619\n\x64\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\a\x65\x622\n\x65\f\x65\xE\x65\x625"+
		"\v\x65\x3\x66\x3\x66\x5\x66\x629\n\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x3g\x3g\x5g\x635\ng\x3h\x3h\x5h\x639\nh\x3i\x3i\x3i\x3i\x3i\x3i\ai\x641"+
		"\ni\fi\xEi\x644\vi\x3j\x3j\x3j\x3k\x3k\x5k\x64B\nk\x3l\x3l\x3l\x3l\x5"+
		"l\x651\nl\x3l\x3l\x3l\al\x656\nl\fl\xEl\x659\vl\x3l\x3l\x5l\x65D\nl\x3"+
		"m\x3m\x3m\x3m\x3m\x3m\am\x665\nm\fm\xEm\x668\vm\x3n\x3n\x3n\x3n\x5n\x66E"+
		"\nn\x3o\x3o\x3p\x3p\x3p\x3p\x3p\x3p\x3p\ap\x679\np\fp\xEp\x67C\vp\x3q"+
		"\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x688\nq\x3r\x3r\x5r\x68C\nr\x3"+
		"r\x5r\x68F\nr\x3s\x3s\x5s\x693\ns\x3s\x5s\x696\ns\x3t\x3t\x3t\x3t\x3t"+
		"\x3t\x3t\at\x69F\nt\ft\xEt\x6A2\vt\x3u\x3u\x3u\x3u\x3u\x3u\x3u\au\x6AB"+
		"\nu\fu\xEu\x6AE\vu\x3v\x3v\x3v\x3v\x3v\x3v\x3v\av\x6B7\nv\fv\xEv\x6BA"+
		"\vv\x3w\x3w\x3w\x3w\x3w\x3w\x3w\aw\x6C3\nw\fw\xEw\x6C6\vw\x3x\x3x\x3x"+
		"\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x5x\x6D6\nx\x3y\x3y\x3y\x3"+
		"y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x5y\x6E5\ny\x3z\x3z\x3z\x3z\x3z"+
		"\x3z\az\x6ED\nz\fz\xEz\x6F0\vz\x3{\x3{\x3{\x3{\x5{\x6F6\n{\x3|\x3|\x3"+
		"}\x3}\x3}\x3}\x3~\x3~\x5~\x700\n~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5"+
		"\x7F\x707\n\x7F\x3\x80\x3\x80\x5\x80\x70B\n\x80\x3\x80\x3\x80\x3\x81\x3"+
		"\x81\x5\x81\x711\n\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82"+
		"\x3\x82\a\x82\x71B\n\x82\f\x82\xE\x82\x71E\v\x82\x3\x83\x3\x83\x3\x83"+
		"\x3\x83\x3\x83\x3\x83\a\x83\x726\n\x83\f\x83\xE\x83\x729\v\x83\x3\x84"+
		"\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85"+
		"\x3\x85\x3\x85\x5\x85\x738\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\a\x87\x743\n\x87\f\x87\xE\x87\x746\v\x87\x3"+
		"\x88\x3\x88\x3\x88\x3\x88\x5\x88\x74C\n\x88\x3\x89\x3\x89\x3\x89\a\x89"+
		"\x751\n\x89\f\x89\xE\x89\x754\v\x89\x3\x8A\x3\x8A\x3\x8A\a\x8A\x759\n"+
		"\x8A\f\x8A\xE\x8A\x75C\v\x8A\x3\x8A\x5\x8A\x75F\n\x8A\x3\x8B\x3\x8B\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\x767\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8D"+
		"\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90"+
		"\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93\x3\x93\x3\x94\x3\x94\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\x786\n\x95\x3\x96\x3\x96\x3"+
		"\x96\x3\x96\x3\x96\a\x96\x78D\n\x96\f\x96\xE\x96\x790\v\x96\x3\x97\x3"+
		"\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\x799\n\x97\x3\x98\x3\x98"+
		"\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\x7A5\n"+
		"\x9A\x3\x9B\x3\x9B\x3\x9B\x5\x9B\x7AA\n\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C"+
		"\x3\x9C\x3\x9C\x3\x9C\x3\x9C\a\x9C\x7B4\n\x9C\f\x9C\xE\x9C\x7B7\v\x9C"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9F\x3\x9F"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x7C8\n\xA0\x3\xA1\x3\xA1\x3"+
		"\xA2\x3\xA2\x3\xA2\x5\xA2\x7CF\n\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3"+
		"\a\xA3\x7D6\n\xA3\f\xA3\xE\xA3\x7D9\v\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4"+
		"\x5\xA4\x7DF\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\x7E7"+
		"\n\xA5\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x7EC\n\xA6\x3\xA6\x3\xA6\x3\xA7\x3"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x7F6\n\xA7\x3\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\a\xA8\x7FE\n\xA8\f\xA8\xE\xA8\x801\v\xA8\x3\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9"+
		"\a\xA9\x80E\n\xA9\f\xA9\xE\xA9\x811\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA"+
		"\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x81A\n\xAB\x3\xAB\x3\xAB\x3\xAB\a\xAB\x81F"+
		"\n\xAB\f\xAB\xE\xAB\x822\v\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC"+
		"\x829\n\xAC\x3\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3"+
		"\xAE\x5\xAE\x834\n\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\a\xAF\x83B\n"+
		"\xAF\f\xAF\xE\xAF\x83E\v\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0"+
		"\x845\n\xB0\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x5"+
		"\xB3\x84F\n\xB3\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x854\n\xB4\x3\xB4\x3\xB4\x3"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\a\xB5\x85E\n\xB5\f\xB5\xE\xB5"+
		"\x861\v\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3"+
		"\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8\x871\n\xB8\f\xB8\xE\xB8"+
		"\x874\v\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9\x87B\n\xB9\f\xB9"+
		"\xE\xB9\x87E\v\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x885\n\xBA"+
		"\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC"+
		"\x890\n\xBC\x3\xBD\x3\xBD\x3\xBD\x3\xBD\x3\xBD\a\xBD\x897\n\xBD\f\xBD"+
		"\xE\xBD\x89A\v\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x8A1\n\xBE"+
		"\x3\xBF\x3\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x8AB\n"+
		"\xC1\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x8B0\n\xC2\x3\xC2\x3\xC2\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\a\xC3\x8BA\n\xC3\f\xC3\xE\xC3\x8BD\v\xC3"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC6\x3\xC6"+
		"\x3\xC6\x5\xC6\x8CA\n\xC6\x3\xC6\x3\xC6\x3\xC6\a\xC6\x8CF\n\xC6\f\xC6"+
		"\xE\xC6\x8D2\v\xC6\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x8D9\n\xC7"+
		"\x3\xC8\x3\xC8\x3\xC8\x2*\x1E\x46PRZn\x84\x8C\x8E\x90\x98\x9C\xAA\xB6"+
		"\xC2\xC4\xC8\xD8\xDE\xE6\xE8\xEA\xEC\xF2\x102\x104\x10C\x12A\x136\x144"+
		"\x14E\x150\x154\x15C\x168\x16E\x170\x178\x184\x18A\xC9\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE"+
		"\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2"+
		"\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6"+
		"\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C\x10E\x110\x112\x114"+
		"\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128\x12A\x12C\x12E\x130"+
		"\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144\x146\x148\x14A\x14C"+
		"\x14E\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160\x162\x164\x166\x168"+
		"\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C\x17E\x180\x182\x184"+
		"\x186\x188\x18A\x18C\x18E\x2\n\x3\x2\"#\x4\x2\x86\x86\x8E\x8E\x4\x2II"+
		"XX\x4\x2\'\'pp\b\x2\x34<\x80\x80\x8D\x8D\x97\x97\x9C\x9E\xA0\xA0\b\x2"+
		"\x34<\x80\x80\x86\x86\x8D\x8E\x97\x97\x9C\x9E\a\x2\x34<\x80\x80\x8D\x8D"+
		"\x97\x97\x9C\xA0\a\x2\x34<\x80\x80\x8D\x8D\x97\x97\x9C\x9E\x956\x2\x190"+
		"\x3\x2\x2\x2\x4\x1A5\x3\x2\x2\x2\x6\x1B1\x3\x2\x2\x2\b\x1B7\x3\x2\x2\x2"+
		"\n\x1BD\x3\x2\x2\x2\f\x1D2\x3\x2\x2\x2\xE\x1F0\x3\x2\x2\x2\x10\x20D\x3"+
		"\x2\x2\x2\x12\x20F\x3\x2\x2\x2\x14\x21F\x3\x2\x2\x2\x16\x228\x3\x2\x2"+
		"\x2\x18\x231\x3\x2\x2\x2\x1A\x250\x3\x2\x2\x2\x1C\x26C\x3\x2\x2\x2\x1E"+
		"\x275\x3\x2\x2\x2 \x28B\x3\x2\x2\x2\"\x28D\x3\x2\x2\x2$\x29A\x3\x2\x2"+
		"\x2&\x2AC\x3\x2\x2\x2(\x2BF\x3\x2\x2\x2*\x2D4\x3\x2\x2\x2,\x2D6\x3\x2"+
		"\x2\x2.\x2DB\x3\x2\x2\x2\x30\x2F5\x3\x2\x2\x2\x32\x2F7\x3\x2\x2\x2\x34"+
		"\x2FF\x3\x2\x2\x2\x36\x301\x3\x2\x2\x2\x38\x30A\x3\x2\x2\x2:\x313\x3\x2"+
		"\x2\x2<\x333\x3\x2\x2\x2>\x335\x3\x2\x2\x2@\x343\x3\x2\x2\x2\x42\x34C"+
		"\x3\x2\x2\x2\x44\x353\x3\x2\x2\x2\x46\x367\x3\x2\x2\x2H\x37F\x3\x2\x2"+
		"\x2J\x382\x3\x2\x2\x2L\x3B9\x3\x2\x2\x2N\x3BB\x3\x2\x2\x2P\x3D9\x3\x2"+
		"\x2\x2R\x445\x3\x2\x2\x2T\x44F\x3\x2\x2\x2V\x453\x3\x2\x2\x2X\x458\x3"+
		"\x2\x2\x2Z\x45A\x3\x2\x2\x2\\\x471\x3\x2\x2\x2^\x473\x3\x2\x2\x2`\x48A"+
		"\x3\x2\x2\x2\x62\x48C\x3\x2\x2\x2\x64\x490\x3\x2\x2\x2\x66\x495\x3\x2"+
		"\x2\x2h\x4BF\x3\x2\x2\x2j\x4C1\x3\x2\x2\x2l\x4D8\x3\x2\x2\x2n\x4DA\x3"+
		"\x2\x2\x2p\x4E6\x3\x2\x2\x2r\x4EA\x3\x2\x2\x2t\x4F6\x3\x2\x2\x2v\x4F8"+
		"\x3\x2\x2\x2x\x4FF\x3\x2\x2\x2z\x503\x3\x2\x2\x2|\x508\x3\x2\x2\x2~\x511"+
		"\x3\x2\x2\x2\x80\x516\x3\x2\x2\x2\x82\x519\x3\x2\x2\x2\x84\x51E\x3\x2"+
		"\x2\x2\x86\x52F\x3\x2\x2\x2\x88\x539\x3\x2\x2\x2\x8A\x53D\x3\x2\x2\x2"+
		"\x8C\x53F\x3\x2\x2\x2\x8E\x54B\x3\x2\x2\x2\x90\x557\x3\x2\x2\x2\x92\x56C"+
		"\x3\x2\x2\x2\x94\x56E\x3\x2\x2\x2\x96\x574\x3\x2\x2\x2\x98\x57A\x3\x2"+
		"\x2\x2\x9A\x585\x3\x2\x2\x2\x9C\x58B\x3\x2\x2\x2\x9E\x59D\x3\x2\x2\x2"+
		"\xA0\x5AD\x3\x2\x2\x2\xA2\x5AF\x3\x2\x2\x2\xA4\x5B2\x3\x2\x2\x2\xA6\x5B6"+
		"\x3\x2\x2\x2\xA8\x5BB\x3\x2\x2\x2\xAA\x5BD\x3\x2\x2\x2\xAC\x5CA\x3\x2"+
		"\x2\x2\xAE\x5CF\x3\x2\x2\x2\xB0\x5D1\x3\x2\x2\x2\xB2\x5D3\x3\x2\x2\x2"+
		"\xB4\x5D5\x3\x2\x2\x2\xB6\x5D7\x3\x2\x2\x2\xB8\x5E7\x3\x2\x2\x2\xBA\x5EB"+
		"\x3\x2\x2\x2\xBC\x5ED\x3\x2\x2\x2\xBE\x5F2\x3\x2\x2\x2\xC0\x5F7\x3\x2"+
		"\x2\x2\xC2\x5F9\x3\x2\x2\x2\xC4\x607\x3\x2\x2\x2\xC6\x618\x3\x2\x2\x2"+
		"\xC8\x61A\x3\x2\x2\x2\xCA\x628\x3\x2\x2\x2\xCC\x634\x3\x2\x2\x2\xCE\x636"+
		"\x3\x2\x2\x2\xD0\x63A\x3\x2\x2\x2\xD2\x645\x3\x2\x2\x2\xD4\x648\x3\x2"+
		"\x2\x2\xD6\x64C\x3\x2\x2\x2\xD8\x65E\x3\x2\x2\x2\xDA\x66D\x3\x2\x2\x2"+
		"\xDC\x66F\x3\x2\x2\x2\xDE\x671\x3\x2\x2\x2\xE0\x687\x3\x2\x2\x2\xE2\x689"+
		"\x3\x2\x2\x2\xE4\x690\x3\x2\x2\x2\xE6\x697\x3\x2\x2\x2\xE8\x6A3\x3\x2"+
		"\x2\x2\xEA\x6AF\x3\x2\x2\x2\xEC\x6BB\x3\x2\x2\x2\xEE\x6D5\x3\x2\x2\x2"+
		"\xF0\x6E4\x3\x2\x2\x2\xF2\x6E6\x3\x2\x2\x2\xF4\x6F5\x3\x2\x2\x2\xF6\x6F7"+
		"\x3\x2\x2\x2\xF8\x6F9\x3\x2\x2\x2\xFA\x6FF\x3\x2\x2\x2\xFC\x706\x3\x2"+
		"\x2\x2\xFE\x708\x3\x2\x2\x2\x100\x70E\x3\x2\x2\x2\x102\x714\x3\x2\x2\x2"+
		"\x104\x71F\x3\x2\x2\x2\x106\x72A\x3\x2\x2\x2\x108\x737\x3\x2\x2\x2\x10A"+
		"\x739\x3\x2\x2\x2\x10C\x73D\x3\x2\x2\x2\x10E\x74B\x3\x2\x2\x2\x110\x74D"+
		"\x3\x2\x2\x2\x112\x755\x3\x2\x2\x2\x114\x766\x3\x2\x2\x2\x116\x768\x3"+
		"\x2\x2\x2\x118\x76B\x3\x2\x2\x2\x11A\x76E\x3\x2\x2\x2\x11C\x771\x3\x2"+
		"\x2\x2\x11E\x774\x3\x2\x2\x2\x120\x776\x3\x2\x2\x2\x122\x778\x3\x2\x2"+
		"\x2\x124\x77A\x3\x2\x2\x2\x126\x77C\x3\x2\x2\x2\x128\x785\x3\x2\x2\x2"+
		"\x12A\x787\x3\x2\x2\x2\x12C\x798\x3\x2\x2\x2\x12E\x79A\x3\x2\x2\x2\x130"+
		"\x79C\x3\x2\x2\x2\x132\x7A4\x3\x2\x2\x2\x134\x7A6\x3\x2\x2\x2\x136\x7AD"+
		"\x3\x2\x2\x2\x138\x7B8\x3\x2\x2\x2\x13A\x7BC\x3\x2\x2\x2\x13C\x7C0\x3"+
		"\x2\x2\x2\x13E\x7C7\x3\x2\x2\x2\x140\x7C9\x3\x2\x2\x2\x142\x7CE\x3\x2"+
		"\x2\x2\x144\x7D0\x3\x2\x2\x2\x146\x7DE\x3\x2\x2\x2\x148\x7E6\x3\x2\x2"+
		"\x2\x14A\x7E8\x3\x2\x2\x2\x14C\x7F5\x3\x2\x2\x2\x14E\x7F7\x3\x2\x2\x2"+
		"\x150\x802\x3\x2\x2\x2\x152\x812\x3\x2\x2\x2\x154\x819\x3\x2\x2\x2\x156"+
		"\x828\x3\x2\x2\x2\x158\x82A\x3\x2\x2\x2\x15A\x833\x3\x2\x2\x2\x15C\x835"+
		"\x3\x2\x2\x2\x15E\x844\x3\x2\x2\x2\x160\x846\x3\x2\x2\x2\x162\x848\x3"+
		"\x2\x2\x2\x164\x84E\x3\x2\x2\x2\x166\x850\x3\x2\x2\x2\x168\x857\x3\x2"+
		"\x2\x2\x16A\x862\x3\x2\x2\x2\x16C\x866\x3\x2\x2\x2\x16E\x86A\x3\x2\x2"+
		"\x2\x170\x875\x3\x2\x2\x2\x172\x884\x3\x2\x2\x2\x174\x886\x3\x2\x2\x2"+
		"\x176\x88F\x3\x2\x2\x2\x178\x891\x3\x2\x2\x2\x17A\x8A0\x3\x2\x2\x2\x17C"+
		"\x8A2\x3\x2\x2\x2\x17E\x8A4\x3\x2\x2\x2\x180\x8AA\x3\x2\x2\x2\x182\x8AC"+
		"\x3\x2\x2\x2\x184\x8B3\x3\x2\x2\x2\x186\x8BE\x3\x2\x2\x2\x188\x8C2\x3"+
		"\x2\x2\x2\x18A\x8C9\x3\x2\x2\x2\x18C\x8D8\x3\x2\x2\x2\x18E\x8DA\x3\x2"+
		"\x2\x2\x190\x191\aW\x2\x2\x191\x192\x5\xB2Z\x2\x192\x193\aH\x2\x2\x193"+
		"\x196\a^\x2\x2\x194\x197\aQ\x2\x2\x195\x197\x5\xB2Z\x2\x196\x194\x3\x2"+
		"\x2\x2\x196\x195\x3\x2\x2\x2\x197\x19D\x3\x2\x2\x2\x198\x199\x5 \x11\x2"+
		"\x199\x19A\a\x13\x2\x2\x19A\x19B\a\x46\x2\x2\x19B\x19E\x3\x2\x2\x2\x19C"+
		"\x19E\a\x93\x2\x2\x19D\x198\x3\x2\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E\x19F"+
		"\x3\x2\x2\x2\x19F\x1A0\x5\x11C\x8F\x2\x1A0\x1A1\a\x11\x2\x2\x1A1\x1A2"+
		"\x5|?\x2\x1A2\x1A3\x5\x8EH\x2\x1A3\x1A4\x5~@\x2\x1A4\x3\x3\x2\x2\x2\x1A5"+
		"\x1A6\aW\x2\x2\x1A6\x1A7\x5\xB2Z\x2\x1A7\x1A8\aH\x2\x2\x1A8\x1A9\a^\x2"+
		"\x2\x1A9\x1AA\x5\xA0Q\x2\x1AA\x1AB\a\x93\x2\x2\x1AB\x1AC\x5\x11C\x8F\x2"+
		"\x1AC\x1AD\a\x11\x2\x2\x1AD\x1AE\x5|?\x2\x1AE\x1AF\x5\x8CG\x2\x1AF\x1B0"+
		"\x5~@\x2\x1B0\x5\x3\x2\x2\x2\x1B1\x1B2\x5\xB4[\x2\x1B2\x1B3\a\x93\x2\x2"+
		"\x1B3\x1B4\x5P)\x2\x1B4\x1B5\aH\x2\x2\x1B5\x1B6\x5\x11A\x8E\x2\x1B6\a"+
		"\x3\x2\x2\x2\x1B7\x1B8\x5\xB4[\x2\x1B8\x1BB\x5n\x38\x2\x1B9\x1BA\a\x46"+
		"\x2\x2\x1BA\x1BC\x5p\x39\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2"+
		"\x1BC\t\x3\x2\x2\x2\x1BD\x1BE\aW\x2\x2\x1BE\x1BF\x5\xB0Y\x2\x1BF\x1C1"+
		"\aH\x2\x2\x1C0\x1C2\a\x8A\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2\x3\x2"+
		"\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C4\x5\x9CO\x2\x1C4\x1C6\aK\x2\x2\x1C5"+
		"\x1C7\x5\x92J\x2\x1C6\x1C5\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1D0"+
		"\x3\x2\x2\x2\x1C8\x1C9\a\x93\x2\x2\x1C9\x1CC\x5\xD8m\x2\x1CA\x1CB\a\x46"+
		"\x2\x2\x1CB\x1CD\x5\xB0Y\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2"+
		"\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\aj\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1C8"+
		"\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\v\x3\x2\x2\x2\x1D2\x1D3\aW\x2"+
		"\x2\x1D3\x1D4\x5\xB2Z\x2\x1D4\x1D6\aH\x2\x2\x1D5\x1D7\a\x8A\x2\x2\x1D6"+
		"\x1D5\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1DA\x3\x2\x2\x2\x1D8\x1DB"+
		"\aQ\x2\x2\x1D9\x1DB\x5\x10\t\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1D9\x3\x2"+
		"\x2\x2\x1DB\x1EE\x3\x2\x2\x2\x1DC\x1E5\x5 \x11\x2\x1DD\x1DE\a\x13\x2\x2"+
		"\x1DE\x1DF\a\x46\x2\x2\x1DF\x1E0\ao\x2\x2\x1E0\x1E1\a\x11\x2\x2\x1E1\x1E2"+
		"\x5|?\x2\x1E2\x1E3\x5\xC4\x63\x2\x1E3\x1E4\x5~@\x2\x1E4\x1E6\x3\x2\x2"+
		"\x2\x1E5\x1DD\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1EF\x3\x2\x2\x2"+
		"\x1E7\x1E8\a\x93\x2\x2\x1E8\x1E9\ao\x2\x2\x1E9\x1EA\a\x11\x2\x2\x1EA\x1EB"+
		"\x5|?\x2\x1EB\x1EC\x5\xC4\x63\x2\x1EC\x1ED\x5~@\x2\x1ED\x1EF\x3\x2\x2"+
		"\x2\x1EE\x1DC\x3\x2\x2\x2\x1EE\x1E7\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2"+
		"\x1EF\r\x3\x2\x2\x2\x1F0\x1F1\aW\x2\x2\x1F1\x1F2\x5\xB2Z\x2\x1F2\x1F3"+
		"\aH\x2\x2\x1F3\x206\a\x88\x2\x2\x1F4\x1FD\x5 \x11\x2\x1F5\x1F6\a\x13\x2"+
		"\x2\x1F6\x1F7\a\x46\x2\x2\x1F7\x1F8\ao\x2\x2\x1F8\x1F9\a\x11\x2\x2\x1F9"+
		"\x1FA\x5|?\x2\x1FA\x1FB\x5\xC4\x63\x2\x1FB\x1FC\x5~@\x2\x1FC\x1FE\x3\x2"+
		"\x2\x2\x1FD\x1F5\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x207\x3\x2\x2"+
		"\x2\x1FF\x200\a\x93\x2\x2\x200\x201\ao\x2\x2\x201\x202\a\x11\x2\x2\x202"+
		"\x203\x5|?\x2\x203\x204\x5\xC4\x63\x2\x204\x205\x5~@\x2\x205\x207\x3\x2"+
		"\x2\x2\x206\x1F4\x3\x2\x2\x2\x206\x1FF\x3\x2\x2\x2\x206\x207\x3\x2\x2"+
		"\x2\x207\xF\x3\x2\x2\x2\x208\x20E\x5\xAAV\x2\x209\x20A\x5\xAAV\x2\x20A"+
		"\x20B\a\x46\x2\x2\x20B\x20C\x5\xB2Z\x2\x20C\x20E\x3\x2\x2\x2\x20D\x208"+
		"\x3\x2\x2\x2\x20D\x209\x3\x2\x2\x2\x20E\x11\x3\x2\x2\x2\x20F\x210\aW\x2"+
		"\x2\x210\x211\x5\x114\x8B\x2\x211\x212\aH\x2\x2\x212\x213\az\x2\x2\x213"+
		"\x214\a\x81\x2\x2\x214\x217\x5\xBA^\x2\x215\x216\a\x84\x2\x2\x216\x218"+
		"\x5\x9CO\x2\x217\x215\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\x3\x2"+
		"\x2\x2\x219\x21A\aZ\x2\x2\x21A\x21B\a\x11\x2\x2\x21B\x21C\x5|?\x2\x21C"+
		"\x21D\x5\xE6t\x2\x21D\x21E\x5~@\x2\x21E\x13\x3\x2\x2\x2\x21F\x220\aW\x2"+
		"\x2\x220\x221\x5\xB0Y\x2\x221\x222\a\x87\x2\x2\x222\x223\aZ\x2\x2\x223"+
		"\x224\a\x11\x2\x2\x224\x225\x5|?\x2\x225\x226\x5\xE6t\x2\x226\x227\x5"+
		"~@\x2\x227\x15\x3\x2\x2\x2\x228\x229\aW\x2\x2\x229\x22A\x5\xB0Y\x2\x22A"+
		"\x22B\ag\x2\x2\x22B\x22C\aZ\x2\x2\x22C\x22D\a\x11\x2\x2\x22D\x22E\x5|"+
		"?\x2\x22E\x22F\x5\xE6t\x2\x22F\x230\x5~@\x2\x230\x17\x3\x2\x2\x2\x231"+
		"\x232\aW\x2\x2\x232\x233\x5\xB2Z\x2\x233\x235\aH\x2\x2\x234\x236\a\x8A"+
		"\x2\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x237\x3\x2\x2"+
		"\x2\x237\x238\ar\x2\x2\x238\x240\aQ\x2\x2\x239\x23A\x5 \x11\x2\x23A\x23B"+
		"\a\x13\x2\x2\x23B\x23C\a\x46\x2\x2\x23C\x23D\aM\x2\x2\x23D\x241\x3\x2"+
		"\x2\x2\x23E\x23F\a\x93\x2\x2\x23F\x241\aM\x2\x2\x240\x239\x3\x2\x2\x2"+
		"\x240\x23E\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\a\x11\x2\x2\x243"+
		"\x244\x5|?\x2\x244\x245\x5\x1C\xF\x2\x245\x24E\x5~@\x2\x246\x247\x5z>"+
		"\x2\x247\x248\a\x46\x2\x2\x248\x249\ao\x2\x2\x249\x24A\a\x11\x2\x2\x24A"+
		"\x24B\x5|?\x2\x24B\x24C\x5\xC8\x65\x2\x24C\x24D\x5~@\x2\x24D\x24F\x3\x2"+
		"\x2\x2\x24E\x246\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x19\x3\x2\x2\x2"+
		"\x250\x251\aW\x2\x2\x251\x252\x5\xB2Z\x2\x252\x253\aH\x2\x2\x253\x254"+
		"\ar\x2\x2\x254\x25C\a\x82\x2\x2\x255\x256\x5 \x11\x2\x256\x257\a\x13\x2"+
		"\x2\x257\x258\a\x46\x2\x2\x258\x259\aM\x2\x2\x259\x25D\x3\x2\x2\x2\x25A"+
		"\x25B\a\x93\x2\x2\x25B\x25D\aM\x2\x2\x25C\x255\x3\x2\x2\x2\x25C\x25A\x3"+
		"\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x25F\a\x11\x2\x2\x25F\x260\x5|?\x2"+
		"\x260\x261\x5\x1C\xF\x2\x261\x26A\x5~@\x2\x262\x263\x5z>\x2\x263\x264"+
		"\a\x46\x2\x2\x264\x265\ao\x2\x2\x265\x266\a\x11\x2\x2\x266\x267\x5|?\x2"+
		"\x267\x268\x5\xC8\x65\x2\x268\x269\x5~@\x2\x269\x26B\x3\x2\x2\x2\x26A"+
		"\x262\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x1B\x3\x2\x2\x2\x26C\x26D"+
		"\aW\x2\x2\x26D\x26E\aQ\x2\x2\x26E\x26F\aM\x2\x2\x26F\x270\aH\x2\x2\x270"+
		"\x271\a\x11\x2\x2\x271\x272\x5|?\x2\x272\x273\x5\x1E\x10\x2\x273\x274"+
		"\x5~@\x2\x274\x1D\x3\x2\x2\x2\x275\x276\b\x10\x1\x2\x276\x277\x5\xCCg"+
		"\x2\x277\x27E\x3\x2\x2\x2\x278\x279\f\x3\x2\x2\x279\x27A\x5z>\x2\x27A"+
		"\x27B\x5\xCCg\x2\x27B\x27D\x3\x2\x2\x2\x27C\x278\x3\x2\x2\x2\x27D\x280"+
		"\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x1F\x3\x2"+
		"\x2\x2\x280\x27E\x3\x2\x2\x2\x281\x282\a\x93\x2\x2\x282\x283\aK\x2\x2"+
		"\x283\x28C\x5\xB0Y\x2\x284\x285\a\x93\x2\x2\x285\x286\aL\x2\x2\x286\x289"+
		"\x5\xD8m\x2\x287\x288\a\x46\x2\x2\x288\x28A\x5\xB0Y\x2\x289\x287\x3\x2"+
		"\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28C\x3\x2\x2\x2\x28B\x281\x3\x2\x2"+
		"\x2\x28B\x284\x3\x2\x2\x2\x28C!\x3\x2\x2\x2\x28D\x28E\aW\x2\x2\x28E\x28F"+
		"\x5\xACW\x2\x28F\x290\aH\x2\x2\x290\x291\a\x43\x2\x2\x291\x294\an\x2\x2"+
		"\x292\x293\a\x81\x2\x2\x293\x295\x5,\x17\x2\x294\x292\x3\x2\x2\x2\x294"+
		"\x295\x3\x2\x2\x2\x295\x298\x3\x2\x2\x2\x296\x297\a\x84\x2\x2\x297\x299"+
		"\x5\x9CO\x2\x298\x296\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299#\x3\x2\x2"+
		"\x2\x29A\x29B\aW\x2\x2\x29B\x29C\x5\xACW\x2\x29C\x29D\aH\x2\x2\x29D\x2A0"+
		"\an\x2\x2\x29E\x29F\a\x81\x2\x2\x29F\x2A1\x5,\x17\x2\x2A0\x29E\x3\x2\x2"+
		"\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A4\x3\x2\x2\x2\x2A2\x2A3\a\x84\x2\x2"+
		"\x2A3\x2A5\x5\x9CO\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5"+
		"\x2A6\x3\x2\x2\x2\x2A6\x2A7\aZ\x2\x2\x2A7\x2A8\a\x11\x2\x2\x2A8\x2A9\x5"+
		"|?\x2\x2A9\x2AA\x5\xE6t\x2\x2AA\x2AB\x5~@\x2\x2AB%\x3\x2\x2\x2\x2AC\x2AD"+
		"\aW\x2\x2\x2AD\x2AE\x5\xACW\x2\x2AE\x2AF\aH\x2\x2\x2AF\x2B0\ar\x2\x2\x2B0"+
		"\x2B3\an\x2\x2\x2B1\x2B2\a\x81\x2\x2\x2B2\x2B4\x5,\x17\x2\x2B3\x2B1\x3"+
		"\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B6\a\x84"+
		"\x2\x2\x2B6\x2B8\x5\xC0\x61\x2\x2B7\x2B5\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2"+
		"\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BA\aZ\x2\x2\x2BA\x2BB\a\x11\x2\x2\x2BB"+
		"\x2BC\x5|?\x2\x2BC\x2BD\x5\xDEp\x2\x2BD\x2BE\x5~@\x2\x2BE\'\x3\x2\x2\x2"+
		"\x2BF\x2C0\aW\x2\x2\x2C0\x2C1\a\xA1\x2\x2\x2C1\x2C2\aH\x2\x2\x2C2\x2C3"+
		"\a\x8D\x2\x2\x2C3\x2C4\an\x2\x2\x2C4\x2C5\aZ\x2\x2\x2C5\x2C6\a\x11\x2"+
		"\x2\x2C6\x2C7\x5|?\x2\x2C7\x2C8\x5\xE6t\x2\x2C8\x2C9\x5~@\x2\x2C9\x2CA"+
		"\x5z>\x2\x2CA\x2CB\a\x46\x2\x2\x2CB\x2D2\a\x92\x2\x2\x2CC\x2CD\a\x11\x2"+
		"\x2\x2CD\x2CE\x5|?\x2\x2CE\x2CF\x5\xE8u\x2\x2CF\x2D0\x5~@\x2\x2D0\x2D3"+
		"\x3\x2\x2\x2\x2D1\x2D3\x5\xB4[\x2\x2D2\x2CC\x3\x2\x2\x2\x2D2\x2D1\x3\x2"+
		"\x2\x2\x2D3)\x3\x2\x2\x2\x2D4\x2D5\x5P)\x2\x2D5+\x3\x2\x2\x2\x2D6\x2D9"+
		"\x5\xB6\\\x2\x2D7\x2D8\a\x46\x2\x2\x2D8\x2DA\x5\xB8]\x2\x2D9\x2D7\x3\x2"+
		"\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA-\x3\x2\x2\x2\x2DB\x2DC\x5\xC0\x61\x2"+
		"\x2DC\x2DE\x5\xB0Y\x2\x2DD\x2DF\x5 \x11\x2\x2DE\x2DD\x3\x2\x2\x2\x2DE"+
		"\x2DF\x3\x2\x2\x2\x2DF\x2E2\x3\x2\x2\x2\x2E0\x2E1\a-\x2\x2\x2E1\x2E3\x5"+
		"\xFA~\x2\x2E2\x2E0\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3/\x3\x2\x2\x2"+
		"\x2E4\x2F6\x5r:\x2\x2E5\x2F6\x5\x34\x1B\x2\x2E6\x2F6\x5v<\x2\x2E7\x2F6"+
		"\x5\x32\x1A\x2\x2E8\x2F6\x5N(\x2\x2E9\x2F6\x5\x44#\x2\x2EA\x2F6\x5:\x1E"+
		"\x2\x2EB\x2F6\x5> \x2\x2EC\x2F6\x5\x42\"\x2\x2ED\x2F6\x5@!\x2\x2EE\x2F6"+
		"\x5H%\x2\x2EF\x2F6\x5J&\x2\x2F0\x2F6\x5\x64\x33\x2\x2F1\x2F6\x5\x36\x1C"+
		"\x2\x2F2\x2F6\x5\x38\x1D\x2\x2F3\x2F6\x5$\x13\x2\x2F4\x2F6\x5\xDCo\x2"+
		"\x2F5\x2E4\x3\x2\x2\x2\x2F5\x2E5\x3\x2\x2\x2\x2F5\x2E6\x3\x2\x2\x2\x2F5"+
		"\x2E7\x3\x2\x2\x2\x2F5\x2E8\x3\x2\x2\x2\x2F5\x2E9\x3\x2\x2\x2\x2F5\x2EA"+
		"\x3\x2\x2\x2\x2F5\x2EB\x3\x2\x2\x2\x2F5\x2EC\x3\x2\x2\x2\x2F5\x2ED\x3"+
		"\x2\x2\x2\x2F5\x2EE\x3\x2\x2\x2\x2F5\x2EF\x3\x2\x2\x2\x2F5\x2F0\x3\x2"+
		"\x2\x2\x2F5\x2F1\x3\x2\x2\x2\x2F5\x2F2\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2"+
		"\x2\x2F5\x2F4\x3\x2\x2\x2\x2F6\x31\x3\x2\x2\x2\x2F7\x2F8\a\x8B\x2\x2\x2F8"+
		"\x2F9\x5\x98M\x2\x2F9\x33\x3\x2\x2\x2\x2FA\x2FC\x5R*\x2\x2FB\x2FD\x5l"+
		"\x37\x2\x2FC\x2FB\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x300\x3\x2\x2"+
		"\x2\x2FE\x300\x5V,\x2\x2FF\x2FA\x3\x2\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x300"+
		"\x35\x3\x2\x2\x2\x301\x302\a\x93\x2\x2\x302\x303\x5\x10A\x86\x2\x303\x304"+
		"\a\x13\x2\x2\x304\x305\aY\x2\x2\x305\x306\a\x11\x2\x2\x306\x307\x5|?\x2"+
		"\x307\x308\x5\xE6t\x2\x308\x309\x5~@\x2\x309\x37\x3\x2\x2\x2\x30A\x30B"+
		"\a\x93\x2\x2\x30B\x30C\x5\xB2Z\x2\x30C\x30D\a\x13\x2\x2\x30D\x30E\aY\x2"+
		"\x2\x30E\x30F\a\x11\x2\x2\x30F\x310\x5|?\x2\x310\x311\x5\xE6t\x2\x311"+
		"\x312\x5~@\x2\x312\x39\x3\x2\x2\x2\x313\x314\a\x8C\x2\x2\x314\x315\aw"+
		"\x2\x2\x315\x316\x5P)\x2\x316\x317\a\x11\x2\x2\x317\x318\x5|?\x2\x318"+
		"\x320\x5\xEAv\x2\x319\x31A\x5z>\x2\x31A\x31B\a}\x2\x2\x31B\x31C\a\x11"+
		"\x2\x2\x31C\x31D\x5|?\x2\x31D\x31E\x5\xE6t\x2\x31E\x31F\x5~@\x2\x31F\x321"+
		"\x3\x2\x2\x2\x320\x319\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\x3"+
		"\x2\x2\x2\x322\x323\x5~@\x2\x323;\x3\x2\x2\x2\x324\x325\a\x94\x2\x2\x325"+
		"\x326\x5\xF0y\x2\x326\x327\a\x11\x2\x2\x327\x328\x5|?\x2\x328\x329\x5"+
		"\xE6t\x2\x329\x32A\x5~@\x2\x32A\x334\x3\x2\x2\x2\x32B\x32C\a\x94\x2\x2"+
		"\x32C\x32D\ai\x2\x2\x32D\x32E\x5\xEEx\x2\x32E\x32F\a\x11\x2\x2\x32F\x330"+
		"\x5|?\x2\x330\x331\x5\xE6t\x2\x331\x332\x5~@\x2\x332\x334\x3\x2\x2\x2"+
		"\x333\x324\x3\x2\x2\x2\x333\x32B\x3\x2\x2\x2\x334=\x3\x2\x2\x2\x335\x336"+
		"\a\x65\x2\x2\x336\x337\a[\x2\x2\x337\x33A\x5\xB0Y\x2\x338\x339\a\x13\x2"+
		"\x2\x339\x33B\x5\xB0Y\x2\x33A\x338\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B"+
		"\x33C\x3\x2\x2\x2\x33C\x33D\ai\x2\x2\x33D\x33E\x5P)\x2\x33E\x33F\a\x11"+
		"\x2\x2\x33F\x340\x5|?\x2\x340\x341\x5\xE6t\x2\x341\x342\x5~@\x2\x342?"+
		"\x3\x2\x2\x2\x343\x344\aY\x2\x2\x344\x345\a\x11\x2\x2\x345\x346\x5|?\x2"+
		"\x346\x347\x5\xE6t\x2\x347\x348\x5~@\x2\x348\x349\x5z>\x2\x349\x34A\a"+
		"\x96\x2\x2\x34A\x34B\x5P)\x2\x34B\x41\x3\x2\x2\x2\x34C\x34D\a\x96\x2\x2"+
		"\x34D\x34E\x5P)\x2\x34E\x34F\a\x11\x2\x2\x34F\x350\x5|?\x2\x350\x351\x5"+
		"\xE6t\x2\x351\x352\x5~@\x2\x352\x43\x3\x2\x2\x2\x353\x354\ah\x2\x2\x354"+
		"\x355\x5P)\x2\x355\x356\a\x11\x2\x2\x356\x357\x5|?\x2\x357\x358\x5\xE6"+
		"t\x2\x358\x35C\x5~@\x2\x359\x35A\x5z>\x2\x35A\x35B\x5\x46$\x2\x35B\x35D"+
		"\x3\x2\x2\x2\x35C\x359\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x365\x3"+
		"\x2\x2\x2\x35E\x35F\x5z>\x2\x35F\x360\a\\\x2\x2\x360\x361\a\x11\x2\x2"+
		"\x361\x362\x5|?\x2\x362\x363\x5\xE6t\x2\x363\x364\x5~@\x2\x364\x366\x3"+
		"\x2\x2\x2\x365\x35E\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x45\x3\x2\x2"+
		"\x2\x367\x368\b$\x1\x2\x368\x369\a\\\x2\x2\x369\x36A\ah\x2\x2\x36A\x36B"+
		"\x5P)\x2\x36B\x36C\a\x11\x2\x2\x36C\x36D\x5|?\x2\x36D\x36E\x5\xE6t\x2"+
		"\x36E\x36F\x5~@\x2\x36F\x37C\x3\x2\x2\x2\x370\x371\f\x3\x2\x2\x371\x372"+
		"\x5z>\x2\x372\x373\a\\\x2\x2\x373\x374\ah\x2\x2\x374\x375\x5P)\x2\x375"+
		"\x376\a\x11\x2\x2\x376\x377\x5|?\x2\x377\x378\x5\xE6t\x2\x378\x379\x5"+
		"~@\x2\x379\x37B\x3\x2\x2\x2\x37A\x370\x3\x2\x2\x2\x37B\x37E\x3\x2\x2\x2"+
		"\x37C\x37A\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37DG\x3\x2\x2\x2\x37E\x37C"+
		"\x3\x2\x2\x2\x37F\x380\a\x7F\x2\x2\x380\x381\x5P)\x2\x381I\x3\x2\x2\x2"+
		"\x382\x383\a\x8C\x2\x2\x383\x384\aw\x2\x2\x384\x385\x5\xB0Y\x2\x385\x386"+
		"\aZ\x2\x2\x386\x387\a\x11\x2\x2\x387\x388\x5|?\x2\x388\x389\x5\xE6t\x2"+
		"\x389\x38A\x5~@\x2\x38A\x38C\x5x=\x2\x38B\x38D\x5\xECw\x2\x38C\x38B\x3"+
		"\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x399\x3\x2\x2\x2\x38E\x392\a}\x2"+
		"\x2\x38F\x390\a\x94\x2\x2\x390\x392\aG\x2\x2\x391\x38E\x3\x2\x2\x2\x391"+
		"\x38F\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x394\a\x11\x2\x2\x394\x395"+
		"\x5|?\x2\x395\x396\x5\xE6t\x2\x396\x397\x5~@\x2\x397\x398\x5x=\x2\x398"+
		"\x39A\x3\x2\x2\x2\x399\x391\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x3A2"+
		"\x3\x2\x2\x2\x39B\x39C\a\x45\x2\x2\x39C\x39D\a\x11\x2\x2\x39D\x39E\x5"+
		"|?\x2\x39E\x39F\x5\xE6t\x2\x39F\x3A0\x5~@\x2\x3A0\x3A1\x5x=\x2\x3A1\x3A3"+
		"\x3\x2\x2\x2\x3A2\x39B\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A4\x3"+
		"\x2\x2\x2\x3A4\x3A5\x5x=\x2\x3A5K\x3\x2\x2\x2\x3A6\x3A7\a\x94\x2\x2\x3A7"+
		"\x3A8\x5\xB4[\x2\x3A8\x3A9\a\x11\x2\x2\x3A9\x3AA\x5|?\x2\x3AA\x3AB\x5"+
		"\xE6t\x2\x3AB\x3AC\x5~@\x2\x3AC\x3AD\x5x=\x2\x3AD\x3BA\x3\x2\x2\x2\x3AE"+
		"\x3AF\a\x94\x2\x2\x3AF\x3B0\ai\x2\x2\x3B0\x3B1\a\x18\x2\x2\x3B1\x3B2\x5"+
		"\x90I\x2\x3B2\x3B3\a\x19\x2\x2\x3B3\x3B4\a\x11\x2\x2\x3B4\x3B5\x5|?\x2"+
		"\x3B5\x3B6\x5\xE6t\x2\x3B6\x3B7\x5~@\x2\x3B7\x3B8\x5x=\x2\x3B8\x3BA\x3"+
		"\x2\x2\x2\x3B9\x3A6\x3\x2\x2\x2\x3B9\x3AE\x3\x2\x2\x2\x3BAM\x3\x2\x2\x2"+
		"\x3BB\x3BD\a\x83\x2\x2\x3BC\x3BE\x5P)\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE"+
		"\x3\x2\x2\x2\x3BEO\x3\x2\x2\x2\x3BF\x3C0\b)\x1\x2\x3C0\x3C1\a#\x2\x2\x3C1"+
		"\x3DA\x5P))\x3C2\x3C3\at\x2\x2\x3C3\x3DA\x5P)(\x3C4\x3C5\a>\x2\x2\x3C5"+
		"\x3C6\a\x11\x2\x2\x3C6\x3DA\x5P)\r\x3C7\x3DA\x5Z.\x2\x3C8\x3DA\x5R*\x2"+
		"\x3C9\x3CA\x5R*\x2\x3CA\x3CB\x5l\x37\x2\x3CB\x3DA\x3\x2\x2\x2\x3CC\x3CD"+
		"\a`\x2\x2\x3CD\x3CE\a\x11\x2\x2\x3CE\x3DA\x5\xB0Y\x2\x3CF\x3D0\a=\x2\x2"+
		"\x3D0\x3D1\a\x11\x2\x2\x3D1\x3DA\x5\xACW\x2\x3D2\x3DA\x5^\x30\x2\x3D3"+
		"\x3DA\x5`\x31\x2\x3D4\x3DA\x5h\x35\x2\x3D5\x3DA\x5\x62\x32\x2\x3D6\x3DA"+
		"\x5j\x36\x2\x3D7\x3DA\x5\x66\x34\x2\x3D8\x3DA\x5V,\x2\x3D9\x3BF\x3\x2"+
		"\x2\x2\x3D9\x3C2\x3\x2\x2\x2\x3D9\x3C4\x3\x2\x2\x2\x3D9\x3C7\x3\x2\x2"+
		"\x2\x3D9\x3C8\x3\x2\x2\x2\x3D9\x3C9\x3\x2\x2\x2\x3D9\x3CC\x3\x2\x2\x2"+
		"\x3D9\x3CF\x3\x2\x2\x2\x3D9\x3D2\x3\x2\x2\x2\x3D9\x3D3\x3\x2\x2\x2\x3D9"+
		"\x3D4\x3\x2\x2\x2\x3D9\x3D5\x3\x2\x2\x2\x3D9\x3D6\x3\x2\x2\x2\x3D9\x3D7"+
		"\x3\x2\x2\x2\x3D9\x3D8\x3\x2\x2\x2\x3DA\x442\x3\x2\x2\x2\x3DB\x3DC\f\'"+
		"\x2\x2\x3DC\x3DD\x5\x120\x91\x2\x3DD\x3DE\x5P)(\x3DE\x441\x3\x2\x2\x2"+
		"\x3DF\x3E0\f&\x2\x2\x3E0\x3E1\x5\x122\x92\x2\x3E1\x3E2\x5P)\'\x3E2\x441"+
		"\x3\x2\x2\x2\x3E3\x3E4\f%\x2\x2\x3E4\x3E5\x5\x126\x94\x2\x3E5\x3E6\x5"+
		"P)&\x3E6\x441\x3\x2\x2\x2\x3E7\x3E8\f$\x2\x2\x3E8\x3E9\x5\x124\x93\x2"+
		"\x3E9\x3EA\x5P)%\x3EA\x441\x3\x2\x2\x2\x3EB\x3EC\f#\x2\x2\x3EC\x3ED\t"+
		"\x2\x2\x2\x3ED\x441\x5P)$\x3EE\x3EF\f\"\x2\x2\x3EF\x3F0\a*\x2\x2\x3F0"+
		"\x441\x5P)#\x3F1\x3F2\f!\x2\x2\x3F2\x3F3\a+\x2\x2\x3F3\x441\x5P)\"\x3F4"+
		"\x3F5\f \x2\x2\x3F5\x3F6\a(\x2\x2\x3F6\x441\x5P)!\x3F7\x3F8\f\x1F\x2\x2"+
		"\x3F8\x3F9\a)\x2\x2\x3F9\x441\x5P) \x3FA\x3FB\f\x1C\x2\x2\x3FB\x3FC\a"+
		"-\x2\x2\x3FC\x441\x5P)\x1D\x3FD\x3FE\f\x1B\x2\x2\x3FE\x3FF\a,\x2\x2\x3FF"+
		"\x441\x5P)\x1C\x400\x401\f\x1A\x2\x2\x401\x402\a\x31\x2\x2\x402\x441\x5"+
		"P)\x1B\x403\x404\f\x19\x2\x2\x404\x405\a{\x2\x2\x405\x441\x5P)\x1A\x406"+
		"\x407\f\x18\x2\x2\x407\x408\a\x46\x2\x2\x408\x441\x5P)\x19\x409\x40A\f"+
		"\x17\x2\x2\x40A\x40B\ah\x2\x2\x40B\x40C\x5P)\x2\x40C\x40D\a\\\x2\x2\x40D"+
		"\x40E\x5P)\x18\x40E\x441\x3\x2\x2\x2\x40F\x410\f\x15\x2\x2\x410\x411\a"+
		"i\x2\x2\x411\x441\x5P)\x16\x412\x413\f\x14\x2\x2\x413\x414\aT\x2\x2\x414"+
		"\x441\x5P)\x15\x415\x416\f\x13\x2\x2\x416\x417\aT\x2\x2\x417\x418\a\x44"+
		"\x2\x2\x418\x441\x5P)\x14\x419\x41A\f\x12\x2\x2\x41A\x41B\aT\x2\x2\x41B"+
		"\x41C\aG\x2\x2\x41C\x441\x5P)\x13\x41D\x41E\f\x11\x2\x2\x41E\x41F\at\x2"+
		"\x2\x41F\x420\ai\x2\x2\x420\x441\x5P)\x12\x421\x422\f\x10\x2\x2\x422\x423"+
		"\at\x2\x2\x423\x424\aT\x2\x2\x424\x441\x5P)\x11\x425\x426\f\xF\x2\x2\x426"+
		"\x427\at\x2\x2\x427\x428\aT\x2\x2\x428\x429\a\x44\x2\x2\x429\x441\x5P"+
		")\x10\x42A\x42B\f\xE\x2\x2\x42B\x42C\at\x2\x2\x42C\x42D\aT\x2\x2\x42D"+
		"\x42E\aG\x2\x2\x42E\x441\x5P)\xF\x42F\x430\f\x3\x2\x2\x430\x431\a\x65"+
		"\x2\x2\x431\x432\a[\x2\x2\x432\x433\x5\xB0Y\x2\x433\x434\ai\x2\x2\x434"+
		"\x435\x5P)\x4\x435\x441\x3\x2\x2\x2\x436\x437\f\x1E\x2\x2\x437\x438\a"+
		"l\x2\x2\x438\x439\at\x2\x2\x439\x441\x5\x10E\x88\x2\x43A\x43B\f\x1D\x2"+
		"\x2\x43B\x43C\al\x2\x2\x43C\x441\x5\x10E\x88\x2\x43D\x43E\f\x16\x2\x2"+
		"\x43E\x43F\aH\x2\x2\x43F\x441\x5\xC0\x61\x2\x440\x3DB\x3\x2\x2\x2\x440"+
		"\x3DF\x3\x2\x2\x2\x440\x3E3\x3\x2\x2\x2\x440\x3E7\x3\x2\x2\x2\x440\x3EB"+
		"\x3\x2\x2\x2\x440\x3EE\x3\x2\x2\x2\x440\x3F1\x3\x2\x2\x2\x440\x3F4\x3"+
		"\x2\x2\x2\x440\x3F7\x3\x2\x2\x2\x440\x3FA\x3\x2\x2\x2\x440\x3FD\x3\x2"+
		"\x2\x2\x440\x400\x3\x2\x2\x2\x440\x403\x3\x2\x2\x2\x440\x406\x3\x2\x2"+
		"\x2\x440\x409\x3\x2\x2\x2\x440\x40F\x3\x2\x2\x2\x440\x412\x3\x2\x2\x2"+
		"\x440\x415\x3\x2\x2\x2\x440\x419\x3\x2\x2\x2\x440\x41D\x3\x2\x2\x2\x440"+
		"\x421\x3\x2\x2\x2\x440\x425\x3\x2\x2\x2\x440\x42A\x3\x2\x2\x2\x440\x42F"+
		"\x3\x2\x2\x2\x440\x436\x3\x2\x2\x2\x440\x43A\x3\x2\x2\x2\x440\x43D\x3"+
		"\x2\x2\x2\x441\x444\x3\x2\x2\x2\x442\x440\x3\x2\x2\x2\x442\x443\x3\x2"+
		"\x2\x2\x443Q\x3\x2\x2\x2\x444\x442\x3\x2\x2\x2\x445\x446\b*\x1\x2\x446"+
		"\x447\x5\xAEX\x2\x447\x44C\x3\x2\x2\x2\x448\x449\f\x3\x2\x2\x449\x44B"+
		"\x5T+\x2\x44A\x448\x3\x2\x2\x2\x44B\x44E\x3\x2\x2\x2\x44C\x44A\x3\x2\x2"+
		"\x2\x44C\x44D\x3\x2\x2\x2\x44DS\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2\x44F"+
		"\x450\x6+ \x3\x450\x451\a\x15\x2\x2\x451\x452\x5\xAEX\x2\x452U\x3\x2\x2"+
		"\x2\x453\x454\ak\x2\x2\x454\x455\a\x11\x2\x2\x455\x456\x5\xB0Y\x2\x456"+
		"\x457\x5X-\x2\x457W\x3\x2\x2\x2\x458\x459\x6-!\x3\x459Y\x3\x2\x2\x2\x45A"+
		"\x45B\b.\x1\x2\x45B\x45C\x5\xF4{\x2\x45C\x461\x3\x2\x2\x2\x45D\x45E\f"+
		"\x3\x2\x2\x45E\x460\x5\\/\x2\x45F\x45D\x3\x2\x2\x2\x460\x463\x3\x2\x2"+
		"\x2\x461\x45F\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462[\x3\x2\x2\x2\x463"+
		"\x461\x3\x2\x2\x2\x464\x465\x6/#\x3\x465\x466\a\x15\x2\x2\x466\x472\x5"+
		"\xB0Y\x2\x467\x468\x6/$\x3\x468\x469\a\x18\x2\x2\x469\x46A\x5\x108\x85"+
		"\x2\x46A\x46B\a\x19\x2\x2\x46B\x472\x3\x2\x2\x2\x46C\x46D\x6/%\x3\x46D"+
		"\x46E\a\x18\x2\x2\x46E\x46F\x5P)\x2\x46F\x470\a\x19\x2\x2\x470\x472\x3"+
		"\x2\x2\x2\x471\x464\x3\x2\x2\x2\x471\x467\x3\x2\x2\x2\x471\x46C\x3\x2"+
		"\x2\x2\x472]\x3\x2\x2\x2\x473\x474\a?\x2\x2\x474_\x3\x2\x2\x2\x475\x476"+
		"\x5\xA4S\x2\x476\x477\a\x66\x2\x2\x477\x480\x5P)\x2\x478\x47A\a\x13\x2"+
		"\x2\x479\x478\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2"+
		"\x47B\x47E\x5n\x38\x2\x47C\x47D\a\x46\x2\x2\x47D\x47F\x5p\x39\x2\x47E"+
		"\x47C\x3\x2\x2\x2\x47E\x47F\x3\x2\x2\x2\x47F\x481\x3\x2\x2\x2\x480\x479"+
		"\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x48B\x3\x2\x2\x2\x482\x488\x5"+
		"\xA4S\x2\x483\x486\x5n\x38\x2\x484\x485\a\x46\x2\x2\x485\x487\x5p\x39"+
		"\x2\x486\x484\x3\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487\x489\x3\x2\x2\x2"+
		"\x488\x483\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48B\x3\x2\x2\x2\x48A"+
		"\x475\x3\x2\x2\x2\x48A\x482\x3\x2\x2\x2\x48B\x61\x3\x2\x2\x2\x48C\x48D"+
		"\a\x80\x2\x2\x48D\x48E\a\x66\x2\x2\x48E\x48F\x5P)\x2\x48F\x63\x3\x2\x2"+
		"\x2\x490\x491\a\x97\x2\x2\x491\x492\x5P)\x2\x492\x493\a\x90\x2\x2\x493"+
		"\x494\x5P)\x2\x494\x65\x3\x2\x2\x2\x495\x496\x5R*\x2\x496\x497\a#\x2\x2"+
		"\x497\x498\x5P)\x2\x498g\x3\x2\x2\x2\x499\x49A\a\x63\x2\x2\x49A\x49B\a"+
		"G\x2\x2\x49B\x49C\x5\xB0Y\x2\x49C\x49D\a\x66\x2\x2\x49D\x49E\x5P)\x2\x49E"+
		"\x49F\a\x95\x2\x2\x49F\x4A0\x5P)\x2\x4A0\x4C0\x3\x2\x2\x2\x4A1\x4A2\a"+
		"\x63\x2\x2\x4A2\x4A4\ax\x2\x2\x4A3\x4A5\x5\xA4S\x2\x4A4\x4A3\x3\x2\x2"+
		"\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A7\a\x95\x2\x2"+
		"\x4A7\x4C0\x5P)\x2\x4A8\x4B4\a\x63\x2\x2\x4A9\x4AB\a\x44\x2\x2\x4AA\x4AC"+
		"\x5\xA4S\x2\x4AB\x4AA\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2\x2\x4AC\x4B5\x3\x2"+
		"\x2\x2\x4AD\x4AF\x5\xA4S\x2\x4AE\x4AD\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2"+
		"\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4B1\x5P)\x2\x4B1\x4B2\a\x90\x2\x2\x4B2\x4B3"+
		"\x5P)\x2\x4B3\x4B5\x3\x2\x2\x2\x4B4\x4A9\x3\x2\x2\x2\x4B4\x4AE\x3\x2\x2"+
		"\x2\x4B5\x4B8\x3\x2\x2\x2\x4B6\x4B7\a\x95\x2\x2\x4B7\x4B9\x5P)\x2\x4B8"+
		"\x4B6\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9\x4BD\x3\x2\x2\x2\x4BA\x4BB"+
		"\a|\x2\x2\x4BB\x4BC\aN\x2\x2\x4BC\x4BE\x5\x110\x89\x2\x4BD\x4BA\x3\x2"+
		"\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4C0\x3\x2\x2\x2\x4BF\x499\x3\x2\x2"+
		"\x2\x4BF\x4A1\x3\x2\x2\x2\x4BF\x4A8\x3\x2\x2\x2\x4C0i\x3\x2\x2\x2\x4C1"+
		"\x4C2\a\x89\x2\x2\x4C2\x4C8\x5Z.\x2\x4C3\x4C4\a\x93\x2\x2\x4C4\x4C5\x5"+
		"Z.\x2\x4C5\x4C6\aH\x2\x2\x4C6\x4C7\x5\x118\x8D\x2\x4C7\x4C9\x3\x2\x2\x2"+
		"\x4C8\x4C3\x3\x2\x2\x2\x4C8\x4C9\x3\x2\x2\x2\x4C9k\x3\x2\x2\x2\x4CA\x4CB"+
		"\x6\x37&\x3\x4CB\x4D1\x5P)\x2\x4CC\x4CF\x5n\x38\x2\x4CD\x4CE\a\x46\x2"+
		"\x2\x4CE\x4D0\x5p\x39\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2\x2\x4D0"+
		"\x4D2\x3\x2\x2\x2\x4D1\x4CC\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D9"+
		"\x3\x2\x2\x2\x4D3\x4D6\x5n\x38\x2\x4D4\x4D5\a\x46\x2\x2\x4D5\x4D7\x5p"+
		"\x39\x2\x4D6\x4D4\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7\x4D9\x3\x2\x2"+
		"\x2\x4D8\x4CA\x3\x2\x2\x2\x4D8\x4D3\x3\x2\x2\x2\x4D9m\x3\x2\x2\x2\x4DA"+
		"\x4DB\b\x38\x1\x2\x4DB\x4DC\a\x93\x2\x2\x4DC\x4DD\x5p\x39\x2\x4DD\x4E3"+
		"\x3\x2\x2\x2\x4DE\x4DF\f\x3\x2\x2\x4DF\x4E0\a\x13\x2\x2\x4E0\x4E2\x5p"+
		"\x39\x2\x4E1\x4DE\x3\x2\x2\x2\x4E2\x4E5\x3\x2\x2\x2\x4E3\x4E1\x3\x2\x2"+
		"\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4o\x3\x2\x2\x2\x4E5\x4E3\x3\x2\x2\x2\x4E6"+
		"\x4E7\x5P)\x2\x4E7\x4E8\aH\x2\x2\x4E8\x4E9\x5\xB0Y\x2\x4E9q\x3\x2\x2\x2"+
		"\x4EA\x4EB\x5\x10C\x87\x2\x4EB\x4EC\x5\x11E\x90\x2\x4EC\x4ED\x5P)\x2\x4ED"+
		"s\x3\x2\x2\x2\x4EE\x4EF\x6;(\x3\x4EF\x4F0\a\x15\x2\x2\x4F0\x4F7\x5\xB0"+
		"Y\x2\x4F1\x4F2\x6;)\x3\x4F2\x4F3\a\x18\x2\x2\x4F3\x4F4\x5P)\x2\x4F4\x4F5"+
		"\a\x19\x2\x2\x4F5\x4F7\x3\x2\x2\x2\x4F6\x4EE\x3\x2\x2\x2\x4F6\x4F1\x3"+
		"\x2\x2\x2\x4F7u\x3\x2\x2\x2\x4F8\x4F9\x5\xD8m\x2\x4F9\x4FA\x5\x11E\x90"+
		"\x2\x4FA\x4FB\x5P)\x2\x4FBw\x3\x2\x2\x2\x4FC\x4FE\a\a\x2\x2\x4FD\x4FC"+
		"\x3\x2\x2\x2\x4FE\x501\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x4FF\x500\x3"+
		"\x2\x2\x2\x500y\x3\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x502\x504\a\a\x2\x2"+
		"\x503\x502\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505\x503\x3\x2\x2\x2\x505"+
		"\x506\x3\x2\x2\x2\x506{\x3\x2\x2\x2\x507\x509\a\a\x2\x2\x508\x507\x3\x2"+
		"\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x508\x3\x2\x2\x2\x50A\x50B\x3\x2\x2"+
		"\x2\x50B\x50C\x3\x2\x2\x2\x50C\x50D\a\x3\x2\x2\x50D}\x3\x2\x2\x2\x50E"+
		"\x510\a\a\x2\x2\x50F\x50E\x3\x2\x2\x2\x510\x513\x3\x2\x2\x2\x511\x50F"+
		"\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x514\x3\x2\x2\x2\x513\x511\x3"+
		"\x2\x2\x2\x514\x515\a\x4\x2\x2\x515\x7F\x3\x2\x2\x2\x516\x517\au\x2\x2"+
		"\x517\x81\x3\x2\x2\x2\x518\x51A\x5\x84\x43\x2\x519\x518\x3\x2\x2\x2\x519"+
		"\x51A\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51C\x5x=\x2\x51C\x51D\a"+
		"\x2\x2\x3\x51D\x83\x3\x2\x2\x2\x51E\x51F\b\x43\x1\x2\x51F\x520\x5\x86"+
		"\x44\x2\x520\x527\x3\x2\x2\x2\x521\x522\f\x3\x2\x2\x522\x523\x5z>\x2\x523"+
		"\x524\x5\x86\x44\x2\x524\x526\x3\x2\x2\x2\x525\x521\x3\x2\x2\x2\x526\x529"+
		"\x3\x2\x2\x2\x527\x525\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x85\x3\x2"+
		"\x2\x2\x529\x527\x3\x2\x2\x2\x52A\x52B\x5\xDCo\x2\x52B\x52C\x5z>\x2\x52C"+
		"\x52E\x3\x2\x2\x2\x52D\x52A\x3\x2\x2\x2\x52E\x531\x3\x2\x2\x2\x52F\x52D"+
		"\x3\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x537\x3\x2\x2\x2\x531\x52F\x3"+
		"\x2\x2\x2\x532\x538\x5\n\x6\x2\x533\x538\x5\xA8U\x2\x534\x538\x5\x88\x45"+
		"\x2\x535\x538\x5\x8A\x46\x2\x536\x538\x5\xDAn\x2\x537\x532\x3\x2\x2\x2"+
		"\x537\x533\x3\x2\x2\x2\x537\x534\x3\x2\x2\x2\x537\x535\x3\x2\x2\x2\x537"+
		"\x536\x3\x2\x2\x2\x538\x87\x3\x2\x2\x2\x539\x53A\x5\x1A\xE\x2\x53A\x89"+
		"\x3\x2\x2\x2\x53B\x53E\x5\x2\x2\x2\x53C\x53E\x5\x4\x3\x2\x53D\x53B\x3"+
		"\x2\x2\x2\x53D\x53C\x3\x2\x2\x2\x53E\x8B\x3\x2\x2\x2\x53F\x540\bG\x1\x2"+
		"\x540\x541\x5\x6\x4\x2\x541\x548\x3\x2\x2\x2\x542\x543\f\x3\x2\x2\x543"+
		"\x544\x5z>\x2\x544\x545\x5\x6\x4\x2\x545\x547\x3\x2\x2\x2\x546\x542\x3"+
		"\x2\x2\x2\x547\x54A\x3\x2\x2\x2\x548\x546\x3\x2\x2\x2\x548\x549\x3\x2"+
		"\x2\x2\x549\x8D\x3\x2\x2\x2\x54A\x548\x3\x2\x2\x2\x54B\x54C\bH\x1\x2\x54C"+
		"\x54D\x5\b\x5\x2\x54D\x554\x3\x2\x2\x2\x54E\x54F\f\x3\x2\x2\x54F\x550"+
		"\x5z>\x2\x550\x551\x5\b\x5\x2\x551\x553\x3\x2\x2\x2\x552\x54E\x3\x2\x2"+
		"\x2\x553\x556\x3\x2\x2\x2\x554\x552\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2"+
		"\x555\x8F\x3\x2\x2\x2\x556\x554\x3\x2\x2\x2\x557\x558\bI\x1\x2\x558\x559"+
		"\x5\xB4[\x2\x559\x55F\x3\x2\x2\x2\x55A\x55B\f\x3\x2\x2\x55B\x55C\a\x13"+
		"\x2\x2\x55C\x55E\x5\xB4[\x2\x55D\x55A\x3\x2\x2\x2\x55E\x561\x3\x2\x2\x2"+
		"\x55F\x55D\x3\x2\x2\x2\x55F\x560\x3\x2\x2\x2\x560\x91\x3\x2\x2\x2\x561"+
		"\x55F\x3\x2\x2\x2\x562\x563\ai\x2\x2\x563\x56D\x5\x94K\x2\x564\x565\a"+
		"i\x2\x2\x565\x56D\x5\x96L\x2\x566\x567\ai\x2\x2\x567\x56D\x5\x9AN\x2\x568"+
		"\x569\am\x2\x2\x569\x56D\a\xA1\x2\x2\x56A\x56B\am\x2\x2\x56B\x56D\x5P"+
		")\x2\x56C\x562\x3\x2\x2\x2\x56C\x564\x3\x2\x2\x2\x56C\x566\x3\x2\x2\x2"+
		"\x56C\x568\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56D\x93\x3\x2\x2\x2\x56E"+
		"\x570\a\x18\x2\x2\x56F\x571\x5\x98M\x2\x570\x56F\x3\x2\x2\x2\x570\x571"+
		"\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x573\a\x19\x2\x2\x573\x95\x3\x2"+
		"\x2\x2\x574\x576\a*\x2\x2\x575\x577\x5\x98M\x2\x576\x575\x3\x2\x2\x2\x576"+
		"\x577\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x579\a(\x2\x2\x579\x97\x3"+
		"\x2\x2\x2\x57A\x57B\bM\x1\x2\x57B\x57C\x5P)\x2\x57C\x582\x3\x2\x2\x2\x57D"+
		"\x57E\f\x3\x2\x2\x57E\x57F\a\x13\x2\x2\x57F\x581\x5P)\x2\x580\x57D\x3"+
		"\x2\x2\x2\x581\x584\x3\x2\x2\x2\x582\x580\x3\x2\x2\x2\x582\x583\x3\x2"+
		"\x2\x2\x583\x99\x3\x2\x2\x2\x584\x582\x3\x2\x2\x2\x585\x586\a\x18\x2\x2"+
		"\x586\x587\x5P)\x2\x587\x588\a\x14\x2\x2\x588\x589\x5P)\x2\x589\x58A\a"+
		"\x19\x2\x2\x58A\x9B\x3\x2\x2\x2\x58B\x58C\bO\x1\x2\x58C\x58D\x5\x9EP\x2"+
		"\x58D\x598\x3\x2\x2\x2\x58E\x58F\f\x5\x2\x2\x58F\x597\a,\x2\x2\x590\x591"+
		"\f\x4\x2\x2\x591\x592\a\x18\x2\x2\x592\x597\a\x19\x2\x2\x593\x594\f\x3"+
		"\x2\x2\x594\x595\a\x1A\x2\x2\x595\x597\a\x1B\x2\x2\x596\x58E\x3\x2\x2"+
		"\x2\x596\x590\x3\x2\x2\x2\x596\x593\x3\x2\x2\x2\x597\x59A\x3\x2\x2\x2"+
		"\x598\x596\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x9D\x3\x2\x2\x2\x59A"+
		"\x598\x3\x2\x2\x2\x59B\x59E\x5\xA0Q\x2\x59C\x59E\x5\xA2R\x2\x59D\x59B"+
		"\x3\x2\x2\x2\x59D\x59C\x3\x2\x2\x2\x59E\x9F\x3\x2\x2\x2\x59F\x5AE\a\x34"+
		"\x2\x2\x5A0\x5AE\a\x35\x2\x2\x5A1\x5AE\a\x36\x2\x2\x5A2\x5AE\a\x41\x2"+
		"\x2\x5A3\x5AE\a\x37\x2\x2\x5A4\x5AE\a\x38\x2\x2\x5A5\x5AE\a?\x2\x2\x5A6"+
		"\x5AE\a\x39\x2\x2\x5A7\x5AE\a;\x2\x2\x5A8\x5AE\a:\x2\x2\x5A9\x5AE\a<\x2"+
		"\x2\x5AA\x5AE\a>\x2\x2\x5AB\x5AE\a@\x2\x2\x5AC\x5AE\a\x42\x2\x2\x5AD\x59F"+
		"\x3\x2\x2\x2\x5AD\x5A0\x3\x2\x2\x2\x5AD\x5A1\x3\x2\x2\x2\x5AD\x5A2\x3"+
		"\x2\x2\x2\x5AD\x5A3\x3\x2\x2\x2\x5AD\x5A4\x3\x2\x2\x2\x5AD\x5A5\x3\x2"+
		"\x2\x2\x5AD\x5A6\x3\x2\x2\x2\x5AD\x5A7\x3\x2\x2\x2\x5AD\x5A8\x3\x2\x2"+
		"\x2\x5AD\x5A9\x3\x2\x2\x2\x5AD\x5AA\x3\x2\x2\x2\x5AD\x5AB\x3\x2\x2\x2"+
		"\x5AD\x5AC\x3\x2\x2\x2\x5AE\xA1\x3\x2\x2\x2\x5AF\x5B0\a\x9D\x2\x2\x5B0"+
		"\xA3\x3\x2\x2\x2\x5B1\x5B3\aq\x2\x2\x5B2\x5B1\x3\x2\x2\x2\x5B2\x5B3\x3"+
		"\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B5\x5\xA2R\x2\x5B5\xA5\x3\x2\x2"+
		"\x2\x5B6\x5B7\a>\x2\x2\x5B7\xA7\x3\x2\x2\x2\x5B8\x5BC\x5\f\a\x2\x5B9\x5BC"+
		"\x5\x18\r\x2\x5BA\x5BC\x5\xE\b\x2\x5BB\x5B8\x3\x2\x2\x2\x5BB\x5B9\x3\x2"+
		"\x2\x2\x5BB\x5BA\x3\x2\x2\x2\x5BC\xA9\x3\x2\x2\x2\x5BD\x5BE\bV\x1\x2\x5BE"+
		"\x5BF\x5\xB2Z\x2\x5BF\x5C5\x3\x2\x2\x2\x5C0\x5C1\f\x3\x2\x2\x5C1\x5C2"+
		"\a\x13\x2\x2\x5C2\x5C4\x5\xB2Z\x2\x5C3\x5C0\x3\x2\x2\x2\x5C4\x5C7\x3\x2"+
		"\x2\x2\x5C5\x5C3\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\xAB\x3\x2\x2\x2"+
		"\x5C7\x5C5\x3\x2\x2\x2\x5C8\x5CB\x5\xB0Y\x2\x5C9\x5CB\x5\xB2Z\x2\x5CA"+
		"\x5C8\x3\x2\x2\x2\x5CA\x5C9\x3\x2\x2\x2\x5CB\xAD\x3\x2\x2\x2\x5CC\x5D0"+
		"\x5\xB0Y\x2\x5CD\x5D0\x5\xB2Z\x2\x5CE\x5D0\x5\xB4[\x2\x5CF\x5CC\x3\x2"+
		"\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5CF\x5CE\x3\x2\x2\x2\x5D0\xAF\x3\x2\x2\x2"+
		"\x5D1\x5D2\a\x9E\x2\x2\x5D2\xB1\x3\x2\x2\x2\x5D3\x5D4\a\x9D\x2\x2\x5D4"+
		"\xB3\x3\x2\x2\x2\x5D5\x5D6\a\x9C\x2\x2\x5D6\xB5\x3\x2\x2\x2\x5D7\x5D8"+
		"\b\\\x1\x2\x5D8\x5D9\x5\xB8]\x2\x5D9\x5DF\x3\x2\x2\x2\x5DA\x5DB\f\x3\x2"+
		"\x2\x5DB\x5DC\a\x13\x2\x2\x5DC\x5DE\x5\xB8]\x2\x5DD\x5DA\x3\x2\x2\x2\x5DE"+
		"\x5E1\x3\x2\x2\x2\x5DF\x5DD\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\xB7"+
		"\x3\x2\x2\x2\x5E1\x5DF\x3\x2\x2\x2\x5E2\x5E8\x5\xBE`\x2\x5E3\x5E5\aq\x2"+
		"\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2"+
		"\x5E6\x5E8\x5\xBA^\x2\x5E7\x5E2\x3\x2\x2\x2\x5E7\x5E4\x3\x2\x2\x2\x5E8"+
		"\xB9\x3\x2\x2\x2\x5E9\x5EC\x5\xBC_\x2\x5EA\x5EC\x5.\x18\x2\x5EB\x5E9\x3"+
		"\x2\x2\x2\x5EB\x5EA\x3\x2\x2\x2\x5EC\xBB\x3\x2\x2\x2\x5ED\x5F0\x5\xB0"+
		"Y\x2\x5EE\x5EF\a-\x2\x2\x5EF\x5F1\x5\xFA~\x2\x5F0\x5EE\x3\x2\x2\x2\x5F0"+
		"\x5F1\x3\x2\x2\x2\x5F1\xBD\x3\x2\x2\x2\x5F2\x5F3\x5\xA6T\x2\x5F3\x5F4"+
		"\x5\xB0Y\x2\x5F4\xBF\x3\x2\x2\x2\x5F5\x5F8\x5\x9CO\x2\x5F6\x5F8\x5\xC2"+
		"\x62\x2\x5F7\x5F5\x3\x2\x2\x2\x5F7\x5F6\x3\x2\x2\x2\x5F8\xC1\x3\x2\x2"+
		"\x2\x5F9\x5FA\b\x62\x1\x2\x5FA\x5FB\aG\x2\x2\x5FB\x604\x3\x2\x2\x2\x5FC"+
		"\x5FD\f\x4\x2\x2\x5FD\x5FE\a\x18\x2\x2\x5FE\x603\a\x19\x2\x2\x5FF\x600"+
		"\f\x3\x2\x2\x600\x601\a\x1A\x2\x2\x601\x603\a\x1B\x2\x2\x602\x5FC\x3\x2"+
		"\x2\x2\x602\x5FF\x3\x2\x2\x2\x603\x606\x3\x2\x2\x2\x604\x602\x3\x2\x2"+
		"\x2\x604\x605\x3\x2\x2\x2\x605\xC3\x3\x2\x2\x2\x606\x604\x3\x2\x2\x2\x607"+
		"\x608\b\x63\x1\x2\x608\x609\x5\xC6\x64\x2\x609\x610\x3\x2\x2\x2\x60A\x60B"+
		"\f\x3\x2\x2\x60B\x60C\x5z>\x2\x60C\x60D\x5\xC6\x64\x2\x60D\x60F\x3\x2"+
		"\x2\x2\x60E\x60A\x3\x2\x2\x2\x60F\x612\x3\x2\x2\x2\x610\x60E\x3\x2\x2"+
		"\x2\x610\x611\x3\x2\x2\x2\x611\xC5\x3\x2\x2\x2\x612\x610\x3\x2\x2\x2\x613"+
		"\x619\x5\x14\v\x2\x614\x619\x5\x16\f\x2\x615\x619\x5$\x13\x2\x616\x619"+
		"\x5\"\x12\x2\x617\x619\x5\x12\n\x2\x618\x613\x3\x2\x2\x2\x618\x614\x3"+
		"\x2\x2\x2\x618\x615\x3\x2\x2\x2\x618\x616\x3\x2\x2\x2\x618\x617\x3\x2"+
		"\x2\x2\x619\xC7\x3\x2\x2\x2\x61A\x61B\b\x65\x1\x2\x61B\x61C\x5\xCA\x66"+
		"\x2\x61C\x623\x3\x2\x2\x2\x61D\x61E\f\x3\x2\x2\x61E\x61F\x5z>\x2\x61F"+
		"\x620\x5\xCA\x66\x2\x620\x622\x3\x2\x2\x2\x621\x61D\x3\x2\x2\x2\x622\x625"+
		"\x3\x2\x2\x2\x623\x621\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\xC9\x3\x2"+
		"\x2\x2\x625\x623\x3\x2\x2\x2\x626\x629\x5\xC6\x64\x2\x627\x629\x5&\x14"+
		"\x2\x628\x626\x3\x2\x2\x2\x628\x627\x3\x2\x2\x2\x629\xCB\x3\x2\x2\x2\x62A"+
		"\x62B\a\v\x2\x2\x62B\x635\x5\x170\xB9\x2\x62C\x62D\a\f\x2\x2\x62D\x635"+
		"\x5\x18A\xC6\x2\x62E\x62F\a\r\x2\x2\x62F\x635\x5\xCEh\x2\x630\x631\a\xE"+
		"\x2\x2\x631\x635\x5\xCEh\x2\x632\x633\a\xF\x2\x2\x633\x635\x5\xD4k\x2"+
		"\x634\x62A\x3\x2\x2\x2\x634\x62C\x3\x2\x2\x2\x634\x62E\x3\x2\x2\x2\x634"+
		"\x630\x3\x2\x2\x2\x634\x632\x3\x2\x2\x2\x635\xCD\x3\x2\x2\x2\x636\x638"+
		"\x5\xAEX\x2\x637\x639\x5\xD0i\x2\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2"+
		"\x2\x2\x639\xCF\x3\x2\x2\x2\x63A\x63B\a\x66\x2\x2\x63B\x63C\x5\xD2j\x2"+
		"\x63C\x63D\a\x11\x2\x2\x63D\x642\x5\xAEX\x2\x63E\x63F\a\x15\x2\x2\x63F"+
		"\x641\x5\xAEX\x2\x640\x63E\x3\x2\x2\x2\x641\x644\x3\x2\x2\x2\x642\x640"+
		"\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\xD1\x3\x2\x2\x2\x644\x642\x3\x2"+
		"\x2\x2\x645\x646\a\x9E\x2\x2\x646\x647\x6j\x38\x3\x647\xD3\x3\x2\x2\x2"+
		"\x648\x64A\x5\xAEX\x2\x649\x64B\x5\xD6l\x2\x64A\x649\x3\x2\x2\x2\x64A"+
		"\x64B\x3\x2\x2\x2\x64B\xD5\x3\x2\x2\x2\x64C\x64D\a\x66\x2\x2\x64D\x64E"+
		"\x5\xD2j\x2\x64E\x650\a\x11\x2\x2\x64F\x651\a%\x2\x2\x650\x64F\x3\x2\x2"+
		"\x2\x650\x651\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x657\x5\x140\xA1"+
		"\x2\x653\x654\a%\x2\x2\x654\x656\x5\x140\xA1\x2\x655\x653\x3\x2\x2\x2"+
		"\x656\x659\x3\x2\x2\x2\x657\x655\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658"+
		"\x65C\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x65A\x65B\a\x15\x2\x2\x65B\x65D"+
		"\x5\x140\xA1\x2\x65C\x65A\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\xD7\x3"+
		"\x2\x2\x2\x65E\x65F\bm\x1\x2\x65F\x660\x5\xB0Y\x2\x660\x666\x3\x2\x2\x2"+
		"\x661\x662\f\x3\x2\x2\x662\x663\a\x13\x2\x2\x663\x665\x5\xB0Y\x2\x664"+
		"\x661\x3\x2\x2\x2\x665\x668\x3\x2\x2\x2\x666\x664\x3\x2\x2\x2\x666\x667"+
		"\x3\x2\x2\x2\x667\xD9\x3\x2\x2\x2\x668\x666\x3\x2\x2\x2\x669\x66E\x5\""+
		"\x12\x2\x66A\x66E\x5$\x13\x2\x66B\x66E\x5&\x14\x2\x66C\x66E\x5(\x15\x2"+
		"\x66D\x669\x3\x2\x2\x2\x66D\x66A\x3\x2\x2\x2\x66D\x66B\x3\x2\x2\x2\x66D"+
		"\x66C\x3\x2\x2\x2\x66E\xDB\x3\x2\x2\x2\x66F\x670\a\n\x2\x2\x670\xDD\x3"+
		"\x2\x2\x2\x671\x672\bp\x1\x2\x672\x673\x5\xE0q\x2\x673\x67A\x3\x2\x2\x2"+
		"\x674\x675\f\x3\x2\x2\x675\x676\x5z>\x2\x676\x677\x5\xE0q\x2\x677\x679"+
		"\x3\x2\x2\x2\x678\x674\x3\x2\x2\x2\x679\x67C\x3\x2\x2\x2\x67A\x678\x3"+
		"\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\xDF\x3\x2\x2\x2\x67C\x67A\x3\x2\x2"+
		"\x2\x67D\x67E\a\v\x2\x2\x67E\x688\x5\x15A\xAE\x2\x67F\x680\a\f\x2\x2\x680"+
		"\x688\x5\x176\xBC\x2\x681\x682\a\r\x2\x2\x682\x688\x5\xE2r\x2\x683\x684"+
		"\a\xE\x2\x2\x684\x688\x5\xE2r\x2\x685\x686\a\xF\x2\x2\x686\x688\x5\xE4"+
		"s\x2\x687\x67D\x3\x2\x2\x2\x687\x67F\x3\x2\x2\x2\x687\x681\x3\x2\x2\x2"+
		"\x687\x683\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x688\xE1\x3\x2\x2\x2\x689"+
		"\x68B\x5\x142\xA2\x2\x68A\x68C\a\x12\x2\x2\x68B\x68A\x3\x2\x2\x2\x68B"+
		"\x68C\x3\x2\x2\x2\x68C\x68E\x3\x2\x2\x2\x68D\x68F\x5\xD0i\x2\x68E\x68D"+
		"\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\xE3\x3\x2\x2\x2\x690\x692\x5\x128"+
		"\x95\x2\x691\x693\a\x12\x2\x2\x692\x691\x3\x2\x2\x2\x692\x693\x3\x2\x2"+
		"\x2\x693\x695\x3\x2\x2\x2\x694\x696\x5\xD6l\x2\x695\x694\x3\x2\x2\x2\x695"+
		"\x696\x3\x2\x2\x2\x696\xE5\x3\x2\x2\x2\x697\x698\bt\x1\x2\x698\x699\x5"+
		"\x30\x19\x2\x699\x6A0\x3\x2\x2\x2\x69A\x69B\f\x3\x2\x2\x69B\x69C\x5z>"+
		"\x2\x69C\x69D\x5\x30\x19\x2\x69D\x69F\x3\x2\x2\x2\x69E\x69A\x3\x2\x2\x2"+
		"\x69F\x6A2\x3\x2\x2\x2\x6A0\x69E\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1"+
		"\xE7\x3\x2\x2\x2\x6A2\x6A0\x3\x2\x2\x2\x6A3\x6A4\bu\x1\x2\x6A4\x6A5\x5"+
		"*\x16\x2\x6A5\x6AC\x3\x2\x2\x2\x6A6\x6A7\f\x3\x2\x2\x6A7\x6A8\x5z>\x2"+
		"\x6A8\x6A9\x5*\x16\x2\x6A9\x6AB\x3\x2\x2\x2\x6AA\x6A6\x3\x2\x2\x2\x6AB"+
		"\x6AE\x3\x2\x2\x2\x6AC\x6AA\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\xE9"+
		"\x3\x2\x2\x2\x6AE\x6AC\x3\x2\x2\x2\x6AF\x6B0\bv\x1\x2\x6B0\x6B1\x5<\x1F"+
		"\x2\x6B1\x6B8\x3\x2\x2\x2\x6B2\x6B3\f\x3\x2\x2\x6B3\x6B4\x5z>\x2\x6B4"+
		"\x6B5\x5<\x1F\x2\x6B5\x6B7\x3\x2\x2\x2\x6B6\x6B2\x3\x2\x2\x2\x6B7\x6BA"+
		"\x3\x2\x2\x2\x6B8\x6B6\x3\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\xEB\x3\x2"+
		"\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BB\x6BC\bw\x1\x2\x6BC\x6BD\x5L\'\x2\x6BD"+
		"\x6C4\x3\x2\x2\x2\x6BE\x6BF\f\x3\x2\x2\x6BF\x6C0\x5z>\x2\x6C0\x6C1\x5"+
		"L\'\x2\x6C1\x6C3\x3\x2\x2\x2\x6C2\x6BE\x3\x2\x2\x2\x6C3\x6C6\x3\x2\x2"+
		"\x2\x6C4\x6C2\x3\x2\x2\x2\x6C4\x6C5\x3\x2\x2\x2\x6C5\xED\x3\x2\x2\x2\x6C6"+
		"\x6C4\x3\x2\x2\x2\x6C7\x6C8\a\x18\x2\x2\x6C8\x6C9\x5\xF0y\x2\x6C9\x6CA"+
		"\a\x14\x2\x2\x6CA\x6CB\x5\xF0y\x2\x6CB\x6CC\a\x19\x2\x2\x6CC\x6D6\x3\x2"+
		"\x2\x2\x6CD\x6CE\a\x18\x2\x2\x6CE\x6CF\x5\xF2z\x2\x6CF\x6D0\a\x19\x2\x2"+
		"\x6D0\x6D6\x3\x2\x2\x2\x6D1\x6D2\a*\x2\x2\x6D2\x6D3\x5\xF2z\x2\x6D3\x6D4"+
		"\a(\x2\x2\x6D4\x6D6\x3\x2\x2\x2\x6D5\x6C7\x3\x2\x2\x2\x6D5\x6CD\x3\x2"+
		"\x2\x2\x6D5\x6D1\x3\x2\x2\x2\x6D6\xEF\x3\x2\x2\x2\x6D7\x6E5\a\x9A\x2\x2"+
		"\x6D8\x6E5\a\x9B\x2\x2\x6D9\x6E5\a\xA2\x2\x2\x6DA\x6E5\a\xA3\x2\x2\x6DB"+
		"\x6E5\a\x99\x2\x2\x6DC\x6E5\a\xA7\x2\x2\x6DD\x6E5\a\xA6\x2\x2\x6DE\x6E5"+
		"\a\xA1\x2\x2\x6DF\x6E5\a\xA4\x2\x2\x6E0\x6E5\a\xA5\x2\x2\x6E1\x6E5\a\x98"+
		"\x2\x2\x6E2\x6E5\a\xA8\x2\x2\x6E3\x6E5\x5\x80\x41\x2\x6E4\x6D7\x3\x2\x2"+
		"\x2\x6E4\x6D8\x3\x2\x2\x2\x6E4\x6D9\x3\x2\x2\x2\x6E4\x6DA\x3\x2\x2\x2"+
		"\x6E4\x6DB\x3\x2\x2\x2\x6E4\x6DC\x3\x2\x2\x2\x6E4\x6DD\x3\x2\x2\x2\x6E4"+
		"\x6DE\x3\x2\x2\x2\x6E4\x6DF\x3\x2\x2\x2\x6E4\x6E0\x3\x2\x2\x2\x6E4\x6E1"+
		"\x3\x2\x2\x2\x6E4\x6E2\x3\x2\x2\x2\x6E4\x6E3\x3\x2\x2\x2\x6E5\xF1\x3\x2"+
		"\x2\x2\x6E6\x6E7\bz\x1\x2\x6E7\x6E8\x5\xF0y\x2\x6E8\x6EE\x3\x2\x2\x2\x6E9"+
		"\x6EA\f\x3\x2\x2\x6EA\x6EB\a\x13\x2\x2\x6EB\x6ED\x5\xF0y\x2\x6EC\x6E9"+
		"\x3\x2\x2\x2\x6ED\x6F0\x3\x2\x2\x2\x6EE\x6EC\x3\x2\x2\x2\x6EE\x6EF\x3"+
		"\x2\x2\x2\x6EF\xF3\x3\x2\x2\x2\x6F0\x6EE\x3\x2\x2\x2\x6F1\x6F6\x5\xF8"+
		"}\x2\x6F2\x6F6\x5\xFA~\x2\x6F3\x6F6\x5\xAEX\x2\x6F4\x6F6\x5\xF6|\x2\x6F5"+
		"\x6F1\x3\x2\x2\x2\x6F5\x6F2\x3\x2\x2\x2\x6F5\x6F3\x3\x2\x2\x2\x6F5\x6F4"+
		"\x3\x2\x2\x2\x6F6\xF5\x3\x2\x2\x2\x6F7\x6F8\t\x3\x2\x2\x6F8\xF7\x3\x2"+
		"\x2\x2\x6F9\x6FA\a\x16\x2\x2\x6FA\x6FB\x5P)\x2\x6FB\x6FC\a\x17\x2\x2\x6FC"+
		"\xF9\x3\x2\x2\x2\x6FD\x700\x5\xF0y\x2\x6FE\x700\x5\xFC\x7F\x2\x6FF\x6FD"+
		"\x3\x2\x2\x2\x6FF\x6FE\x3\x2\x2\x2\x700\xFB\x3\x2\x2\x2\x701\x707\x5\x9A"+
		"N\x2\x702\x707\x5\x94K\x2\x703\x707\x5\x96L\x2\x704\x707\x5\x100\x81\x2"+
		"\x705\x707\x5\xFE\x80\x2\x706\x701\x3\x2\x2\x2\x706\x702\x3\x2\x2\x2\x706"+
		"\x703\x3\x2\x2\x2\x706\x704\x3\x2\x2\x2\x706\x705\x3\x2\x2\x2\x707\xFD"+
		"\x3\x2\x2\x2\x708\x70A\a\x16\x2\x2\x709\x70B\x5\x102\x82\x2\x70A\x709"+
		"\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B\x70C\x3\x2\x2\x2\x70C\x70D\a\x17"+
		"\x2\x2\x70D\xFF\x3\x2\x2\x2\x70E\x710\a\x1A\x2\x2\x70F\x711\x5\x104\x83"+
		"\x2\x710\x70F\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2"+
		"\x712\x713\a\x1B\x2\x2\x713\x101\x3\x2\x2\x2\x714\x715\b\x82\x1\x2\x715"+
		"\x716\x5P)\x2\x716\x71C\x3\x2\x2\x2\x717\x718\f\x3\x2\x2\x718\x719\a\x13"+
		"\x2\x2\x719\x71B\x5P)\x2\x71A\x717\x3\x2\x2\x2\x71B\x71E\x3\x2\x2\x2\x71C"+
		"\x71A\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x103\x3\x2\x2\x2\x71E\x71C"+
		"\x3\x2\x2\x2\x71F\x720\b\x83\x1\x2\x720\x721\x5\x106\x84\x2\x721\x727"+
		"\x3\x2\x2\x2\x722\x723\f\x3\x2\x2\x723\x724\a\x13\x2\x2\x724\x726\x5\x106"+
		"\x84\x2\x725\x722\x3\x2\x2\x2\x726\x729\x3\x2\x2\x2\x727\x725\x3\x2\x2"+
		"\x2\x727\x728\x3\x2\x2\x2\x728\x105\x3\x2\x2\x2\x729\x727\x3\x2\x2\x2"+
		"\x72A\x72B\x5P)\x2\x72B\x72C\a\x11\x2\x2\x72C\x72D\x5P)\x2\x72D\x107\x3"+
		"\x2\x2\x2\x72E\x72F\x5P)\x2\x72F\x730\a\x11\x2\x2\x730\x731\x5P)\x2\x731"+
		"\x738\x3\x2\x2\x2\x732\x733\x5P)\x2\x733\x734\a\x11\x2\x2\x734\x738\x3"+
		"\x2\x2\x2\x735\x736\a\x11\x2\x2\x736\x738\x5P)\x2\x737\x72E\x3\x2\x2\x2"+
		"\x737\x732\x3\x2\x2\x2\x737\x735\x3\x2\x2\x2\x738\x109\x3\x2\x2\x2\x739"+
		"\x73A\x5\xB0Y\x2\x73A\x73B\x5\x11E\x90\x2\x73B\x73C\x5P)\x2\x73C\x10B"+
		"\x3\x2\x2\x2\x73D\x73E\b\x87\x1\x2\x73E\x73F\x5\xB0Y\x2\x73F\x744\x3\x2"+
		"\x2\x2\x740\x741\f\x3\x2\x2\x741\x743\x5t;\x2\x742\x740\x3\x2\x2\x2\x743"+
		"\x746\x3\x2\x2\x2\x744\x742\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x10D"+
		"\x3\x2\x2\x2\x746\x744\x3\x2\x2\x2\x747\x748\x6\x88\x43\x3\x748\x749\a"+
		"\x9E\x2\x2\x749\x74C\x5\xC0\x61\x2\x74A\x74C\x5P)\x2\x74B\x747\x3\x2\x2"+
		"\x2\x74B\x74A\x3\x2\x2\x2\x74C\x10F\x3\x2\x2\x2\x74D\x752\x5\x112\x8A"+
		"\x2\x74E\x74F\a\x13\x2\x2\x74F\x751\x5\x112\x8A\x2\x750\x74E\x3\x2\x2"+
		"\x2\x751\x754\x3\x2\x2\x2\x752\x750\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2"+
		"\x753\x111\x3\x2\x2\x2\x754\x752\x3\x2\x2\x2\x755\x75A\x5\xB0Y\x2\x756"+
		"\x757\a\x15\x2\x2\x757\x759\x5\xB0Y\x2\x758\x756\x3\x2\x2\x2\x759\x75C"+
		"\x3\x2\x2\x2\x75A\x758\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75E\x3"+
		"\x2\x2\x2\x75C\x75A\x3\x2\x2\x2\x75D\x75F\t\x4\x2\x2\x75E\x75D\x3\x2\x2"+
		"\x2\x75E\x75F\x3\x2\x2\x2\x75F\x113\x3\x2\x2\x2\x760\x767\a\"\x2\x2\x761"+
		"\x767\a#\x2\x2\x762\x767\x5\x120\x91\x2\x763\x767\x5\x122\x92\x2\x764"+
		"\x767\x5\x124\x93\x2\x765\x767\x5\x126\x94\x2\x766\x760\x3\x2\x2\x2\x766"+
		"\x761\x3\x2\x2\x2\x766\x762\x3\x2\x2\x2\x766\x763\x3\x2\x2\x2\x766\x764"+
		"\x3\x2\x2\x2\x766\x765\x3\x2\x2\x2\x767\x115\x3\x2\x2\x2\x768\x769\a\x9E"+
		"\x2\x2\x769\x76A\x6\x8C\x44\x3\x76A\x117\x3\x2\x2\x2\x76B\x76C\a\x9E\x2"+
		"\x2\x76C\x76D\x6\x8D\x45\x3\x76D\x119\x3\x2\x2\x2\x76E\x76F\a\x9E\x2\x2"+
		"\x76F\x770\x6\x8E\x46\x3\x770\x11B\x3\x2\x2\x2\x771\x772\a\x9E\x2\x2\x772"+
		"\x773\x6\x8FG\x3\x773\x11D\x3\x2\x2\x2\x774\x775\a-\x2\x2\x775\x11F\x3"+
		"\x2\x2\x2\x776\x777\a$\x2\x2\x777\x121\x3\x2\x2\x2\x778\x779\a%\x2\x2"+
		"\x779\x123\x3\x2\x2\x2\x77A\x77B\a&\x2\x2\x77B\x125\x3\x2\x2\x2\x77C\x77D"+
		"\t\x5\x2\x2\x77D\x127\x3\x2\x2\x2\x77E\x77F\a\x83\x2\x2\x77F\x780\x5\x12A"+
		"\x96\x2\x780\x781\a\x12\x2\x2\x781\x786\x3\x2\x2\x2\x782\x783\x5\x12A"+
		"\x96\x2\x783\x784\a\x12\x2\x2\x784\x786\x3\x2\x2\x2\x785\x77E\x3\x2\x2"+
		"\x2\x785\x782\x3\x2\x2\x2\x786\x129\x3\x2\x2\x2\x787\x788\b\x96\x1\x2"+
		"\x788\x789\x5\x12C\x97\x2\x789\x78E\x3\x2\x2\x2\x78A\x78B\f\x3\x2\x2\x78B"+
		"\x78D\x5\x132\x9A\x2\x78C\x78A\x3\x2\x2\x2\x78D\x790\x3\x2\x2\x2\x78E"+
		"\x78C\x3\x2\x2\x2\x78E\x78F\x3\x2\x2\x2\x78F\x12B\x3\x2\x2\x2\x790\x78E"+
		"\x3\x2\x2\x2\x791\x799\x5\x12E\x98\x2\x792\x799\x5\x130\x99\x2\x793\x799"+
		"\x5\x13A\x9E\x2\x794\x799\x5\x13C\x9F\x2\x795\x799\x5\x13E\xA0\x2\x796"+
		"\x799\x5\x134\x9B\x2\x797\x799\x5\x138\x9D\x2\x798\x791\x3\x2\x2\x2\x798"+
		"\x792\x3\x2\x2\x2\x798\x793\x3\x2\x2\x2\x798\x794\x3\x2\x2\x2\x798\x795"+
		"\x3\x2\x2\x2\x798\x796\x3\x2\x2\x2\x798\x797\x3\x2\x2\x2\x799\x12D\x3"+
		"\x2\x2\x2\x79A\x79B\x5\xF6|\x2\x79B\x12F\x3\x2\x2\x2\x79C\x79D\x5\x116"+
		"\x8C\x2\x79D\x79E\x5\x134\x9B\x2\x79E\x131\x3\x2\x2\x2\x79F\x7A0\a\x15"+
		"\x2\x2\x7A0\x7A5\x5\x134\x9B\x2\x7A1\x7A2\a\x15\x2\x2\x7A2\x7A5\x5\x140"+
		"\xA1\x2\x7A3\x7A5\x5\x138\x9D\x2\x7A4\x79F\x3\x2\x2\x2\x7A4\x7A1\x3\x2"+
		"\x2\x2\x7A4\x7A3\x3\x2\x2\x2\x7A5\x133\x3\x2\x2\x2\x7A6\x7A7\x5\x140\xA1"+
		"\x2\x7A7\x7A9\a\x16\x2\x2\x7A8\x7AA\x5\x136\x9C\x2\x7A9\x7A8\x3\x2\x2"+
		"\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC\a\x17\x2\x2"+
		"\x7AC\x135\x3\x2\x2\x2\x7AD\x7AE\b\x9C\x1\x2\x7AE\x7AF\x5\x12A\x96\x2"+
		"\x7AF\x7B5\x3\x2\x2\x2\x7B0\x7B1\f\x3\x2\x2\x7B1\x7B2\a\x13\x2\x2\x7B2"+
		"\x7B4\x5\x12A\x96\x2\x7B3\x7B0\x3\x2\x2\x2\x7B4\x7B7\x3\x2\x2\x2\x7B5"+
		"\x7B3\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x137\x3\x2\x2\x2\x7B7\x7B5"+
		"\x3\x2\x2\x2\x7B8\x7B9\a\x18\x2\x2\x7B9\x7BA\x5\x12A\x96\x2\x7BA\x7BB"+
		"\a\x19\x2\x2\x7BB\x139\x3\x2\x2\x2\x7BC\x7BD\a\x16\x2\x2\x7BD\x7BE\x5"+
		"\x12A\x96\x2\x7BE\x7BF\a\x17\x2\x2\x7BF\x13B\x3\x2\x2\x2\x7C0\x7C1\x5"+
		"\x140\xA1\x2\x7C1\x13D\x3\x2\x2\x2\x7C2\x7C8\a\xA2\x2\x2\x7C3\x7C8\a\xA4"+
		"\x2\x2\x7C4\x7C8\a\xA1\x2\x2\x7C5\x7C8\a\x98\x2\x2\x7C6\x7C8\a\x99\x2"+
		"\x2\x7C7\x7C2\x3\x2\x2\x2\x7C7\x7C3\x3\x2\x2\x2\x7C7\x7C4\x3\x2\x2\x2"+
		"\x7C7\x7C5\x3\x2\x2\x2\x7C7\x7C6\x3\x2\x2\x2\x7C8\x13F\x3\x2\x2\x2\x7C9"+
		"\x7CA\t\x6\x2\x2\x7CA\x141\x3\x2\x2\x2\x7CB\x7CC\a\x83\x2\x2\x7CC\x7CF"+
		"\x5\x144\xA3\x2\x7CD\x7CF\x5\x144\xA3\x2\x7CE\x7CB\x3\x2\x2\x2\x7CE\x7CD"+
		"\x3\x2\x2\x2\x7CF\x143\x3\x2\x2\x2\x7D0\x7D1\b\xA3\x1\x2\x7D1\x7D2\x5"+
		"\x146\xA4\x2\x7D2\x7D7\x3\x2\x2\x2\x7D3\x7D4\f\x3\x2\x2\x7D4\x7D6\x5\x148"+
		"\xA5\x2\x7D5\x7D3\x3\x2\x2\x2\x7D6\x7D9\x3\x2\x2\x2\x7D7\x7D5\x3\x2\x2"+
		"\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x145\x3\x2\x2\x2\x7D9\x7D7\x3\x2\x2\x2"+
		"\x7DA\x7DF\x5\x152\xAA\x2\x7DB\x7DF\x5\x154\xAB\x2\x7DC\x7DF\x5\x156\xAC"+
		"\x2\x7DD\x7DF\x5\x14A\xA6\x2\x7DE\x7DA\x3\x2\x2\x2\x7DE\x7DB\x3\x2\x2"+
		"\x2\x7DE\x7DC\x3\x2\x2\x2\x7DE\x7DD\x3\x2\x2\x2\x7DF\x147\x3\x2\x2\x2"+
		"\x7E0\x7E1\a\x15\x2\x2\x7E1\x7E7\x5\x14A\xA6\x2\x7E2\x7E3\a\x18\x2\x2"+
		"\x7E3\x7E4\x5\x144\xA3\x2\x7E4\x7E5\a\x19\x2\x2\x7E5\x7E7\x3\x2\x2\x2"+
		"\x7E6\x7E0\x3\x2\x2\x2\x7E6\x7E2\x3\x2\x2\x2\x7E7\x149\x3\x2\x2\x2\x7E8"+
		"\x7E9\x5\x158\xAD\x2\x7E9\x7EB\a\x16\x2\x2\x7EA\x7EC\x5\x14C\xA7\x2\x7EB"+
		"\x7EA\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE"+
		"\a\x17\x2\x2\x7EE\x14B\x3\x2\x2\x2\x7EF\x7F6\x5\x14E\xA8\x2\x7F0\x7F6"+
		"\x5\x150\xA9\x2\x7F1\x7F2\x5\x14E\xA8\x2\x7F2\x7F3\a\x13\x2\x2\x7F3\x7F4"+
		"\x5\x150\xA9\x2\x7F4\x7F6\x3\x2\x2\x2\x7F5\x7EF\x3\x2\x2\x2\x7F5\x7F0"+
		"\x3\x2\x2\x2\x7F5\x7F1\x3\x2\x2\x2\x7F6\x14D\x3\x2\x2\x2\x7F7\x7F8\b\xA8"+
		"\x1\x2\x7F8\x7F9\x5\x144\xA3\x2\x7F9\x7FF\x3\x2\x2\x2\x7FA\x7FB\f\x3\x2"+
		"\x2\x7FB\x7FC\a\x13\x2\x2\x7FC\x7FE\x5\x144\xA3\x2\x7FD\x7FA\x3\x2\x2"+
		"\x2\x7FE\x801\x3\x2\x2\x2\x7FF\x7FD\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2"+
		"\x800\x14F\x3\x2\x2\x2\x801\x7FF\x3\x2\x2\x2\x802\x803\b\xA9\x1\x2\x803"+
		"\x804\x5\x158\xAD\x2\x804\x805\a-\x2\x2\x805\x806\x5\x144\xA3\x2\x806"+
		"\x80F\x3\x2\x2\x2\x807\x808\f\x3\x2\x2\x808\x809\a\x13\x2\x2\x809\x80A"+
		"\x5\x158\xAD\x2\x80A\x80B\a-\x2\x2\x80B\x80C\x5\x144\xA3\x2\x80C\x80E"+
		"\x3\x2\x2\x2\x80D\x807\x3\x2\x2\x2\x80E\x811\x3\x2\x2\x2\x80F\x80D\x3"+
		"\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x151\x3\x2\x2\x2\x811\x80F\x3\x2"+
		"\x2\x2\x812\x813\a\x16\x2\x2\x813\x814\x5\x144\xA3\x2\x814\x815\a\x17"+
		"\x2\x2\x815\x153\x3\x2\x2\x2\x816\x817\b\xAB\x1\x2\x817\x81A\a\xA0\x2"+
		"\x2\x818\x81A\x5\x158\xAD\x2\x819\x816\x3\x2\x2\x2\x819\x818\x3\x2\x2"+
		"\x2\x81A\x820\x3\x2\x2\x2\x81B\x81C\f\x3\x2\x2\x81C\x81D\a\x15\x2\x2\x81D"+
		"\x81F\x5\x158\xAD\x2\x81E\x81B\x3\x2\x2\x2\x81F\x822\x3\x2\x2\x2\x820"+
		"\x81E\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x155\x3\x2\x2\x2\x822\x820"+
		"\x3\x2\x2\x2\x823\x829\a\xA2\x2\x2\x824\x829\a\xA4\x2\x2\x825\x829\a\xA1"+
		"\x2\x2\x826\x829\a\x98\x2\x2\x827\x829\a\x99\x2\x2\x828\x823\x3\x2\x2"+
		"\x2\x828\x824\x3\x2\x2\x2\x828\x825\x3\x2\x2\x2\x828\x826\x3\x2\x2\x2"+
		"\x828\x827\x3\x2\x2\x2\x829\x157\x3\x2\x2\x2\x82A\x82B\t\a\x2\x2\x82B"+
		"\x159\x3\x2\x2\x2\x82C\x82D\a\x83\x2\x2\x82D\x82E\x5\x15C\xAF\x2\x82E"+
		"\x82F\a\x12\x2\x2\x82F\x834\x3\x2\x2\x2\x830\x831\x5\x15C\xAF\x2\x831"+
		"\x832\a\x12\x2\x2\x832\x834\x3\x2\x2\x2\x833\x82C\x3\x2\x2\x2\x833\x830"+
		"\x3\x2\x2\x2\x834\x15B\x3\x2\x2\x2\x835\x836\b\xAF\x1\x2\x836\x837\x5"+
		"\x15E\xB0\x2\x837\x83C\x3\x2\x2\x2\x838\x839\f\x3\x2\x2\x839\x83B\x5\x164"+
		"\xB3\x2\x83A\x838\x3\x2\x2\x2\x83B\x83E\x3\x2\x2\x2\x83C\x83A\x3\x2\x2"+
		"\x2\x83C\x83D\x3\x2\x2\x2\x83D\x15D\x3\x2\x2\x2\x83E\x83C\x3\x2\x2\x2"+
		"\x83F\x845\x5\x160\xB1\x2\x840\x845\x5\x162\xB2\x2\x841\x845\x5\x16C\xB7"+
		"\x2\x842\x845\x5\x16E\xB8\x2\x843\x845\x5\x172\xBA\x2\x844\x83F\x3\x2"+
		"\x2\x2\x844\x840\x3\x2\x2\x2\x844\x841\x3\x2\x2\x2\x844\x842\x3\x2\x2"+
		"\x2\x844\x843\x3\x2\x2\x2\x845\x15F\x3\x2\x2\x2\x846\x847\x5\xF6|\x2\x847"+
		"\x161\x3\x2\x2\x2\x848\x849\x5\x116\x8C\x2\x849\x84A\x5\x166\xB4\x2\x84A"+
		"\x163\x3\x2\x2\x2\x84B\x84C\a\x15\x2\x2\x84C\x84F\x5\x166\xB4\x2\x84D"+
		"\x84F\x5\x16A\xB6\x2\x84E\x84B\x3\x2\x2\x2\x84E\x84D\x3\x2\x2\x2\x84F"+
		"\x165\x3\x2\x2\x2\x850\x851\x5\x174\xBB\x2\x851\x853\a\x16\x2\x2\x852"+
		"\x854\x5\x168\xB5\x2\x853\x852\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854"+
		"\x855\x3\x2\x2\x2\x855\x856\a\x17\x2\x2\x856\x167\x3\x2\x2\x2\x857\x858"+
		"\b\xB5\x1\x2\x858\x859\x5\x15C\xAF\x2\x859\x85F\x3\x2\x2\x2\x85A\x85B"+
		"\f\x3\x2\x2\x85B\x85C\a\x13\x2\x2\x85C\x85E\x5\x15C\xAF\x2\x85D\x85A\x3"+
		"\x2\x2\x2\x85E\x861\x3\x2\x2\x2\x85F\x85D\x3\x2\x2\x2\x85F\x860\x3\x2"+
		"\x2\x2\x860\x169\x3\x2\x2\x2\x861\x85F\x3\x2\x2\x2\x862\x863\a\x18\x2"+
		"\x2\x863\x864\x5\x15C\xAF\x2\x864\x865\a\x19\x2\x2\x865\x16B\x3\x2\x2"+
		"\x2\x866\x867\a\x16\x2\x2\x867\x868\x5\x15C\xAF\x2\x868\x869\a\x17\x2"+
		"\x2\x869\x16D\x3\x2\x2\x2\x86A\x86B\b\xB8\x1\x2\x86B\x86C\x5\x174\xBB"+
		"\x2\x86C\x872\x3\x2\x2\x2\x86D\x86E\f\x3\x2\x2\x86E\x86F\a\x15\x2\x2\x86F"+
		"\x871\x5\x174\xBB\x2\x870\x86D\x3\x2\x2\x2\x871\x874\x3\x2\x2\x2\x872"+
		"\x870\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2\x873\x16F\x3\x2\x2\x2\x874\x872"+
		"\x3\x2\x2\x2\x875\x876\b\xB9\x1\x2\x876\x877\x5\x16E\xB8\x2\x877\x87C"+
		"\x3\x2\x2\x2\x878\x879\f\x3\x2\x2\x879\x87B\a\xA0\x2\x2\x87A\x878\x3\x2"+
		"\x2\x2\x87B\x87E\x3\x2\x2\x2\x87C\x87A\x3\x2\x2\x2\x87C\x87D\x3\x2\x2"+
		"\x2\x87D\x171\x3\x2\x2\x2\x87E\x87C\x3\x2\x2\x2\x87F\x885\a\xA2\x2\x2"+
		"\x880\x885\a\xA4\x2\x2\x881\x885\a\xA1\x2\x2\x882\x885\a\x98\x2\x2\x883"+
		"\x885\a\x99\x2\x2\x884\x87F\x3\x2\x2\x2\x884\x880\x3\x2\x2\x2\x884\x881"+
		"\x3\x2\x2\x2\x884\x882\x3\x2\x2\x2\x884\x883\x3\x2\x2\x2\x885\x173\x3"+
		"\x2\x2\x2\x886\x887\t\b\x2\x2\x887\x175\x3\x2\x2\x2\x888\x889\a\x83\x2"+
		"\x2\x889\x88A\x5\x178\xBD\x2\x88A\x88B\a\x12\x2\x2\x88B\x890\x3\x2\x2"+
		"\x2\x88C\x88D\x5\x178\xBD\x2\x88D\x88E\a\x12\x2\x2\x88E\x890\x3\x2\x2"+
		"\x2\x88F\x888\x3\x2\x2\x2\x88F\x88C\x3\x2\x2\x2\x890\x177\x3\x2\x2\x2"+
		"\x891\x892\b\xBD\x1\x2\x892\x893\x5\x17A\xBE\x2\x893\x898\x3\x2\x2\x2"+
		"\x894\x895\f\x3\x2\x2\x895\x897\x5\x180\xC1\x2\x896\x894\x3\x2\x2\x2\x897"+
		"\x89A\x3\x2\x2\x2\x898\x896\x3\x2\x2\x2\x898\x899\x3\x2\x2\x2\x899\x179"+
		"\x3\x2\x2\x2\x89A\x898\x3\x2\x2\x2\x89B\x8A1\x5\x17C\xBF\x2\x89C\x8A1"+
		"\x5\x17E\xC0\x2\x89D\x8A1\x5\x188\xC5\x2\x89E\x8A1\x5\x18A\xC6\x2\x89F"+
		"\x8A1\x5\x18C\xC7\x2\x8A0\x89B\x3\x2\x2\x2\x8A0\x89C\x3\x2\x2\x2\x8A0"+
		"\x89D\x3\x2\x2\x2\x8A0\x89E\x3\x2\x2\x2\x8A0\x89F\x3\x2\x2\x2\x8A1\x17B"+
		"\x3\x2\x2\x2\x8A2\x8A3\x5\xF6|\x2\x8A3\x17D\x3\x2\x2\x2\x8A4\x8A5\x5\x116"+
		"\x8C\x2\x8A5\x8A6\x5\x182\xC2\x2\x8A6\x17F\x3\x2\x2\x2\x8A7\x8A8\a\x15"+
		"\x2\x2\x8A8\x8AB\x5\x182\xC2\x2\x8A9\x8AB\x5\x186\xC4\x2\x8AA\x8A7\x3"+
		"\x2\x2\x2\x8AA\x8A9\x3\x2\x2\x2\x8AB\x181\x3\x2\x2\x2\x8AC\x8AD\x5\x18E"+
		"\xC8\x2\x8AD\x8AF\a\x16\x2\x2\x8AE\x8B0\x5\x184\xC3\x2\x8AF\x8AE\x3\x2"+
		"\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x8B2\a\x17\x2"+
		"\x2\x8B2\x183\x3\x2\x2\x2\x8B3\x8B4\b\xC3\x1\x2\x8B4\x8B5\x5\x178\xBD"+
		"\x2\x8B5\x8BB\x3\x2\x2\x2\x8B6\x8B7\f\x3\x2\x2\x8B7\x8B8\a\x13\x2\x2\x8B8"+
		"\x8BA\x5\x178\xBD\x2\x8B9\x8B6\x3\x2\x2\x2\x8BA\x8BD\x3\x2\x2\x2\x8BB"+
		"\x8B9\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x185\x3\x2\x2\x2\x8BD\x8BB"+
		"\x3\x2\x2\x2\x8BE\x8BF\a\x18\x2\x2\x8BF\x8C0\x5\x178\xBD\x2\x8C0\x8C1"+
		"\a\x19\x2\x2\x8C1\x187\x3\x2\x2\x2\x8C2\x8C3\a\x16\x2\x2\x8C3\x8C4\x5"+
		"\x178\xBD\x2\x8C4\x8C5\a\x17\x2\x2\x8C5\x189\x3\x2\x2\x2\x8C6\x8C7\b\xC6"+
		"\x1\x2\x8C7\x8CA\a\xA0\x2\x2\x8C8\x8CA\x5\x18E\xC8\x2\x8C9\x8C6\x3\x2"+
		"\x2\x2\x8C9\x8C8\x3\x2\x2\x2\x8CA\x8D0\x3\x2\x2\x2\x8CB\x8CC\f\x3\x2\x2"+
		"\x8CC\x8CD\a\x15\x2\x2\x8CD\x8CF\x5\x18E\xC8\x2\x8CE\x8CB\x3\x2\x2\x2"+
		"\x8CF\x8D2\x3\x2\x2\x2\x8D0\x8CE\x3\x2\x2\x2\x8D0\x8D1\x3\x2\x2\x2\x8D1"+
		"\x18B\x3\x2\x2\x2\x8D2\x8D0\x3\x2\x2\x2\x8D3\x8D9\a\xA2\x2\x2\x8D4\x8D9"+
		"\a\xA4\x2\x2\x8D5\x8D9\a\xA1\x2\x2\x8D6\x8D9\a\x98\x2\x2\x8D7\x8D9\a\x99"+
		"\x2\x2\x8D8\x8D3\x3\x2\x2\x2\x8D8\x8D4\x3\x2\x2\x2\x8D8\x8D5\x3\x2\x2"+
		"\x2\x8D8\x8D6\x3\x2\x2\x2\x8D8\x8D7\x3\x2\x2\x2\x8D9\x18D\x3\x2\x2\x2"+
		"\x8DA\x8DB\t\t\x2\x2\x8DB\x18F\x3\x2\x2\x2\xB9\x196\x19D\x1BB\x1C1\x1C6"+
		"\x1CC\x1D0\x1D6\x1DA\x1E5\x1EE\x1FD\x206\x20D\x217\x235\x240\x24E\x25C"+
		"\x26A\x27E\x289\x28B\x294\x298\x2A0\x2A4\x2B3\x2B7\x2D2\x2D9\x2DE\x2E2"+
		"\x2F5\x2FC\x2FF\x320\x333\x33A\x35C\x365\x37C\x38C\x391\x399\x3A2\x3B9"+
		"\x3BD\x3D9\x440\x442\x44C\x461\x471\x479\x47E\x480\x486\x488\x48A\x4A4"+
		"\x4AB\x4AE\x4B4\x4B8\x4BD\x4BF\x4C8\x4CF\x4D1\x4D6\x4D8\x4E3\x4F6\x4FF"+
		"\x505\x50A\x511\x519\x527\x52F\x537\x53D\x548\x554\x55F\x56C\x570\x576"+
		"\x582\x596\x598\x59D\x5AD\x5B2\x5BB\x5C5\x5CA\x5CF\x5DF\x5E4\x5E7\x5EB"+
		"\x5F0\x5F7\x602\x604\x610\x618\x623\x628\x634\x638\x642\x64A\x650\x657"+
		"\x65C\x666\x66D\x67A\x687\x68B\x68E\x692\x695\x6A0\x6AC\x6B8\x6C4\x6D5"+
		"\x6E4\x6EE\x6F5\x6FF\x706\x70A\x710\x71C\x727\x737\x744\x74B\x752\x75A"+
		"\x75E\x766\x785\x78E\x798\x7A4\x7A9\x7B5\x7C7\x7CE\x7D7\x7DE\x7E6\x7EB"+
		"\x7F5\x7FF\x80F\x819\x820\x828\x833\x83C\x844\x84E\x853\x85F\x872\x87C"+
		"\x884\x88F\x898\x8A0\x8AA\x8AF\x8BB\x8C9\x8D0\x8D8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace prompto.parser
