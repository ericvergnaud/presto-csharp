//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace prompto.parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class EParser : AbstractParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, COMMENT=8, 
		JAVA=9, CSHARP=10, PYTHON2=11, PYTHON3=12, JAVASCRIPT=13, SWIFT=14, COLON=15, 
		SEMI=16, COMMA=17, RANGE=18, DOT=19, LPAR=20, RPAR=21, LBRAK=22, RBRAK=23, 
		LCURL=24, RCURL=25, QMARK=26, XMARK=27, AMP=28, AMP2=29, PIPE=30, PIPE2=31, 
		PLUS=32, MINUS=33, STAR=34, SLASH=35, BSLASH=36, PERCENT=37, GT=38, GTE=39, 
		LT=40, LTE=41, LTGT=42, LTCOLONGT=43, EQ=44, XEQ=45, EQ2=46, TEQ=47, TILDE=48, 
		LARROW=49, RARROW=50, BOOLEAN=51, CHARACTER=52, TEXT=53, INTEGER=54, DECIMAL=55, 
		DATE=56, TIME=57, DATETIME=58, PERIOD=59, VERSION=60, METHOD_T=61, CODE=62, 
		DOCUMENT=63, BLOB=64, IMAGE=65, UUID=66, ITERATOR=67, CURSOR=68, HTML=69, 
		ABSTRACT=70, ALL=71, ALWAYS=72, AND=73, ANY=74, AS=75, ASC=76, ATTR=77, 
		ATTRIBUTE=78, ATTRIBUTES=79, BINDINGS=80, BREAK=81, BY=82, CASE=83, CATCH=84, 
		CATEGORY=85, CLASS=86, CLOSE=87, CONTAINS=88, DEF=89, DEFAULT=90, DEFINE=91, 
		DELETE=92, DESC=93, DO=94, DOING=95, EACH=96, ELSE=97, ENUM=98, ENUMERATED=99, 
		EXCEPT=100, EXECUTE=101, EXPECTING=102, EXTENDS=103, FETCH=104, FILTERED=105, 
		FINALLY=106, FLUSH=107, FOR=108, FROM=109, GETTER=110, HAS=111, IF=112, 
		IN=113, INDEX=114, INVOKE=115, IS=116, MATCHING=117, METHOD=118, METHODS=119, 
		MODULO=120, MUTABLE=121, NATIVE=122, NONE=123, NOT=124, NOTHING=125, NULL=126, 
		ON=127, ONE=128, OPEN=129, OPERATOR=130, OR=131, ORDER=132, OTHERWISE=133, 
		PASS=134, RAISE=135, READ=136, RECEIVING=137, RESOURCE=138, RETURN=139, 
		RETURNING=140, ROWS=141, SELF=142, SETTER=143, SINGLETON=144, SORTED=145, 
		STORABLE=146, STORE=147, SWITCH=148, TEST=149, THEN=150, THIS=151, THROW=152, 
		TO=153, TRY=154, VERIFYING=155, WIDGET=156, WITH=157, WHEN=158, WHERE=159, 
		WHILE=160, WRITE=161, BOOLEAN_LITERAL=162, CHAR_LITERAL=163, MIN_INTEGER=164, 
		MAX_INTEGER=165, SYMBOL_IDENTIFIER=166, TYPE_IDENTIFIER=167, VARIABLE_IDENTIFIER=168, 
		NATIVE_IDENTIFIER=169, DOLLAR_IDENTIFIER=170, ARONDBASE_IDENTIFIER=171, 
		TEXT_LITERAL=172, UUID_LITERAL=173, INTEGER_LITERAL=174, HEXA_LITERAL=175, 
		DECIMAL_LITERAL=176, DATETIME_LITERAL=177, TIME_LITERAL=178, DATE_LITERAL=179, 
		PERIOD_LITERAL=180, VERSION_LITERAL=181;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_widget_declaration = 5, RULE_native_widget_declaration = 6, 
		RULE_concrete_category_declaration = 7, RULE_singleton_category_declaration = 8, 
		RULE_derived_list = 9, RULE_operator_method_declaration = 10, RULE_setter_method_declaration = 11, 
		RULE_native_setter_declaration = 12, RULE_getter_method_declaration = 13, 
		RULE_native_getter_declaration = 14, RULE_native_category_declaration = 15, 
		RULE_native_resource_declaration = 16, RULE_native_category_bindings = 17, 
		RULE_native_category_binding_list = 18, RULE_attribute_list = 19, RULE_abstract_method_declaration = 20, 
		RULE_concrete_method_declaration = 21, RULE_native_method_declaration = 22, 
		RULE_test_method_declaration = 23, RULE_assertion = 24, RULE_full_argument_list = 25, 
		RULE_typed_argument = 26, RULE_statement = 27, RULE_flush_statement = 28, 
		RULE_store_statement = 29, RULE_method_call_statement = 30, RULE_with_resource_statement = 31, 
		RULE_with_singleton_statement = 32, RULE_switch_statement = 33, RULE_switch_case_statement = 34, 
		RULE_for_each_statement = 35, RULE_do_while_statement = 36, RULE_while_statement = 37, 
		RULE_if_statement = 38, RULE_else_if_statement_list = 39, RULE_raise_statement = 40, 
		RULE_try_statement = 41, RULE_catch_statement = 42, RULE_break_statement = 43, 
		RULE_return_statement = 44, RULE_expression = 45, RULE_unresolved_expression = 46, 
		RULE_unresolved_selector = 47, RULE_invocation_expression = 48, RULE_invocation_trailer = 49, 
		RULE_instance_expression = 50, RULE_instance_selector = 51, RULE_document_expression = 52, 
		RULE_blob_expression = 53, RULE_constructor_expression = 54, RULE_write_statement = 55, 
		RULE_ambiguous_expression = 56, RULE_filtered_list_suffix = 57, RULE_fetch_expression = 58, 
		RULE_fetch_statement = 59, RULE_sorted_expression = 60, RULE_argument_assignment_list = 61, 
		RULE_with_argument_assignment_list = 62, RULE_argument_assignment = 63, 
		RULE_assign_instance_statement = 64, RULE_child_instance = 65, RULE_assign_tuple_statement = 66, 
		RULE_lfs = 67, RULE_lfp = 68, RULE_jsx_ws = 69, RULE_indent = 70, RULE_dedent = 71, 
		RULE_null_literal = 72, RULE_declaration_list = 73, RULE_declarations = 74, 
		RULE_declaration = 75, RULE_annotation_constructor = 76, RULE_annotation_identifier = 77, 
		RULE_resource_declaration = 78, RULE_enum_declaration = 79, RULE_native_symbol_list = 80, 
		RULE_category_symbol_list = 81, RULE_symbol_list = 82, RULE_attribute_constraint = 83, 
		RULE_list_literal = 84, RULE_set_literal = 85, RULE_expression_list = 86, 
		RULE_range_literal = 87, RULE_typedef = 88, RULE_primary_type = 89, RULE_native_type = 90, 
		RULE_category_type = 91, RULE_mutable_category_type = 92, RULE_code_type = 93, 
		RULE_category_declaration = 94, RULE_widget_declaration = 95, RULE_type_identifier_list = 96, 
		RULE_method_identifier = 97, RULE_identifier_or_keyword = 98, RULE_nospace_hyphen_identifier_or_keyword = 99, 
		RULE_nospace_identifier_or_keyword = 100, RULE_identifier = 101, RULE_variable_identifier = 102, 
		RULE_attribute_identifier = 103, RULE_type_identifier = 104, RULE_symbol_identifier = 105, 
		RULE_any_identifier = 106, RULE_argument_list = 107, RULE_argument = 108, 
		RULE_operator_argument = 109, RULE_named_argument = 110, RULE_code_argument = 111, 
		RULE_category_or_any_type = 112, RULE_any_type = 113, RULE_member_method_declaration_list = 114, 
		RULE_member_method_declaration = 115, RULE_native_member_method_declaration_list = 116, 
		RULE_native_member_method_declaration = 117, RULE_native_category_binding = 118, 
		RULE_python_category_binding = 119, RULE_python_module = 120, RULE_javascript_category_binding = 121, 
		RULE_javascript_module = 122, RULE_variable_identifier_list = 123, RULE_attribute_identifier_list = 124, 
		RULE_method_declaration = 125, RULE_comment_statement = 126, RULE_native_statement_list = 127, 
		RULE_native_statement = 128, RULE_python_native_statement = 129, RULE_javascript_native_statement = 130, 
		RULE_statement_list = 131, RULE_assertion_list = 132, RULE_switch_case_statement_list = 133, 
		RULE_catch_statement_list = 134, RULE_literal_collection = 135, RULE_atomic_literal = 136, 
		RULE_literal_list_literal = 137, RULE_selectable_expression = 138, RULE_this_expression = 139, 
		RULE_parenthesis_expression = 140, RULE_literal_expression = 141, RULE_collection_literal = 142, 
		RULE_tuple_literal = 143, RULE_dict_literal = 144, RULE_document_literal = 145, 
		RULE_expression_tuple = 146, RULE_dict_entry_list = 147, RULE_dict_entry = 148, 
		RULE_dict_key = 149, RULE_slice_arguments = 150, RULE_assign_variable_statement = 151, 
		RULE_assignable_instance = 152, RULE_is_expression = 153, RULE_read_all_expression = 154, 
		RULE_read_one_expression = 155, RULE_order_by_list = 156, RULE_order_by = 157, 
		RULE_operator = 158, RULE_keyword = 159, RULE_new_token = 160, RULE_key_token = 161, 
		RULE_module_token = 162, RULE_value_token = 163, RULE_symbols_token = 164, 
		RULE_assign = 165, RULE_multiply = 166, RULE_divide = 167, RULE_idivide = 168, 
		RULE_modulo = 169, RULE_javascript_statement = 170, RULE_javascript_expression = 171, 
		RULE_javascript_primary_expression = 172, RULE_javascript_this_expression = 173, 
		RULE_javascript_new_expression = 174, RULE_javascript_selector_expression = 175, 
		RULE_javascript_method_expression = 176, RULE_javascript_arguments = 177, 
		RULE_javascript_item_expression = 178, RULE_javascript_parenthesis_expression = 179, 
		RULE_javascript_identifier_expression = 180, RULE_javascript_literal_expression = 181, 
		RULE_javascript_identifier = 182, RULE_python_statement = 183, RULE_python_expression = 184, 
		RULE_python_primary_expression = 185, RULE_python_self_expression = 186, 
		RULE_python_selector_expression = 187, RULE_python_method_expression = 188, 
		RULE_python_argument_list = 189, RULE_python_ordinal_argument_list = 190, 
		RULE_python_named_argument_list = 191, RULE_python_parenthesis_expression = 192, 
		RULE_python_identifier_expression = 193, RULE_python_literal_expression = 194, 
		RULE_python_identifier = 195, RULE_java_statement = 196, RULE_java_expression = 197, 
		RULE_java_primary_expression = 198, RULE_java_this_expression = 199, RULE_java_new_expression = 200, 
		RULE_java_selector_expression = 201, RULE_java_method_expression = 202, 
		RULE_java_arguments = 203, RULE_java_item_expression = 204, RULE_java_parenthesis_expression = 205, 
		RULE_java_identifier_expression = 206, RULE_java_class_identifier_expression = 207, 
		RULE_java_literal_expression = 208, RULE_java_identifier = 209, RULE_csharp_statement = 210, 
		RULE_csharp_expression = 211, RULE_csharp_primary_expression = 212, RULE_csharp_this_expression = 213, 
		RULE_csharp_new_expression = 214, RULE_csharp_selector_expression = 215, 
		RULE_csharp_method_expression = 216, RULE_csharp_arguments = 217, RULE_csharp_item_expression = 218, 
		RULE_csharp_parenthesis_expression = 219, RULE_csharp_identifier_expression = 220, 
		RULE_csharp_literal_expression = 221, RULE_csharp_identifier = 222, RULE_jsx_expression = 223, 
		RULE_jsx_element = 224, RULE_jsx_fragment = 225, RULE_jsx_fragment_start = 226, 
		RULE_jsx_fragment_end = 227, RULE_jsx_self_closing = 228, RULE_jsx_opening = 229, 
		RULE_jsx_closing = 230, RULE_jsx_element_name = 231, RULE_jsx_identifier = 232, 
		RULE_jsx_attribute = 233, RULE_jsx_attribute_value = 234, RULE_jsx_children = 235, 
		RULE_jsx_child = 236, RULE_jsx_text = 237, RULE_css_expression = 238, 
		RULE_css_field = 239, RULE_css_identifier = 240, RULE_css_value = 241, 
		RULE_css_text = 242;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_widget_declaration", 
		"native_widget_declaration", "concrete_category_declaration", "singleton_category_declaration", 
		"derived_list", "operator_method_declaration", "setter_method_declaration", 
		"native_setter_declaration", "getter_method_declaration", "native_getter_declaration", 
		"native_category_declaration", "native_resource_declaration", "native_category_bindings", 
		"native_category_binding_list", "attribute_list", "abstract_method_declaration", 
		"concrete_method_declaration", "native_method_declaration", "test_method_declaration", 
		"assertion", "full_argument_list", "typed_argument", "statement", "flush_statement", 
		"store_statement", "method_call_statement", "with_resource_statement", 
		"with_singleton_statement", "switch_statement", "switch_case_statement", 
		"for_each_statement", "do_while_statement", "while_statement", "if_statement", 
		"else_if_statement_list", "raise_statement", "try_statement", "catch_statement", 
		"break_statement", "return_statement", "expression", "unresolved_expression", 
		"unresolved_selector", "invocation_expression", "invocation_trailer", 
		"instance_expression", "instance_selector", "document_expression", "blob_expression", 
		"constructor_expression", "write_statement", "ambiguous_expression", "filtered_list_suffix", 
		"fetch_expression", "fetch_statement", "sorted_expression", "argument_assignment_list", 
		"with_argument_assignment_list", "argument_assignment", "assign_instance_statement", 
		"child_instance", "assign_tuple_statement", "lfs", "lfp", "jsx_ws", "indent", 
		"dedent", "null_literal", "declaration_list", "declarations", "declaration", 
		"annotation_constructor", "annotation_identifier", "resource_declaration", 
		"enum_declaration", "native_symbol_list", "category_symbol_list", "symbol_list", 
		"attribute_constraint", "list_literal", "set_literal", "expression_list", 
		"range_literal", "typedef", "primary_type", "native_type", "category_type", 
		"mutable_category_type", "code_type", "category_declaration", "widget_declaration", 
		"type_identifier_list", "method_identifier", "identifier_or_keyword", 
		"nospace_hyphen_identifier_or_keyword", "nospace_identifier_or_keyword", 
		"identifier", "variable_identifier", "attribute_identifier", "type_identifier", 
		"symbol_identifier", "any_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "javascript_category_binding", "javascript_module", "variable_identifier_list", 
		"attribute_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"document_literal", "expression_tuple", "dict_entry_list", "dict_entry", 
		"dict_key", "slice_arguments", "assign_variable_statement", "assignable_instance", 
		"is_expression", "read_all_expression", "read_one_expression", "order_by_list", 
		"order_by", "operator", "keyword", "new_token", "key_token", "module_token", 
		"value_token", "symbols_token", "assign", "multiply", "divide", "idivide", 
		"modulo", "javascript_statement", "javascript_expression", "javascript_primary_expression", 
		"javascript_this_expression", "javascript_new_expression", "javascript_selector_expression", 
		"javascript_method_expression", "javascript_arguments", "javascript_item_expression", 
		"javascript_parenthesis_expression", "javascript_identifier_expression", 
		"javascript_literal_expression", "javascript_identifier", "python_statement", 
		"python_expression", "python_primary_expression", "python_self_expression", 
		"python_selector_expression", "python_method_expression", "python_argument_list", 
		"python_ordinal_argument_list", "python_named_argument_list", "python_parenthesis_expression", 
		"python_identifier_expression", "python_literal_expression", "python_identifier", 
		"java_statement", "java_expression", "java_primary_expression", "java_this_expression", 
		"java_new_expression", "java_selector_expression", "java_method_expression", 
		"java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_new_expression", "csharp_selector_expression", 
		"csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
		"csharp_parenthesis_expression", "csharp_identifier_expression", "csharp_literal_expression", 
		"csharp_identifier", "jsx_expression", "jsx_element", "jsx_fragment", 
		"jsx_fragment_start", "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
		"jsx_closing", "jsx_element_name", "jsx_identifier", "jsx_attribute", 
		"jsx_attribute_value", "jsx_children", "jsx_child", "jsx_text", "css_expression", 
		"css_field", "css_identifier", "css_value", "css_text"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", null, "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		null, "'..'", null, null, null, null, null, null, null, null, "'!'", "'&'", 
		"'&&'", "'|'", "'||'", null, "'-'", "'*'", "'/'", "'\\'", "'%'", "'>'", 
		"'>='", "'<'", "'<='", "'<>'", "'<:>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Version'", 
		"'Method'", "'Code'", "'Document'", "'Blob'", "'Image'", "'Uuid'", "'Iterator'", 
		"'Cursor'", "'Html'", "'abstract'", "'all'", "'always'", "'and'", "'any'", 
		"'as'", null, "'attr'", "'attribute'", "'attributes'", "'bindings'", "'break'", 
		"'by'", "'case'", "'catch'", "'category'", "'class'", "'close'", "'contains'", 
		"'def'", "'default'", "'define'", "'delete'", null, "'do'", "'doing'", 
		"'each'", "'else'", "'enum'", "'enumerated'", "'except'", "'execute'", 
		"'expecting'", "'extends'", "'fetch'", "'filtered'", "'finally'", "'flush'", 
		"'for'", "'from'", "'getter'", "'has'", "'if'", "'in'", "'index'", "'invoke'", 
		"'is'", "'matching'", "'method'", "'methods'", "'modulo'", "'mutable'", 
		"'native'", "'None'", "'not'", null, "'null'", "'on'", "'one'", "'open'", 
		"'operator'", "'or'", "'order'", "'otherwise'", "'pass'", "'raise'", "'read'", 
		"'receiving'", "'resource'", "'return'", "'returning'", "'rows'", "'self'", 
		"'setter'", "'singleton'", "'sorted'", "'storable'", "'store'", "'switch'", 
		"'test'", "'then'", "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
		"'widget'", "'with'", "'when'", "'where'", "'while'", "'write'", null, 
		null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "COMMENT", 
		"JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
		"SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
		"RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
		"STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
		"LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", 
		"CHARACTER", "TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
		"PERIOD", "VERSION", "METHOD_T", "CODE", "DOCUMENT", "BLOB", "IMAGE", 
		"UUID", "ITERATOR", "CURSOR", "HTML", "ABSTRACT", "ALL", "ALWAYS", "AND", 
		"ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", "BREAK", 
		"BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", "DEF", 
		"DEFAULT", "DEFINE", "DELETE", "DESC", "DO", "DOING", "EACH", "ELSE", 
		"ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
		"FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", "HAS", "IF", 
		"IN", "INDEX", "INVOKE", "IS", "MATCHING", "METHOD", "METHODS", "MODULO", 
		"MUTABLE", "NATIVE", "NONE", "NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", 
		"OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", 
		"RESOURCE", "RETURN", "RETURNING", "ROWS", "SELF", "SETTER", "SINGLETON", 
		"SORTED", "STORABLE", "STORE", "SWITCH", "TEST", "THEN", "THIS", "THROW", 
		"TO", "TRY", "VERIFYING", "WIDGET", "WITH", "WHEN", "WHERE", "WHILE", 
		"WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", 
		"SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
		"DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", "UUID_LITERAL", 
		"INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
		"TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL", "VERSION_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(DEFINE);
			State = 487; _localctx.name = type_identifier();
			State = 488; Match(AS);
			State = 489; Match(ENUMERATED);
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATEGORY:
				{
				State = 490; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 491; _localctx.derived = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				{
				State = 494; _localctx.attrs = attribute_list();
				State = 495; Match(COMMA);
				State = 496; Match(AND);
				}
				}
				break;
			case 2:
				{
				State = 498; Match(WITH);
				}
				break;
			}
			State = 501; symbols_token();
			State = 502; Match(COLON);
			State = 503; indent();
			State = 504; _localctx.symbols = category_symbol_list();
			State = 505; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Symbols_tokenContext symbols_token() {
			return GetRuleContext<Symbols_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(DEFINE);
			State = 508; _localctx.name = type_identifier();
			State = 509; Match(AS);
			State = 510; Match(ENUMERATED);
			State = 511; _localctx.typ = native_type();
			State = 512; Match(WITH);
			State = 513; symbols_token();
			State = 514; Match(COLON);
			State = 515; indent();
			State = 516; _localctx.symbols = native_symbol_list();
			State = 517; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Value_tokenContext value_token() {
			return GetRuleContext<Value_tokenContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; _localctx.name = symbol_identifier();
			State = 520; Match(WITH);
			State = 521; _localctx.exp = expression(0);
			State = 522; Match(AS);
			State = 523; value_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; _localctx.name = symbol_identifier();
			State = 526; _localctx.args = with_argument_assignment_list(0);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 527; Match(AND);
				State = 528; _localctx.arg = argument_assignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Attribute_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public Variable_identifier_listContext indices;
		public Variable_identifierContext index;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode INDEX() { return GetToken(EParser.INDEX, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(DEFINE);
			State = 532; _localctx.name = attribute_identifier();
			State = 533; Match(AS);
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORABLE) {
				{
				State = 534; Match(STORABLE);
				}
			}

			State = 537; _localctx.typ = typedef(0);
			State = 538; Match(ATTRIBUTE);
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==MATCHING) {
				{
				State = 539; _localctx.match = attribute_constraint();
				}
			}

			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 542; Match(WITH);
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE_IDENTIFIER) {
					{
					State = 543; _localctx.indices = variable_identifier_list();
					State = 546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 544; Match(AND);
						State = 545; _localctx.index = variable_identifier();
						}
					}

					}
				}

				State = 550; Match(INDEX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_widget_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public ITerminalNode WIDGET() { return GetToken(EParser.WIDGET, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Concrete_widget_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_widget_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_widget_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_widget_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_widget_declarationContext concrete_widget_declaration() {
		Concrete_widget_declarationContext _localctx = new Concrete_widget_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_widget_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(DEFINE);
			State = 554; _localctx.name = type_identifier();
			State = 555; Match(AS);
			State = 558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WIDGET:
				{
				State = 556; Match(WIDGET);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 557; _localctx.derived = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 560; Match(WITH);
				State = 561; Match(METHODS);
				State = 562; Match(COLON);
				State = 563; indent();
				State = 564; _localctx.methods = member_method_declaration_list();
				State = 565; dedent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_widget_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode WIDGET() { return GetToken(EParser.WIDGET, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_widget_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_widget_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_widget_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_widget_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_widget_declarationContext native_widget_declaration() {
		Native_widget_declarationContext _localctx = new Native_widget_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_native_widget_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(DEFINE);
			State = 570; _localctx.name = type_identifier();
			State = 571; Match(AS);
			State = 572; Match(NATIVE);
			State = 573; Match(WIDGET);
			State = 574; Match(WITH);
			State = 575; Match(BINDINGS);
			State = 576; Match(COLON);
			State = 577; indent();
			State = 578; _localctx.bindings = native_category_bindings();
			State = 579; dedent();
			State = 580; lfp();
			State = 581; Match(AND);
			State = 582; Match(METHODS);
			State = 583; Match(COLON);
			State = 584; indent();
			State = 585; _localctx.methods = native_member_method_declaration_list();
			State = 586; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; Match(DEFINE);
			State = 589; _localctx.name = type_identifier();
			State = 590; Match(AS);
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORABLE) {
				{
				State = 591; Match(STORABLE);
				}
			}

			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATEGORY:
				{
				State = 594; Match(CATEGORY);
				}
				break;
			case TYPE_IDENTIFIER:
				{
				State = 595; _localctx.derived = derived_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				{
				State = 598; _localctx.attrs = attribute_list();
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 599; Match(COMMA);
					State = 600; Match(AND);
					State = 601; Match(METHODS);
					State = 602; Match(COLON);
					State = 603; indent();
					State = 604; _localctx.methods = member_method_declaration_list();
					State = 605; dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 609; Match(WITH);
				State = 610; Match(METHODS);
				State = 611; Match(COLON);
				State = 612; indent();
				State = 613; _localctx.methods = member_method_declaration_list();
				State = 614; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SINGLETON() { return GetToken(EParser.SINGLETON, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_singleton_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(DEFINE);
			State = 619; _localctx.name = type_identifier();
			State = 620; Match(AS);
			State = 621; Match(SINGLETON);
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				{
				State = 622; _localctx.attrs = attribute_list();
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 623; Match(COMMA);
					State = 624; Match(AND);
					State = 625; Match(METHODS);
					State = 626; Match(COLON);
					State = 627; indent();
					State = 628; _localctx.methods = member_method_declaration_list();
					State = 629; dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 633; Match(WITH);
				State = 634; Match(METHODS);
				State = 635; Match(COLON);
				State = 636; indent();
				State = 637; _localctx.methods = member_method_declaration_list();
				State = 638; dedent();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
	 
		public Derived_listContext() { }
		public virtual void CopyFrom(Derived_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DerivedListItemContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public DerivedListItemContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedListItem(this);
		}
	}
	public partial class DerivedListContext : Derived_listContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public DerivedListContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDerivedList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDerivedList(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_derived_list);
		try {
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new DerivedListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 642; ((DerivedListContext)_localctx).items = type_identifier_list();
				}
				break;
			case 2:
				_localctx = new DerivedListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; ((DerivedListItemContext)_localctx).items = type_identifier_list();
				State = 644; Match(AND);
				State = 645; ((DerivedListItemContext)_localctx).item = type_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(EParser.OPERATOR, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; Match(DEFINE);
			State = 650; _localctx.op = @operator();
			State = 651; Match(AS);
			State = 652; Match(OPERATOR);
			State = 653; Match(RECEIVING);
			State = 654; _localctx.arg = operator_argument();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 655; Match(RETURNING);
				State = 656; _localctx.typ = typedef(0);
				}
			}

			State = 659; Match(DOING);
			State = 660; Match(COLON);
			State = 661; indent();
			State = 662; _localctx.stmts = statement_list();
			State = 663; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(DEFINE);
			State = 666; _localctx.name = variable_identifier();
			State = 667; Match(AS);
			State = 668; Match(SETTER);
			State = 669; Match(DOING);
			State = 670; Match(COLON);
			State = 671; indent();
			State = 672; _localctx.stmts = statement_list();
			State = 673; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_setter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public Native_setter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_setter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_setter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_setter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_setter_declarationContext native_setter_declaration() {
		Native_setter_declarationContext _localctx = new Native_setter_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_native_setter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; Match(DEFINE);
			State = 676; _localctx.name = variable_identifier();
			State = 677; Match(AS);
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NATIVE) {
				{
				State = 678; Match(NATIVE);
				}
			}

			State = 681; Match(SETTER);
			State = 682; Match(DOING);
			State = 683; Match(COLON);
			State = 684; indent();
			State = 685; _localctx.stmts = native_statement_list();
			State = 686; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(DEFINE);
			State = 689; _localctx.name = variable_identifier();
			State = 690; Match(AS);
			State = 691; Match(GETTER);
			State = 692; Match(DOING);
			State = 693; Match(COLON);
			State = 694; indent();
			State = 695; _localctx.stmts = statement_list();
			State = 696; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_getter_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public Native_getter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_getter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_getter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_getter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_getter_declarationContext native_getter_declaration() {
		Native_getter_declarationContext _localctx = new Native_getter_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_native_getter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(DEFINE);
			State = 699; _localctx.name = variable_identifier();
			State = 700; Match(AS);
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NATIVE) {
				{
				State = 701; Match(NATIVE);
				}
			}

			State = 704; Match(GETTER);
			State = 705; Match(DOING);
			State = 706; Match(COLON);
			State = 707; indent();
			State = 708; _localctx.stmts = native_statement_list();
			State = 709; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; Match(DEFINE);
			State = 712; _localctx.name = type_identifier();
			State = 713; Match(AS);
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORABLE) {
				{
				State = 714; Match(STORABLE);
				}
			}

			State = 717; Match(NATIVE);
			State = 718; Match(CATEGORY);
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				{
				State = 719; _localctx.attrs = attribute_list();
				State = 720; Match(COMMA);
				State = 721; Match(AND);
				State = 722; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 724; Match(WITH);
				State = 725; Match(BINDINGS);
				}
				break;
			}
			State = 728; Match(COLON);
			State = 729; indent();
			State = 730; _localctx.bindings = native_category_bindings();
			State = 731; dedent();
			State = 740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 732; lfp();
				State = 733; Match(AND);
				State = 734; Match(METHODS);
				State = 735; Match(COLON);
				State = 736; indent();
				State = 737; _localctx.methods = native_member_method_declaration_list();
				State = 738; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(EParser.RESOURCE, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(EParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(EParser.AND, i);
		}
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_native_resource_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742; Match(DEFINE);
			State = 743; _localctx.name = type_identifier();
			State = 744; Match(AS);
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORABLE) {
				{
				State = 745; Match(STORABLE);
				}
			}

			State = 748; Match(NATIVE);
			State = 749; Match(RESOURCE);
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				{
				State = 750; _localctx.attrs = attribute_list();
				State = 751; Match(COMMA);
				State = 752; Match(AND);
				State = 753; Match(BINDINGS);
				}
				}
				break;
			case 2:
				{
				State = 755; Match(WITH);
				State = 756; Match(BINDINGS);
				}
				break;
			}
			State = 759; Match(COLON);
			State = 760; indent();
			State = 761; _localctx.bindings = native_category_bindings();
			State = 762; dedent();
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 763; lfp();
				State = 764; Match(AND);
				State = 765; Match(METHODS);
				State = 766; Match(COLON);
				State = 767; indent();
				State = 768; _localctx.methods = native_member_method_declaration_list();
				State = 769; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 34, RULE_native_category_bindings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(DEFINE);
			State = 774; Match(CATEGORY);
			State = 775; Match(BINDINGS);
			State = 776; Match(AS);
			State = 777; Match(COLON);
			State = 778; indent();
			State = 779; _localctx.items = native_category_binding_list(0);
			State = 780; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 783; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 791;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 785;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 786; lfp();
					State = 787; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 793;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
	 
		public Attribute_listContext() { }
		public virtual void CopyFrom(Attribute_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttributeListContext : Attribute_listContext {
		public Attribute_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public AttributeListContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}
	public partial class AttributeListItemContext : Attribute_listContext {
		public Attribute_identifier_listContext items;
		public Attribute_identifierContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode ATTRIBUTES() { return GetToken(EParser.ATTRIBUTES, 0); }
		public Attribute_identifier_listContext attribute_identifier_list() {
			return GetRuleContext<Attribute_identifier_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Attribute_identifierContext attribute_identifier() {
			return GetRuleContext<Attribute_identifierContext>(0);
		}
		public AttributeListItemContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttributeListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttributeListItem(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute_list);
		try {
			State = 804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new AttributeListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 794; Match(WITH);
				State = 795; Match(ATTRIBUTE);
				State = 796; ((AttributeListContext)_localctx).item = attribute_identifier();
				}
				break;
			case 2:
				_localctx = new AttributeListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 797; Match(WITH);
				State = 798; Match(ATTRIBUTES);
				State = 799; ((AttributeListItemContext)_localctx).items = attribute_identifier_list();
				State = 802;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 800; Match(AND);
					State = 801; ((AttributeListItemContext)_localctx).item = attribute_identifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(EParser.ABSTRACT, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(DEFINE);
			State = 807; _localctx.name = method_identifier();
			State = 808; Match(AS);
			State = 809; Match(ABSTRACT);
			State = 810; Match(METHOD);
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECEIVING) {
				{
				State = 811; Match(RECEIVING);
				State = 812; _localctx.args = full_argument_list();
				}
			}

			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 815; Match(RETURNING);
				State = 816; _localctx.typ = typedef(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(DEFINE);
			State = 820; _localctx.name = method_identifier();
			State = 821; Match(AS);
			State = 822; Match(METHOD);
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECEIVING) {
				{
				State = 823; Match(RECEIVING);
				State = 824; _localctx.args = full_argument_list();
				}
			}

			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 827; Match(RETURNING);
				State = 828; _localctx.typ = typedef(0);
				}
			}

			State = 831; Match(DOING);
			State = 832; Match(COLON);
			State = 833; indent();
			State = 834; _localctx.stmts = statement_list();
			State = 835; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Full_argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public Full_argument_listContext full_argument_list() {
			return GetRuleContext<Full_argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; Match(DEFINE);
			State = 838; _localctx.name = method_identifier();
			State = 839; Match(AS);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NATIVE) {
				{
				State = 840; Match(NATIVE);
				}
			}

			State = 843; Match(METHOD);
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECEIVING) {
				{
				State = 844; Match(RECEIVING);
				State = 845; _localctx.args = full_argument_list();
				}
			}

			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 848; Match(RETURNING);
				State = 849; _localctx.typ = category_or_any_type();
				}
			}

			State = 852; Match(DOING);
			State = 853; Match(COLON);
			State = 854; indent();
			State = 855; _localctx.stmts = native_statement_list();
			State = 856; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ITerminalNode VERIFYING() { return GetToken(EParser.VERIFYING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858; Match(DEFINE);
			State = 859; _localctx.name = Match(TEXT_LITERAL);
			State = 860; Match(AS);
			State = 861; Match(TEST);
			State = 862; Match(METHOD);
			State = 863; Match(DOING);
			State = 864; Match(COLON);
			State = 865; indent();
			State = 866; _localctx.stmts = statement_list();
			State = 867; dedent();
			State = 868; lfp();
			State = 869; Match(AND);
			State = 870; Match(VERIFYING);
			State = 877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 871; Match(COLON);
				State = 872; indent();
				State = 873; _localctx.exps = assertion_list();
				State = 874; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				State = 876; _localctx.error = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 48, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_argument_listContext : ParserRuleContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public Full_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFull_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFull_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Full_argument_listContext full_argument_list() {
		Full_argument_listContext _localctx = new Full_argument_listContext(Context, State);
		EnterRule(_localctx, 50, RULE_full_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; _localctx.items = argument_list();
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 882; Match(AND);
				State = 883; _localctx.item = argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Category_or_any_typeContext typ;
		public Variable_identifierContext name;
		public Attribute_listContext attrs;
		public Literal_expressionContext value;
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 52, RULE_typed_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; _localctx.typ = category_or_any_type();
			State = 887; _localctx.name = variable_identifier();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 888; _localctx.attrs = attribute_list();
				}
			}

			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 891; Match(EQ);
				State = 892; _localctx.value = literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommentStatementContext : StatementContext {
		public Comment_statementContext decl;
		public Comment_statementContext comment_statement() {
			return GetRuleContext<Comment_statementContext>(0);
		}
		public CommentStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCommentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCommentStatement(this);
		}
	}
	public partial class StoreStatementContext : StatementContext {
		public Store_statementContext stmt;
		public Store_statementContext store_statement() {
			return GetRuleContext<Store_statementContext>(0);
		}
		public StoreStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class FetchStatementContext : StatementContext {
		public Fetch_statementContext stmt;
		public Fetch_statementContext fetch_statement() {
			return GetRuleContext<Fetch_statementContext>(0);
		}
		public FetchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchStatement(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		public Break_statementContext stmt;
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_call_statementContext stmt;
		public Method_call_statementContext method_call_statement() {
			return GetRuleContext<Method_call_statementContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class FlushStatementContext : StatementContext {
		public Flush_statementContext stmt;
		public Flush_statementContext flush_statement() {
			return GetRuleContext<Flush_statementContext>(0);
		}
		public FlushStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 895; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 2:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 896; ((MethodCallStatementContext)_localctx).stmt = method_call_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 897; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new StoreStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 898; ((StoreStatementContext)_localctx).stmt = store_statement();
				}
				break;
			case 5:
				_localctx = new FetchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 899; ((FetchStatementContext)_localctx).stmt = fetch_statement();
				}
				break;
			case 6:
				_localctx = new FlushStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 900; ((FlushStatementContext)_localctx).stmt = flush_statement();
				}
				break;
			case 7:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 901; ((BreakStatementContext)_localctx).stmt = break_statement();
				}
				break;
			case 8:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 902; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 9:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 903; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 10:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 904; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 11:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 905; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 12:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 906; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 13:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 907; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 14:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 908; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 15:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 909; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 16:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 910; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 17:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 911; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 18:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 912; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 19:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 913; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 20:
				_localctx = new CommentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 914; ((CommentStatementContext)_localctx).decl = comment_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_statementContext : ParserRuleContext {
		public ITerminalNode FLUSH() { return GetToken(EParser.FLUSH, 0); }
		public Flush_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFlush_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFlush_statement(this);
		}
	}

	[RuleVersion(0)]
	public Flush_statementContext flush_statement() {
		Flush_statementContext _localctx = new Flush_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_flush_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917; Match(FLUSH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_statementContext : ParserRuleContext {
		public Expression_listContext to_del;
		public Expression_listContext to_add;
		public Statement_listContext stmts;
		public ITerminalNode DELETE() { return GetToken(EParser.DELETE, 0); }
		public ITerminalNode STORE() { return GetToken(EParser.STORE, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(EParser.THEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Store_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStore_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStore_statement(this);
		}
	}

	[RuleVersion(0)]
	public Store_statementContext store_statement() {
		Store_statementContext _localctx = new Store_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_store_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				{
				State = 919; Match(DELETE);
				State = 920; _localctx.to_del = expression_list();
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 921; Match(AND);
					State = 922; Match(STORE);
					State = 923; _localctx.to_add = expression_list();
					}
				}

				}
				break;
			case STORE:
				{
				State = 926; Match(STORE);
				State = 927; _localctx.to_add = expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 930; Match(THEN);
				State = 931; Match(COLON);
				State = 932; indent();
				State = 933; _localctx.stmts = statement_list();
				State = 934; dedent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_call_statementContext : ParserRuleContext {
		public Method_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call_statement; } }
	 
		public Method_call_statementContext() { }
		public virtual void CopyFrom(Method_call_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InvokeStatementContext : Method_call_statementContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvokeStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvokeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvokeStatement(this);
		}
	}
	public partial class UnresolvedWithArgsStatementContext : Method_call_statementContext {
		public Unresolved_expressionContext exp;
		public Argument_assignment_listContext args;
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(EParser.THEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public UnresolvedWithArgsStatementContext(Method_call_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedWithArgsStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedWithArgsStatement(this);
		}
	}

	[RuleVersion(0)]
	public Method_call_statementContext method_call_statement() {
		Method_call_statementContext _localctx = new Method_call_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_method_call_statement);
		int _la;
		try {
			State = 955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new UnresolvedWithArgsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 938; ((UnresolvedWithArgsStatementContext)_localctx).exp = unresolved_expression(0);
				State = 940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 939; ((UnresolvedWithArgsStatementContext)_localctx).args = argument_assignment_list();
					}
					break;
				}
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THEN) {
					{
					State = 942; Match(THEN);
					State = 945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 943; Match(WITH);
						State = 944; ((UnresolvedWithArgsStatementContext)_localctx).name = variable_identifier();
						}
					}

					State = 947; Match(COLON);
					State = 948; indent();
					State = 949; ((UnresolvedWithArgsStatementContext)_localctx).stmts = statement_list();
					State = 950; dedent();
					}
				}

				}
				break;
			case INVOKE:
				_localctx = new InvokeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 954; ((InvokeStatementContext)_localctx).exp = invocation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(WITH);
			State = 958; _localctx.stmt = assign_variable_statement();
			State = 959; Match(COMMA);
			State = 960; Match(DO);
			State = 961; Match(COLON);
			State = 962; indent();
			State = 963; _localctx.stmts = statement_list();
			State = 964; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; Match(WITH);
			State = 967; _localctx.typ = type_identifier();
			State = 968; Match(COMMA);
			State = 969; Match(DO);
			State = 970; Match(COLON);
			State = 971; indent();
			State = 972; _localctx.stmts = statement_list();
			State = 973; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; Match(SWITCH);
			State = 976; Match(ON);
			State = 977; _localctx.exp = expression(0);
			State = 978; Match(COLON);
			State = 979; indent();
			State = 980; _localctx.cases = switch_case_statement_list();
			State = 988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 981; lfp();
				State = 982; Match(OTHERWISE);
				State = 983; Match(COLON);
				State = 984; indent();
				State = 985; _localctx.stmts = statement_list();
				State = 986; dedent();
				}
				break;
			}
			State = 990; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switch_case_statement);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 992; Match(WHEN);
				State = 993; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 994; Match(COLON);
				State = 995; indent();
				State = 996; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list();
				State = 997; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 999; Match(WHEN);
				State = 1000; Match(IN);
				State = 1001; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 1002; Match(COLON);
				State = 1003; indent();
				State = 1004; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list();
				State = 1005; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; Match(FOR);
			State = 1010; Match(EACH);
			State = 1011; _localctx.name1 = variable_identifier();
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1012; Match(COMMA);
				State = 1013; _localctx.name2 = variable_identifier();
				}
			}

			State = 1016; Match(IN);
			State = 1017; _localctx.source = expression(0);
			State = 1018; Match(COLON);
			State = 1019; indent();
			State = 1020; _localctx.stmts = statement_list();
			State = 1021; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023; Match(DO);
			State = 1024; Match(COLON);
			State = 1025; indent();
			State = 1026; _localctx.stmts = statement_list();
			State = 1027; dedent();
			State = 1028; lfp();
			State = 1029; Match(WHILE);
			State = 1030; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(WHILE);
			State = 1033; _localctx.exp = expression(0);
			State = 1034; Match(COLON);
			State = 1035; indent();
			State = 1036; _localctx.stmts = statement_list();
			State = 1037; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039; Match(IF);
			State = 1040; _localctx.exp = expression(0);
			State = 1041; Match(COLON);
			State = 1042; indent();
			State = 1043; _localctx.stmts = statement_list();
			State = 1044; dedent();
			State = 1048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 1045; lfp();
				State = 1046; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 1057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 1050; lfp();
				State = 1051; Match(ELSE);
				State = 1052; Match(COLON);
				State = 1053; indent();
				State = 1054; _localctx.elseStmts = statement_list();
				State = 1055; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1060; Match(ELSE);
			State = 1061; Match(IF);
			State = 1062; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 1063; Match(COLON);
			State = 1064; indent();
			State = 1065; ((ElseIfStatementListContext)_localctx).stmts = statement_list();
			State = 1066; dedent();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1080;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 1068;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1069; lfp();
					State = 1070; Match(ELSE);
					State = 1071; Match(IF);
					State = 1072; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 1073; Match(COLON);
					State = 1074; indent();
					State = 1075; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list();
					State = 1076; dedent();
					}
					} 
				}
				State = 1082;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(EParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083; Match(RAISE);
			State = 1084; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode ALWAYS() { return GetToken(EParser.ALWAYS, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 82, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086; Match(SWITCH);
			State = 1087; Match(ON);
			State = 1088; _localctx.name = variable_identifier();
			State = 1089; Match(DOING);
			State = 1090; Match(COLON);
			State = 1091; indent();
			State = 1092; _localctx.stmts = statement_list();
			State = 1093; dedent();
			State = 1094; lfs();
			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 1095; _localctx.handlers = catch_statement_list();
				}
				break;
			}
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OTHERWISE || _la==WHEN) {
				{
				State = 1101;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OTHERWISE:
					{
					State = 1098; Match(OTHERWISE);
					}
					break;
				case WHEN:
					{
					{
					State = 1099; Match(WHEN);
					State = 1100; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1103; Match(COLON);
				State = 1104; indent();
				State = 1105; _localctx.anyStmts = statement_list();
				State = 1106; dedent();
				State = 1107; lfs();
				}
			}

			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALWAYS) {
				{
				State = 1111; Match(ALWAYS);
				State = 1112; Match(COLON);
				State = 1113; indent();
				State = 1114; _localctx.finalStmts = statement_list();
				State = 1115; dedent();
				State = 1116; lfs();
				}
			}

			State = 1120; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 84, RULE_catch_statement);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1122; Match(WHEN);
				State = 1123; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 1124; Match(COLON);
				State = 1125; indent();
				State = 1126; ((CatchAtomicStatementContext)_localctx).stmts = statement_list();
				State = 1127; dedent();
				State = 1128; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130; Match(WHEN);
				State = 1131; Match(IN);
				State = 1132; Match(LBRAK);
				State = 1133; ((CatchCollectionStatementContext)_localctx).exp = symbol_list();
				State = 1134; Match(RBRAK);
				State = 1135; Match(COLON);
				State = 1136; indent();
				State = 1137; ((CatchCollectionStatementContext)_localctx).stmts = statement_list();
				State = 1138; dedent();
				State = 1139; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(EParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 86, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 88, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145; Match(RETURN);
			State = 1147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
				{
				State = 1146; _localctx.exp = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class HasAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HasAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHasAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHasAnyExpression(this);
		}
	}
	public partial class HasExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HasExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHasExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHasExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class JsxExpressionContext : ExpressionContext {
		public Jsx_expressionContext exp;
		public Jsx_expressionContext jsx_expression() {
			return GetRuleContext<Jsx_expressionContext>(0);
		}
		public JsxExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(EParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class ReadOneExpressionContext : ExpressionContext {
		public Read_one_expressionContext exp;
		public Read_one_expressionContext read_one_expression() {
			return GetRuleContext<Read_one_expressionContext>(0);
		}
		public ReadOneExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReadOneExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReadOneExpression(this);
		}
	}
	public partial class NotHasAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotHasAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotHasAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotHasAnyExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		public Instance_expressionContext exp1;
		public Unresolved_expressionContext exp2;
		public Argument_assignment_listContext args;
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class FetchExpressionContext : ExpressionContext {
		public Fetch_expressionContext exp;
		public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public FetchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchExpression(this);
		}
	}
	public partial class NotHasExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotHasExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotHasExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotHasExpression(this);
		}
	}
	public partial class SortedExpressionContext : ExpressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}
	public partial class NotHasAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotHasAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotHasAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotHasAllExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TILDE() { return GetToken(EParser.TILDE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(EParser.EXECUTE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(EParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class IteratorExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public IteratorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIteratorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIteratorExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class ReadAllExpressionContext : ExpressionContext {
		public Read_all_expressionContext exp;
		public Read_all_expressionContext read_all_expression() {
			return GetRuleContext<Read_all_expressionContext>(0);
		}
		public ReadAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterReadAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitReadAllExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class DocumentExpressionContext : ExpressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class InvocationExpressionContext : ExpressionContext {
		public Invocation_expressionContext exp;
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public InvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class AmbiguousExpressionContext : ExpressionContext {
		public Ambiguous_expressionContext exp;
		public Ambiguous_expressionContext ambiguous_expression() {
			return GetRuleContext<Ambiguous_expressionContext>(0);
		}
		public AmbiguousExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(EParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Method_identifierContext name;
		public ITerminalNode METHOD_T() { return GetToken(EParser.METHOD_T, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class BlobExpressionContext : ExpressionContext {
		public Blob_expressionContext exp;
		public Blob_expressionContext blob_expression() {
			return GetRuleContext<Blob_expressionContext>(0);
		}
		public BlobExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlobExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlobExpression(this);
		}
	}
	public partial class FilteredListExpressionContext : ExpressionContext {
		public ExpressionContext src;
		public Filtered_list_suffixContext filtered_list_suffix() {
			return GetRuleContext<Filtered_list_suffixContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FilteredListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFilteredListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFilteredListExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : ExpressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class UnresolvedExpressionContext : ExpressionContext {
		public Unresolved_expressionContext exp;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public UnresolvedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class HasAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HasAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHasAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHasAllExpression(this);
		}
	}
	public partial class CssExpressionContext : ExpressionContext {
		public Css_expressionContext exp;
		public Css_expressionContext css_expression() {
			return GetRuleContext<Css_expressionContext>(0);
		}
		public CssExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCssExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCssExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				_localctx = new CssExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1150; ((CssExpressionContext)_localctx).exp = css_expression();
				}
				break;
			case 2:
				{
				_localctx = new JsxExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1151; ((JsxExpressionContext)_localctx).exp = jsx_expression();
				}
				break;
			case 3:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1152; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new UnresolvedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1153; ((UnresolvedExpressionContext)_localctx).exp = unresolved_expression(0);
				}
				break;
			case 5:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1156;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 1154; ((MethodCallExpressionContext)_localctx).exp1 = instance_expression(0);
					}
					break;
				case 2:
					{
					State = 1155; ((MethodCallExpressionContext)_localctx).exp2 = unresolved_expression(0);
					}
					break;
				}
				State = 1158; ((MethodCallExpressionContext)_localctx).args = argument_assignment_list();
				}
				break;
			case 6:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1160; Match(MINUS);
				State = 1161; ((MinusExpressionContext)_localctx).exp = expression(44);
				}
				break;
			case 7:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1162; Match(NOT);
				State = 1163; ((NotExpressionContext)_localctx).exp = expression(43);
				}
				break;
			case 8:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1164; Match(CODE);
				State = 1165; Match(COLON);
				State = 1166; ((CodeExpressionContext)_localctx).exp = expression(14);
				}
				break;
			case 9:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1167; Match(EXECUTE);
				State = 1168; Match(COLON);
				State = 1169; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				}
				break;
			case 10:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1170; Match(METHOD_T);
				State = 1171; Match(COLON);
				State = 1172; ((ClosureExpressionContext)_localctx).name = method_identifier();
				}
				break;
			case 11:
				{
				_localctx = new BlobExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1173; ((BlobExpressionContext)_localctx).exp = blob_expression();
				}
				break;
			case 12:
				{
				_localctx = new DocumentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1174; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 13:
				{
				_localctx = new ConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1175; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			case 14:
				{
				_localctx = new FetchExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1176; ((FetchExpressionContext)_localctx).exp = fetch_expression();
				}
				break;
			case 15:
				{
				_localctx = new ReadAllExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1177; ((ReadAllExpressionContext)_localctx).exp = read_all_expression();
				}
				break;
			case 16:
				{
				_localctx = new ReadOneExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1178; ((ReadOneExpressionContext)_localctx).exp = read_one_expression();
				}
				break;
			case 17:
				{
				_localctx = new SortedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1179; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 18:
				{
				_localctx = new AmbiguousExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1180; ((AmbiguousExpressionContext)_localctx).exp = ambiguous_expression();
				}
				break;
			case 19:
				{
				_localctx = new InvocationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1181; ((InvocationExpressionContext)_localctx).exp = invocation_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1184;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 1185; multiply();
						State = 1186; ((MultiplyExpressionContext)_localctx).right = expression(43);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1188;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 1189; divide();
						State = 1190; ((DivideExpressionContext)_localctx).right = expression(42);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1192;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1193; modulo();
						State = 1194; ((ModuloExpressionContext)_localctx).right = expression(41);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1196;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 1197; idivide();
						State = 1198; ((IntDivideExpressionContext)_localctx).right = expression(40);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1200;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 1201;
						((AddExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1202; ((AddExpressionContext)_localctx).right = expression(39);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1203;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1204; Match(LT);
						State = 1205; ((LessThanExpressionContext)_localctx).right = expression(37);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1206;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 1207; Match(LTE);
						State = 1208; ((LessThanOrEqualExpressionContext)_localctx).right = expression(36);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1209;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 1210; Match(GT);
						State = 1211; ((GreaterThanExpressionContext)_localctx).right = expression(35);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1212;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1213; Match(GTE);
						State = 1214; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(34);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1215;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1216; Match(EQ);
						State = 1217; ((EqualsExpressionContext)_localctx).right = expression(31);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1218;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1219; Match(LTGT);
						State = 1220; ((NotEqualsExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1221;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1222; Match(TILDE);
						State = 1223; ((RoughlyEqualsExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 13:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1224;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1225; Match(CONTAINS);
						State = 1226; ((ContainsExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 14:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1227;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1228; Match(IN);
						State = 1229; ((InExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 15:
						{
						_localctx = new HasExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((HasExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1230;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1231; Match(HAS);
						State = 1232; ((HasExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 16:
						{
						_localctx = new HasAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((HasAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1233;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1234; Match(HAS);
						State = 1235; Match(ALL);
						State = 1236; ((HasAllExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 17:
						{
						_localctx = new HasAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((HasAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1237;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1238; Match(HAS);
						State = 1239; Match(ANY);
						State = 1240; ((HasAnyExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 18:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1241;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1242; Match(NOT);
						State = 1243; Match(CONTAINS);
						State = 1244; ((NotContainsExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 19:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1245;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1246; Match(NOT);
						State = 1247; Match(IN);
						State = 1248; ((NotInExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 20:
						{
						_localctx = new NotHasExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotHasExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1249;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1250; Match(NOT);
						State = 1251; Match(HAS);
						State = 1252; ((NotHasExpressionContext)_localctx).right = expression(21);
						}
						break;
					case 21:
						{
						_localctx = new NotHasAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotHasAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1253;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1254; Match(NOT);
						State = 1255; Match(HAS);
						State = 1256; Match(ALL);
						State = 1257; ((NotHasAllExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 22:
						{
						_localctx = new NotHasAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotHasAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1258;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1259; Match(NOT);
						State = 1260; Match(HAS);
						State = 1261; Match(ANY);
						State = 1262; ((NotHasAnyExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 23:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1263;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1264; Match(OR);
						State = 1265; ((OrExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 24:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1266;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1267; Match(AND);
						State = 1268; ((AndExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 25:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1269;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1270; Match(IF);
						State = 1271; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 1272; Match(ELSE);
						State = 1273; ((TernaryExpressionContext)_localctx).ifFalse = expression(16);
						}
						break;
					case 26:
						{
						_localctx = new IteratorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IteratorExpressionContext)_localctx).exp = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1275;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1276; Match(FOR);
						State = 1277; Match(EACH);
						State = 1278; ((IteratorExpressionContext)_localctx).name = variable_identifier();
						State = 1279; Match(IN);
						State = 1280; ((IteratorExpressionContext)_localctx).source = expression(2);
						}
						break;
					case 27:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1282;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 1283; Match(AS);
						State = 1284; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					case 28:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1285;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1286; Match(IS);
						State = 1287; Match(NOT);
						State = 1288; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 29:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1289;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1290; Match(IS);
						State = 1291; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 30:
						{
						_localctx = new FilteredListExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FilteredListExpressionContext)_localctx).src = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1292;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1293; filtered_list_suffix();
						}
						break;
					}
					} 
				}
				State = 1298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_expression; } }
	 
		public Unresolved_expressionContext() { }
		public virtual void CopyFrom(Unresolved_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnresolvedSelectorContext : Unresolved_expressionContext {
		public Unresolved_expressionContext parent;
		public Unresolved_selectorContext selector;
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public Unresolved_selectorContext unresolved_selector() {
			return GetRuleContext<Unresolved_selectorContext>(0);
		}
		public UnresolvedSelectorContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedSelector(this);
		}
	}
	public partial class UnresolvedIdentifierContext : Unresolved_expressionContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnresolvedIdentifierContext(Unresolved_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolvedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolvedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_expressionContext unresolved_expression() {
		return unresolved_expression(0);
	}

	private Unresolved_expressionContext unresolved_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Unresolved_expressionContext _localctx = new Unresolved_expressionContext(Context, _parentState);
		Unresolved_expressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_unresolved_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnresolvedIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1300; ((UnresolvedIdentifierContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1306;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnresolvedSelectorContext(new Unresolved_expressionContext(_parentctx, _parentState));
					((UnresolvedSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_unresolved_expression);
					State = 1302;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1303; ((UnresolvedSelectorContext)_localctx).selector = unresolved_selector();
					}
					} 
				}
				State = 1308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unresolved_selectorContext : ParserRuleContext {
		public IdentifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Unresolved_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unresolved_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUnresolved_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUnresolved_selector(this);
		}
	}

	[RuleVersion(0)]
	public Unresolved_selectorContext unresolved_selector() {
		Unresolved_selectorContext _localctx = new Unresolved_selectorContext(Context, State);
		EnterRule(_localctx, 94, RULE_unresolved_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
			State = 1310; Match(DOT);
			State = 1311; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ITerminalNode INVOKE() { return GetToken(EParser.INVOKE, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Invocation_trailerContext invocation_trailer() {
			return GetRuleContext<Invocation_trailerContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Invocation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_expressionContext invocation_expression() {
		Invocation_expressionContext _localctx = new Invocation_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_invocation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(INVOKE);
			State = 1314; Match(COLON);
			State = 1315; _localctx.name = variable_identifier();
			State = 1316; invocation_trailer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_trailerContext : ParserRuleContext {
		public Invocation_trailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_trailer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterInvocation_trailer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitInvocation_trailer(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_trailerContext invocation_trailer() {
		Invocation_trailerContext _localctx = new Invocation_trailerContext(Context, State);
		EnterRule(_localctx, 98, RULE_invocation_trailer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			if (!(this.willBe(EParser.LF))) throw new FailedPredicateException(this, "$parser.willBe(EParser.LF)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1321; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 1323;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1324; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 1329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 102, RULE_instance_selector);
		try {
			State = 1343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1330;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1331; Match(DOT);
				State = 1332; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1333;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1334; Match(LBRAK);
				State = 1335; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1336; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1338;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1339; Match(LBRAK);
				State = 1340; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1341; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345; Match(DOCUMENT);
			State = 1348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 1346; Match(FROM);
				State = 1347; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Blob_expressionContext : ParserRuleContext {
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Blob_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blob_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlob_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlob_expression(this);
		}
	}

	[RuleVersion(0)]
	public Blob_expressionContext blob_expression() {
		Blob_expressionContext _localctx = new Blob_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_blob_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(BLOB);
			State = 1351; Match(FROM);
			State = 1352; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
	 
		public Constructor_expressionContext() { }
		public virtual void CopyFrom(Constructor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext copyExp;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorFrom(this);
		}
	}
	public partial class ConstructorNoFromContext : Constructor_expressionContext {
		public Mutable_category_typeContext typ;
		public With_argument_assignment_listContext args;
		public Argument_assignmentContext arg;
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ConstructorNoFromContext(Constructor_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConstructorNoFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConstructorNoFrom(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_constructor_expression);
		int _la;
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new ConstructorFromContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354; ((ConstructorFromContext)_localctx).typ = mutable_category_type();
				State = 1355; Match(FROM);
				State = 1356; ((ConstructorFromContext)_localctx).copyExp = expression(0);
				State = 1365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 1358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1357; Match(COMMA);
						}
					}

					State = 1360; ((ConstructorFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1363;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						State = 1361; Match(AND);
						State = 1362; ((ConstructorFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ConstructorNoFromContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1367; ((ConstructorNoFromContext)_localctx).typ = mutable_category_type();
				State = 1373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 1368; ((ConstructorNoFromContext)_localctx).args = with_argument_assignment_list(0);
					State = 1371;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
					case 1:
						{
						State = 1369; Match(AND);
						State = 1370; ((ConstructorNoFromContext)_localctx).arg = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 110, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377; Match(WRITE);
			State = 1378; _localctx.what = expression(0);
			State = 1379; Match(TO);
			State = 1380; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ambiguous_expressionContext : ParserRuleContext {
		public Unresolved_expressionContext method;
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public Unresolved_expressionContext unresolved_expression() {
			return GetRuleContext<Unresolved_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ambiguous_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguous_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAmbiguous_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAmbiguous_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ambiguous_expressionContext ambiguous_expression() {
		Ambiguous_expressionContext _localctx = new Ambiguous_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_ambiguous_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382; _localctx.method = unresolved_expression(0);
			State = 1383; Match(MINUS);
			State = 1384; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filtered_list_suffixContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext predicate;
		public ITerminalNode FILTERED() { return GetToken(EParser.FILTERED, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Filtered_list_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filtered_list_suffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFiltered_list_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFiltered_list_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Filtered_list_suffixContext filtered_list_suffix() {
		Filtered_list_suffixContext _localctx = new Filtered_list_suffixContext(Context, State);
		EnterRule(_localctx, 114, RULE_filtered_list_suffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386; Match(FILTERED);
			State = 1387; Match(WITH);
			State = 1388; _localctx.name = variable_identifier();
			State = 1389; Match(WHERE);
			State = 1390; _localctx.predicate = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
	 
		public Fetch_expressionContext() { }
		public virtual void CopyFrom(Fetch_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchOneContext : Fetch_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext predicate;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchOneContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchOne(this);
		}
	}
	public partial class FetchManyContext : Fetch_expressionContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext xstart;
		public ExpressionContext xstop;
		public ExpressionContext predicate;
		public Order_by_listContext orderby;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode ORDER() { return GetToken(EParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(EParser.BY, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ITerminalNode ROWS() { return GetToken(EParser.ROWS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Order_by_listContext order_by_list() {
			return GetRuleContext<Order_by_listContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchManyContext(Fetch_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchMany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchMany(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_fetch_expression);
		int _la;
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new FetchOneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1392; Match(FETCH);
				State = 1393; Match(ONE);
				{
				State = 1395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1394; ((FetchOneContext)_localctx).typ = mutable_category_type();
					}
				}

				}
				State = 1397; Match(WHERE);
				State = 1398; ((FetchOneContext)_localctx).predicate = expression(0);
				}
				break;
			case 2:
				_localctx = new FetchManyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1399; Match(FETCH);
				State = 1417;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					{
					State = 1400; Match(ALL);
					State = 1402;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						State = 1401; ((FetchManyContext)_localctx).typ = mutable_category_type();
						}
						break;
					}
					}
					}
					break;
				case MUTABLE:
				case TYPE_IDENTIFIER:
					{
					{
					State = 1404; ((FetchManyContext)_localctx).typ = mutable_category_type();
					State = 1406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ROWS) {
						{
						State = 1405; Match(ROWS);
						}
					}

					State = 1408; ((FetchManyContext)_localctx).xstart = expression(0);
					State = 1409; Match(TO);
					State = 1410; ((FetchManyContext)_localctx).xstop = expression(0);
					}
					}
					break;
				case ROWS:
					{
					{
					State = 1412; Match(ROWS);
					State = 1413; ((FetchManyContext)_localctx).xstart = expression(0);
					State = 1414; Match(TO);
					State = 1415; ((FetchManyContext)_localctx).xstop = expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 1419; Match(WHERE);
					State = 1420; ((FetchManyContext)_localctx).predicate = expression(0);
					}
					break;
				}
				State = 1426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 1423; Match(ORDER);
					State = 1424; Match(BY);
					State = 1425; ((FetchManyContext)_localctx).orderby = order_by_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_statementContext : ParserRuleContext {
		public Fetch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_statement; } }
	 
		public Fetch_statementContext() { }
		public virtual void CopyFrom(Fetch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FetchManyAsyncContext : Fetch_statementContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext xstart;
		public ExpressionContext xstop;
		public ExpressionContext predicate;
		public Order_by_listContext orderby;
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode THEN() { return GetToken(EParser.THEN, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode ORDER() { return GetToken(EParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(EParser.BY, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ITerminalNode ROWS() { return GetToken(EParser.ROWS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Order_by_listContext order_by_list() {
			return GetRuleContext<Order_by_listContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchManyAsyncContext(Fetch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchManyAsync(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchManyAsync(this);
		}
	}
	public partial class FetchOneAsyncContext : Fetch_statementContext {
		public Mutable_category_typeContext typ;
		public ExpressionContext predicate;
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode THEN() { return GetToken(EParser.THEN, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Mutable_category_typeContext mutable_category_type() {
			return GetRuleContext<Mutable_category_typeContext>(0);
		}
		public FetchOneAsyncContext(Fetch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFetchOneAsync(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFetchOneAsync(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_statementContext fetch_statement() {
		Fetch_statementContext _localctx = new Fetch_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_fetch_statement);
		int _la;
		try {
			State = 1482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				_localctx = new FetchOneAsyncContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1430; Match(FETCH);
				State = 1431; Match(ONE);
				{
				State = 1433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
					{
					State = 1432; ((FetchOneAsyncContext)_localctx).typ = mutable_category_type();
					}
				}

				}
				State = 1435; Match(WHERE);
				State = 1436; ((FetchOneAsyncContext)_localctx).predicate = expression(0);
				State = 1437; Match(THEN);
				State = 1438; Match(WITH);
				State = 1439; ((FetchOneAsyncContext)_localctx).name = variable_identifier();
				State = 1440; Match(COLON);
				State = 1441; indent();
				State = 1442; ((FetchOneAsyncContext)_localctx).stmts = statement_list();
				State = 1443; dedent();
				}
				break;
			case 2:
				_localctx = new FetchManyAsyncContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1445; Match(FETCH);
				State = 1463;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					{
					State = 1446; Match(ALL);
					State = 1448;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MUTABLE || _la==TYPE_IDENTIFIER) {
						{
						State = 1447; ((FetchManyAsyncContext)_localctx).typ = mutable_category_type();
						}
					}

					}
					}
					break;
				case MUTABLE:
				case TYPE_IDENTIFIER:
					{
					{
					State = 1450; ((FetchManyAsyncContext)_localctx).typ = mutable_category_type();
					State = 1452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ROWS) {
						{
						State = 1451; Match(ROWS);
						}
					}

					State = 1454; ((FetchManyAsyncContext)_localctx).xstart = expression(0);
					State = 1455; Match(TO);
					State = 1456; ((FetchManyAsyncContext)_localctx).xstop = expression(0);
					}
					}
					break;
				case ROWS:
					{
					{
					State = 1458; Match(ROWS);
					State = 1459; ((FetchManyAsyncContext)_localctx).xstart = expression(0);
					State = 1460; Match(TO);
					State = 1461; ((FetchManyAsyncContext)_localctx).xstop = expression(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1465; Match(WHERE);
					State = 1466; ((FetchManyAsyncContext)_localctx).predicate = expression(0);
					}
				}

				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1469; Match(ORDER);
					State = 1470; Match(BY);
					State = 1471; ((FetchManyAsyncContext)_localctx).orderby = order_by_list();
					}
				}

				State = 1474; Match(THEN);
				State = 1475; Match(WITH);
				State = 1476; ((FetchManyAsyncContext)_localctx).name = variable_identifier();
				State = 1477; Match(COLON);
				State = 1478; indent();
				State = 1479; ((FetchManyAsyncContext)_localctx).stmts = statement_list();
				State = 1480; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(EParser.SORTED, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484; Match(SORTED);
			State = 1486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESC) {
				{
				State = 1485; Match(DESC);
				}
			}

			State = 1488; _localctx.source = instance_expression(0);
			State = 1494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1489; Match(WITH);
				State = 1490; _localctx.key = instance_expression(0);
				State = 1491; Match(AS);
				State = 1492; key_token();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListExpressionContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListExpression(this);
		}
	}
	public partial class ArgumentAssignmentListNoExpressionContext : Argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListNoExpressionContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListNoExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListNoExpression(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_argument_assignment_list);
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				_localctx = new ArgumentAssignmentListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1496;
				if (!(this.was(EParser.WS))) throw new FailedPredicateException(this, "$parser.was(EParser.WS)");
				State = 1497; ((ArgumentAssignmentListExpressionContext)_localctx).exp = expression(0);
				State = 1503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 1498; ((ArgumentAssignmentListExpressionContext)_localctx).items = with_argument_assignment_list(0);
					State = 1501;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
					case 1:
						{
						State = 1499; Match(AND);
						State = 1500; ((ArgumentAssignmentListExpressionContext)_localctx).item = argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ArgumentAssignmentListNoExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505; ((ArgumentAssignmentListNoExpressionContext)_localctx).items = with_argument_assignment_list(0);
				State = 1508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 1506; Match(AND);
					State = 1507; ((ArgumentAssignmentListNoExpressionContext)_localctx).item = argument_assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_argument_assignment_listContext : ParserRuleContext {
		public With_argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_argument_assignment_list; } }
	 
		public With_argument_assignment_listContext() { }
		public virtual void CopyFrom(With_argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentAssignmentListContext : With_argument_assignment_listContext {
		public Argument_assignmentContext item;
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : With_argument_assignment_listContext {
		public With_argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public With_argument_assignment_listContext with_argument_assignment_list() {
			return GetRuleContext<With_argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(With_argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public With_argument_assignment_listContext with_argument_assignment_list() {
		return with_argument_assignment_list(0);
	}

	private With_argument_assignment_listContext with_argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		With_argument_assignment_listContext _localctx = new With_argument_assignment_listContext(Context, _parentState);
		With_argument_assignment_listContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_with_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentAssignmentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1513; Match(WITH);
			State = 1514; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new With_argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_with_argument_assignment_list);
					State = 1516;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1517; Match(COMMA);
					State = 1518; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public ExpressionContext exp;
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 126, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1524; _localctx.exp = expression(0);
				State = 1525; Match(AS);
				}
				break;
			}
			State = 1529; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 128, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531; _localctx.inst = assignable_instance(0);
			State = 1532; assign();
			State = 1533; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 130, RULE_child_instance);
		try {
			State = 1543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1535;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1536; Match(DOT);
				State = 1537; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1538;
				if (!(this.wasNot(EParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
				State = 1539; Match(LBRAK);
				State = 1540; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1541; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 132, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545; _localctx.items = variable_identifier_list();
			State = 1546; assign();
			State = 1547; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 134, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1549; Match(LF);
					}
					} 
				}
				State = 1554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 136, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1555; Match(LF);
				}
				}
				State = 1558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_wsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public ITerminalNode[] TAB() { return GetTokens(EParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(EParser.TAB, i);
		}
		public ITerminalNode[] WS() { return GetTokens(EParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(EParser.WS, i);
		}
		public ITerminalNode[] INDENT() { return GetTokens(EParser.INDENT); }
		public ITerminalNode INDENT(int i) {
			return GetToken(EParser.INDENT, i);
		}
		public Jsx_wsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_ws; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_ws(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_ws(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_wsContext jsx_ws() {
		Jsx_wsContext _localctx = new Jsx_wsContext(Context, State);
		EnterRule(_localctx, 138, RULE_jsx_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << LF) | (1L << TAB) | (1L << WS))) != 0)) {
				{
				{
				State = 1560;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << LF) | (1L << TAB) | (1L << WS))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(EParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 140, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1566; Match(LF);
				}
				}
				State = 1569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LF );
			State = 1571; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(EParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(EParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(EParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 142, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LF) {
				{
				{
				State = 1573; Match(LF);
				}
				}
				State = 1578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1579; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NOTHING() { return GetToken(EParser.NOTHING, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 144, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; Match(NOTHING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 146, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT || _la==DEFINE || _la==ARONDBASE_IDENTIFIER) {
				{
				State = 1583; declarations();
				}
			}

			State = 1586; lfs();
			State = 1587; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 148, RULE_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; declaration();
			State = 1595;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1590; lfp();
					State = 1591; declaration();
					}
					} 
				}
				State = 1597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public Widget_declarationContext widget_declaration() {
			return GetRuleContext<Widget_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Comment_statementContext[] comment_statement() {
			return GetRuleContexts<Comment_statementContext>();
		}
		public Comment_statementContext comment_statement(int i) {
			return GetRuleContext<Comment_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Annotation_constructorContext[] annotation_constructor() {
			return GetRuleContexts<Annotation_constructorContext>();
		}
		public Annotation_constructorContext annotation_constructor(int i) {
			return GetRuleContext<Annotation_constructorContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 1598; comment_statement();
				State = 1599; lfp();
				}
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARONDBASE_IDENTIFIER) {
				{
				{
				State = 1606; annotation_constructor();
				State = 1607; lfp();
				}
				}
				State = 1613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 1614; attribute_declaration();
				}
				break;
			case 2:
				{
				State = 1615; category_declaration();
				}
				break;
			case 3:
				{
				State = 1616; resource_declaration();
				}
				break;
			case 4:
				{
				State = 1617; enum_declaration();
				}
				break;
			case 5:
				{
				State = 1618; widget_declaration();
				}
				break;
			case 6:
				{
				State = 1619; method_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_constructorContext : ParserRuleContext {
		public Annotation_identifierContext name;
		public Literal_expressionContext exp;
		public Annotation_identifierContext annotation_identifier() {
			return GetRuleContext<Annotation_identifierContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Annotation_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_constructorContext annotation_constructor() {
		Annotation_constructorContext _localctx = new Annotation_constructorContext(Context, State);
		EnterRule(_localctx, 152, RULE_annotation_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622; _localctx.name = annotation_identifier();
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 1623; Match(LPAR);
				State = 1624; _localctx.exp = literal_expression();
				State = 1625; Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_identifierContext : ParserRuleContext {
		public ITerminalNode ARONDBASE_IDENTIFIER() { return GetToken(EParser.ARONDBASE_IDENTIFIER, 0); }
		public Annotation_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_identifierContext annotation_identifier() {
		Annotation_identifierContext _localctx = new Annotation_identifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_annotation_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629; Match(ARONDBASE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 156, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_enum_declaration);
		try {
			State = 1635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1633; enum_category_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1634; enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbolContext[] native_symbol() {
			return GetRuleContexts<Native_symbolContext>();
		}
		public Native_symbolContext native_symbol(int i) {
			return GetRuleContext<Native_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, State);
		EnterRule(_localctx, 160, RULE_native_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637; native_symbol();
			State = 1643;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1638; lfp();
					State = 1639; native_symbol();
					}
					} 
				}
				State = 1645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbolContext[] category_symbol() {
			return GetRuleContexts<Category_symbolContext>();
		}
		public Category_symbolContext category_symbol(int i) {
			return GetRuleContext<Category_symbolContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, State);
		EnterRule(_localctx, 162, RULE_category_symbol_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; category_symbol();
			State = 1652;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1647; lfp();
					State = 1648; category_symbol();
					}
					} 
				}
				State = 1654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_identifierContext[] symbol_identifier() {
			return GetRuleContexts<Symbol_identifierContext>();
		}
		public Symbol_identifierContext symbol_identifier(int i) {
			return GetRuleContext<Symbol_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbol_list(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		Symbol_listContext _localctx = new Symbol_listContext(Context, State);
		EnterRule(_localctx, 164, RULE_symbol_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; symbol_identifier();
			State = 1660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1656; Match(COMMA);
				State = 1657; symbol_identifier();
				}
				}
				State = 1662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 166, RULE_attribute_constraint);
		try {
			State = 1673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1663; Match(IN);
				State = 1664; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1665; Match(IN);
				State = 1666; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1667; Match(IN);
				State = 1668; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1669; Match(MATCHING);
				State = 1670; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1671; Match(MATCHING);
				State = 1672; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 168, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 1675; Match(MUTABLE);
				}
			}

			State = 1678; Match(LBRAK);
			State = 1680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
				{
				State = 1679; expression_list();
				}
			}

			State = 1682; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 170, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 1684; Match(MUTABLE);
				}
			}

			State = 1687; Match(LT);
			State = 1689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
				{
				State = 1688; expression_list();
				}
			}

			State = 1691; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 172, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693; expression(0);
			State = 1698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1694; Match(COMMA);
				State = 1695; expression(0);
				}
				}
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 174, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1701; Match(LBRAK);
			State = 1702; _localctx.low = expression(0);
			State = 1703; Match(RANGE);
			State = 1704; _localctx.high = expression(0);
			State = 1705; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IteratorTypeContext : TypedefContext {
		public TypedefContext i;
		public ITerminalNode ITERATOR() { return GetToken(EParser.ITERATOR, 0); }
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public IteratorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIteratorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIteratorType(this);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LTCOLONGT() { return GetToken(EParser.LTCOLONGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class CursorTypeContext : TypedefContext {
		public TypedefContext c;
		public ITerminalNode CURSOR() { return GetToken(EParser.CURSOR, 0); }
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CursorTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCursorType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCursorType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 176;
		EnterRecursionRule(_localctx, 176, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case HTML:
			case TYPE_IDENTIFIER:
				{
				_localctx = new PrimaryTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1708; ((PrimaryTypeContext)_localctx).p = primary_type();
				}
				break;
			case CURSOR:
				{
				_localctx = new CursorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1709; Match(CURSOR);
				State = 1710; Match(LT);
				State = 1711; ((CursorTypeContext)_localctx).c = typedef(0);
				State = 1712; Match(GT);
				}
				break;
			case ITERATOR:
				{
				_localctx = new IteratorTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1714; Match(ITERATOR);
				State = 1715; Match(LT);
				State = 1716; ((IteratorTypeContext)_localctx).i = typedef(0);
				State = 1717; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1728;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1721;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1722; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1723;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1724; Match(LBRAK);
						State = 1725; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1726;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1727; Match(LTCOLONGT);
						}
						break;
					}
					} 
				}
				State = 1732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 178, RULE_primary_type);
		try {
			State = 1735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case HTML:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1733; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1734; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class HtmlTypeContext : Native_typeContext {
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public HtmlTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHtmlType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHtmlType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}
	public partial class DocumentTypeContext : Native_typeContext {
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public DocumentTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocumentType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class VersionTypeContext : Native_typeContext {
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public VersionTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVersionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVersionType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class ImageTypeContext : Native_typeContext {
		public ITerminalNode IMAGE() { return GetToken(EParser.IMAGE, 0); }
		public ImageTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterImageType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitImageType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class BlobTypeContext : Native_typeContext {
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public BlobTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBlobType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBlobType(this);
		}
	}
	public partial class UUIDTypeContext : Native_typeContext {
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public UUIDTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUUIDType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUUIDType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 180, RULE_native_type);
		try {
			State = 1753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1737; Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1738; Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1739; Match(TEXT);
				}
				break;
			case IMAGE:
				_localctx = new ImageTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1740; Match(IMAGE);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1741; Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1742; Match(DECIMAL);
				}
				break;
			case DOCUMENT:
				_localctx = new DocumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1743; Match(DOCUMENT);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1744; Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1745; Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1746; Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1747; Match(PERIOD);
				}
				break;
			case VERSION:
				_localctx = new VersionTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1748; Match(VERSION);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1749; Match(CODE);
				}
				break;
			case BLOB:
				_localctx = new BlobTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1750; Match(BLOB);
				}
				break;
			case UUID:
				_localctx = new UUIDTypeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1751; Match(UUID);
				}
				break;
			case HTML:
				_localctx = new HtmlTypeContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1752; Match(HTML);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 182, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mutable_category_typeContext : ParserRuleContext {
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Mutable_category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutable_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMutable_category_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMutable_category_type(this);
		}
	}

	[RuleVersion(0)]
	public Mutable_category_typeContext mutable_category_type() {
		Mutable_category_typeContext _localctx = new Mutable_category_typeContext(Context, State);
		EnterRule(_localctx, 184, RULE_mutable_category_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 1757; Match(MUTABLE);
				}
			}

			State = 1760; category_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 186, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1762; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_category_declaration);
		try {
			State = 1767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1764; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case 2:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1765; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case 3:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1766; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Widget_declarationContext : ParserRuleContext {
		public Widget_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widget_declaration; } }
	 
		public Widget_declarationContext() { }
		public virtual void CopyFrom(Widget_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteWidgetDeclarationContext : Widget_declarationContext {
		public Concrete_widget_declarationContext decl;
		public Concrete_widget_declarationContext concrete_widget_declaration() {
			return GetRuleContext<Concrete_widget_declarationContext>(0);
		}
		public ConcreteWidgetDeclarationContext(Widget_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterConcreteWidgetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitConcreteWidgetDeclaration(this);
		}
	}
	public partial class NativeWidgetDeclarationContext : Widget_declarationContext {
		public Native_widget_declarationContext decl;
		public Native_widget_declarationContext native_widget_declaration() {
			return GetRuleContext<Native_widget_declarationContext>(0);
		}
		public NativeWidgetDeclarationContext(Widget_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNativeWidgetDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNativeWidgetDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Widget_declarationContext widget_declaration() {
		Widget_declarationContext _localctx = new Widget_declarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_widget_declaration);
		try {
			State = 1771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				_localctx = new ConcreteWidgetDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1769; ((ConcreteWidgetDeclarationContext)_localctx).decl = concrete_widget_declaration();
				}
				break;
			case 2:
				_localctx = new NativeWidgetDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1770; ((NativeWidgetDeclarationContext)_localctx).decl = native_widget_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterType_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitType_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, State);
		EnterRule(_localctx, 192, RULE_type_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773; type_identifier();
			State = 1778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1774; Match(COMMA);
				State = 1775; type_identifier();
				}
				}
				State = 1780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethod_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethod_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 194, RULE_method_identifier);
		try {
			State = 1783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1781; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1782; type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_or_keywordContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Identifier_or_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_or_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_or_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_or_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_or_keywordContext identifier_or_keyword() {
		Identifier_or_keywordContext _localctx = new Identifier_or_keywordContext(Context, State);
		EnterRule(_localctx, 196, RULE_identifier_or_keyword);
		try {
			State = 1787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1785; identifier();
				}
				break;
			case JAVA:
			case CSHARP:
			case PYTHON2:
			case PYTHON3:
			case JAVASCRIPT:
			case SWIFT:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case METHOD_T:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case ABSTRACT:
			case ALL:
			case ALWAYS:
			case AND:
			case ANY:
			case AS:
			case ASC:
			case ATTR:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case BINDINGS:
			case BREAK:
			case BY:
			case CASE:
			case CATCH:
			case CATEGORY:
			case CLASS:
			case CLOSE:
			case CONTAINS:
			case DEF:
			case DEFAULT:
			case DEFINE:
			case DELETE:
			case DESC:
			case DO:
			case DOING:
			case EACH:
			case ELSE:
			case ENUM:
			case ENUMERATED:
			case EXCEPT:
			case EXECUTE:
			case EXPECTING:
			case EXTENDS:
			case FETCH:
			case FILTERED:
			case FINALLY:
			case FLUSH:
			case FOR:
			case FROM:
			case GETTER:
			case HAS:
			case IF:
			case IN:
			case INDEX:
			case INVOKE:
			case IS:
			case MATCHING:
			case METHOD:
			case METHODS:
			case MODULO:
			case MUTABLE:
			case NATIVE:
			case NONE:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ONE:
			case OPEN:
			case OPERATOR:
			case OR:
			case ORDER:
			case OTHERWISE:
			case PASS:
			case RAISE:
			case READ:
			case RECEIVING:
			case RESOURCE:
			case RETURN:
			case RETURNING:
			case ROWS:
			case SELF:
			case SETTER:
			case SINGLETON:
			case SORTED:
			case STORABLE:
			case STORE:
			case SWITCH:
			case TEST:
			case THIS:
			case THROW:
			case TO:
			case TRY:
			case VERIFYING:
			case WIDGET:
			case WITH:
			case WHEN:
			case WHERE:
			case WHILE:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1786; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nospace_hyphen_identifier_or_keywordContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public Nospace_identifier_or_keywordContext nospace_identifier_or_keyword() {
			return GetRuleContext<Nospace_identifier_or_keywordContext>(0);
		}
		public Nospace_hyphen_identifier_or_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nospace_hyphen_identifier_or_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNospace_hyphen_identifier_or_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNospace_hyphen_identifier_or_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Nospace_hyphen_identifier_or_keywordContext nospace_hyphen_identifier_or_keyword() {
		Nospace_hyphen_identifier_or_keywordContext _localctx = new Nospace_hyphen_identifier_or_keywordContext(Context, State);
		EnterRule(_localctx, 198, RULE_nospace_hyphen_identifier_or_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			if (!(this.wasNotWhiteSpace())) throw new FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
			State = 1790; Match(MINUS);
			State = 1791; nospace_identifier_or_keyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nospace_identifier_or_keywordContext : ParserRuleContext {
		public Identifier_or_keywordContext identifier_or_keyword() {
			return GetRuleContext<Identifier_or_keywordContext>(0);
		}
		public Nospace_identifier_or_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nospace_identifier_or_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNospace_identifier_or_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNospace_identifier_or_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Nospace_identifier_or_keywordContext nospace_identifier_or_keyword() {
		Nospace_identifier_or_keywordContext _localctx = new Nospace_identifier_or_keywordContext(Context, State);
		EnterRule(_localctx, 200, RULE_nospace_identifier_or_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			if (!(this.wasNotWhiteSpace())) throw new FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
			State = 1794; identifier_or_keyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 202, RULE_identifier);
		try {
			State = 1799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1796; variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1797; type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1798; symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 204, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public Attribute_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifierContext attribute_identifier() {
		Attribute_identifierContext _localctx = new Attribute_identifierContext(Context, State);
		EnterRule(_localctx, 206, RULE_attribute_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803;
			_la = TokenStream.LA(1);
			if ( !(_la==STORABLE || _la==VARIABLE_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_any_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (SYMBOL_IDENTIFIER - 166)) | (1L << (TYPE_IDENTIFIER - 166)) | (1L << (VARIABLE_IDENTIFIER - 166)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811; argument();
			State = 1816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1812; Match(COMMA);
				State = 1813; argument();
				}
				}
				State = 1818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 216, RULE_argument);
		int _la;
		try {
			State = 1824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1819; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case 2:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUTABLE) {
					{
					State = 1820; Match(MUTABLE);
					}
				}

				State = 1823; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperator_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperator_argument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 218, RULE_operator_argument);
		try {
			State = 1828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1826; named_argument();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case ANY:
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1827; typed_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 220, RULE_named_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; variable_identifier();
			State = 1833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 1831; Match(EQ);
				State = 1832; literal_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 222, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835; code_type();
			State = 1836; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCategory_or_any_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCategory_or_any_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 224, RULE_category_or_any_type);
		try {
			State = 1840;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case TYPE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1838; typedef(0);
				}
				break;
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1839; any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 226;
		EnterRecursionRule(_localctx, 226, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1843; Match(ANY);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1853;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1851;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1845;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1846; Match(LBRAK);
						State = 1847; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1848;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1849; Match(LCURL);
						State = 1850; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1855;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declarationContext[] member_method_declaration() {
			return GetRuleContexts<Member_method_declarationContext>();
		}
		public Member_method_declarationContext member_method_declaration(int i) {
			return GetRuleContext<Member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 228, RULE_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856; member_method_declaration();
			State = 1862;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1857; lfp();
					State = 1858; member_method_declaration();
					}
					} 
				}
				State = 1864;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Comment_statementContext[] comment_statement() {
			return GetRuleContexts<Comment_statementContext>();
		}
		public Comment_statementContext comment_statement(int i) {
			return GetRuleContext<Comment_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Annotation_constructorContext[] annotation_constructor() {
			return GetRuleContexts<Annotation_constructorContext>();
		}
		public Annotation_constructorContext annotation_constructor(int i) {
			return GetRuleContext<Annotation_constructorContext>(i);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 230, RULE_member_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 1865; comment_statement();
				State = 1866; lfp();
				}
				}
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARONDBASE_IDENTIFIER) {
				{
				{
				State = 1873; annotation_constructor();
				State = 1874; lfp();
				}
				}
				State = 1880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1881; setter_method_declaration();
				}
				break;
			case 2:
				{
				State = 1882; getter_method_declaration();
				}
				break;
			case 3:
				{
				State = 1883; concrete_method_declaration();
				}
				break;
			case 4:
				{
				State = 1884; abstract_method_declaration();
				}
				break;
			case 5:
				{
				State = 1885; operator_method_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declarationContext[] native_member_method_declaration() {
			return GetRuleContexts<Native_member_method_declarationContext>();
		}
		public Native_member_method_declarationContext native_member_method_declaration(int i) {
			return GetRuleContext<Native_member_method_declarationContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, State);
		EnterRule(_localctx, 232, RULE_native_member_method_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888; native_member_method_declaration();
			State = 1894;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1889; lfp();
					State = 1890; native_member_method_declaration();
					}
					} 
				}
				State = 1896;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Native_getter_declarationContext native_getter_declaration() {
			return GetRuleContext<Native_getter_declarationContext>(0);
		}
		public Native_setter_declarationContext native_setter_declaration() {
			return GetRuleContext<Native_setter_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 234, RULE_native_member_method_declaration);
		try {
			State = 1900;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1897; native_getter_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1898; native_setter_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1899; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 236, RULE_native_category_binding);
		try {
			State = 1912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1902; Match(JAVA);
				State = 1903; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904; Match(CSHARP);
				State = 1905; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1906; Match(PYTHON2);
				State = 1907; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1908; Match(PYTHON3);
				State = 1909; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1910; Match(JAVASCRIPT);
				State = 1911; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 238, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; identifier();
			State = 1916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1915; python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Python_identifierContext[] python_identifier() {
			return GetRuleContexts<Python_identifierContext>();
		}
		public Python_identifierContext python_identifier(int i) {
			return GetRuleContext<Python_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 240, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918; Match(FROM);
			State = 1919; module_token();
			State = 1920; Match(COLON);
			State = 1921; python_identifier();
			State = 1926;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1922; Match(DOT);
					State = 1923; python_identifier();
					}
					} 
				}
				State = 1928;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 242, RULE_javascript_category_binding);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1929; javascript_identifier();
			State = 1934;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1930; Match(DOT);
					State = 1931; javascript_identifier();
					}
					} 
				}
				State = 1936;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			State = 1938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1937; javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(EParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(EParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 244, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940; Match(FROM);
			State = 1941; module_token();
			State = 1942; Match(COLON);
			State = 1944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SLASH) {
				{
				State = 1943; Match(SLASH);
				}
			}

			State = 1946; javascript_identifier();
			State = 1951;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1947; Match(SLASH);
					State = 1948; javascript_identifier();
					}
					} 
				}
				State = 1953;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			State = 1956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1954; Match(DOT);
				State = 1955; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, State);
		EnterRule(_localctx, 246, RULE_variable_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; variable_identifier();
			State = 1963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1959; Match(COMMA);
				State = 1960; variable_identifier();
				}
				}
				State = 1965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_identifier_listContext : ParserRuleContext {
		public Attribute_identifierContext[] attribute_identifier() {
			return GetRuleContexts<Attribute_identifierContext>();
		}
		public Attribute_identifierContext attribute_identifier(int i) {
			return GetRuleContext<Attribute_identifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Attribute_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAttribute_identifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAttribute_identifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_identifier_listContext attribute_identifier_list() {
		Attribute_identifier_listContext _localctx = new Attribute_identifier_listContext(Context, State);
		EnterRule(_localctx, 248, RULE_attribute_identifier_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966; attribute_identifier();
			State = 1971;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1967; Match(COMMA);
					State = 1968; attribute_identifier();
					}
					} 
				}
				State = 1973;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 250, RULE_method_declaration);
		try {
			State = 1978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1974; abstract_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975; concrete_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1976; native_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1977; test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_statementContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(EParser.COMMENT, 0); }
		public Comment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterComment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitComment_statement(this);
		}
	}

	[RuleVersion(0)]
	public Comment_statementContext comment_statement() {
		Comment_statementContext _localctx = new Comment_statementContext(Context, State);
		EnterRule(_localctx, 252, RULE_comment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statementContext[] native_statement() {
			return GetRuleContexts<Native_statementContext>();
		}
		public Native_statementContext native_statement(int i) {
			return GetRuleContext<Native_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNative_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNative_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, State);
		EnterRule(_localctx, 254, RULE_native_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982; native_statement();
			State = 1988;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1983; lfp();
					State = 1984; native_statement();
					}
					} 
				}
				State = 1990;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 256, RULE_native_statement);
		try {
			State = 2001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1991; Match(JAVA);
				State = 1992; java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993; Match(CSHARP);
				State = 1994; csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1995; Match(PYTHON2);
				State = 1996; python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1997; Match(PYTHON3);
				State = 1998; python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1999; Match(JAVASCRIPT);
				State = 2000; javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 258, RULE_python_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003; python_statement();
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 2004; Match(SEMI);
				}
			}

			State = 2008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2007; python_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 260, RULE_javascript_native_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010; javascript_statement();
			State = 2012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 2011; Match(SEMI);
				}
			}

			State = 2015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2014; javascript_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 262, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017; statement();
			State = 2023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2018; lfp();
					State = 2019; statement();
					}
					} 
				}
				State = 2025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public AssertionContext[] assertion() {
			return GetRuleContexts<AssertionContext>();
		}
		public AssertionContext assertion(int i) {
			return GetRuleContext<AssertionContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssertion_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssertion_list(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		Assertion_listContext _localctx = new Assertion_listContext(Context, State);
		EnterRule(_localctx, 264, RULE_assertion_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026; assertion();
			State = 2032;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2027; lfp();
					State = 2028; assertion();
					}
					} 
				}
				State = 2034;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statementContext[] switch_case_statement() {
			return GetRuleContexts<Switch_case_statementContext>();
		}
		public Switch_case_statementContext switch_case_statement(int i) {
			return GetRuleContext<Switch_case_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSwitch_case_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSwitch_case_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, State);
		EnterRule(_localctx, 266, RULE_switch_case_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2035; switch_case_statement();
			State = 2041;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2036; lfp();
					State = 2037; switch_case_statement();
					}
					} 
				}
				State = 2043;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statementContext[] catch_statement() {
			return GetRuleContexts<Catch_statementContext>();
		}
		public Catch_statementContext catch_statement(int i) {
			return GetRuleContext<Catch_statementContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCatch_statement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCatch_statement_list(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, State);
		EnterRule(_localctx, 268, RULE_catch_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044; catch_statement();
			State = 2050;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2045; lfp();
					State = 2046; catch_statement();
					}
					} 
				}
				State = 2052;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(EParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 270, RULE_literal_collection);
		try {
			State = 2067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053; Match(LBRAK);
				State = 2054; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 2055; Match(RANGE);
				State = 2056; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 2057; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2059; Match(LBRAK);
				State = 2060; literal_list_literal();
				State = 2061; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2063; Match(LT);
				State = 2064; literal_list_literal();
				State = 2065; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(EParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(EParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class VersionLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode VERSION_LITERAL() { return GetToken(EParser.VERSION_LITERAL, 0); }
		public VersionLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterVersionLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitVersionLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(EParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class UUIDLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode UUID_LITERAL() { return GetToken(EParser.UUID_LITERAL, 0); }
		public UUIDLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterUUIDLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitUUIDLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(EParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(EParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(EParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(EParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 272, RULE_atomic_literal);
		try {
			State = 2084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2069; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2070; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2071; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2072; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2073; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2074; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2075; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2076; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2077; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2078; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2079; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2080; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case VERSION_LITERAL:
				_localctx = new VersionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2081; ((VersionLiteralContext)_localctx).t = Match(VERSION_LITERAL);
				}
				break;
			case UUID_LITERAL:
				_localctx = new UUIDLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2082; ((UUIDLiteralContext)_localctx).t = Match(UUID_LITERAL);
				}
				break;
			case NOTHING:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2083; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteral_list_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteral_list_literal(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, State);
		EnterRule(_localctx, 274, RULE_literal_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086; atomic_literal();
			State = 2091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2087; Match(COMMA);
				State = 2088; atomic_literal();
				}
				}
				State = 2093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 276, RULE_selectable_expression);
		try {
			State = 2098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2094; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2095; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2096; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2097; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 278, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100;
			_la = TokenStream.LA(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 280, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2102; Match(LPAR);
			State = 2103; expression(0);
			State = 2104; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expression(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 282, RULE_literal_expression);
		try {
			State = 2108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case UUID_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
			case VERSION_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2106; atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
			case LTCOLONGT:
			case MUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2107; collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public Document_literalContext document_literal() {
			return GetRuleContext<Document_literalContext>(0);
		}
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCollection_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCollection_literal(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 284, RULE_collection_literal);
		try {
			State = 2116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2110; range_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2111; list_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2112; set_literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2113; dict_literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2114; document_literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2115; tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 286, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 2118; Match(MUTABLE);
				}
			}

			State = 2121; Match(LPAR);
			State = 2123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
				{
				State = 2122; expression_tuple();
				}
			}

			State = 2125; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public ITerminalNode LTCOLONGT() { return GetToken(EParser.LTCOLONGT, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 288, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUTABLE) {
				{
				State = 2127; Match(MUTABLE);
				}
			}

			State = 2138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				{
				State = 2130; Match(LT);
				State = 2131; dict_entry_list();
				State = 2132; Match(GT);
				}
				}
				break;
			case 2:
				{
				State = 2134; Match(LTCOLONGT);
				}
				break;
			case 3:
				{
				{
				State = 2135; Match(LT);
				State = 2136; Match(COLON);
				State = 2137; Match(GT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_literalContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Document_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDocument_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDocument_literal(this);
		}
	}

	[RuleVersion(0)]
	public Document_literalContext document_literal() {
		Document_literalContext _localctx = new Document_literalContext(Context, State);
		EnterRule(_localctx, 290, RULE_document_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2140; Match(LCURL);
			State = 2142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (SYMBOL_IDENTIFIER - 166)) | (1L << (TYPE_IDENTIFIER - 166)) | (1L << (VARIABLE_IDENTIFIER - 166)) | (1L << (TEXT_LITERAL - 166)))) != 0)) {
				{
				State = 2141; dict_entry_list();
				}
			}

			State = 2144; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterExpression_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitExpression_tuple(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, State);
		EnterRule(_localctx, 292, RULE_expression_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146; expression(0);
			State = 2147; Match(COMMA);
			State = 2156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
				{
				State = 2148; expression(0);
				State = 2153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2149; Match(COMMA);
					State = 2150; expression(0);
					}
					}
					State = 2155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entryContext[] dict_entry() {
			return GetRuleContexts<Dict_entryContext>();
		}
		public Dict_entryContext dict_entry(int i) {
			return GetRuleContext<Dict_entryContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_entry_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_entry_list(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, State);
		EnterRule(_localctx, 294, RULE_dict_entry_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2158; dict_entry();
			State = 2163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2159; Match(COMMA);
				State = 2160; dict_entry();
				}
				}
				State = 2165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public Dict_keyContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public Dict_keyContext dict_key() {
			return GetRuleContext<Dict_keyContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 296, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2166; _localctx.key = dict_key();
			State = 2167; Match(COLON);
			State = 2168; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_keyContext : ParserRuleContext {
		public Dict_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_key; } }
	 
		public Dict_keyContext() { }
		public virtual void CopyFrom(Dict_keyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DictKeyIdentifierContext : Dict_keyContext {
		public Any_identifierContext name;
		public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public DictKeyIdentifierContext(Dict_keyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictKeyIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictKeyIdentifier(this);
		}
	}
	public partial class DictKeyTextContext : Dict_keyContext {
		public IToken name;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public DictKeyTextContext(Dict_keyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDictKeyText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDictKeyText(this);
		}
	}

	[RuleVersion(0)]
	public Dict_keyContext dict_key() {
		Dict_keyContext _localctx = new Dict_keyContext(Context, State);
		EnterRule(_localctx, 298, RULE_dict_key);
		try {
			State = 2172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new DictKeyIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2170; ((DictKeyIdentifierContext)_localctx).name = any_identifier();
				}
				break;
			case TEXT_LITERAL:
				_localctx = new DictKeyTextContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2171; ((DictKeyTextContext)_localctx).name = Match(TEXT_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 300, RULE_slice_arguments);
		try {
			State = 2183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2174; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 2175; Match(COLON);
				State = 2176; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2178; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 2179; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2181; Match(COLON);
				State = 2182; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 302, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2185; variable_identifier();
			State = 2186; assign();
			State = 2187; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 304;
		EnterRecursionRule(_localctx, 304, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2190; variable_identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 2192;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2193; child_instance();
					}
					} 
				}
				State = 2198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_is_expression);
		try {
			State = 2203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2199;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 2200; Match(VARIABLE_IDENTIFIER);
				State = 2201; category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2202; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_all_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_all_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_all_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRead_all_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRead_all_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_all_expressionContext read_all_expression() {
		Read_all_expressionContext _localctx = new Read_all_expressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_read_all_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2205; Match(READ);
			State = 2206; Match(ALL);
			State = 2207; Match(FROM);
			State = 2208; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_one_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_one_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_one_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterRead_one_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitRead_one_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_one_expressionContext read_one_expression() {
		Read_one_expressionContext _localctx = new Read_one_expressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_read_one_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210; Match(READ);
			State = 2211; Match(ONE);
			State = 2212; Match(FROM);
			State = 2213; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_listContext : ParserRuleContext {
		public Order_byContext[] order_by() {
			return GetRuleContexts<Order_byContext>();
		}
		public Order_byContext order_by(int i) {
			return GetRuleContext<Order_byContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EParser.COMMA, i);
		}
		public Order_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_listContext order_by_list() {
		Order_by_listContext _localctx = new Order_by_listContext(Context, State);
		EnterRule(_localctx, 312, RULE_order_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2215; order_by();
			State = 2220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2216; Match(COMMA);
					State = 2217; order_by();
					}
					} 
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_byContext : ParserRuleContext {
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public ITerminalNode ASC() { return GetToken(EParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public Order_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOrder_by(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOrder_by(this);
		}
	}

	[RuleVersion(0)]
	public Order_byContext order_by() {
		Order_byContext _localctx = new Order_byContext(Context, State);
		EnterRule(_localctx, 314, RULE_order_by);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223; variable_identifier();
			State = 2228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2224; Match(DOT);
					State = 2225; variable_identifier();
					}
					} 
				}
				State = 2230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			}
			State = 2232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 2231;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(EParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 316, RULE_operator);
		try {
			State = 2240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2234; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2235; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2236; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2237; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2238; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2239; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode JAVA() { return GetToken(EParser.JAVA, 0); }
		public ITerminalNode CSHARP() { return GetToken(EParser.CSHARP, 0); }
		public ITerminalNode PYTHON2() { return GetToken(EParser.PYTHON2, 0); }
		public ITerminalNode PYTHON3() { return GetToken(EParser.PYTHON3, 0); }
		public ITerminalNode JAVASCRIPT() { return GetToken(EParser.JAVASCRIPT, 0); }
		public ITerminalNode SWIFT() { return GetToken(EParser.SWIFT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public ITerminalNode METHOD_T() { return GetToken(EParser.METHOD_T, 0); }
		public ITerminalNode CODE() { return GetToken(EParser.CODE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(EParser.DOCUMENT, 0); }
		public ITerminalNode BLOB() { return GetToken(EParser.BLOB, 0); }
		public ITerminalNode IMAGE() { return GetToken(EParser.IMAGE, 0); }
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public ITerminalNode ITERATOR() { return GetToken(EParser.ITERATOR, 0); }
		public ITerminalNode CURSOR() { return GetToken(EParser.CURSOR, 0); }
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(EParser.ABSTRACT, 0); }
		public ITerminalNode ALL() { return GetToken(EParser.ALL, 0); }
		public ITerminalNode ALWAYS() { return GetToken(EParser.ALWAYS, 0); }
		public ITerminalNode AND() { return GetToken(EParser.AND, 0); }
		public ITerminalNode ANY() { return GetToken(EParser.ANY, 0); }
		public ITerminalNode AS() { return GetToken(EParser.AS, 0); }
		public ITerminalNode ASC() { return GetToken(EParser.ASC, 0); }
		public ITerminalNode ATTR() { return GetToken(EParser.ATTR, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(EParser.ATTRIBUTE, 0); }
		public ITerminalNode ATTRIBUTES() { return GetToken(EParser.ATTRIBUTES, 0); }
		public ITerminalNode BINDINGS() { return GetToken(EParser.BINDINGS, 0); }
		public ITerminalNode BREAK() { return GetToken(EParser.BREAK, 0); }
		public ITerminalNode BY() { return GetToken(EParser.BY, 0); }
		public ITerminalNode CASE() { return GetToken(EParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(EParser.CATCH, 0); }
		public ITerminalNode CATEGORY() { return GetToken(EParser.CATEGORY, 0); }
		public ITerminalNode CLASS() { return GetToken(EParser.CLASS, 0); }
		public ITerminalNode CLOSE() { return GetToken(EParser.CLOSE, 0); }
		public ITerminalNode CONTAINS() { return GetToken(EParser.CONTAINS, 0); }
		public ITerminalNode DEF() { return GetToken(EParser.DEF, 0); }
		public ITerminalNode DEFAULT() { return GetToken(EParser.DEFAULT, 0); }
		public ITerminalNode DEFINE() { return GetToken(EParser.DEFINE, 0); }
		public ITerminalNode DELETE() { return GetToken(EParser.DELETE, 0); }
		public ITerminalNode DESC() { return GetToken(EParser.DESC, 0); }
		public ITerminalNode DO() { return GetToken(EParser.DO, 0); }
		public ITerminalNode DOING() { return GetToken(EParser.DOING, 0); }
		public ITerminalNode EACH() { return GetToken(EParser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(EParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(EParser.ENUM, 0); }
		public ITerminalNode ENUMERATED() { return GetToken(EParser.ENUMERATED, 0); }
		public ITerminalNode EXCEPT() { return GetToken(EParser.EXCEPT, 0); }
		public ITerminalNode EXECUTE() { return GetToken(EParser.EXECUTE, 0); }
		public ITerminalNode EXPECTING() { return GetToken(EParser.EXPECTING, 0); }
		public ITerminalNode EXTENDS() { return GetToken(EParser.EXTENDS, 0); }
		public ITerminalNode FETCH() { return GetToken(EParser.FETCH, 0); }
		public ITerminalNode FILTERED() { return GetToken(EParser.FILTERED, 0); }
		public ITerminalNode FINALLY() { return GetToken(EParser.FINALLY, 0); }
		public ITerminalNode FLUSH() { return GetToken(EParser.FLUSH, 0); }
		public ITerminalNode FOR() { return GetToken(EParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(EParser.FROM, 0); }
		public ITerminalNode GETTER() { return GetToken(EParser.GETTER, 0); }
		public ITerminalNode HAS() { return GetToken(EParser.HAS, 0); }
		public ITerminalNode IF() { return GetToken(EParser.IF, 0); }
		public ITerminalNode IN() { return GetToken(EParser.IN, 0); }
		public ITerminalNode INDEX() { return GetToken(EParser.INDEX, 0); }
		public ITerminalNode INVOKE() { return GetToken(EParser.INVOKE, 0); }
		public ITerminalNode IS() { return GetToken(EParser.IS, 0); }
		public ITerminalNode MATCHING() { return GetToken(EParser.MATCHING, 0); }
		public ITerminalNode METHOD() { return GetToken(EParser.METHOD, 0); }
		public ITerminalNode METHODS() { return GetToken(EParser.METHODS, 0); }
		public ITerminalNode MODULO() { return GetToken(EParser.MODULO, 0); }
		public ITerminalNode MUTABLE() { return GetToken(EParser.MUTABLE, 0); }
		public ITerminalNode NATIVE() { return GetToken(EParser.NATIVE, 0); }
		public ITerminalNode NONE() { return GetToken(EParser.NONE, 0); }
		public ITerminalNode NOT() { return GetToken(EParser.NOT, 0); }
		public ITerminalNode NOTHING() { return GetToken(EParser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(EParser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(EParser.ON, 0); }
		public ITerminalNode ONE() { return GetToken(EParser.ONE, 0); }
		public ITerminalNode OPEN() { return GetToken(EParser.OPEN, 0); }
		public ITerminalNode OPERATOR() { return GetToken(EParser.OPERATOR, 0); }
		public ITerminalNode OR() { return GetToken(EParser.OR, 0); }
		public ITerminalNode ORDER() { return GetToken(EParser.ORDER, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(EParser.OTHERWISE, 0); }
		public ITerminalNode PASS() { return GetToken(EParser.PASS, 0); }
		public ITerminalNode RAISE() { return GetToken(EParser.RAISE, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode RECEIVING() { return GetToken(EParser.RECEIVING, 0); }
		public ITerminalNode RESOURCE() { return GetToken(EParser.RESOURCE, 0); }
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode RETURNING() { return GetToken(EParser.RETURNING, 0); }
		public ITerminalNode ROWS() { return GetToken(EParser.ROWS, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode SETTER() { return GetToken(EParser.SETTER, 0); }
		public ITerminalNode SINGLETON() { return GetToken(EParser.SINGLETON, 0); }
		public ITerminalNode SORTED() { return GetToken(EParser.SORTED, 0); }
		public ITerminalNode STORABLE() { return GetToken(EParser.STORABLE, 0); }
		public ITerminalNode STORE() { return GetToken(EParser.STORE, 0); }
		public ITerminalNode SWITCH() { return GetToken(EParser.SWITCH, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(EParser.THROW, 0); }
		public ITerminalNode TO() { return GetToken(EParser.TO, 0); }
		public ITerminalNode TRY() { return GetToken(EParser.TRY, 0); }
		public ITerminalNode VERIFYING() { return GetToken(EParser.VERIFYING, 0); }
		public ITerminalNode WIDGET() { return GetToken(EParser.WIDGET, 0); }
		public ITerminalNode WITH() { return GetToken(EParser.WITH, 0); }
		public ITerminalNode WHEN() { return GetToken(EParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(EParser.WHERE, 0); }
		public ITerminalNode WHILE() { return GetToken(EParser.WHILE, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 318, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2242;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JAVA) | (1L << CSHARP) | (1L << PYTHON2) | (1L << PYTHON3) | (1L << JAVASCRIPT) | (1L << SWIFT) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << VERSION) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (IMAGE - 64)) | (1L << (UUID - 64)) | (1L << (ITERATOR - 64)) | (1L << (CURSOR - 64)) | (1L << (HTML - 64)) | (1L << (ABSTRACT - 64)) | (1L << (ALL - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASC - 64)) | (1L << (ATTR - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (ATTRIBUTES - 64)) | (1L << (BINDINGS - 64)) | (1L << (BREAK - 64)) | (1L << (BY - 64)) | (1L << (CASE - 64)) | (1L << (CATCH - 64)) | (1L << (CATEGORY - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONTAINS - 64)) | (1L << (DEF - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DELETE - 64)) | (1L << (DESC - 64)) | (1L << (DO - 64)) | (1L << (DOING - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ENUM - 64)) | (1L << (ENUMERATED - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPECTING - 64)) | (1L << (EXTENDS - 64)) | (1L << (FETCH - 64)) | (1L << (FILTERED - 64)) | (1L << (FINALLY - 64)) | (1L << (FLUSH - 64)) | (1L << (FOR - 64)) | (1L << (FROM - 64)) | (1L << (GETTER - 64)) | (1L << (HAS - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INVOKE - 64)) | (1L << (IS - 64)) | (1L << (MATCHING - 64)) | (1L << (METHOD - 64)) | (1L << (METHODS - 64)) | (1L << (MODULO - 64)) | (1L << (MUTABLE - 64)) | (1L << (NATIVE - 64)) | (1L << (NONE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ONE - 128)) | (1L << (OPEN - 128)) | (1L << (OPERATOR - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OTHERWISE - 128)) | (1L << (PASS - 128)) | (1L << (RAISE - 128)) | (1L << (READ - 128)) | (1L << (RECEIVING - 128)) | (1L << (RESOURCE - 128)) | (1L << (RETURN - 128)) | (1L << (RETURNING - 128)) | (1L << (ROWS - 128)) | (1L << (SELF - 128)) | (1L << (SETTER - 128)) | (1L << (SINGLETON - 128)) | (1L << (SORTED - 128)) | (1L << (STORABLE - 128)) | (1L << (STORE - 128)) | (1L << (SWITCH - 128)) | (1L << (TEST - 128)) | (1L << (THIS - 128)) | (1L << (THROW - 128)) | (1L << (TO - 128)) | (1L << (TRY - 128)) | (1L << (VERIFYING - 128)) | (1L << (WIDGET - 128)) | (1L << (WITH - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WHILE - 128)) | (1L << (WRITE - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public New_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterNew_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitNew_token(this);
		}
	}

	[RuleVersion(0)]
	public New_tokenContext new_token() {
		New_tokenContext _localctx = new New_tokenContext(Context, State);
		EnterRule(_localctx, 320, RULE_new_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 2245;
			if (!(this.isText(_localctx.i1,"new"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"new\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 322, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 2248;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 324, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 2251;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 326, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 2254;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 328, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 2257;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 330, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2259; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(EParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 332, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 334, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2263; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(EParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 336, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2265; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(EParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(EParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 338, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267;
			_la = TokenStream.LA(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 340, RULE_javascript_statement);
		try {
			State = 2276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2269; Match(RETURN);
				State = 2270; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 2271; Match(SEMI);
				}
				break;
			case LPAR:
			case LBRAK:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2273; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 2274; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2279; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 2281;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2282; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 2287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_new_expressionContext javascript_new_expression() {
			return GetRuleContext<Javascript_new_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_javascript_primary_expression);
		try {
			State = 2295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2288; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2289; javascript_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2290; javascript_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2291; javascript_identifier_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2292; javascript_literal_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2293; javascript_method_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2294; javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_new_expressionContext javascript_new_expression() {
		Javascript_new_expressionContext _localctx = new Javascript_new_expressionContext(Context, State);
		EnterRule(_localctx, 348, RULE_javascript_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2299; new_token();
			State = 2300; javascript_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaScriptMemberExpressionContext : Javascript_selector_expressionContext {
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavaScriptMemberExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMemberExpression(this);
		}
	}
	public partial class JavaScriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavaScriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptItemExpression(this);
		}
	}
	public partial class JavaScriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext method;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavaScriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 350, RULE_javascript_selector_expression);
		try {
			State = 2307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				_localctx = new JavaScriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2302; Match(DOT);
				State = 2303; ((JavaScriptMethodExpressionContext)_localctx).method = javascript_method_expression();
				}
				break;
			case 2:
				_localctx = new JavaScriptMemberExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2304; Match(DOT);
				State = 2305; ((JavaScriptMemberExpressionContext)_localctx).name = javascript_identifier();
				}
				break;
			case 3:
				_localctx = new JavaScriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2306; ((JavaScriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309; _localctx.name = javascript_identifier();
			State = 2310; Match(LPAR);
			State = 2312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (LPAR - 20)) | (1L << (LBRAK - 20)) | (1L << (BOOLEAN - 20)) | (1L << (CHARACTER - 20)) | (1L << (TEXT - 20)) | (1L << (INTEGER - 20)) | (1L << (DECIMAL - 20)) | (1L << (DATE - 20)) | (1L << (TIME - 20)) | (1L << (DATETIME - 20)) | (1L << (PERIOD - 20)) | (1L << (VERSION - 20)) | (1L << (UUID - 20)) | (1L << (HTML - 20)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (THIS - 123)) | (1L << (WRITE - 123)) | (1L << (BOOLEAN_LITERAL - 123)) | (1L << (CHAR_LITERAL - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)) | (1L << (TEXT_LITERAL - 123)) | (1L << (INTEGER_LITERAL - 123)) | (1L << (DECIMAL_LITERAL - 123)))) != 0)) {
				{
				State = 2311; _localctx.args = javascript_arguments(0);
				}
			}

			State = 2314; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 354;
		EnterRecursionRule(_localctx, 354, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2317; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 2319;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2320; Match(COMMA);
					State = 2321; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 2326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2327; Match(LBRAK);
			State = 2328; _localctx.exp = javascript_expression(0);
			State = 2329; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 358, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331; Match(LPAR);
			State = 2332; _localctx.exp = javascript_expression(0);
			State = 2333; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_javascript_identifier_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_javascript_literal_expression);
		try {
			State = 2342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2337; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2338; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2339; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2340; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2341; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode NONE() { return GetToken(EParser.NONE, 0); }
		public ITerminalNode NULL() { return GetToken(EParser.NULL, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 364, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BOOLEAN - 51)) | (1L << (CHARACTER - 51)) | (1L << (TEXT - 51)) | (1L << (INTEGER - 51)) | (1L << (DECIMAL - 51)) | (1L << (DATE - 51)) | (1L << (TIME - 51)) | (1L << (DATETIME - 51)) | (1L << (PERIOD - 51)) | (1L << (VERSION - 51)) | (1L << (UUID - 51)) | (1L << (HTML - 51)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (WRITE - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 366, RULE_python_statement);
		try {
			State = 2349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2346; Match(RETURN);
				State = 2347; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2348; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 368;
		EnterRecursionRule(_localctx, 368, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2352; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 2354;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2355; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 2360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonSelfExpressionContext : Python_primary_expressionContext {
		public Python_self_expressionContext exp;
		public Python_self_expressionContext python_self_expression() {
			return GetRuleContext<Python_self_expressionContext>(0);
		}
		public PythonSelfExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonSelfExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_python_primary_expression);
		try {
			State = 2366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				_localctx = new PythonSelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2361; ((PythonSelfExpressionContext)_localctx).exp = python_self_expression();
				}
				break;
			case 2:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2362; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 3:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2363; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 4:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2364; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 5:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2365; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_self_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Python_self_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_self_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_self_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_self_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_self_expressionContext python_self_expression() {
		Python_self_expressionContext _localctx = new Python_self_expressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_python_self_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_python_selector_expression);
		try {
			State = 2376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2370; Match(DOT);
				State = 2371; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2372; Match(LBRAK);
				State = 2373; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 2374; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2378; _localctx.name = python_identifier();
			State = 2379; Match(LPAR);
			State = 2381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (LPAR - 20)) | (1L << (BOOLEAN - 20)) | (1L << (CHARACTER - 20)) | (1L << (TEXT - 20)) | (1L << (INTEGER - 20)) | (1L << (DECIMAL - 20)) | (1L << (DATE - 20)) | (1L << (TIME - 20)) | (1L << (DATETIME - 20)) | (1L << (PERIOD - 20)) | (1L << (VERSION - 20)) | (1L << (UUID - 20)) | (1L << (HTML - 20)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (THIS - 123)) | (1L << (WRITE - 123)) | (1L << (BOOLEAN_LITERAL - 123)) | (1L << (CHAR_LITERAL - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)) | (1L << (TEXT_LITERAL - 123)) | (1L << (INTEGER_LITERAL - 123)) | (1L << (DECIMAL_LITERAL - 123)))) != 0)) {
				{
				State = 2380; _localctx.args = python_argument_list();
				}
			}

			State = 2383; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 378, RULE_python_argument_list);
		try {
			State = 2391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2385; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2386; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2387; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 2388; Match(COMMA);
				State = 2389; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 380;
		EnterRecursionRule(_localctx, 380, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2394; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 2396;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2397; Match(COMMA);
					State = 2398; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 2403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 382;
		EnterRecursionRule(_localctx, 382, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2405; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 2406; Match(EQ);
			State = 2407; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2417;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 2409;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2410; Match(COMMA);
					State = 2411; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 2412; Match(EQ);
					State = 2413; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 2419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 384, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420; Match(LPAR);
			State = 2421; _localctx.exp = python_expression(0);
			State = 2422; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonPromptoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPromptoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonPromptoIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 386;
		EnterRecursionRule(_localctx, 386, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2425; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2426; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2434;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 2429;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2430; Match(DOT);
					State = 2431; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 2436;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 388, RULE_python_literal_expression);
		try {
			State = 2442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2437; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2438; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2439; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2440; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2441; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode THIS() { return GetToken(EParser.THIS, 0); }
		public ITerminalNode NONE() { return GetToken(EParser.NONE, 0); }
		public ITerminalNode NULL() { return GetToken(EParser.NULL, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 390, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2444;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BOOLEAN - 51)) | (1L << (CHARACTER - 51)) | (1L << (TEXT - 51)) | (1L << (INTEGER - 51)) | (1L << (DECIMAL - 51)) | (1L << (DATE - 51)) | (1L << (TIME - 51)) | (1L << (DATETIME - 51)) | (1L << (PERIOD - 51)) | (1L << (VERSION - 51)) | (1L << (UUID - 51)) | (1L << (HTML - 51)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (TEST - 123)) | (1L << (THIS - 123)) | (1L << (WRITE - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 392, RULE_java_statement);
		try {
			State = 2453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2446; Match(RETURN);
				State = 2447; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 2448; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2450; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 2451; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 394;
		EnterRecursionRule(_localctx, 394, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2456; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 2458;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2459; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 2464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_new_expressionContext java_new_expression() {
			return GetRuleContext<Java_new_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 396, RULE_java_primary_expression);
		try {
			State = 2470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2465; java_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2466; java_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2467; java_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2468; java_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2469; java_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 398, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2472; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public Java_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_new_expressionContext java_new_expression() {
		Java_new_expressionContext _localctx = new Java_new_expressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_java_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474; new_token();
			State = 2475; java_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 402, RULE_java_selector_expression);
		try {
			State = 2480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2477; Match(DOT);
				State = 2478; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2479; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 404, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2482; _localctx.name = java_identifier();
			State = 2483; Match(LPAR);
			State = 2485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (LPAR - 20)) | (1L << (BOOLEAN - 20)) | (1L << (CHARACTER - 20)) | (1L << (TEXT - 20)) | (1L << (INTEGER - 20)) | (1L << (DECIMAL - 20)) | (1L << (DATE - 20)) | (1L << (TIME - 20)) | (1L << (DATETIME - 20)) | (1L << (PERIOD - 20)) | (1L << (VERSION - 20)) | (1L << (UUID - 20)) | (1L << (HTML - 20)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (THIS - 123)) | (1L << (WRITE - 123)) | (1L << (BOOLEAN_LITERAL - 123)) | (1L << (CHAR_LITERAL - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (NATIVE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)) | (1L << (TEXT_LITERAL - 123)) | (1L << (INTEGER_LITERAL - 123)) | (1L << (DECIMAL_LITERAL - 123)))) != 0)) {
				{
				State = 2484; _localctx.args = java_arguments(0);
				}
			}

			State = 2487; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 406;
		EnterRecursionRule(_localctx, 406, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2490; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 2492;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2493; Match(COMMA);
					State = 2494; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 2499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 408, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500; Match(LBRAK);
			State = 2501; _localctx.exp = java_expression(0);
			State = 2502; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 410, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504; Match(LPAR);
			State = 2505; _localctx.exp = java_expression(0);
			State = 2506; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 412;
		EnterRecursionRule(_localctx, 412, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2509; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,211,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 2511;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2512; Match(DOT);
					State = 2513; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 2518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,211,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 414;
		EnterRecursionRule(_localctx, 414, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2520; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2526;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 2522;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2523; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 2528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 416, RULE_java_literal_expression);
		try {
			State = 2534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2529; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2530; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2531; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2532; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2533; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(EParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode NONE() { return GetToken(EParser.NONE, 0); }
		public ITerminalNode NULL() { return GetToken(EParser.NULL, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 418, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2536;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BOOLEAN - 51)) | (1L << (CHARACTER - 51)) | (1L << (TEXT - 51)) | (1L << (INTEGER - 51)) | (1L << (DECIMAL - 51)) | (1L << (DATE - 51)) | (1L << (TIME - 51)) | (1L << (DATETIME - 51)) | (1L << (PERIOD - 51)) | (1L << (VERSION - 51)) | (1L << (UUID - 51)) | (1L << (HTML - 51)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (WRITE - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (NATIVE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(EParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 420, RULE_csharp_statement);
		try {
			State = 2545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2538; Match(RETURN);
				State = 2539; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 2540; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2542; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 2543; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 422;
		EnterRecursionRule(_localctx, 422, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2548; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 2550;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2551; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 2556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_new_expressionContext csharp_new_expression() {
			return GetRuleContext<Csharp_new_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 424, RULE_csharp_primary_expression);
		try {
			State = 2562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2557; csharp_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2558; csharp_new_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2559; csharp_parenthesis_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2560; csharp_identifier_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2561; csharp_literal_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 426, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2564; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_new_expressionContext : ParserRuleContext {
		public New_tokenContext new_token() {
			return GetRuleContext<New_tokenContext>(0);
		}
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public Csharp_new_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_new_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_new_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_new_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_new_expressionContext csharp_new_expression() {
		Csharp_new_expressionContext _localctx = new Csharp_new_expressionContext(Context, State);
		EnterRule(_localctx, 428, RULE_csharp_new_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566; new_token();
			State = 2567; csharp_method_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 430, RULE_csharp_selector_expression);
		try {
			State = 2572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2569; Match(DOT);
				State = 2570; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2571; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574; _localctx.name = csharp_identifier();
			State = 2575; Match(LPAR);
			State = 2577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (LPAR - 20)) | (1L << (BOOLEAN - 20)) | (1L << (CHARACTER - 20)) | (1L << (TEXT - 20)) | (1L << (INTEGER - 20)) | (1L << (DECIMAL - 20)) | (1L << (DATE - 20)) | (1L << (TIME - 20)) | (1L << (DATETIME - 20)) | (1L << (PERIOD - 20)) | (1L << (VERSION - 20)) | (1L << (UUID - 20)) | (1L << (HTML - 20)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (THIS - 123)) | (1L << (WRITE - 123)) | (1L << (BOOLEAN_LITERAL - 123)) | (1L << (CHAR_LITERAL - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)) | (1L << (DOLLAR_IDENTIFIER - 123)) | (1L << (TEXT_LITERAL - 123)) | (1L << (INTEGER_LITERAL - 123)) | (1L << (DECIMAL_LITERAL - 123)))) != 0)) {
				{
				State = 2576; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2579; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(EParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2582; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2589;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2584;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2585; Match(COMMA);
					State = 2586; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(EParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(EParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 436, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592; Match(LBRAK);
			State = 2593; _localctx.exp = csharp_expression(0);
			State = 2594; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(EParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(EParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 438, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2596; Match(LPAR);
			State = 2597; _localctx.exp = csharp_expression(0);
			State = 2598; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(EParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}
	public partial class CSharpPromptoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(EParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpPromptoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpPromptoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPromptoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2601; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case UUID:
			case HTML:
			case NONE:
			case NULL:
			case READ:
			case SELF:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2602; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2605;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2606; Match(DOT);
					State = 2607; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(EParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(EParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(EParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(EParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 442, RULE_csharp_literal_expression);
		try {
			State = 2618;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2613; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2614; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2615; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2616; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2617; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(EParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(EParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(EParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(EParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(EParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(EParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(EParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(EParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(EParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(EParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(EParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(EParser.PERIOD, 0); }
		public ITerminalNode VERSION() { return GetToken(EParser.VERSION, 0); }
		public ITerminalNode UUID() { return GetToken(EParser.UUID, 0); }
		public ITerminalNode HTML() { return GetToken(EParser.HTML, 0); }
		public ITerminalNode READ() { return GetToken(EParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(EParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(EParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(EParser.SELF, 0); }
		public ITerminalNode NONE() { return GetToken(EParser.NONE, 0); }
		public ITerminalNode NULL() { return GetToken(EParser.NULL, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 444, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (BOOLEAN - 51)) | (1L << (CHARACTER - 51)) | (1L << (TEXT - 51)) | (1L << (INTEGER - 51)) | (1L << (DECIMAL - 51)) | (1L << (DATE - 51)) | (1L << (TIME - 51)) | (1L << (DATETIME - 51)) | (1L << (PERIOD - 51)) | (1L << (VERSION - 51)) | (1L << (UUID - 51)) | (1L << (HTML - 51)))) != 0) || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (NONE - 123)) | (1L << (NULL - 123)) | (1L << (READ - 123)) | (1L << (SELF - 123)) | (1L << (TEST - 123)) | (1L << (WRITE - 123)) | (1L << (SYMBOL_IDENTIFIER - 123)) | (1L << (TYPE_IDENTIFIER - 123)) | (1L << (VARIABLE_IDENTIFIER - 123)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_expressionContext : ParserRuleContext {
		public Jsx_elementContext jsx_element() {
			return GetRuleContext<Jsx_elementContext>(0);
		}
		public Jsx_fragmentContext jsx_fragment() {
			return GetRuleContext<Jsx_fragmentContext>(0);
		}
		public Jsx_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_expression(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_expressionContext jsx_expression() {
		Jsx_expressionContext _localctx = new Jsx_expressionContext(Context, State);
		EnterRule(_localctx, 446, RULE_jsx_expression);
		try {
			State = 2624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2622; jsx_element();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2623; jsx_fragment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_elementContext : ParserRuleContext {
		public Jsx_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_element; } }
	 
		public Jsx_elementContext() { }
		public virtual void CopyFrom(Jsx_elementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsxSelfClosingContext : Jsx_elementContext {
		public Jsx_self_closingContext jsx;
		public Jsx_self_closingContext jsx_self_closing() {
			return GetRuleContext<Jsx_self_closingContext>(0);
		}
		public JsxSelfClosingContext(Jsx_elementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxSelfClosing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxSelfClosing(this);
		}
	}
	public partial class JsxElementContext : Jsx_elementContext {
		public Jsx_openingContext opening;
		public Jsx_childrenContext children_;
		public Jsx_closingContext closing;
		public Jsx_openingContext jsx_opening() {
			return GetRuleContext<Jsx_openingContext>(0);
		}
		public Jsx_closingContext jsx_closing() {
			return GetRuleContext<Jsx_closingContext>(0);
		}
		public Jsx_childrenContext jsx_children() {
			return GetRuleContext<Jsx_childrenContext>(0);
		}
		public JsxElementContext(Jsx_elementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxElement(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_elementContext jsx_element() {
		Jsx_elementContext _localctx = new Jsx_elementContext(Context, State);
		EnterRule(_localctx, 448, RULE_jsx_element);
		try {
			State = 2633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				_localctx = new JsxSelfClosingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2626; ((JsxSelfClosingContext)_localctx).jsx = jsx_self_closing();
				}
				break;
			case 2:
				_localctx = new JsxElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2627; ((JsxElementContext)_localctx).opening = jsx_opening();
				State = 2629;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 2628; ((JsxElementContext)_localctx).children_ = jsx_children();
					}
					break;
				}
				State = 2631; ((JsxElementContext)_localctx).closing = jsx_closing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_fragmentContext : ParserRuleContext {
		public Jsx_childrenContext children_;
		public Jsx_fragment_startContext jsx_fragment_start() {
			return GetRuleContext<Jsx_fragment_startContext>(0);
		}
		public Jsx_fragment_endContext jsx_fragment_end() {
			return GetRuleContext<Jsx_fragment_endContext>(0);
		}
		public Jsx_childrenContext jsx_children() {
			return GetRuleContext<Jsx_childrenContext>(0);
		}
		public Jsx_fragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_fragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_fragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_fragment(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_fragmentContext jsx_fragment() {
		Jsx_fragmentContext _localctx = new Jsx_fragmentContext(Context, State);
		EnterRule(_localctx, 450, RULE_jsx_fragment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2635; jsx_fragment_start();
			State = 2637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				{
				State = 2636; _localctx.children_ = jsx_children();
				}
				break;
			}
			State = 2639; jsx_fragment_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_fragment_startContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public ITerminalNode LTGT() { return GetToken(EParser.LTGT, 0); }
		public Jsx_fragment_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_fragment_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_fragment_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_fragment_start(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_fragment_startContext jsx_fragment_start() {
		Jsx_fragment_startContext _localctx = new Jsx_fragment_startContext(Context, State);
		EnterRule(_localctx, 452, RULE_jsx_fragment_start);
		try {
			State = 2644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2641; Match(LT);
				State = 2642; Match(GT);
				}
				break;
			case LTGT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2643; Match(LTGT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_fragment_endContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Jsx_fragment_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_fragment_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_fragment_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_fragment_end(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_fragment_endContext jsx_fragment_end() {
		Jsx_fragment_endContext _localctx = new Jsx_fragment_endContext(Context, State);
		EnterRule(_localctx, 454, RULE_jsx_fragment_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646; Match(LT);
			State = 2647; Match(SLASH);
			State = 2648; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_self_closingContext : ParserRuleContext {
		public Jsx_element_nameContext name;
		public Jsx_attributeContext attributes;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public Jsx_wsContext jsx_ws() {
			return GetRuleContext<Jsx_wsContext>(0);
		}
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Jsx_element_nameContext jsx_element_name() {
			return GetRuleContext<Jsx_element_nameContext>(0);
		}
		public Jsx_attributeContext[] jsx_attribute() {
			return GetRuleContexts<Jsx_attributeContext>();
		}
		public Jsx_attributeContext jsx_attribute(int i) {
			return GetRuleContext<Jsx_attributeContext>(i);
		}
		public Jsx_self_closingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_self_closing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_self_closing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_self_closing(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_self_closingContext jsx_self_closing() {
		Jsx_self_closingContext _localctx = new Jsx_self_closingContext(Context, State);
		EnterRule(_localctx, 456, RULE_jsx_self_closing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2650; Match(LT);
			State = 2651; _localctx.name = jsx_element_name();
			State = 2652; jsx_ws();
			State = 2656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JAVA) | (1L << CSHARP) | (1L << PYTHON2) | (1L << PYTHON3) | (1L << JAVASCRIPT) | (1L << SWIFT) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << VERSION) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (IMAGE - 64)) | (1L << (UUID - 64)) | (1L << (ITERATOR - 64)) | (1L << (CURSOR - 64)) | (1L << (HTML - 64)) | (1L << (ABSTRACT - 64)) | (1L << (ALL - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASC - 64)) | (1L << (ATTR - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (ATTRIBUTES - 64)) | (1L << (BINDINGS - 64)) | (1L << (BREAK - 64)) | (1L << (BY - 64)) | (1L << (CASE - 64)) | (1L << (CATCH - 64)) | (1L << (CATEGORY - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONTAINS - 64)) | (1L << (DEF - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DELETE - 64)) | (1L << (DESC - 64)) | (1L << (DO - 64)) | (1L << (DOING - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ENUM - 64)) | (1L << (ENUMERATED - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPECTING - 64)) | (1L << (EXTENDS - 64)) | (1L << (FETCH - 64)) | (1L << (FILTERED - 64)) | (1L << (FINALLY - 64)) | (1L << (FLUSH - 64)) | (1L << (FOR - 64)) | (1L << (FROM - 64)) | (1L << (GETTER - 64)) | (1L << (HAS - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INVOKE - 64)) | (1L << (IS - 64)) | (1L << (MATCHING - 64)) | (1L << (METHOD - 64)) | (1L << (METHODS - 64)) | (1L << (MODULO - 64)) | (1L << (MUTABLE - 64)) | (1L << (NATIVE - 64)) | (1L << (NONE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ONE - 128)) | (1L << (OPEN - 128)) | (1L << (OPERATOR - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OTHERWISE - 128)) | (1L << (PASS - 128)) | (1L << (RAISE - 128)) | (1L << (READ - 128)) | (1L << (RECEIVING - 128)) | (1L << (RESOURCE - 128)) | (1L << (RETURN - 128)) | (1L << (RETURNING - 128)) | (1L << (ROWS - 128)) | (1L << (SELF - 128)) | (1L << (SETTER - 128)) | (1L << (SINGLETON - 128)) | (1L << (SORTED - 128)) | (1L << (STORABLE - 128)) | (1L << (STORE - 128)) | (1L << (SWITCH - 128)) | (1L << (TEST - 128)) | (1L << (THIS - 128)) | (1L << (THROW - 128)) | (1L << (TO - 128)) | (1L << (TRY - 128)) | (1L << (VERIFYING - 128)) | (1L << (WIDGET - 128)) | (1L << (WITH - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WHILE - 128)) | (1L << (WRITE - 128)) | (1L << (SYMBOL_IDENTIFIER - 128)) | (1L << (TYPE_IDENTIFIER - 128)) | (1L << (VARIABLE_IDENTIFIER - 128)))) != 0)) {
				{
				{
				State = 2653; _localctx.attributes = jsx_attribute();
				}
				}
				State = 2658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2659; Match(SLASH);
			State = 2660; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_openingContext : ParserRuleContext {
		public Jsx_element_nameContext name;
		public Jsx_attributeContext attributes;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public Jsx_wsContext jsx_ws() {
			return GetRuleContext<Jsx_wsContext>(0);
		}
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Jsx_element_nameContext jsx_element_name() {
			return GetRuleContext<Jsx_element_nameContext>(0);
		}
		public Jsx_attributeContext[] jsx_attribute() {
			return GetRuleContexts<Jsx_attributeContext>();
		}
		public Jsx_attributeContext jsx_attribute(int i) {
			return GetRuleContext<Jsx_attributeContext>(i);
		}
		public Jsx_openingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_opening; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_opening(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_opening(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_openingContext jsx_opening() {
		Jsx_openingContext _localctx = new Jsx_openingContext(Context, State);
		EnterRule(_localctx, 458, RULE_jsx_opening);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2662; Match(LT);
			State = 2663; _localctx.name = jsx_element_name();
			State = 2664; jsx_ws();
			State = 2668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JAVA) | (1L << CSHARP) | (1L << PYTHON2) | (1L << PYTHON3) | (1L << JAVASCRIPT) | (1L << SWIFT) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << VERSION) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (IMAGE - 64)) | (1L << (UUID - 64)) | (1L << (ITERATOR - 64)) | (1L << (CURSOR - 64)) | (1L << (HTML - 64)) | (1L << (ABSTRACT - 64)) | (1L << (ALL - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASC - 64)) | (1L << (ATTR - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (ATTRIBUTES - 64)) | (1L << (BINDINGS - 64)) | (1L << (BREAK - 64)) | (1L << (BY - 64)) | (1L << (CASE - 64)) | (1L << (CATCH - 64)) | (1L << (CATEGORY - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONTAINS - 64)) | (1L << (DEF - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DELETE - 64)) | (1L << (DESC - 64)) | (1L << (DO - 64)) | (1L << (DOING - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ENUM - 64)) | (1L << (ENUMERATED - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPECTING - 64)) | (1L << (EXTENDS - 64)) | (1L << (FETCH - 64)) | (1L << (FILTERED - 64)) | (1L << (FINALLY - 64)) | (1L << (FLUSH - 64)) | (1L << (FOR - 64)) | (1L << (FROM - 64)) | (1L << (GETTER - 64)) | (1L << (HAS - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INVOKE - 64)) | (1L << (IS - 64)) | (1L << (MATCHING - 64)) | (1L << (METHOD - 64)) | (1L << (METHODS - 64)) | (1L << (MODULO - 64)) | (1L << (MUTABLE - 64)) | (1L << (NATIVE - 64)) | (1L << (NONE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ONE - 128)) | (1L << (OPEN - 128)) | (1L << (OPERATOR - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OTHERWISE - 128)) | (1L << (PASS - 128)) | (1L << (RAISE - 128)) | (1L << (READ - 128)) | (1L << (RECEIVING - 128)) | (1L << (RESOURCE - 128)) | (1L << (RETURN - 128)) | (1L << (RETURNING - 128)) | (1L << (ROWS - 128)) | (1L << (SELF - 128)) | (1L << (SETTER - 128)) | (1L << (SINGLETON - 128)) | (1L << (SORTED - 128)) | (1L << (STORABLE - 128)) | (1L << (STORE - 128)) | (1L << (SWITCH - 128)) | (1L << (TEST - 128)) | (1L << (THIS - 128)) | (1L << (THROW - 128)) | (1L << (TO - 128)) | (1L << (TRY - 128)) | (1L << (VERIFYING - 128)) | (1L << (WIDGET - 128)) | (1L << (WITH - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WHILE - 128)) | (1L << (WRITE - 128)) | (1L << (SYMBOL_IDENTIFIER - 128)) | (1L << (TYPE_IDENTIFIER - 128)) | (1L << (VARIABLE_IDENTIFIER - 128)))) != 0)) {
				{
				{
				State = 2665; _localctx.attributes = jsx_attribute();
				}
				}
				State = 2670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2671; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_closingContext : ParserRuleContext {
		public Jsx_element_nameContext name;
		public ITerminalNode LT() { return GetToken(EParser.LT, 0); }
		public ITerminalNode SLASH() { return GetToken(EParser.SLASH, 0); }
		public ITerminalNode GT() { return GetToken(EParser.GT, 0); }
		public Jsx_element_nameContext jsx_element_name() {
			return GetRuleContext<Jsx_element_nameContext>(0);
		}
		public Jsx_closingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_closing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_closing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_closing(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_closingContext jsx_closing() {
		Jsx_closingContext _localctx = new Jsx_closingContext(Context, State);
		EnterRule(_localctx, 460, RULE_jsx_closing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2673; Match(LT);
			State = 2674; Match(SLASH);
			State = 2675; _localctx.name = jsx_element_name();
			State = 2676; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_element_nameContext : ParserRuleContext {
		public Jsx_identifierContext[] jsx_identifier() {
			return GetRuleContexts<Jsx_identifierContext>();
		}
		public Jsx_identifierContext jsx_identifier(int i) {
			return GetRuleContext<Jsx_identifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(EParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(EParser.DOT, i);
		}
		public Jsx_element_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_element_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_element_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_element_name(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_element_nameContext jsx_element_name() {
		Jsx_element_nameContext _localctx = new Jsx_element_nameContext(Context, State);
		EnterRule(_localctx, 462, RULE_jsx_element_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2678; jsx_identifier();
			State = 2683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 2679; Match(DOT);
				State = 2680; jsx_identifier();
				}
				}
				State = 2685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_identifierContext : ParserRuleContext {
		public Identifier_or_keywordContext identifier_or_keyword() {
			return GetRuleContext<Identifier_or_keywordContext>(0);
		}
		public Nospace_hyphen_identifier_or_keywordContext[] nospace_hyphen_identifier_or_keyword() {
			return GetRuleContexts<Nospace_hyphen_identifier_or_keywordContext>();
		}
		public Nospace_hyphen_identifier_or_keywordContext nospace_hyphen_identifier_or_keyword(int i) {
			return GetRuleContext<Nospace_hyphen_identifier_or_keywordContext>(i);
		}
		public Jsx_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_identifierContext jsx_identifier() {
		Jsx_identifierContext _localctx = new Jsx_identifierContext(Context, State);
		EnterRule(_localctx, 464, RULE_jsx_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686; identifier_or_keyword();
			State = 2690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2687; nospace_hyphen_identifier_or_keyword();
					}
					} 
				}
				State = 2692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_attributeContext : ParserRuleContext {
		public Jsx_identifierContext name;
		public Jsx_attribute_valueContext value;
		public Jsx_wsContext jsx_ws() {
			return GetRuleContext<Jsx_wsContext>(0);
		}
		public Jsx_identifierContext jsx_identifier() {
			return GetRuleContext<Jsx_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(EParser.EQ, 0); }
		public Jsx_attribute_valueContext jsx_attribute_value() {
			return GetRuleContext<Jsx_attribute_valueContext>(0);
		}
		public Jsx_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_attributeContext jsx_attribute() {
		Jsx_attributeContext _localctx = new Jsx_attributeContext(Context, State);
		EnterRule(_localctx, 466, RULE_jsx_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2693; _localctx.name = jsx_identifier();
			State = 2696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 2694; Match(EQ);
				State = 2695; _localctx.value = jsx_attribute_value();
				}
			}

			State = 2698; jsx_ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_attribute_valueContext : ParserRuleContext {
		public Jsx_attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_attribute_value; } }
	 
		public Jsx_attribute_valueContext() { }
		public virtual void CopyFrom(Jsx_attribute_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsxValueContext : Jsx_attribute_valueContext {
		public ExpressionContext exp;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JsxValueContext(Jsx_attribute_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxValue(this);
		}
	}
	public partial class JsxLiteralContext : Jsx_attribute_valueContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(EParser.TEXT_LITERAL, 0); }
		public JsxLiteralContext(Jsx_attribute_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_attribute_valueContext jsx_attribute_value() {
		Jsx_attribute_valueContext _localctx = new Jsx_attribute_valueContext(Context, State);
		EnterRule(_localctx, 468, RULE_jsx_attribute_value);
		try {
			State = 2705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT_LITERAL:
				_localctx = new JsxLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2700; Match(TEXT_LITERAL);
				}
				break;
			case LCURL:
				_localctx = new JsxValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2701; Match(LCURL);
				State = 2702; ((JsxValueContext)_localctx).exp = expression(0);
				State = 2703; Match(RCURL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_childrenContext : ParserRuleContext {
		public Jsx_childContext[] jsx_child() {
			return GetRuleContexts<Jsx_childContext>();
		}
		public Jsx_childContext jsx_child(int i) {
			return GetRuleContext<Jsx_childContext>(i);
		}
		public Jsx_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_children; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_children(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_children(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_childrenContext jsx_children() {
		Jsx_childrenContext _localctx = new Jsx_childrenContext(Context, State);
		EnterRule(_localctx, 470, RULE_jsx_children);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2708;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2707; jsx_child();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2710;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_childContext : ParserRuleContext {
		public Jsx_childContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_child; } }
	 
		public Jsx_childContext() { }
		public virtual void CopyFrom(Jsx_childContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsxTextContext : Jsx_childContext {
		public Jsx_textContext text;
		public Jsx_textContext jsx_text() {
			return GetRuleContext<Jsx_textContext>(0);
		}
		public JsxTextContext(Jsx_childContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxText(this);
		}
	}
	public partial class JsxChildContext : Jsx_childContext {
		public Jsx_elementContext jsx;
		public Jsx_elementContext jsx_element() {
			return GetRuleContext<Jsx_elementContext>(0);
		}
		public JsxChildContext(Jsx_childContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxChild(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxChild(this);
		}
	}
	public partial class JsxCodeContext : Jsx_childContext {
		public ExpressionContext exp;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JsxCodeContext(Jsx_childContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsxCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsxCode(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_childContext jsx_child() {
		Jsx_childContext _localctx = new Jsx_childContext(Context, State);
		EnterRule(_localctx, 472, RULE_jsx_child);
		int _la;
		try {
			State = 2719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDENT:
			case DEDENT:
			case LF_TAB:
			case LF_MORE:
			case LF:
			case TAB:
			case WS:
			case COMMENT:
			case JAVA:
			case CSHARP:
			case PYTHON2:
			case PYTHON3:
			case JAVASCRIPT:
			case SWIFT:
			case COLON:
			case SEMI:
			case COMMA:
			case RANGE:
			case DOT:
			case LPAR:
			case RPAR:
			case LBRAK:
			case RBRAK:
			case QMARK:
			case XMARK:
			case AMP:
			case AMP2:
			case PIPE:
			case PIPE2:
			case PLUS:
			case MINUS:
			case STAR:
			case SLASH:
			case BSLASH:
			case PERCENT:
			case GTE:
			case LTE:
			case LTGT:
			case LTCOLONGT:
			case EQ:
			case XEQ:
			case EQ2:
			case TEQ:
			case TILDE:
			case LARROW:
			case RARROW:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case METHOD_T:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case ABSTRACT:
			case ALL:
			case ALWAYS:
			case AND:
			case ANY:
			case AS:
			case ASC:
			case ATTR:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case BINDINGS:
			case BREAK:
			case BY:
			case CASE:
			case CATCH:
			case CATEGORY:
			case CLASS:
			case CLOSE:
			case CONTAINS:
			case DEF:
			case DEFAULT:
			case DEFINE:
			case DELETE:
			case DESC:
			case DO:
			case DOING:
			case EACH:
			case ELSE:
			case ENUM:
			case ENUMERATED:
			case EXCEPT:
			case EXECUTE:
			case EXPECTING:
			case EXTENDS:
			case FETCH:
			case FILTERED:
			case FINALLY:
			case FLUSH:
			case FOR:
			case FROM:
			case GETTER:
			case HAS:
			case IF:
			case IN:
			case INDEX:
			case INVOKE:
			case IS:
			case MATCHING:
			case METHOD:
			case METHODS:
			case MODULO:
			case MUTABLE:
			case NATIVE:
			case NONE:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ONE:
			case OPEN:
			case OPERATOR:
			case OR:
			case ORDER:
			case OTHERWISE:
			case PASS:
			case RAISE:
			case READ:
			case RECEIVING:
			case RESOURCE:
			case RETURN:
			case RETURNING:
			case ROWS:
			case SELF:
			case SETTER:
			case SINGLETON:
			case SORTED:
			case STORABLE:
			case STORE:
			case SWITCH:
			case TEST:
			case THEN:
			case THIS:
			case THROW:
			case TO:
			case TRY:
			case VERIFYING:
			case WIDGET:
			case WITH:
			case WHEN:
			case WHERE:
			case WHILE:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case ARONDBASE_IDENTIFIER:
			case TEXT_LITERAL:
			case UUID_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
			case VERSION_LITERAL:
				_localctx = new JsxTextContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2712; ((JsxTextContext)_localctx).text = jsx_text();
				}
				break;
			case LT:
				_localctx = new JsxChildContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2713; ((JsxChildContext)_localctx).jsx = jsx_element();
				}
				break;
			case LCURL:
				_localctx = new JsxCodeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2714; Match(LCURL);
				State = 2716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)) | (1L << (INVOKE - 64)) | (1L << (MUTABLE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (READ - 136)) | (1L << (SELF - 136)) | (1L << (SORTED - 136)) | (1L << (THIS - 136)) | (1L << (BOOLEAN_LITERAL - 136)) | (1L << (CHAR_LITERAL - 136)) | (1L << (MIN_INTEGER - 136)) | (1L << (MAX_INTEGER - 136)) | (1L << (SYMBOL_IDENTIFIER - 136)) | (1L << (TYPE_IDENTIFIER - 136)) | (1L << (VARIABLE_IDENTIFIER - 136)) | (1L << (TEXT_LITERAL - 136)) | (1L << (UUID_LITERAL - 136)) | (1L << (INTEGER_LITERAL - 136)) | (1L << (HEXA_LITERAL - 136)) | (1L << (DECIMAL_LITERAL - 136)) | (1L << (DATETIME_LITERAL - 136)) | (1L << (TIME_LITERAL - 136)) | (1L << (DATE_LITERAL - 136)) | (1L << (PERIOD_LITERAL - 136)) | (1L << (VERSION_LITERAL - 136)))) != 0)) {
					{
					State = 2715; ((JsxCodeContext)_localctx).exp = expression(0);
					}
				}

				State = 2718; Match(RCURL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsx_textContext : ParserRuleContext {
		public ITerminalNode[] LCURL() { return GetTokens(EParser.LCURL); }
		public ITerminalNode LCURL(int i) {
			return GetToken(EParser.LCURL, i);
		}
		public ITerminalNode[] RCURL() { return GetTokens(EParser.RCURL); }
		public ITerminalNode RCURL(int i) {
			return GetToken(EParser.RCURL, i);
		}
		public ITerminalNode[] LT() { return GetTokens(EParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(EParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(EParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(EParser.GT, i);
		}
		public Jsx_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsx_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterJsx_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitJsx_text(this);
		}
	}

	[RuleVersion(0)]
	public Jsx_textContext jsx_text() {
		Jsx_textContext _localctx = new Jsx_textContext(Context, State);
		EnterRule(_localctx, 474, RULE_jsx_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2721;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LCURL) | (1L << RCURL) | (1L << GT) | (1L << LT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Css_expressionContext : ParserRuleContext {
		public Css_fieldContext field;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public Css_fieldContext[] css_field() {
			return GetRuleContexts<Css_fieldContext>();
		}
		public Css_fieldContext css_field(int i) {
			return GetRuleContext<Css_fieldContext>(i);
		}
		public Css_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_css_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCss_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCss_expression(this);
		}
	}

	[RuleVersion(0)]
	public Css_expressionContext css_expression() {
		Css_expressionContext _localctx = new Css_expressionContext(Context, State);
		EnterRule(_localctx, 476, RULE_css_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2726; Match(LCURL);
			State = 2728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2727; _localctx.field = css_field();
				}
				}
				State = 2730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JAVA) | (1L << CSHARP) | (1L << PYTHON2) | (1L << PYTHON3) | (1L << JAVASCRIPT) | (1L << SWIFT) | (1L << MINUS) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << VERSION) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (IMAGE - 64)) | (1L << (UUID - 64)) | (1L << (ITERATOR - 64)) | (1L << (CURSOR - 64)) | (1L << (HTML - 64)) | (1L << (ABSTRACT - 64)) | (1L << (ALL - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASC - 64)) | (1L << (ATTR - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (ATTRIBUTES - 64)) | (1L << (BINDINGS - 64)) | (1L << (BREAK - 64)) | (1L << (BY - 64)) | (1L << (CASE - 64)) | (1L << (CATCH - 64)) | (1L << (CATEGORY - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONTAINS - 64)) | (1L << (DEF - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DELETE - 64)) | (1L << (DESC - 64)) | (1L << (DO - 64)) | (1L << (DOING - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ENUM - 64)) | (1L << (ENUMERATED - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPECTING - 64)) | (1L << (EXTENDS - 64)) | (1L << (FETCH - 64)) | (1L << (FILTERED - 64)) | (1L << (FINALLY - 64)) | (1L << (FLUSH - 64)) | (1L << (FOR - 64)) | (1L << (FROM - 64)) | (1L << (GETTER - 64)) | (1L << (HAS - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INVOKE - 64)) | (1L << (IS - 64)) | (1L << (MATCHING - 64)) | (1L << (METHOD - 64)) | (1L << (METHODS - 64)) | (1L << (MODULO - 64)) | (1L << (MUTABLE - 64)) | (1L << (NATIVE - 64)) | (1L << (NONE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ONE - 128)) | (1L << (OPEN - 128)) | (1L << (OPERATOR - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OTHERWISE - 128)) | (1L << (PASS - 128)) | (1L << (RAISE - 128)) | (1L << (READ - 128)) | (1L << (RECEIVING - 128)) | (1L << (RESOURCE - 128)) | (1L << (RETURN - 128)) | (1L << (RETURNING - 128)) | (1L << (ROWS - 128)) | (1L << (SELF - 128)) | (1L << (SETTER - 128)) | (1L << (SINGLETON - 128)) | (1L << (SORTED - 128)) | (1L << (STORABLE - 128)) | (1L << (STORE - 128)) | (1L << (SWITCH - 128)) | (1L << (TEST - 128)) | (1L << (THIS - 128)) | (1L << (THROW - 128)) | (1L << (TO - 128)) | (1L << (TRY - 128)) | (1L << (VERIFYING - 128)) | (1L << (WIDGET - 128)) | (1L << (WITH - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WHILE - 128)) | (1L << (WRITE - 128)) | (1L << (SYMBOL_IDENTIFIER - 128)) | (1L << (TYPE_IDENTIFIER - 128)) | (1L << (VARIABLE_IDENTIFIER - 128)))) != 0) );
			State = 2732; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Css_fieldContext : ParserRuleContext {
		public Css_identifierContext name;
		public Css_valueContext value;
		public ITerminalNode COLON() { return GetToken(EParser.COLON, 0); }
		public ITerminalNode SEMI() { return GetToken(EParser.SEMI, 0); }
		public Css_identifierContext css_identifier() {
			return GetRuleContext<Css_identifierContext>(0);
		}
		public Css_valueContext css_value() {
			return GetRuleContext<Css_valueContext>(0);
		}
		public Css_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_css_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCss_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCss_field(this);
		}
	}

	[RuleVersion(0)]
	public Css_fieldContext css_field() {
		Css_fieldContext _localctx = new Css_fieldContext(Context, State);
		EnterRule(_localctx, 478, RULE_css_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2734; _localctx.name = css_identifier(0);
			State = 2735; Match(COLON);
			State = 2736; _localctx.value = css_value();
			State = 2737; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Css_identifierContext : ParserRuleContext {
		public Identifier_or_keywordContext identifier_or_keyword() {
			return GetRuleContext<Identifier_or_keywordContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(EParser.MINUS, 0); }
		public Nospace_identifier_or_keywordContext nospace_identifier_or_keyword() {
			return GetRuleContext<Nospace_identifier_or_keywordContext>(0);
		}
		public Css_identifierContext css_identifier() {
			return GetRuleContext<Css_identifierContext>(0);
		}
		public Nospace_hyphen_identifier_or_keywordContext[] nospace_hyphen_identifier_or_keyword() {
			return GetRuleContexts<Nospace_hyphen_identifier_or_keywordContext>();
		}
		public Nospace_hyphen_identifier_or_keywordContext nospace_hyphen_identifier_or_keyword(int i) {
			return GetRuleContext<Nospace_hyphen_identifier_or_keywordContext>(i);
		}
		public Css_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_css_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCss_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCss_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Css_identifierContext css_identifier() {
		return css_identifier(0);
	}

	private Css_identifierContext css_identifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Css_identifierContext _localctx = new Css_identifierContext(Context, _parentState);
		Css_identifierContext _prevctx = _localctx;
		int _startState = 480;
		EnterRecursionRule(_localctx, 480, RULE_css_identifier, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
			case CSHARP:
			case PYTHON2:
			case PYTHON3:
			case JAVASCRIPT:
			case SWIFT:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case METHOD_T:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case ABSTRACT:
			case ALL:
			case ALWAYS:
			case AND:
			case ANY:
			case AS:
			case ASC:
			case ATTR:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case BINDINGS:
			case BREAK:
			case BY:
			case CASE:
			case CATCH:
			case CATEGORY:
			case CLASS:
			case CLOSE:
			case CONTAINS:
			case DEF:
			case DEFAULT:
			case DEFINE:
			case DELETE:
			case DESC:
			case DO:
			case DOING:
			case EACH:
			case ELSE:
			case ENUM:
			case ENUMERATED:
			case EXCEPT:
			case EXECUTE:
			case EXPECTING:
			case EXTENDS:
			case FETCH:
			case FILTERED:
			case FINALLY:
			case FLUSH:
			case FOR:
			case FROM:
			case GETTER:
			case HAS:
			case IF:
			case IN:
			case INDEX:
			case INVOKE:
			case IS:
			case MATCHING:
			case METHOD:
			case METHODS:
			case MODULO:
			case MUTABLE:
			case NATIVE:
			case NONE:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ONE:
			case OPEN:
			case OPERATOR:
			case OR:
			case ORDER:
			case OTHERWISE:
			case PASS:
			case RAISE:
			case READ:
			case RECEIVING:
			case RESOURCE:
			case RETURN:
			case RETURNING:
			case ROWS:
			case SELF:
			case SETTER:
			case SINGLETON:
			case SORTED:
			case STORABLE:
			case STORE:
			case SWITCH:
			case TEST:
			case THIS:
			case THROW:
			case TO:
			case TRY:
			case VERIFYING:
			case WIDGET:
			case WITH:
			case WHEN:
			case WHERE:
			case WHILE:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				State = 2740; identifier_or_keyword();
				}
				break;
			case MINUS:
				{
				State = 2741; Match(MINUS);
				State = 2742; nospace_identifier_or_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2753;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Css_identifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_css_identifier);
					State = 2745;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2747;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2746; nospace_hyphen_identifier_or_keyword();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2749;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,240,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 2755;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Css_valueContext : ParserRuleContext {
		public Css_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_css_value; } }
	 
		public Css_valueContext() { }
		public virtual void CopyFrom(Css_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CssTextContext : Css_valueContext {
		public Css_textContext text;
		public Css_textContext css_text() {
			return GetRuleContext<Css_textContext>(0);
		}
		public CssTextContext(Css_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCssText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCssText(this);
		}
	}
	public partial class CssValueContext : Css_valueContext {
		public ExpressionContext exp;
		public ITerminalNode LCURL() { return GetToken(EParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(EParser.RCURL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CssValueContext(Css_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCssValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCssValue(this);
		}
	}

	[RuleVersion(0)]
	public Css_valueContext css_value() {
		Css_valueContext _localctx = new Css_valueContext(Context, State);
		EnterRule(_localctx, 482, RULE_css_value);
		try {
			State = 2761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				_localctx = new CssValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2756; Match(LCURL);
				State = 2757; ((CssValueContext)_localctx).exp = expression(0);
				State = 2758; Match(RCURL);
				}
				break;
			case INDENT:
			case DEDENT:
			case LF_TAB:
			case LF_MORE:
			case LF:
			case TAB:
			case COMMENT:
			case JAVA:
			case CSHARP:
			case PYTHON2:
			case PYTHON3:
			case JAVASCRIPT:
			case SWIFT:
			case COMMA:
			case RANGE:
			case DOT:
			case LPAR:
			case RPAR:
			case LBRAK:
			case RBRAK:
			case QMARK:
			case XMARK:
			case AMP:
			case AMP2:
			case PIPE:
			case PIPE2:
			case PLUS:
			case MINUS:
			case STAR:
			case SLASH:
			case BSLASH:
			case PERCENT:
			case GT:
			case GTE:
			case LT:
			case LTE:
			case LTGT:
			case LTCOLONGT:
			case EQ:
			case XEQ:
			case EQ2:
			case TEQ:
			case TILDE:
			case LARROW:
			case RARROW:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case VERSION:
			case METHOD_T:
			case CODE:
			case DOCUMENT:
			case BLOB:
			case IMAGE:
			case UUID:
			case ITERATOR:
			case CURSOR:
			case HTML:
			case ABSTRACT:
			case ALL:
			case ALWAYS:
			case AND:
			case ANY:
			case AS:
			case ASC:
			case ATTR:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case BINDINGS:
			case BREAK:
			case BY:
			case CASE:
			case CATCH:
			case CATEGORY:
			case CLASS:
			case CLOSE:
			case CONTAINS:
			case DEF:
			case DEFAULT:
			case DEFINE:
			case DELETE:
			case DESC:
			case DO:
			case DOING:
			case EACH:
			case ELSE:
			case ENUM:
			case ENUMERATED:
			case EXCEPT:
			case EXECUTE:
			case EXPECTING:
			case EXTENDS:
			case FETCH:
			case FILTERED:
			case FINALLY:
			case FLUSH:
			case FOR:
			case FROM:
			case GETTER:
			case HAS:
			case IF:
			case IN:
			case INDEX:
			case INVOKE:
			case IS:
			case MATCHING:
			case METHOD:
			case METHODS:
			case MODULO:
			case MUTABLE:
			case NATIVE:
			case NONE:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case ONE:
			case OPEN:
			case OPERATOR:
			case OR:
			case ORDER:
			case OTHERWISE:
			case PASS:
			case RAISE:
			case READ:
			case RECEIVING:
			case RESOURCE:
			case RETURN:
			case RETURNING:
			case ROWS:
			case SELF:
			case SETTER:
			case SINGLETON:
			case SORTED:
			case STORABLE:
			case STORE:
			case SWITCH:
			case TEST:
			case THEN:
			case THIS:
			case THROW:
			case TO:
			case TRY:
			case VERIFYING:
			case WIDGET:
			case WITH:
			case WHEN:
			case WHERE:
			case WHILE:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case ARONDBASE_IDENTIFIER:
			case TEXT_LITERAL:
			case UUID_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
			case VERSION_LITERAL:
				_localctx = new CssTextContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2760; ((CssTextContext)_localctx).text = css_text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Css_textContext : ParserRuleContext {
		public ITerminalNode[] LCURL() { return GetTokens(EParser.LCURL); }
		public ITerminalNode LCURL(int i) {
			return GetToken(EParser.LCURL, i);
		}
		public ITerminalNode[] RCURL() { return GetTokens(EParser.RCURL); }
		public ITerminalNode RCURL(int i) {
			return GetToken(EParser.RCURL, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(EParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(EParser.COLON, i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(EParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(EParser.SEMI, i);
		}
		public ITerminalNode[] WS() { return GetTokens(EParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(EParser.WS, i);
		}
		public Css_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_css_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.EnterCss_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEParserListener typedListener = listener as IEParserListener;
			if (typedListener != null) typedListener.ExitCss_text(this);
		}
	}

	[RuleVersion(0)]
	public Css_textContext css_text() {
		Css_textContext _localctx = new Css_textContext(Context, State);
		EnterRule(_localctx, 484, RULE_css_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2763;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << COLON) | (1L << SEMI) | (1L << LCURL) | (1L << RCURL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 2766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << DEDENT) | (1L << LF_TAB) | (1L << LF_MORE) | (1L << LF) | (1L << TAB) | (1L << COMMENT) | (1L << JAVA) | (1L << CSHARP) | (1L << PYTHON2) | (1L << PYTHON3) | (1L << JAVASCRIPT) | (1L << SWIFT) | (1L << COMMA) | (1L << RANGE) | (1L << DOT) | (1L << LPAR) | (1L << RPAR) | (1L << LBRAK) | (1L << RBRAK) | (1L << QMARK) | (1L << XMARK) | (1L << AMP) | (1L << AMP2) | (1L << PIPE) | (1L << PIPE2) | (1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << SLASH) | (1L << BSLASH) | (1L << PERCENT) | (1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE) | (1L << LTGT) | (1L << LTCOLONGT) | (1L << EQ) | (1L << XEQ) | (1L << EQ2) | (1L << TEQ) | (1L << TILDE) | (1L << LARROW) | (1L << RARROW) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << VERSION) | (1L << METHOD_T) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BLOB - 64)) | (1L << (IMAGE - 64)) | (1L << (UUID - 64)) | (1L << (ITERATOR - 64)) | (1L << (CURSOR - 64)) | (1L << (HTML - 64)) | (1L << (ABSTRACT - 64)) | (1L << (ALL - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASC - 64)) | (1L << (ATTR - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (ATTRIBUTES - 64)) | (1L << (BINDINGS - 64)) | (1L << (BREAK - 64)) | (1L << (BY - 64)) | (1L << (CASE - 64)) | (1L << (CATCH - 64)) | (1L << (CATEGORY - 64)) | (1L << (CLASS - 64)) | (1L << (CLOSE - 64)) | (1L << (CONTAINS - 64)) | (1L << (DEF - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINE - 64)) | (1L << (DELETE - 64)) | (1L << (DESC - 64)) | (1L << (DO - 64)) | (1L << (DOING - 64)) | (1L << (EACH - 64)) | (1L << (ELSE - 64)) | (1L << (ENUM - 64)) | (1L << (ENUMERATED - 64)) | (1L << (EXCEPT - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPECTING - 64)) | (1L << (EXTENDS - 64)) | (1L << (FETCH - 64)) | (1L << (FILTERED - 64)) | (1L << (FINALLY - 64)) | (1L << (FLUSH - 64)) | (1L << (FOR - 64)) | (1L << (FROM - 64)) | (1L << (GETTER - 64)) | (1L << (HAS - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INVOKE - 64)) | (1L << (IS - 64)) | (1L << (MATCHING - 64)) | (1L << (METHOD - 64)) | (1L << (METHODS - 64)) | (1L << (MODULO - 64)) | (1L << (MUTABLE - 64)) | (1L << (NATIVE - 64)) | (1L << (NONE - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ONE - 128)) | (1L << (OPEN - 128)) | (1L << (OPERATOR - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OTHERWISE - 128)) | (1L << (PASS - 128)) | (1L << (RAISE - 128)) | (1L << (READ - 128)) | (1L << (RECEIVING - 128)) | (1L << (RESOURCE - 128)) | (1L << (RETURN - 128)) | (1L << (RETURNING - 128)) | (1L << (ROWS - 128)) | (1L << (SELF - 128)) | (1L << (SETTER - 128)) | (1L << (SINGLETON - 128)) | (1L << (SORTED - 128)) | (1L << (STORABLE - 128)) | (1L << (STORE - 128)) | (1L << (SWITCH - 128)) | (1L << (TEST - 128)) | (1L << (THEN - 128)) | (1L << (THIS - 128)) | (1L << (THROW - 128)) | (1L << (TO - 128)) | (1L << (TRY - 128)) | (1L << (VERIFYING - 128)) | (1L << (WIDGET - 128)) | (1L << (WITH - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WHILE - 128)) | (1L << (WRITE - 128)) | (1L << (BOOLEAN_LITERAL - 128)) | (1L << (CHAR_LITERAL - 128)) | (1L << (MIN_INTEGER - 128)) | (1L << (MAX_INTEGER - 128)) | (1L << (SYMBOL_IDENTIFIER - 128)) | (1L << (TYPE_IDENTIFIER - 128)) | (1L << (VARIABLE_IDENTIFIER - 128)) | (1L << (NATIVE_IDENTIFIER - 128)) | (1L << (DOLLAR_IDENTIFIER - 128)) | (1L << (ARONDBASE_IDENTIFIER - 128)) | (1L << (TEXT_LITERAL - 128)) | (1L << (UUID_LITERAL - 128)) | (1L << (INTEGER_LITERAL - 128)) | (1L << (HEXA_LITERAL - 128)) | (1L << (DECIMAL_LITERAL - 128)) | (1L << (DATETIME_LITERAL - 128)) | (1L << (TIME_LITERAL - 128)) | (1L << (DATE_LITERAL - 128)) | (1L << (PERIOD_LITERAL - 128)) | (1L << (VERSION_LITERAL - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 39: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 45: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 46: return unresolved_expression_sempred((Unresolved_expressionContext)_localctx, predIndex);
		case 47: return unresolved_selector_sempred((Unresolved_selectorContext)_localctx, predIndex);
		case 49: return invocation_trailer_sempred((Invocation_trailerContext)_localctx, predIndex);
		case 50: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 51: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 61: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 62: return with_argument_assignment_list_sempred((With_argument_assignment_listContext)_localctx, predIndex);
		case 65: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 88: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 99: return nospace_hyphen_identifier_or_keyword_sempred((Nospace_hyphen_identifier_or_keywordContext)_localctx, predIndex);
		case 100: return nospace_identifier_or_keyword_sempred((Nospace_identifier_or_keywordContext)_localctx, predIndex);
		case 113: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 152: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 153: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 160: return new_token_sempred((New_tokenContext)_localctx, predIndex);
		case 161: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 162: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 163: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 164: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 171: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 177: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 184: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 190: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 191: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 193: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 197: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 203: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 206: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 207: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 211: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 217: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 220: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		case 240: return css_identifier_sempred((Css_identifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 42);
		case 3: return Precpred(Context, 41);
		case 4: return Precpred(Context, 40);
		case 5: return Precpred(Context, 39);
		case 6: return Precpred(Context, 38);
		case 7: return Precpred(Context, 36);
		case 8: return Precpred(Context, 35);
		case 9: return Precpred(Context, 34);
		case 10: return Precpred(Context, 33);
		case 11: return Precpred(Context, 30);
		case 12: return Precpred(Context, 29);
		case 13: return Precpred(Context, 28);
		case 14: return Precpred(Context, 27);
		case 15: return Precpred(Context, 26);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		case 20: return Precpred(Context, 21);
		case 21: return Precpred(Context, 20);
		case 22: return Precpred(Context, 19);
		case 23: return Precpred(Context, 18);
		case 24: return Precpred(Context, 17);
		case 25: return Precpred(Context, 16);
		case 26: return Precpred(Context, 15);
		case 27: return Precpred(Context, 1);
		case 28: return Precpred(Context, 37);
		case 29: return Precpred(Context, 32);
		case 30: return Precpred(Context, 31);
		case 31: return Precpred(Context, 8);
		}
		return true;
	}
	private bool unresolved_expression_sempred(Unresolved_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool unresolved_selector_sempred(Unresolved_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool invocation_trailer_sempred(Invocation_trailerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.willBe(EParser.LF);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.wasNot(EParser.WS);
		case 37: return this.wasNot(EParser.WS);
		case 38: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return this.was(EParser.WS);
		}
		return true;
	}
	private bool with_argument_assignment_list_sempred(With_argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return this.wasNot(EParser.WS);
		case 42: return this.wasNot(EParser.WS);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 5);
		case 44: return Precpred(Context, 4);
		case 45: return Precpred(Context, 3);
		}
		return true;
	}
	private bool nospace_hyphen_identifier_or_keyword_sempred(Nospace_hyphen_identifier_or_keywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return this.wasNotWhiteSpace();
		}
		return true;
	}
	private bool nospace_identifier_or_keyword_sempred(Nospace_identifier_or_keywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return this.wasNotWhiteSpace();
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 2);
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return this.willBeAOrAn();
		}
		return true;
	}
	private bool new_token_sempred(New_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return this.isText(_localctx.i1,"new");
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Precpred(Context, 1);
		}
		return true;
	}
	private bool css_identifier_sempred(Css_identifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xB7', '\xAD3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x1EF', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x1F6', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x214', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x21A', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x21F', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x225', '\n', '\x6', '\x5', '\x6', '\x227', '\n', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x22A', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x231', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x23A', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x253', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x257', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x262', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x26B', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x27A', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x283', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x28A', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x294', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x2AA', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x2C1', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x2CE', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x2D9', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x2E7', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x2ED', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x2F8', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x306', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x318', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x31B', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x325', '\n', '\x15', '\x5', '\x15', '\x327', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x330', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x334', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x33C', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x340', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x34C', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x351', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x355', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x370', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x377', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x37C', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x380', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x396', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x39F', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x3A3', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x3AB', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x3AF', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x3B4', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x3BB', '\n', ' ', '\x3', ' ', 
		'\x5', ' ', '\x3BE', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x3DF', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x3F2', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x3F9', '\n', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x41B', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x424', '\n', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\a', ')', '\x439', '\n', ')', '\f', ')', '\xE', ')', 
		'\x43C', '\v', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x44B', '\n', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x450', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x458', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x461', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x478', '\n', ',', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x47E', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x487', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x5', '/', '\x4A1', '\n', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\a', '/', '\x511', '\n', '/', '\f', '/', '\xE', '/', '\x514', '\v', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\a', '\x30', '\x51B', '\n', '\x30', '\f', '\x30', '\xE', '\x30', 
		'\x51E', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x530', '\n', '\x34', 
		'\f', '\x34', '\xE', '\x34', '\x533', '\v', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x542', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x547', '\n', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x551', '\n', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x556', '\n', 
		'\x38', '\x5', '\x38', '\x558', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x55E', '\n', '\x38', '\x5', 
		'\x38', '\x560', '\n', '\x38', '\x5', '\x38', '\x562', '\n', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x5', '<', '\x576', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x5', '<', '\x57D', '\n', '<', '\x3', '<', '\x3', 
		'<', '\x5', '<', '\x581', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x58C', '\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x590', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x595', '\n', 
		'<', '\x5', '<', '\x597', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x5', '=', '\x59C', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x5AB', '\n', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x5AF', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x5BA', '\n', '=', '\x3', '=', '\x3', '=', 
		'\x5', '=', '\x5BE', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x5C3', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x5CD', '\n', 
		'=', '\x3', '>', '\x3', '>', '\x5', '>', '\x5D1', '\n', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', 
		'\x5D9', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x5E0', '\n', '?', '\x5', '?', '\x5E2', '\n', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\x5E7', '\n', '?', '\x5', '?', 
		'\x5E9', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\a', '@', '\x5F2', '\n', '@', '\f', '@', 
		'\xE', '@', '\x5F5', '\v', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x5FA', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x60A', '\n', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\a', '\x45', 
		'\x611', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x614', '\v', '\x45', 
		'\x3', '\x46', '\x6', '\x46', '\x617', '\n', '\x46', '\r', '\x46', '\xE', 
		'\x46', '\x618', '\x3', 'G', '\a', 'G', '\x61C', '\n', 'G', '\f', 'G', 
		'\xE', 'G', '\x61F', '\v', 'G', '\x3', 'H', '\x6', 'H', '\x622', '\n', 
		'H', '\r', 'H', '\xE', 'H', '\x623', '\x3', 'H', '\x3', 'H', '\x3', 'I', 
		'\a', 'I', '\x629', '\n', 'I', '\f', 'I', '\xE', 'I', '\x62C', '\v', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x5', 'K', 
		'\x633', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x63C', '\n', 'L', '\f', 'L', 
		'\xE', 'L', '\x63F', '\v', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\a', 
		'M', '\x644', '\n', 'M', '\f', 'M', '\xE', 'M', '\x647', '\v', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\a', 'M', '\x64C', '\n', 'M', '\f', 'M', 
		'\xE', 'M', '\x64F', '\v', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x657', '\n', 'M', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x65E', '\n', 
		'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\x666', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\a', 'R', '\x66C', '\n', 'R', '\f', 'R', '\xE', 'R', '\x66F', 
		'\v', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 'S', 
		'\x675', '\n', 'S', '\f', 'S', '\xE', 'S', '\x678', '\v', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\a', 'T', '\x67D', '\n', 'T', '\f', 'T', 
		'\xE', 'T', '\x680', '\v', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x5', 'U', '\x68C', '\n', 'U', '\x3', 'V', '\x5', 'V', '\x68F', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x693', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'W', '\x5', 'W', '\x698', '\n', 'W', '\x3', 'W', 
		'\x3', 'W', '\x5', 'W', '\x69C', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\a', 'X', '\x6A3', '\n', 'X', '\f', 'X', 
		'\xE', 'X', '\x6A6', '\v', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x6BA', '\n', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\a', 'Z', '\x6C3', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x6C6', '\v', 'Z', 
		'\x3', '[', '\x3', '[', '\x5', '[', '\x6CA', '\n', '[', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x6DC', '\n', 
		'\\', '\x3', ']', '\x3', ']', '\x3', '^', '\x5', '^', '\x6E1', '\n', '^', 
		'\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\x6EA', '\n', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\x6EE', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\a', '\x62', '\x6F3', '\n', '\x62', '\f', '\x62', '\xE', '\x62', 
		'\x6F6', '\v', '\x62', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x6FA', 
		'\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x6FE', '\n', 
		'\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x5', 'g', '\x70A', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 
		'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\a', 'm', '\x719', '\n', 'm', 
		'\f', 'm', '\xE', 'm', '\x71C', '\v', 'm', '\x3', 'n', '\x3', 'n', '\x5', 
		'n', '\x720', '\n', 'n', '\x3', 'n', '\x5', 'n', '\x723', '\n', 'n', '\x3', 
		'o', '\x3', 'o', '\x5', 'o', '\x727', '\n', 'o', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x5', 'p', '\x72C', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x733', '\n', 'r', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\a', 's', '\x73E', '\n', 's', '\f', 's', '\xE', 
		's', '\x741', '\v', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\a', 't', '\x747', '\n', 't', '\f', 't', '\xE', 't', '\x74A', '\v', 't', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\a', 'u', '\x74F', '\n', 'u', '\f', 
		'u', '\xE', 'u', '\x752', '\v', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\a', 'u', '\x757', '\n', 'u', '\f', 'u', '\xE', 'u', '\x75A', '\v', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', 
		'\x761', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\a', 
		'v', '\x767', '\n', 'v', '\f', 'v', '\xE', 'v', '\x76A', '\v', 'v', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x76F', '\n', 'w', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x77B', '\n', 'x', '\x3', 
		'y', '\x3', 'y', '\x5', 'y', '\x77F', '\n', 'y', '\x3', 'z', '\x3', 'z', 
		'\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z', '\x787', '\n', 
		'z', '\f', 'z', '\xE', 'z', '\x78A', '\v', 'z', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\a', '{', '\x78F', '\n', '{', '\f', '{', '\xE', '{', '\x792', 
		'\v', '{', '\x3', '{', '\x5', '{', '\x795', '\n', '{', '\x3', '|', '\x3', 
		'|', '\x3', '|', '\x3', '|', '\x5', '|', '\x79B', '\n', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\a', '|', '\x7A0', '\n', '|', '\f', '|', '\xE', 
		'|', '\x7A3', '\v', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\x7A7', 
		'\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\a', '}', '\x7AC', '\n', 
		'}', '\f', '}', '\xE', '}', '\x7AF', '\v', '}', '\x3', '~', '\x3', '~', 
		'\x3', '~', '\a', '~', '\x7B4', '\n', '~', '\f', '~', '\xE', '~', '\x7B7', 
		'\v', '~', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x5', '\x7F', '\x7BD', '\n', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\a', '\x81', '\x7C5', 
		'\n', '\x81', '\f', '\x81', '\xE', '\x81', '\x7C8', '\v', '\x81', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x5', 
		'\x82', '\x7D4', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\x7D8', '\n', '\x83', '\x3', '\x83', '\x5', '\x83', '\x7DB', '\n', '\x83', 
		'\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x7DF', '\n', '\x84', '\x3', 
		'\x84', '\x5', '\x84', '\x7E2', '\n', '\x84', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\a', '\x85', '\x7E8', '\n', '\x85', '\f', 
		'\x85', '\xE', '\x85', '\x7EB', '\v', '\x85', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\a', '\x86', '\x7F1', '\n', '\x86', '\f', 
		'\x86', '\xE', '\x86', '\x7F4', '\v', '\x86', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\a', '\x87', '\x7FA', '\n', '\x87', '\f', 
		'\x87', '\xE', '\x87', '\x7FD', '\v', '\x87', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\a', '\x88', '\x803', '\n', '\x88', '\f', 
		'\x88', '\xE', '\x88', '\x806', '\v', '\x88', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\x816', '\n', '\x89', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', 
		'\x8A', '\x827', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\a', '\x8B', '\x82C', '\n', '\x8B', '\f', '\x8B', '\xE', '\x8B', '\x82F', 
		'\v', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x835', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', 
		'\x8F', '\x5', '\x8F', '\x83F', '\n', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', '\x90', 
		'\x847', '\n', '\x90', '\x3', '\x91', '\x5', '\x91', '\x84A', '\n', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x84E', '\n', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x92', '\x5', '\x92', '\x853', '\n', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\x85D', '\n', 
		'\x92', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x861', '\n', '\x93', 
		'\x3', '\x93', '\x3', '\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\a', '\x94', '\x86A', '\n', '\x94', '\f', 
		'\x94', '\xE', '\x94', '\x86D', '\v', '\x94', '\x5', '\x94', '\x86F', 
		'\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\a', '\x95', 
		'\x874', '\n', '\x95', '\f', '\x95', '\xE', '\x95', '\x877', '\v', '\x95', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x97', 
		'\x3', '\x97', '\x5', '\x97', '\x87F', '\n', '\x97', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\x88A', '\n', '\x98', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\a', '\x9A', 
		'\x895', '\n', '\x9A', '\f', '\x9A', '\xE', '\x9A', '\x898', '\v', '\x9A', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x89E', '\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\a', 
		'\x9E', '\x8AD', '\n', '\x9E', '\f', '\x9E', '\xE', '\x9E', '\x8B0', '\v', 
		'\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\a', '\x9F', '\x8B5', 
		'\n', '\x9F', '\f', '\x9F', '\xE', '\x9F', '\x8B8', '\v', '\x9F', '\x3', 
		'\x9F', '\x5', '\x9F', '\x8BB', '\n', '\x9F', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', 
		'\x8C3', '\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x5', '\xAC', '\x8E7', '\n', '\xAC', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\a', '\xAD', '\x8EE', '\n', 
		'\xAD', '\f', '\xAD', '\xE', '\xAD', '\x8F1', '\v', '\xAD', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x5', '\xAE', '\x8FA', '\n', '\xAE', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x906', 
		'\n', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', 
		'\x90B', '\n', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\a', 
		'\xB3', '\x915', '\n', '\xB3', '\f', '\xB3', '\xE', '\xB3', '\x918', '\v', 
		'\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB6', '\x3', 
		'\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', 
		'\xB7', '\x5', '\xB7', '\x929', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x930', '\n', 
		'\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\a', '\xBA', '\x937', '\n', '\xBA', '\f', '\xBA', '\xE', '\xBA', 
		'\x93A', '\v', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x941', '\n', '\xBB', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x94B', '\n', '\xBD', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x950', '\n', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x95A', '\n', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\a', '\xC0', '\x962', '\n', '\xC0', '\f', '\xC0', 
		'\xE', '\xC0', '\x965', '\v', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\a', '\xC1', '\x972', 
		'\n', '\xC1', '\f', '\xC1', '\xE', '\xC1', '\x975', '\v', '\xC1', '\x3', 
		'\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x97E', '\n', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\a', '\xC3', '\x983', '\n', '\xC3', '\f', 
		'\xC3', '\xE', '\xC3', '\x986', '\v', '\xC3', '\x3', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x98D', '\n', 
		'\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', 
		'\xC6', '\x998', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\a', '\xC7', '\x99F', '\n', '\xC7', '\f', 
		'\xC7', '\xE', '\xC7', '\x9A2', '\v', '\xC7', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x9A9', '\n', 
		'\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9B3', 
		'\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', 
		'\x9B8', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\a', 
		'\xCD', '\x9C2', '\n', '\xCD', '\f', '\xCD', '\xE', '\xCD', '\x9C5', '\v', 
		'\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\a', 
		'\xD0', '\x9D5', '\n', '\xD0', '\f', '\xD0', '\xE', '\xD0', '\x9D8', '\v', 
		'\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\a', '\xD1', '\x9DF', '\n', '\xD1', '\f', '\xD1', '\xE', '\xD1', 
		'\x9E2', '\v', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x5', '\xD2', '\x9E9', '\n', '\xD2', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\x9F4', '\n', 
		'\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\a', '\xD5', '\x9FB', '\n', '\xD5', '\f', '\xD5', '\xE', '\xD5', 
		'\x9FE', '\v', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x5', '\xD6', '\xA05', '\n', '\xD6', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD9', 
		'\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xA0F', '\n', '\xD9', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xA14', '\n', '\xDA', 
		'\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\a', '\xDB', '\xA1E', '\n', 
		'\xDB', '\f', '\xDB', '\xE', '\xDB', '\xA21', '\v', '\xDB', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x5', '\xDE', '\xA2E', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', 
		'\xDE', '\a', '\xDE', '\xA33', '\n', '\xDE', '\f', '\xDE', '\xE', '\xDE', 
		'\xA36', '\v', '\xDE', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x5', '\xDF', '\xA3D', '\n', '\xDF', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xA43', '\n', 
		'\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xA48', 
		'\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xA4C', '\n', 
		'\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\xA50', '\n', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x5', '\xE4', '\xA57', '\n', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\a', '\xE6', '\xA61', '\n', '\xE6', '\f', '\xE6', '\xE', '\xE6', 
		'\xA64', '\v', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\a', '\xE7', '\xA6D', 
		'\n', '\xE7', '\f', '\xE7', '\xE', '\xE7', '\xA70', '\v', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', 
		'\xE8', '\x3', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\a', 
		'\xE9', '\xA7C', '\n', '\xE9', '\f', '\xE9', '\xE', '\xE9', '\xA7F', '\v', 
		'\xE9', '\x3', '\xEA', '\x3', '\xEA', '\a', '\xEA', '\xA83', '\n', '\xEA', 
		'\f', '\xEA', '\xE', '\xEA', '\xA86', '\v', '\xEA', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xA8B', '\n', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', 
		'\x3', '\xEC', '\x5', '\xEC', '\xA94', '\n', '\xEC', '\x3', '\xED', '\x6', 
		'\xED', '\xA97', '\n', '\xED', '\r', '\xED', '\xE', '\xED', '\xA98', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\xA9F', 
		'\n', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\xAA2', '\n', '\xEE', '\x3', 
		'\xEF', '\x6', '\xEF', '\xAA5', '\n', '\xEF', '\r', '\xEF', '\xE', '\xEF', 
		'\xAA6', '\x3', '\xF0', '\x3', '\xF0', '\x6', '\xF0', '\xAAB', '\n', '\xF0', 
		'\r', '\xF0', '\xE', '\xF0', '\xAAC', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\xABA', 
		'\n', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x6', '\xF2', '\xABE', '\n', 
		'\xF2', '\r', '\xF2', '\xE', '\xF2', '\xABF', '\a', '\xF2', '\xAC2', '\n', 
		'\xF2', '\f', '\xF2', '\xE', '\xF2', '\xAC5', '\v', '\xF2', '\x3', '\xF3', 
		'\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', 
		'\xACC', '\n', '\xF3', '\x3', '\xF4', '\x6', '\xF4', '\xACF', '\n', '\xF4', 
		'\r', '\xF4', '\xE', '\xF4', '\xAD0', '\x3', '\xF4', '\x2', '\x19', '&', 
		'P', '\\', '^', '\x66', '~', '\xB2', '\xE4', '\x132', '\x158', '\x164', 
		'\x172', '\x17E', '\x180', '\x184', '\x18C', '\x198', '\x19E', '\x1A0', 
		'\x1A8', '\x1B4', '\x1BA', '\x1E2', '\xF5', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', 
		'\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', 
		'\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', 
		'\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', 
		'\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', 
		'\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x2', '\x10', '\x3', '\x2', '\"', 
		'#', '\x4', '\x2', '\x3', '\x3', '\a', '\t', '\x4', '\x2', '\x94', '\x94', 
		'\xAA', '\xAA', '\x3', '\x2', '\xA8', '\xAA', '\x4', '\x2', '\x90', '\x90', 
		'\x99', '\x99', '\x4', '\x2', 'N', 'N', '_', '_', '\x5', '\x2', '\v', 
		'\x10', '\x35', '\x97', '\x99', '\xA3', '\x4', '\x2', '\'', '\'', 'z', 
		'z', '\r', '\x2', '\x35', '>', '\x44', '\x44', 'G', 'G', '}', '}', '\x80', 
		'\x80', '\x8A', '\x8A', '\x90', '\x90', '\x97', '\x97', '\xA3', '\xA3', 
		'\xA8', '\xAA', '\xAC', '\xAC', '\f', '\x2', '\x35', '>', '\x44', '\x44', 
		'G', 'G', '}', '}', '\x80', '\x80', '\x8A', '\x8A', '\x97', '\x97', '\x99', 
		'\x99', '\xA3', '\xA3', '\xA8', '\xAA', '\f', '\x2', '\x35', '>', '\x44', 
		'\x44', 'G', 'G', '}', '}', '\x80', '\x80', '\x8A', '\x8A', '\x90', '\x90', 
		'\x97', '\x97', '\xA3', '\xA3', '\xA8', '\xAC', '\f', '\x2', '\x35', '>', 
		'\x44', '\x44', 'G', 'G', '}', '}', '\x80', '\x80', '\x8A', '\x8A', '\x90', 
		'\x90', '\x97', '\x97', '\xA3', '\xA3', '\xA8', '\xAA', '\x5', '\x2', 
		'\x1A', '\x1B', '(', '(', '*', '*', '\x5', '\x2', '\t', '\t', '\x11', 
		'\x12', '\x1A', '\x1B', '\x2', '\xB73', '\x2', '\x1E8', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x6', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x215', '\x3', '\x2', '\x2', '\x2', '\f', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x10', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x289', '\x3', '\x2', '\x2', '\x2', '\x16', '\x28B', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x2BC', '\x3', '\x2', '\x2', '\x2', ' ', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x2E8', '\x3', '\x2', '\x2', '\x2', '$', '\x307', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x310', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x326', '\x3', '\x2', '\x2', '\x2', '*', '\x328', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x335', '\x3', '\x2', '\x2', '\x2', '.', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x35C', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x371', '\x3', '\x2', '\x2', '\x2', '\x34', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x378', '\x3', '\x2', '\x2', '\x2', '\x38', '\x395', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x397', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x3A2', '\x3', '\x2', '\x2', '\x2', '>', '\x3BD', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x3C8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x3F1', '\x3', '\x2', '\x2', '\x2', 'H', '\x3F3', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x401', '\x3', '\x2', '\x2', '\x2', 'L', '\x40A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x425', '\x3', '\x2', '\x2', '\x2', 'R', '\x43D', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x440', '\x3', '\x2', '\x2', '\x2', 'V', '\x477', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x479', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x47B', '\x3', '\x2', '\x2', '\x2', '\\', '\x4A0', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x515', '\x3', '\x2', '\x2', '\x2', '`', '\x51F', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x523', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x528', '\x3', '\x2', '\x2', '\x2', '\x66', '\x52A', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x541', '\x3', '\x2', '\x2', '\x2', 'j', '\x543', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x561', '\x3', '\x2', '\x2', '\x2', 'p', '\x563', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x568', '\x3', '\x2', '\x2', '\x2', 't', '\x56C', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x596', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x5CC', '\x3', '\x2', '\x2', '\x2', 'z', '\x5CE', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x5E8', '\x3', '\x2', '\x2', '\x2', '~', '\x5EA', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x5F9', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x84', '\x609', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x88', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x616', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x621', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x92', '\x62F', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x632', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x637', '\x3', '\x2', '\x2', '\x2', '\x98', '\x645', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x658', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x65F', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x661', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x665', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x667', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x670', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x679', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x68B', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x68E', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x697', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x69F', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x6A7', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x6B9', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x6DB', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x6E0', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x6E4', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x6ED', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x6F9', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x6FD', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x703', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x709', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x70D', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x70F', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x711', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x713', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x715', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x726', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x728', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x72D', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x732', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x734', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x742', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x750', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x762', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x76E', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x77A', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x77C', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x780', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x78B', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x7A8', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\x7B0', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x7BC', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x7C0', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x7D3', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x106', '\x7DC', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x7EC', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x7F5', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x110', '\x815', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x826', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x828', '\x3', '\x2', '\x2', '\x2', '\x116', '\x834', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x836', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x838', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x83E', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x846', '\x3', '\x2', '\x2', '\x2', '\x120', '\x849', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x852', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x85E', '\x3', '\x2', '\x2', '\x2', '\x126', '\x864', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x870', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x878', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x87E', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x889', '\x3', '\x2', '\x2', '\x2', '\x130', '\x88B', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x88F', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x89D', '\x3', '\x2', '\x2', '\x2', '\x136', '\x89F', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x8A9', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x8B1', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x140', '\x8C4', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x8C6', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x8C9', '\x3', '\x2', '\x2', '\x2', '\x146', '\x8CC', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x8D2', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x8D5', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x8D7', '\x3', '\x2', '\x2', '\x2', '\x150', '\x8D9', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x8DB', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x8DD', '\x3', '\x2', '\x2', '\x2', '\x156', '\x8E6', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x8E8', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x8F9', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x8FB', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x8FD', '\x3', '\x2', '\x2', '\x2', '\x160', '\x905', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x907', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x166', '\x919', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x921', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x928', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x92A', '\x3', '\x2', '\x2', '\x2', '\x170', '\x92F', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x931', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x940', '\x3', '\x2', '\x2', '\x2', '\x176', '\x942', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x94C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x959', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x180', '\x966', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x976', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x97D', '\x3', '\x2', '\x2', '\x2', '\x186', '\x98C', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x98E', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x997', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x999', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x9A8', '\x3', '\x2', '\x2', '\x2', '\x190', '\x9AA', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x9AC', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\x196', '\x9B4', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x9C6', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x9CA', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x9D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x9E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x9F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x9F5', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\xA04', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xA06', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\xA08', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\xA0E', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\xA10', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\xA17', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\xA22', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\xA26', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\xA2D', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\xA3C', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\xA3E', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\xA42', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\xA4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\xA56', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\xA58', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\xA5C', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\xA68', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\xA73', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\xA78', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\xA80', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\xA87', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\xA93', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\xA96', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\xAA1', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\xAA4', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\xAA8', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\xAB0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\xAB9', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\xACB', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\xACE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', ']', '\x2', '\x2', '\x1E9', 
		'\x1EA', '\x5', '\xD2', 'j', '\x2', '\x1EA', '\x1EB', '\a', 'M', '\x2', 
		'\x2', '\x1EB', '\x1EE', '\a', '\x65', '\x2', '\x2', '\x1EC', '\x1EF', 
		'\a', 'W', '\x2', '\x2', '\x1ED', '\x1EF', '\x5', '\xD2', 'j', '\x2', 
		'\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\x5', '(', '\x15', '\x2', '\x1F1', '\x1F2', '\a', '\x13', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\a', 'K', '\x2', '\x2', '\x1F3', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F6', '\a', '\x9F', '\x2', '\x2', '\x1F5', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F4', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x5', '\x14A', '\xA6', '\x2', '\x1F8', '\x1F9', '\a', '\x11', '\x2', 
		'\x2', '\x1F9', '\x1FA', '\x5', '\x8E', 'H', '\x2', '\x1FA', '\x1FB', 
		'\x5', '\xA4', 'S', '\x2', '\x1FB', '\x1FC', '\x5', '\x90', 'I', '\x2', 
		'\x1FC', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', ']', 
		'\x2', '\x2', '\x1FE', '\x1FF', '\x5', '\xD2', 'j', '\x2', '\x1FF', '\x200', 
		'\a', 'M', '\x2', '\x2', '\x200', '\x201', '\a', '\x65', '\x2', '\x2', 
		'\x201', '\x202', '\x5', '\xB6', '\\', '\x2', '\x202', '\x203', '\a', 
		'\x9F', '\x2', '\x2', '\x203', '\x204', '\x5', '\x14A', '\xA6', '\x2', 
		'\x204', '\x205', '\a', '\x11', '\x2', '\x2', '\x205', '\x206', '\x5', 
		'\x8E', 'H', '\x2', '\x206', '\x207', '\x5', '\xA2', 'R', '\x2', '\x207', 
		'\x208', '\x5', '\x90', 'I', '\x2', '\x208', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x209', '\x20A', '\x5', '\xD4', 'k', '\x2', '\x20A', '\x20B', 
		'\a', '\x9F', '\x2', '\x2', '\x20B', '\x20C', '\x5', '\\', '/', '\x2', 
		'\x20C', '\x20D', '\a', 'M', '\x2', '\x2', '\x20D', '\x20E', '\x5', '\x148', 
		'\xA5', '\x2', '\x20E', '\a', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', 
		'\x5', '\xD4', 'k', '\x2', '\x210', '\x213', '\x5', '~', '@', '\x2', '\x211', 
		'\x212', '\a', 'K', '\x2', '\x2', '\x212', '\x214', '\x5', '\x80', '\x41', 
		'\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\a', ']', '\x2', '\x2', '\x216', '\x217', '\x5', '\xD0', 
		'i', '\x2', '\x217', '\x219', '\a', 'M', '\x2', '\x2', '\x218', '\x21A', 
		'\a', '\x94', '\x2', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21C', '\x5', '\xB2', 'Z', '\x2', '\x21C', 
		'\x21E', '\a', 'P', '\x2', '\x2', '\x21D', '\x21F', '\x5', '\xA8', 'U', 
		'\x2', '\x21E', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x226', '\a', '\x9F', '\x2', '\x2', '\x221', '\x224', '\x5', 
		'\xF8', '}', '\x2', '\x222', '\x223', '\a', 'K', '\x2', '\x2', '\x223', 
		'\x225', '\x5', '\xCE', 'h', '\x2', '\x224', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x22A', '\a', 't', '\x2', '\x2', '\x229', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\v', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\a', 
		']', '\x2', '\x2', '\x22C', '\x22D', '\x5', '\xD2', 'j', '\x2', '\x22D', 
		'\x230', '\a', 'M', '\x2', '\x2', '\x22E', '\x231', '\a', '\x9E', '\x2', 
		'\x2', '\x22F', '\x231', '\x5', '\xD2', 'j', '\x2', '\x230', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x239', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\a', 
		'\x9F', '\x2', '\x2', '\x233', '\x234', '\a', 'y', '\x2', '\x2', '\x234', 
		'\x235', '\a', '\x11', '\x2', '\x2', '\x235', '\x236', '\x5', '\x8E', 
		'H', '\x2', '\x236', '\x237', '\x5', '\xE6', 't', '\x2', '\x237', '\x238', 
		'\x5', '\x90', 'I', '\x2', '\x238', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x239', '\x232', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23A', '\r', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x23C', '\a', ']', '\x2', '\x2', '\x23C', '\x23D', '\x5', '\xD2', 'j', 
		'\x2', '\x23D', '\x23E', '\a', 'M', '\x2', '\x2', '\x23E', '\x23F', '\a', 
		'|', '\x2', '\x2', '\x23F', '\x240', '\a', '\x9E', '\x2', '\x2', '\x240', 
		'\x241', '\a', '\x9F', '\x2', '\x2', '\x241', '\x242', '\a', 'R', '\x2', 
		'\x2', '\x242', '\x243', '\a', '\x11', '\x2', '\x2', '\x243', '\x244', 
		'\x5', '\x8E', 'H', '\x2', '\x244', '\x245', '\x5', '$', '\x13', '\x2', 
		'\x245', '\x246', '\x5', '\x90', 'I', '\x2', '\x246', '\x247', '\x5', 
		'\x8A', '\x46', '\x2', '\x247', '\x248', '\a', 'K', '\x2', '\x2', '\x248', 
		'\x249', '\a', 'y', '\x2', '\x2', '\x249', '\x24A', '\a', '\x11', '\x2', 
		'\x2', '\x24A', '\x24B', '\x5', '\x8E', 'H', '\x2', '\x24B', '\x24C', 
		'\x5', '\xEA', 'v', '\x2', '\x24C', '\x24D', '\x5', '\x90', 'I', '\x2', 
		'\x24D', '\xF', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\a', ']', 
		'\x2', '\x2', '\x24F', '\x250', '\x5', '\xD2', 'j', '\x2', '\x250', '\x252', 
		'\a', 'M', '\x2', '\x2', '\x251', '\x253', '\a', '\x94', '\x2', '\x2', 
		'\x252', '\x251', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x253', '\x256', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x257', '\a', 'W', '\x2', '\x2', '\x255', '\x257', '\x5', '\x14', '\v', 
		'\x2', '\x256', '\x254', '\x3', '\x2', '\x2', '\x2', '\x256', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '\x257', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x261', '\x5', '(', '\x15', '\x2', '\x259', '\x25A', '\a', '\x13', 
		'\x2', '\x2', '\x25A', '\x25B', '\a', 'K', '\x2', '\x2', '\x25B', '\x25C', 
		'\a', 'y', '\x2', '\x2', '\x25C', '\x25D', '\a', '\x11', '\x2', '\x2', 
		'\x25D', '\x25E', '\x5', '\x8E', 'H', '\x2', '\x25E', '\x25F', '\x5', 
		'\xE6', 't', '\x2', '\x25F', '\x260', '\x5', '\x90', 'I', '\x2', '\x260', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x261', '\x259', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\a', '\x9F', '\x2', '\x2', 
		'\x264', '\x265', '\a', 'y', '\x2', '\x2', '\x265', '\x266', '\a', '\x11', 
		'\x2', '\x2', '\x266', '\x267', '\x5', '\x8E', 'H', '\x2', '\x267', '\x268', 
		'\x5', '\xE6', 't', '\x2', '\x268', '\x269', '\x5', '\x90', 'I', '\x2', 
		'\x269', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x263', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26D', '\a', ']', '\x2', '\x2', '\x26D', '\x26E', '\x5', 
		'\xD2', 'j', '\x2', '\x26E', '\x26F', '\a', 'M', '\x2', '\x2', '\x26F', 
		'\x282', '\a', '\x92', '\x2', '\x2', '\x270', '\x279', '\x5', '(', '\x15', 
		'\x2', '\x271', '\x272', '\a', '\x13', '\x2', '\x2', '\x272', '\x273', 
		'\a', 'K', '\x2', '\x2', '\x273', '\x274', '\a', 'y', '\x2', '\x2', '\x274', 
		'\x275', '\a', '\x11', '\x2', '\x2', '\x275', '\x276', '\x5', '\x8E', 
		'H', '\x2', '\x276', '\x277', '\x5', '\xE6', 't', '\x2', '\x277', '\x278', 
		'\x5', '\x90', 'I', '\x2', '\x278', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x271', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x283', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x27C', '\a', '\x9F', '\x2', '\x2', '\x27C', '\x27D', '\a', 'y', '\x2', 
		'\x2', '\x27D', '\x27E', '\a', '\x11', '\x2', '\x2', '\x27E', '\x27F', 
		'\x5', '\x8E', 'H', '\x2', '\x27F', '\x280', '\x5', '\xE6', 't', '\x2', 
		'\x280', '\x281', '\x5', '\x90', 'I', '\x2', '\x281', '\x283', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x270', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x13', '\x3', '\x2', '\x2', '\x2', '\x284', '\x28A', 
		'\x5', '\xC2', '\x62', '\x2', '\x285', '\x286', '\x5', '\xC2', '\x62', 
		'\x2', '\x286', '\x287', '\a', 'K', '\x2', '\x2', '\x287', '\x288', '\x5', 
		'\xD2', 'j', '\x2', '\x288', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x289', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\x15', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', 
		'\a', ']', '\x2', '\x2', '\x28C', '\x28D', '\x5', '\x13E', '\xA0', '\x2', 
		'\x28D', '\x28E', '\a', 'M', '\x2', '\x2', '\x28E', '\x28F', '\a', '\x84', 
		'\x2', '\x2', '\x28F', '\x290', '\a', '\x8B', '\x2', '\x2', '\x290', '\x293', 
		'\x5', '\xDC', 'o', '\x2', '\x291', '\x292', '\a', '\x8E', '\x2', '\x2', 
		'\x292', '\x294', '\x5', '\xB2', 'Z', '\x2', '\x293', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x295', '\x296', '\a', '\x61', '\x2', 
		'\x2', '\x296', '\x297', '\a', '\x11', '\x2', '\x2', '\x297', '\x298', 
		'\x5', '\x8E', 'H', '\x2', '\x298', '\x299', '\x5', '\x108', '\x85', '\x2', 
		'\x299', '\x29A', '\x5', '\x90', 'I', '\x2', '\x29A', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x29B', '\x29C', '\a', ']', '\x2', '\x2', '\x29C', '\x29D', 
		'\x5', '\xCE', 'h', '\x2', '\x29D', '\x29E', '\a', 'M', '\x2', '\x2', 
		'\x29E', '\x29F', '\a', '\x91', '\x2', '\x2', '\x29F', '\x2A0', '\a', 
		'\x61', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\x11', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\x5', '\x8E', 'H', '\x2', '\x2A2', '\x2A3', '\x5', '\x108', 
		'\x85', '\x2', '\x2A3', '\x2A4', '\x5', '\x90', 'I', '\x2', '\x2A4', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', ']', '\x2', '\x2', 
		'\x2A6', '\x2A7', '\x5', '\xCE', 'h', '\x2', '\x2A7', '\x2A9', '\a', 'M', 
		'\x2', '\x2', '\x2A8', '\x2AA', '\a', '|', '\x2', '\x2', '\x2A9', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\a', 
		'\x91', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '\x61', '\x2', '\x2', '\x2AD', 
		'\x2AE', '\a', '\x11', '\x2', '\x2', '\x2AE', '\x2AF', '\x5', '\x8E', 
		'H', '\x2', '\x2AF', '\x2B0', '\x5', '\x100', '\x81', '\x2', '\x2B0', 
		'\x2B1', '\x5', '\x90', 'I', '\x2', '\x2B1', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B3', '\a', ']', '\x2', '\x2', '\x2B3', '\x2B4', '\x5', 
		'\xCE', 'h', '\x2', '\x2B4', '\x2B5', '\a', 'M', '\x2', '\x2', '\x2B5', 
		'\x2B6', '\a', 'p', '\x2', '\x2', '\x2B6', '\x2B7', '\a', '\x61', '\x2', 
		'\x2', '\x2B7', '\x2B8', '\a', '\x11', '\x2', '\x2', '\x2B8', '\x2B9', 
		'\x5', '\x8E', 'H', '\x2', '\x2B9', '\x2BA', '\x5', '\x108', '\x85', '\x2', 
		'\x2BA', '\x2BB', '\x5', '\x90', 'I', '\x2', '\x2BB', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2BC', '\x2BD', '\a', ']', '\x2', '\x2', '\x2BD', '\x2BE', 
		'\x5', '\xCE', 'h', '\x2', '\x2BE', '\x2C0', '\a', 'M', '\x2', '\x2', 
		'\x2BF', '\x2C1', '\a', '|', '\x2', '\x2', '\x2C0', '\x2BF', '\x3', '\x2', 
		'\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\a', 'p', '\x2', '\x2', 
		'\x2C3', '\x2C4', '\a', '\x61', '\x2', '\x2', '\x2C4', '\x2C5', '\a', 
		'\x11', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', '\x8E', 'H', '\x2', '\x2C6', 
		'\x2C7', '\x5', '\x100', '\x81', '\x2', '\x2C7', '\x2C8', '\x5', '\x90', 
		'I', '\x2', '\x2C8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CA', 
		'\a', ']', '\x2', '\x2', '\x2CA', '\x2CB', '\x5', '\xD2', 'j', '\x2', 
		'\x2CB', '\x2CD', '\a', 'M', '\x2', '\x2', '\x2CC', '\x2CE', '\a', '\x94', 
		'\x2', '\x2', '\x2CD', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', 
		'\x2CF', '\x2D0', '\a', '|', '\x2', '\x2', '\x2D0', '\x2D8', '\a', 'W', 
		'\x2', '\x2', '\x2D1', '\x2D2', '\x5', '(', '\x15', '\x2', '\x2D2', '\x2D3', 
		'\a', '\x13', '\x2', '\x2', '\x2D3', '\x2D4', '\a', 'K', '\x2', '\x2', 
		'\x2D4', '\x2D5', '\a', 'R', '\x2', '\x2', '\x2D5', '\x2D9', '\x3', '\x2', 
		'\x2', '\x2', '\x2D6', '\x2D7', '\a', '\x9F', '\x2', '\x2', '\x2D7', '\x2D9', 
		'\a', 'R', '\x2', '\x2', '\x2D8', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\a', '\x11', '\x2', '\x2', '\x2DB', 
		'\x2DC', '\x5', '\x8E', 'H', '\x2', '\x2DC', '\x2DD', '\x5', '$', '\x13', 
		'\x2', '\x2DD', '\x2E6', '\x5', '\x90', 'I', '\x2', '\x2DE', '\x2DF', 
		'\x5', '\x8A', '\x46', '\x2', '\x2DF', '\x2E0', '\a', 'K', '\x2', '\x2', 
		'\x2E0', '\x2E1', '\a', 'y', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '\x11', 
		'\x2', '\x2', '\x2E2', '\x2E3', '\x5', '\x8E', 'H', '\x2', '\x2E3', '\x2E4', 
		'\x5', '\xEA', 'v', '\x2', '\x2E4', '\x2E5', '\x5', '\x90', 'I', '\x2', 
		'\x2E5', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2DE', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E9', '\a', ']', '\x2', '\x2', 
		'\x2E9', '\x2EA', '\x5', '\xD2', 'j', '\x2', '\x2EA', '\x2EC', '\a', 'M', 
		'\x2', '\x2', '\x2EB', '\x2ED', '\a', '\x94', '\x2', '\x2', '\x2EC', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2ED', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', 
		'|', '\x2', '\x2', '\x2EF', '\x2F7', '\a', '\x8C', '\x2', '\x2', '\x2F0', 
		'\x2F1', '\x5', '(', '\x15', '\x2', '\x2F1', '\x2F2', '\a', '\x13', '\x2', 
		'\x2', '\x2F2', '\x2F3', '\a', 'K', '\x2', '\x2', '\x2F3', '\x2F4', '\a', 
		'R', '\x2', '\x2', '\x2F4', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2F6', '\a', '\x9F', '\x2', '\x2', '\x2F6', '\x2F8', '\a', 'R', '\x2', 
		'\x2', '\x2F7', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F5', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', '\x2FA', '\a', '\x11', '\x2', '\x2', '\x2FA', '\x2FB', '\x5', 
		'\x8E', 'H', '\x2', '\x2FB', '\x2FC', '\x5', '$', '\x13', '\x2', '\x2FC', 
		'\x305', '\x5', '\x90', 'I', '\x2', '\x2FD', '\x2FE', '\x5', '\x8A', '\x46', 
		'\x2', '\x2FE', '\x2FF', '\a', 'K', '\x2', '\x2', '\x2FF', '\x300', '\a', 
		'y', '\x2', '\x2', '\x300', '\x301', '\a', '\x11', '\x2', '\x2', '\x301', 
		'\x302', '\x5', '\x8E', 'H', '\x2', '\x302', '\x303', '\x5', '\xEA', 'v', 
		'\x2', '\x303', '\x304', '\x5', '\x90', 'I', '\x2', '\x304', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x306', '\x3', '\x2', '\x2', '\x2', '\x306', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x307', '\x308', '\a', ']', '\x2', '\x2', '\x308', '\x309', 
		'\a', 'W', '\x2', '\x2', '\x309', '\x30A', '\a', 'R', '\x2', '\x2', '\x30A', 
		'\x30B', '\a', 'M', '\x2', '\x2', '\x30B', '\x30C', '\a', '\x11', '\x2', 
		'\x2', '\x30C', '\x30D', '\x5', '\x8E', 'H', '\x2', '\x30D', '\x30E', 
		'\x5', '&', '\x14', '\x2', '\x30E', '\x30F', '\x5', '\x90', 'I', '\x2', 
		'\x30F', '%', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\b', '\x14', 
		'\x1', '\x2', '\x311', '\x312', '\x5', '\xEE', 'x', '\x2', '\x312', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x313', '\x314', '\f', '\x3', '\x2', '\x2', 
		'\x314', '\x315', '\x5', '\x8A', '\x46', '\x2', '\x315', '\x316', '\x5', 
		'\xEE', 'x', '\x2', '\x316', '\x318', '\x3', '\x2', '\x2', '\x2', '\x317', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x318', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x317', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x319', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\a', 
		'\x9F', '\x2', '\x2', '\x31D', '\x31E', '\a', 'P', '\x2', '\x2', '\x31E', 
		'\x327', '\x5', '\xD0', 'i', '\x2', '\x31F', '\x320', '\a', '\x9F', '\x2', 
		'\x2', '\x320', '\x321', '\a', 'Q', '\x2', '\x2', '\x321', '\x324', '\x5', 
		'\xFA', '~', '\x2', '\x322', '\x323', '\a', 'K', '\x2', '\x2', '\x323', 
		'\x325', '\x5', '\xD0', 'i', '\x2', '\x324', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', '\x325', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x326', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x326', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x327', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x328', '\x329', '\a', ']', '\x2', '\x2', '\x329', '\x32A', 
		'\x5', '\xC4', '\x63', '\x2', '\x32A', '\x32B', '\a', 'M', '\x2', '\x2', 
		'\x32B', '\x32C', '\a', 'H', '\x2', '\x2', '\x32C', '\x32F', '\a', 'x', 
		'\x2', '\x2', '\x32D', '\x32E', '\a', '\x8B', '\x2', '\x2', '\x32E', '\x330', 
		'\x5', '\x34', '\x1B', '\x2', '\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x330', '\x3', '\x2', '\x2', '\x2', '\x330', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x332', '\a', '\x8E', '\x2', '\x2', '\x332', 
		'\x334', '\x5', '\xB2', 'Z', '\x2', '\x333', '\x331', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x334', '\x3', '\x2', '\x2', '\x2', '\x334', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x335', '\x336', '\a', ']', '\x2', '\x2', '\x336', 
		'\x337', '\x5', '\xC4', '\x63', '\x2', '\x337', '\x338', '\a', 'M', '\x2', 
		'\x2', '\x338', '\x33B', '\a', 'x', '\x2', '\x2', '\x339', '\x33A', '\a', 
		'\x8B', '\x2', '\x2', '\x33A', '\x33C', '\x5', '\x34', '\x1B', '\x2', 
		'\x33B', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x33C', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x33D', 
		'\x33E', '\a', '\x8E', '\x2', '\x2', '\x33E', '\x340', '\x5', '\xB2', 
		'Z', '\x2', '\x33F', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x341', '\x342', '\a', '\x61', '\x2', '\x2', '\x342', '\x343', '\a', 
		'\x11', '\x2', '\x2', '\x343', '\x344', '\x5', '\x8E', 'H', '\x2', '\x344', 
		'\x345', '\x5', '\x108', '\x85', '\x2', '\x345', '\x346', '\x5', '\x90', 
		'I', '\x2', '\x346', '-', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', 
		'\a', ']', '\x2', '\x2', '\x348', '\x349', '\x5', '\xC4', '\x63', '\x2', 
		'\x349', '\x34B', '\a', 'M', '\x2', '\x2', '\x34A', '\x34C', '\a', '|', 
		'\x2', '\x2', '\x34B', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x350', '\a', 'x', '\x2', '\x2', '\x34E', '\x34F', '\a', '\x8B', 
		'\x2', '\x2', '\x34F', '\x351', '\x5', '\x34', '\x1B', '\x2', '\x350', 
		'\x34E', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3', '\x2', '\x2', 
		'\x2', '\x351', '\x354', '\x3', '\x2', '\x2', '\x2', '\x352', '\x353', 
		'\a', '\x8E', '\x2', '\x2', '\x353', '\x355', '\x5', '\xE2', 'r', '\x2', 
		'\x354', '\x352', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x357', '\a', '\x61', '\x2', '\x2', '\x357', '\x358', '\a', '\x11', '\x2', 
		'\x2', '\x358', '\x359', '\x5', '\x8E', 'H', '\x2', '\x359', '\x35A', 
		'\x5', '\x100', '\x81', '\x2', '\x35A', '\x35B', '\x5', '\x90', 'I', '\x2', 
		'\x35B', '/', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', '\a', ']', 
		'\x2', '\x2', '\x35D', '\x35E', '\a', '\xAE', '\x2', '\x2', '\x35E', '\x35F', 
		'\a', 'M', '\x2', '\x2', '\x35F', '\x360', '\a', '\x97', '\x2', '\x2', 
		'\x360', '\x361', '\a', 'x', '\x2', '\x2', '\x361', '\x362', '\a', '\x61', 
		'\x2', '\x2', '\x362', '\x363', '\a', '\x11', '\x2', '\x2', '\x363', '\x364', 
		'\x5', '\x8E', 'H', '\x2', '\x364', '\x365', '\x5', '\x108', '\x85', '\x2', 
		'\x365', '\x366', '\x5', '\x90', 'I', '\x2', '\x366', '\x367', '\x5', 
		'\x8A', '\x46', '\x2', '\x367', '\x368', '\a', 'K', '\x2', '\x2', '\x368', 
		'\x36F', '\a', '\x9D', '\x2', '\x2', '\x369', '\x36A', '\a', '\x11', '\x2', 
		'\x2', '\x36A', '\x36B', '\x5', '\x8E', 'H', '\x2', '\x36B', '\x36C', 
		'\x5', '\x10A', '\x86', '\x2', '\x36C', '\x36D', '\x5', '\x90', 'I', '\x2', 
		'\x36D', '\x370', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x370', '\x5', 
		'\xD4', 'k', '\x2', '\x36F', '\x369', '\x3', '\x2', '\x2', '\x2', '\x36F', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x370', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x372', '\x5', '\\', '/', '\x2', '\x372', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x373', '\x376', '\x5', '\xD8', 'm', '\x2', '\x374', 
		'\x375', '\a', 'K', '\x2', '\x2', '\x375', '\x377', '\x5', '\xDA', 'n', 
		'\x2', '\x376', '\x374', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', 
		'\x3', '\x2', '\x2', '\x2', '\x377', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x379', '\x5', '\xE2', 'r', '\x2', '\x379', '\x37B', '\x5', 
		'\xCE', 'h', '\x2', '\x37A', '\x37C', '\x5', '(', '\x15', '\x2', '\x37B', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37C', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', 
		'\a', '.', '\x2', '\x2', '\x37E', '\x380', '\x5', '\x11C', '\x8F', '\x2', 
		'\x37F', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x380', '\x37', '\x3', '\x2', '\x2', '\x2', '\x381', 
		'\x396', '\x5', '\x82', '\x42', '\x2', '\x382', '\x396', '\x5', '>', ' ', 
		'\x2', '\x383', '\x396', '\x5', '\x86', '\x44', '\x2', '\x384', '\x396', 
		'\x5', '<', '\x1F', '\x2', '\x385', '\x396', '\x5', 'x', '=', '\x2', '\x386', 
		'\x396', '\x5', ':', '\x1E', '\x2', '\x387', '\x396', '\x5', 'X', '-', 
		'\x2', '\x388', '\x396', '\x5', 'Z', '.', '\x2', '\x389', '\x396', '\x5', 
		'N', '(', '\x2', '\x38A', '\x396', '\x5', '\x44', '#', '\x2', '\x38B', 
		'\x396', '\x5', 'H', '%', '\x2', '\x38C', '\x396', '\x5', 'L', '\'', '\x2', 
		'\x38D', '\x396', '\x5', 'J', '&', '\x2', '\x38E', '\x396', '\x5', 'R', 
		'*', '\x2', '\x38F', '\x396', '\x5', 'T', '+', '\x2', '\x390', '\x396', 
		'\x5', 'p', '\x39', '\x2', '\x391', '\x396', '\x5', '@', '!', '\x2', '\x392', 
		'\x396', '\x5', '\x42', '\"', '\x2', '\x393', '\x396', '\x5', ',', '\x17', 
		'\x2', '\x394', '\x396', '\x5', '\xFE', '\x80', '\x2', '\x395', '\x381', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x382', '\x3', '\x2', '\x2', '\x2', 
		'\x395', '\x383', '\x3', '\x2', '\x2', '\x2', '\x395', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x395', '\x385', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x386', '\x3', '\x2', '\x2', '\x2', '\x395', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x388', '\x3', '\x2', '\x2', '\x2', '\x395', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x395', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x395', '\x38C', '\x3', 
		'\x2', '\x2', '\x2', '\x395', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x38E', '\x3', '\x2', '\x2', '\x2', '\x395', '\x38F', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x390', '\x3', '\x2', '\x2', '\x2', '\x395', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x392', '\x3', '\x2', '\x2', '\x2', 
		'\x395', '\x393', '\x3', '\x2', '\x2', '\x2', '\x395', '\x394', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x39', '\x3', '\x2', '\x2', '\x2', '\x397', 
		'\x398', '\a', 'm', '\x2', '\x2', '\x398', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x399', '\x39A', '\a', '^', '\x2', '\x2', '\x39A', '\x39E', '\x5', '\xAE', 
		'X', '\x2', '\x39B', '\x39C', '\a', 'K', '\x2', '\x2', '\x39C', '\x39D', 
		'\a', '\x95', '\x2', '\x2', '\x39D', '\x39F', '\x5', '\xAE', 'X', '\x2', 
		'\x39E', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A1', '\a', '\x95', '\x2', '\x2', '\x3A1', '\x3A3', '\x5', '\xAE', 
		'X', '\x2', '\x3A2', '\x399', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3AA', '\x3', '\x2', '\x2', '\x2', 
		'\x3A4', '\x3A5', '\a', '\x98', '\x2', '\x2', '\x3A5', '\x3A6', '\a', 
		'\x11', '\x2', '\x2', '\x3A6', '\x3A7', '\x5', '\x8E', 'H', '\x2', '\x3A7', 
		'\x3A8', '\x5', '\x108', '\x85', '\x2', '\x3A8', '\x3A9', '\x5', '\x90', 
		'I', '\x2', '\x3A9', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AB', '\x3', '\x2', '\x2', '\x2', 
		'\x3AB', '=', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AE', '\x5', '^', 
		'\x30', '\x2', '\x3AD', '\x3AF', '\x5', '|', '?', '\x2', '\x3AE', '\x3AD', 
		'\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', '\x2', 
		'\x3AF', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B3', '\a', 
		'\x98', '\x2', '\x2', '\x3B1', '\x3B2', '\a', '\x9F', '\x2', '\x2', '\x3B2', 
		'\x3B4', '\x5', '\xCE', 'h', '\x2', '\x3B3', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\a', '\x11', '\x2', '\x2', 
		'\x3B6', '\x3B7', '\x5', '\x8E', 'H', '\x2', '\x3B7', '\x3B8', '\x5', 
		'\x108', '\x85', '\x2', '\x3B8', '\x3B9', '\x5', '\x90', 'I', '\x2', '\x3B9', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3B0', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BE', '\x5', '\x62', '\x32', '\x2', 
		'\x3BD', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BC', '\x3', 
		'\x2', '\x2', '\x2', '\x3BE', '?', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3C0', '\a', '\x9F', '\x2', '\x2', '\x3C0', '\x3C1', '\x5', '\x130', 
		'\x99', '\x2', '\x3C1', '\x3C2', '\a', '\x13', '\x2', '\x2', '\x3C2', 
		'\x3C3', '\a', '`', '\x2', '\x2', '\x3C3', '\x3C4', '\a', '\x11', '\x2', 
		'\x2', '\x3C4', '\x3C5', '\x5', '\x8E', 'H', '\x2', '\x3C5', '\x3C6', 
		'\x5', '\x108', '\x85', '\x2', '\x3C6', '\x3C7', '\x5', '\x90', 'I', '\x2', 
		'\x3C7', '\x41', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\a', '\x9F', 
		'\x2', '\x2', '\x3C9', '\x3CA', '\x5', '\xD2', 'j', '\x2', '\x3CA', '\x3CB', 
		'\a', '\x13', '\x2', '\x2', '\x3CB', '\x3CC', '\a', '`', '\x2', '\x2', 
		'\x3CC', '\x3CD', '\a', '\x11', '\x2', '\x2', '\x3CD', '\x3CE', '\x5', 
		'\x8E', 'H', '\x2', '\x3CE', '\x3CF', '\x5', '\x108', '\x85', '\x2', '\x3CF', 
		'\x3D0', '\x5', '\x90', 'I', '\x2', '\x3D0', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x3D1', '\x3D2', '\a', '\x96', '\x2', '\x2', '\x3D2', '\x3D3', 
		'\a', '\x81', '\x2', '\x2', '\x3D3', '\x3D4', '\x5', '\\', '/', '\x2', 
		'\x3D4', '\x3D5', '\a', '\x11', '\x2', '\x2', '\x3D5', '\x3D6', '\x5', 
		'\x8E', 'H', '\x2', '\x3D6', '\x3DE', '\x5', '\x10C', '\x87', '\x2', '\x3D7', 
		'\x3D8', '\x5', '\x8A', '\x46', '\x2', '\x3D8', '\x3D9', '\a', '\x87', 
		'\x2', '\x2', '\x3D9', '\x3DA', '\a', '\x11', '\x2', '\x2', '\x3DA', '\x3DB', 
		'\x5', '\x8E', 'H', '\x2', '\x3DB', '\x3DC', '\x5', '\x108', '\x85', '\x2', 
		'\x3DC', '\x3DD', '\x5', '\x90', 'I', '\x2', '\x3DD', '\x3DF', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3DE', 
		'\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', '\x2', '\x2', 
		'\x2', '\x3E0', '\x3E1', '\x5', '\x90', 'I', '\x2', '\x3E1', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\a', '\xA0', '\x2', '\x2', '\x3E3', 
		'\x3E4', '\x5', '\x112', '\x8A', '\x2', '\x3E4', '\x3E5', '\a', '\x11', 
		'\x2', '\x2', '\x3E5', '\x3E6', '\x5', '\x8E', 'H', '\x2', '\x3E6', '\x3E7', 
		'\x5', '\x108', '\x85', '\x2', '\x3E7', '\x3E8', '\x5', '\x90', 'I', '\x2', 
		'\x3E8', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3EA', '\a', 
		'\xA0', '\x2', '\x2', '\x3EA', '\x3EB', '\a', 's', '\x2', '\x2', '\x3EB', 
		'\x3EC', '\x5', '\x110', '\x89', '\x2', '\x3EC', '\x3ED', '\a', '\x11', 
		'\x2', '\x2', '\x3ED', '\x3EE', '\x5', '\x8E', 'H', '\x2', '\x3EE', '\x3EF', 
		'\x5', '\x108', '\x85', '\x2', '\x3EF', '\x3F0', '\x5', '\x90', 'I', '\x2', 
		'\x3F0', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3E2', '\x3', 
		'\x2', '\x2', '\x2', '\x3F1', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3F2', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\a', 'n', '\x2', '\x2', 
		'\x3F4', '\x3F5', '\a', '\x62', '\x2', '\x2', '\x3F5', '\x3F8', '\x5', 
		'\xCE', 'h', '\x2', '\x3F6', '\x3F7', '\a', '\x13', '\x2', '\x2', '\x3F7', 
		'\x3F9', '\x5', '\xCE', 'h', '\x2', '\x3F8', '\x3F6', '\x3', '\x2', '\x2', 
		'\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\a', 's', '\x2', '\x2', 
		'\x3FB', '\x3FC', '\x5', '\\', '/', '\x2', '\x3FC', '\x3FD', '\a', '\x11', 
		'\x2', '\x2', '\x3FD', '\x3FE', '\x5', '\x8E', 'H', '\x2', '\x3FE', '\x3FF', 
		'\x5', '\x108', '\x85', '\x2', '\x3FF', '\x400', '\x5', '\x90', 'I', '\x2', 
		'\x400', 'I', '\x3', '\x2', '\x2', '\x2', '\x401', '\x402', '\a', '`', 
		'\x2', '\x2', '\x402', '\x403', '\a', '\x11', '\x2', '\x2', '\x403', '\x404', 
		'\x5', '\x8E', 'H', '\x2', '\x404', '\x405', '\x5', '\x108', '\x85', '\x2', 
		'\x405', '\x406', '\x5', '\x90', 'I', '\x2', '\x406', '\x407', '\x5', 
		'\x8A', '\x46', '\x2', '\x407', '\x408', '\a', '\xA2', '\x2', '\x2', '\x408', 
		'\x409', '\x5', '\\', '/', '\x2', '\x409', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '\x40B', '\a', '\xA2', '\x2', '\x2', '\x40B', '\x40C', '\x5', 
		'\\', '/', '\x2', '\x40C', '\x40D', '\a', '\x11', '\x2', '\x2', '\x40D', 
		'\x40E', '\x5', '\x8E', 'H', '\x2', '\x40E', '\x40F', '\x5', '\x108', 
		'\x85', '\x2', '\x40F', '\x410', '\x5', '\x90', 'I', '\x2', '\x410', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x411', '\x412', '\a', 'r', '\x2', '\x2', 
		'\x412', '\x413', '\x5', '\\', '/', '\x2', '\x413', '\x414', '\a', '\x11', 
		'\x2', '\x2', '\x414', '\x415', '\x5', '\x8E', 'H', '\x2', '\x415', '\x416', 
		'\x5', '\x108', '\x85', '\x2', '\x416', '\x41A', '\x5', '\x90', 'I', '\x2', 
		'\x417', '\x418', '\x5', '\x8A', '\x46', '\x2', '\x418', '\x419', '\x5', 
		'P', ')', '\x2', '\x419', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41A', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x3', '\x2', '\x2', 
		'\x2', '\x41B', '\x423', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', 
		'\x5', '\x8A', '\x46', '\x2', '\x41D', '\x41E', '\a', '\x63', '\x2', '\x2', 
		'\x41E', '\x41F', '\a', '\x11', '\x2', '\x2', '\x41F', '\x420', '\x5', 
		'\x8E', 'H', '\x2', '\x420', '\x421', '\x5', '\x108', '\x85', '\x2', '\x421', 
		'\x422', '\x5', '\x90', 'I', '\x2', '\x422', '\x424', '\x3', '\x2', '\x2', 
		'\x2', '\x423', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x423', '\x424', 
		'\x3', '\x2', '\x2', '\x2', '\x424', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x425', '\x426', '\b', ')', '\x1', '\x2', '\x426', '\x427', '\a', '\x63', 
		'\x2', '\x2', '\x427', '\x428', '\a', 'r', '\x2', '\x2', '\x428', '\x429', 
		'\x5', '\\', '/', '\x2', '\x429', '\x42A', '\a', '\x11', '\x2', '\x2', 
		'\x42A', '\x42B', '\x5', '\x8E', 'H', '\x2', '\x42B', '\x42C', '\x5', 
		'\x108', '\x85', '\x2', '\x42C', '\x42D', '\x5', '\x90', 'I', '\x2', '\x42D', 
		'\x43A', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x42F', '\f', '\x3', '\x2', 
		'\x2', '\x42F', '\x430', '\x5', '\x8A', '\x46', '\x2', '\x430', '\x431', 
		'\a', '\x63', '\x2', '\x2', '\x431', '\x432', '\a', 'r', '\x2', '\x2', 
		'\x432', '\x433', '\x5', '\\', '/', '\x2', '\x433', '\x434', '\a', '\x11', 
		'\x2', '\x2', '\x434', '\x435', '\x5', '\x8E', 'H', '\x2', '\x435', '\x436', 
		'\x5', '\x108', '\x85', '\x2', '\x436', '\x437', '\x5', '\x90', 'I', '\x2', 
		'\x437', '\x439', '\x3', '\x2', '\x2', '\x2', '\x438', '\x42E', '\x3', 
		'\x2', '\x2', '\x2', '\x439', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43B', '\x3', '\x2', '\x2', 
		'\x2', '\x43B', 'Q', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x43A', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x43E', '\a', '\x89', '\x2', '\x2', '\x43E', 
		'\x43F', '\x5', '\\', '/', '\x2', '\x43F', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x441', '\a', '\x96', '\x2', '\x2', '\x441', '\x442', '\a', 
		'\x81', '\x2', '\x2', '\x442', '\x443', '\x5', '\xCE', 'h', '\x2', '\x443', 
		'\x444', '\a', '\x61', '\x2', '\x2', '\x444', '\x445', '\a', '\x11', '\x2', 
		'\x2', '\x445', '\x446', '\x5', '\x8E', 'H', '\x2', '\x446', '\x447', 
		'\x5', '\x108', '\x85', '\x2', '\x447', '\x448', '\x5', '\x90', 'I', '\x2', 
		'\x448', '\x44A', '\x5', '\x88', '\x45', '\x2', '\x449', '\x44B', '\x5', 
		'\x10E', '\x88', '\x2', '\x44A', '\x449', '\x3', '\x2', '\x2', '\x2', 
		'\x44A', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x457', '\x3', 
		'\x2', '\x2', '\x2', '\x44C', '\x450', '\a', '\x87', '\x2', '\x2', '\x44D', 
		'\x44E', '\a', '\xA0', '\x2', '\x2', '\x44E', '\x450', '\a', 'L', '\x2', 
		'\x2', '\x44F', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x44D', 
		'\x3', '\x2', '\x2', '\x2', '\x450', '\x451', '\x3', '\x2', '\x2', '\x2', 
		'\x451', '\x452', '\a', '\x11', '\x2', '\x2', '\x452', '\x453', '\x5', 
		'\x8E', 'H', '\x2', '\x453', '\x454', '\x5', '\x108', '\x85', '\x2', '\x454', 
		'\x455', '\x5', '\x90', 'I', '\x2', '\x455', '\x456', '\x5', '\x88', '\x45', 
		'\x2', '\x456', '\x458', '\x3', '\x2', '\x2', '\x2', '\x457', '\x44F', 
		'\x3', '\x2', '\x2', '\x2', '\x457', '\x458', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x460', '\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', '\a', 
		'J', '\x2', '\x2', '\x45A', '\x45B', '\a', '\x11', '\x2', '\x2', '\x45B', 
		'\x45C', '\x5', '\x8E', 'H', '\x2', '\x45C', '\x45D', '\x5', '\x108', 
		'\x85', '\x2', '\x45D', '\x45E', '\x5', '\x90', 'I', '\x2', '\x45E', '\x45F', 
		'\x5', '\x88', '\x45', '\x2', '\x45F', '\x461', '\x3', '\x2', '\x2', '\x2', 
		'\x460', '\x459', '\x3', '\x2', '\x2', '\x2', '\x460', '\x461', '\x3', 
		'\x2', '\x2', '\x2', '\x461', '\x462', '\x3', '\x2', '\x2', '\x2', '\x462', 
		'\x463', '\x5', '\x88', '\x45', '\x2', '\x463', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x464', '\x465', '\a', '\xA0', '\x2', '\x2', '\x465', '\x466', 
		'\x5', '\xD4', 'k', '\x2', '\x466', '\x467', '\a', '\x11', '\x2', '\x2', 
		'\x467', '\x468', '\x5', '\x8E', 'H', '\x2', '\x468', '\x469', '\x5', 
		'\x108', '\x85', '\x2', '\x469', '\x46A', '\x5', '\x90', 'I', '\x2', '\x46A', 
		'\x46B', '\x5', '\x88', '\x45', '\x2', '\x46B', '\x478', '\x3', '\x2', 
		'\x2', '\x2', '\x46C', '\x46D', '\a', '\xA0', '\x2', '\x2', '\x46D', '\x46E', 
		'\a', 's', '\x2', '\x2', '\x46E', '\x46F', '\a', '\x18', '\x2', '\x2', 
		'\x46F', '\x470', '\x5', '\xA6', 'T', '\x2', '\x470', '\x471', '\a', '\x19', 
		'\x2', '\x2', '\x471', '\x472', '\a', '\x11', '\x2', '\x2', '\x472', '\x473', 
		'\x5', '\x8E', 'H', '\x2', '\x473', '\x474', '\x5', '\x108', '\x85', '\x2', 
		'\x474', '\x475', '\x5', '\x90', 'I', '\x2', '\x475', '\x476', '\x5', 
		'\x88', '\x45', '\x2', '\x476', '\x478', '\x3', '\x2', '\x2', '\x2', '\x477', 
		'\x464', '\x3', '\x2', '\x2', '\x2', '\x477', '\x46C', '\x3', '\x2', '\x2', 
		'\x2', '\x478', 'W', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', '\a', 
		'S', '\x2', '\x2', '\x47A', 'Y', '\x3', '\x2', '\x2', '\x2', '\x47B', 
		'\x47D', '\a', '\x8D', '\x2', '\x2', '\x47C', '\x47E', '\x5', '\\', '/', 
		'\x2', '\x47D', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', 
		'\x3', '\x2', '\x2', '\x2', '\x47E', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x47F', '\x480', '\b', '/', '\x1', '\x2', '\x480', '\x4A1', '\x5', '\x1DE', 
		'\xF0', '\x2', '\x481', '\x4A1', '\x5', '\x1C0', '\xE1', '\x2', '\x482', 
		'\x4A1', '\x5', '\x66', '\x34', '\x2', '\x483', '\x4A1', '\x5', '^', '\x30', 
		'\x2', '\x484', '\x487', '\x5', '\x66', '\x34', '\x2', '\x485', '\x487', 
		'\x5', '^', '\x30', '\x2', '\x486', '\x484', '\x3', '\x2', '\x2', '\x2', 
		'\x486', '\x485', '\x3', '\x2', '\x2', '\x2', '\x487', '\x488', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x489', '\x5', '|', '?', '\x2', '\x489', 
		'\x4A1', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x48B', '\a', '#', '\x2', 
		'\x2', '\x48B', '\x4A1', '\x5', '\\', '/', '.', '\x48C', '\x48D', '\a', 
		'~', '\x2', '\x2', '\x48D', '\x4A1', '\x5', '\\', '/', '-', '\x48E', '\x48F', 
		'\a', '@', '\x2', '\x2', '\x48F', '\x490', '\a', '\x11', '\x2', '\x2', 
		'\x490', '\x4A1', '\x5', '\\', '/', '\x10', '\x491', '\x492', '\a', 'g', 
		'\x2', '\x2', '\x492', '\x493', '\a', '\x11', '\x2', '\x2', '\x493', '\x4A1', 
		'\x5', '\xCE', 'h', '\x2', '\x494', '\x495', '\a', '?', '\x2', '\x2', 
		'\x495', '\x496', '\a', '\x11', '\x2', '\x2', '\x496', '\x4A1', '\x5', 
		'\xC4', '\x63', '\x2', '\x497', '\x4A1', '\x5', 'l', '\x37', '\x2', '\x498', 
		'\x4A1', '\x5', 'j', '\x36', '\x2', '\x499', '\x4A1', '\x5', 'n', '\x38', 
		'\x2', '\x49A', '\x4A1', '\x5', 'v', '<', '\x2', '\x49B', '\x4A1', '\x5', 
		'\x136', '\x9C', '\x2', '\x49C', '\x4A1', '\x5', '\x138', '\x9D', '\x2', 
		'\x49D', '\x4A1', '\x5', 'z', '>', '\x2', '\x49E', '\x4A1', '\x5', 'r', 
		':', '\x2', '\x49F', '\x4A1', '\x5', '\x62', '\x32', '\x2', '\x4A0', '\x47F', 
		'\x3', '\x2', '\x2', '\x2', '\x4A0', '\x481', '\x3', '\x2', '\x2', '\x2', 
		'\x4A0', '\x482', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x483', '\x3', 
		'\x2', '\x2', '\x2', '\x4A0', '\x486', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x48A', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x48C', '\x3', '\x2', '\x2', 
		'\x2', '\x4A0', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '\x4A0', '\x494', '\x3', '\x2', '\x2', '\x2', 
		'\x4A0', '\x497', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x498', '\x3', 
		'\x2', '\x2', '\x2', '\x4A0', '\x499', '\x3', '\x2', '\x2', '\x2', '\x4A0', 
		'\x49A', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x49B', '\x3', '\x2', '\x2', 
		'\x2', '\x4A0', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x49D', 
		'\x3', '\x2', '\x2', '\x2', '\x4A0', '\x49E', '\x3', '\x2', '\x2', '\x2', 
		'\x4A0', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x512', '\x3', 
		'\x2', '\x2', '\x2', '\x4A2', '\x4A3', '\f', ',', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\x5', '\x14E', '\xA8', '\x2', '\x4A4', '\x4A5', '\x5', '\\', 
		'/', '-', '\x4A5', '\x511', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', 
		'\f', '+', '\x2', '\x2', '\x4A7', '\x4A8', '\x5', '\x150', '\xA9', '\x2', 
		'\x4A8', '\x4A9', '\x5', '\\', '/', ',', '\x4A9', '\x511', '\x3', '\x2', 
		'\x2', '\x2', '\x4AA', '\x4AB', '\f', '*', '\x2', '\x2', '\x4AB', '\x4AC', 
		'\x5', '\x154', '\xAB', '\x2', '\x4AC', '\x4AD', '\x5', '\\', '/', '+', 
		'\x4AD', '\x511', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\f', 
		')', '\x2', '\x2', '\x4AF', '\x4B0', '\x5', '\x152', '\xAA', '\x2', '\x4B0', 
		'\x4B1', '\x5', '\\', '/', '*', '\x4B1', '\x511', '\x3', '\x2', '\x2', 
		'\x2', '\x4B2', '\x4B3', '\f', '(', '\x2', '\x2', '\x4B3', '\x4B4', '\t', 
		'\x2', '\x2', '\x2', '\x4B4', '\x511', '\x5', '\\', '/', ')', '\x4B5', 
		'\x4B6', '\f', '&', '\x2', '\x2', '\x4B6', '\x4B7', '\a', '*', '\x2', 
		'\x2', '\x4B7', '\x511', '\x5', '\\', '/', '\'', '\x4B8', '\x4B9', '\f', 
		'%', '\x2', '\x2', '\x4B9', '\x4BA', '\a', '+', '\x2', '\x2', '\x4BA', 
		'\x511', '\x5', '\\', '/', '&', '\x4BB', '\x4BC', '\f', '$', '\x2', '\x2', 
		'\x4BC', '\x4BD', '\a', '(', '\x2', '\x2', '\x4BD', '\x511', '\x5', '\\', 
		'/', '%', '\x4BE', '\x4BF', '\f', '#', '\x2', '\x2', '\x4BF', '\x4C0', 
		'\a', ')', '\x2', '\x2', '\x4C0', '\x511', '\x5', '\\', '/', '$', '\x4C1', 
		'\x4C2', '\f', ' ', '\x2', '\x2', '\x4C2', '\x4C3', '\a', '.', '\x2', 
		'\x2', '\x4C3', '\x511', '\x5', '\\', '/', '!', '\x4C4', '\x4C5', '\f', 
		'\x1F', '\x2', '\x2', '\x4C5', '\x4C6', '\a', ',', '\x2', '\x2', '\x4C6', 
		'\x511', '\x5', '\\', '/', ' ', '\x4C7', '\x4C8', '\f', '\x1E', '\x2', 
		'\x2', '\x4C8', '\x4C9', '\a', '\x32', '\x2', '\x2', '\x4C9', '\x511', 
		'\x5', '\\', '/', '\x1F', '\x4CA', '\x4CB', '\f', '\x1D', '\x2', '\x2', 
		'\x4CB', '\x4CC', '\a', 'Z', '\x2', '\x2', '\x4CC', '\x511', '\x5', '\\', 
		'/', '\x1E', '\x4CD', '\x4CE', '\f', '\x1C', '\x2', '\x2', '\x4CE', '\x4CF', 
		'\a', 's', '\x2', '\x2', '\x4CF', '\x511', '\x5', '\\', '/', '\x1D', '\x4D0', 
		'\x4D1', '\f', '\x1B', '\x2', '\x2', '\x4D1', '\x4D2', '\a', 'q', '\x2', 
		'\x2', '\x4D2', '\x511', '\x5', '\\', '/', '\x1C', '\x4D3', '\x4D4', '\f', 
		'\x1A', '\x2', '\x2', '\x4D4', '\x4D5', '\a', 'q', '\x2', '\x2', '\x4D5', 
		'\x4D6', '\a', 'I', '\x2', '\x2', '\x4D6', '\x511', '\x5', '\\', '/', 
		'\x1B', '\x4D7', '\x4D8', '\f', '\x19', '\x2', '\x2', '\x4D8', '\x4D9', 
		'\a', 'q', '\x2', '\x2', '\x4D9', '\x4DA', '\a', 'L', '\x2', '\x2', '\x4DA', 
		'\x511', '\x5', '\\', '/', '\x1A', '\x4DB', '\x4DC', '\f', '\x18', '\x2', 
		'\x2', '\x4DC', '\x4DD', '\a', '~', '\x2', '\x2', '\x4DD', '\x4DE', '\a', 
		'Z', '\x2', '\x2', '\x4DE', '\x511', '\x5', '\\', '/', '\x19', '\x4DF', 
		'\x4E0', '\f', '\x17', '\x2', '\x2', '\x4E0', '\x4E1', '\a', '~', '\x2', 
		'\x2', '\x4E1', '\x4E2', '\a', 's', '\x2', '\x2', '\x4E2', '\x511', '\x5', 
		'\\', '/', '\x18', '\x4E3', '\x4E4', '\f', '\x16', '\x2', '\x2', '\x4E4', 
		'\x4E5', '\a', '~', '\x2', '\x2', '\x4E5', '\x4E6', '\a', 'q', '\x2', 
		'\x2', '\x4E6', '\x511', '\x5', '\\', '/', '\x17', '\x4E7', '\x4E8', '\f', 
		'\x15', '\x2', '\x2', '\x4E8', '\x4E9', '\a', '~', '\x2', '\x2', '\x4E9', 
		'\x4EA', '\a', 'q', '\x2', '\x2', '\x4EA', '\x4EB', '\a', 'I', '\x2', 
		'\x2', '\x4EB', '\x511', '\x5', '\\', '/', '\x16', '\x4EC', '\x4ED', '\f', 
		'\x14', '\x2', '\x2', '\x4ED', '\x4EE', '\a', '~', '\x2', '\x2', '\x4EE', 
		'\x4EF', '\a', 'q', '\x2', '\x2', '\x4EF', '\x4F0', '\a', 'L', '\x2', 
		'\x2', '\x4F0', '\x511', '\x5', '\\', '/', '\x15', '\x4F1', '\x4F2', '\f', 
		'\x13', '\x2', '\x2', '\x4F2', '\x4F3', '\a', '\x85', '\x2', '\x2', '\x4F3', 
		'\x511', '\x5', '\\', '/', '\x14', '\x4F4', '\x4F5', '\f', '\x12', '\x2', 
		'\x2', '\x4F5', '\x4F6', '\a', 'K', '\x2', '\x2', '\x4F6', '\x511', '\x5', 
		'\\', '/', '\x13', '\x4F7', '\x4F8', '\f', '\x11', '\x2', '\x2', '\x4F8', 
		'\x4F9', '\a', 'r', '\x2', '\x2', '\x4F9', '\x4FA', '\x5', '\\', '/', 
		'\x2', '\x4FA', '\x4FB', '\a', '\x63', '\x2', '\x2', '\x4FB', '\x4FC', 
		'\x5', '\\', '/', '\x12', '\x4FC', '\x511', '\x3', '\x2', '\x2', '\x2', 
		'\x4FD', '\x4FE', '\f', '\x3', '\x2', '\x2', '\x4FE', '\x4FF', '\a', 'n', 
		'\x2', '\x2', '\x4FF', '\x500', '\a', '\x62', '\x2', '\x2', '\x500', '\x501', 
		'\x5', '\xCE', 'h', '\x2', '\x501', '\x502', '\a', 's', '\x2', '\x2', 
		'\x502', '\x503', '\x5', '\\', '/', '\x4', '\x503', '\x511', '\x3', '\x2', 
		'\x2', '\x2', '\x504', '\x505', '\f', '\'', '\x2', '\x2', '\x505', '\x506', 
		'\a', 'M', '\x2', '\x2', '\x506', '\x511', '\x5', '\xE2', 'r', '\x2', 
		'\x507', '\x508', '\f', '\"', '\x2', '\x2', '\x508', '\x509', '\a', 'v', 
		'\x2', '\x2', '\x509', '\x50A', '\a', '~', '\x2', '\x2', '\x50A', '\x511', 
		'\x5', '\x134', '\x9B', '\x2', '\x50B', '\x50C', '\f', '!', '\x2', '\x2', 
		'\x50C', '\x50D', '\a', 'v', '\x2', '\x2', '\x50D', '\x511', '\x5', '\x134', 
		'\x9B', '\x2', '\x50E', '\x50F', '\f', '\n', '\x2', '\x2', '\x50F', '\x511', 
		'\x5', 't', ';', '\x2', '\x510', '\x4A2', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4AA', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x510', 
		'\x4B2', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4B5', '\x3', '\x2', '\x2', 
		'\x2', '\x510', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x510', '\x4BE', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x510', 
		'\x4CA', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4CD', '\x3', '\x2', '\x2', 
		'\x2', '\x510', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4D3', 
		'\x3', '\x2', '\x2', '\x2', '\x510', '\x4D7', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4DF', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x510', 
		'\x4E7', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4EC', '\x3', '\x2', '\x2', 
		'\x2', '\x510', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x510', '\x4F4', 
		'\x3', '\x2', '\x2', '\x2', '\x510', '\x4F7', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x510', '\x504', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x507', '\x3', '\x2', '\x2', '\x2', '\x510', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x510', '\x50E', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x514', '\x3', '\x2', '\x2', '\x2', '\x512', '\x510', 
		'\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\x3', '\x2', '\x2', '\x2', 
		'\x513', ']', '\x3', '\x2', '\x2', '\x2', '\x514', '\x512', '\x3', '\x2', 
		'\x2', '\x2', '\x515', '\x516', '\b', '\x30', '\x1', '\x2', '\x516', '\x517', 
		'\x5', '\xCC', 'g', '\x2', '\x517', '\x51C', '\x3', '\x2', '\x2', '\x2', 
		'\x518', '\x519', '\f', '\x3', '\x2', '\x2', '\x519', '\x51B', '\x5', 
		'`', '\x31', '\x2', '\x51A', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51B', 
		'\x51E', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51A', '\x3', '\x2', '\x2', 
		'\x2', '\x51C', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51D', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x51E', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\x6', '\x31', '#', '\x3', '\x520', '\x521', '\a', '\x15', '\x2', 
		'\x2', '\x521', '\x522', '\x5', '\xCC', 'g', '\x2', '\x522', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x523', '\x524', '\a', 'u', '\x2', '\x2', '\x524', 
		'\x525', '\a', '\x11', '\x2', '\x2', '\x525', '\x526', '\x5', '\xCE', 
		'h', '\x2', '\x526', '\x527', '\x5', '\x64', '\x33', '\x2', '\x527', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\x6', '\x33', '$', '\x3', 
		'\x529', '\x65', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\b', '\x34', 
		'\x1', '\x2', '\x52B', '\x52C', '\x5', '\x116', '\x8C', '\x2', '\x52C', 
		'\x531', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x52E', '\f', '\x3', '\x2', 
		'\x2', '\x52E', '\x530', '\x5', 'h', '\x35', '\x2', '\x52F', '\x52D', 
		'\x3', '\x2', '\x2', '\x2', '\x530', '\x533', '\x3', '\x2', '\x2', '\x2', 
		'\x531', '\x52F', '\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\x3', 
		'\x2', '\x2', '\x2', '\x532', 'g', '\x3', '\x2', '\x2', '\x2', '\x533', 
		'\x531', '\x3', '\x2', '\x2', '\x2', '\x534', '\x535', '\x6', '\x35', 
		'&', '\x3', '\x535', '\x536', '\a', '\x15', '\x2', '\x2', '\x536', '\x542', 
		'\x5', '\xCE', 'h', '\x2', '\x537', '\x538', '\x6', '\x35', '\'', '\x3', 
		'\x538', '\x539', '\a', '\x18', '\x2', '\x2', '\x539', '\x53A', '\x5', 
		'\x12E', '\x98', '\x2', '\x53A', '\x53B', '\a', '\x19', '\x2', '\x2', 
		'\x53B', '\x542', '\x3', '\x2', '\x2', '\x2', '\x53C', '\x53D', '\x6', 
		'\x35', '(', '\x3', '\x53D', '\x53E', '\a', '\x18', '\x2', '\x2', '\x53E', 
		'\x53F', '\x5', '\\', '/', '\x2', '\x53F', '\x540', '\a', '\x19', '\x2', 
		'\x2', '\x540', '\x542', '\x3', '\x2', '\x2', '\x2', '\x541', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x541', '\x537', '\x3', '\x2', '\x2', '\x2', 
		'\x541', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x542', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x543', '\x546', '\a', '\x41', '\x2', '\x2', '\x544', '\x545', 
		'\a', 'o', '\x2', '\x2', '\x545', '\x547', '\x5', '\\', '/', '\x2', '\x546', 
		'\x544', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\x3', '\x2', '\x2', 
		'\x2', '\x547', 'k', '\x3', '\x2', '\x2', '\x2', '\x548', '\x549', '\a', 
		'\x42', '\x2', '\x2', '\x549', '\x54A', '\a', 'o', '\x2', '\x2', '\x54A', 
		'\x54B', '\x5', '\\', '/', '\x2', '\x54B', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\x54D', '\x5', '\xBA', '^', '\x2', '\x54D', '\x54E', '\a', 'o', 
		'\x2', '\x2', '\x54E', '\x557', '\x5', '\\', '/', '\x2', '\x54F', '\x551', 
		'\a', '\x13', '\x2', '\x2', '\x550', '\x54F', '\x3', '\x2', '\x2', '\x2', 
		'\x550', '\x551', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x555', '\x5', '~', '@', '\x2', '\x553', 
		'\x554', '\a', 'K', '\x2', '\x2', '\x554', '\x556', '\x5', '\x80', '\x41', 
		'\x2', '\x555', '\x553', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', 
		'\x3', '\x2', '\x2', '\x2', '\x556', '\x558', '\x3', '\x2', '\x2', '\x2', 
		'\x557', '\x550', '\x3', '\x2', '\x2', '\x2', '\x557', '\x558', '\x3', 
		'\x2', '\x2', '\x2', '\x558', '\x562', '\x3', '\x2', '\x2', '\x2', '\x559', 
		'\x55F', '\x5', '\xBA', '^', '\x2', '\x55A', '\x55D', '\x5', '~', '@', 
		'\x2', '\x55B', '\x55C', '\a', 'K', '\x2', '\x2', '\x55C', '\x55E', '\x5', 
		'\x80', '\x41', '\x2', '\x55D', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55D', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x560', '\x3', '\x2', '\x2', 
		'\x2', '\x55F', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', 
		'\x3', '\x2', '\x2', '\x2', '\x560', '\x562', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x561', '\x559', '\x3', 
		'\x2', '\x2', '\x2', '\x562', 'o', '\x3', '\x2', '\x2', '\x2', '\x563', 
		'\x564', '\a', '\xA3', '\x2', '\x2', '\x564', '\x565', '\x5', '\\', '/', 
		'\x2', '\x565', '\x566', '\a', '\x9B', '\x2', '\x2', '\x566', '\x567', 
		'\x5', '\\', '/', '\x2', '\x567', 'q', '\x3', '\x2', '\x2', '\x2', '\x568', 
		'\x569', '\x5', '^', '\x30', '\x2', '\x569', '\x56A', '\a', '#', '\x2', 
		'\x2', '\x56A', '\x56B', '\x5', '\\', '/', '\x2', '\x56B', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x56C', '\x56D', '\a', 'k', '\x2', '\x2', '\x56D', 
		'\x56E', '\a', '\x9F', '\x2', '\x2', '\x56E', '\x56F', '\x5', '\xCE', 
		'h', '\x2', '\x56F', '\x570', '\a', '\xA1', '\x2', '\x2', '\x570', '\x571', 
		'\x5', '\\', '/', '\x2', '\x571', 'u', '\x3', '\x2', '\x2', '\x2', '\x572', 
		'\x573', '\a', 'j', '\x2', '\x2', '\x573', '\x575', '\a', '\x82', '\x2', 
		'\x2', '\x574', '\x576', '\x5', '\xBA', '^', '\x2', '\x575', '\x574', 
		'\x3', '\x2', '\x2', '\x2', '\x575', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x576', '\x577', '\x3', '\x2', '\x2', '\x2', '\x577', '\x578', '\a', 
		'\xA1', '\x2', '\x2', '\x578', '\x597', '\x5', '\\', '/', '\x2', '\x579', 
		'\x58B', '\a', 'j', '\x2', '\x2', '\x57A', '\x57C', '\a', 'I', '\x2', 
		'\x2', '\x57B', '\x57D', '\x5', '\xBA', '^', '\x2', '\x57C', '\x57B', 
		'\x3', '\x2', '\x2', '\x2', '\x57C', '\x57D', '\x3', '\x2', '\x2', '\x2', 
		'\x57D', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x580', '\x5', 
		'\xBA', '^', '\x2', '\x57F', '\x581', '\a', '\x8F', '\x2', '\x2', '\x580', 
		'\x57F', '\x3', '\x2', '\x2', '\x2', '\x580', '\x581', '\x3', '\x2', '\x2', 
		'\x2', '\x581', '\x582', '\x3', '\x2', '\x2', '\x2', '\x582', '\x583', 
		'\x5', '\\', '/', '\x2', '\x583', '\x584', '\a', '\x9B', '\x2', '\x2', 
		'\x584', '\x585', '\x5', '\\', '/', '\x2', '\x585', '\x58C', '\x3', '\x2', 
		'\x2', '\x2', '\x586', '\x587', '\a', '\x8F', '\x2', '\x2', '\x587', '\x588', 
		'\x5', '\\', '/', '\x2', '\x588', '\x589', '\a', '\x9B', '\x2', '\x2', 
		'\x589', '\x58A', '\x5', '\\', '/', '\x2', '\x58A', '\x58C', '\x3', '\x2', 
		'\x2', '\x2', '\x58B', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x57E', 
		'\x3', '\x2', '\x2', '\x2', '\x58B', '\x586', '\x3', '\x2', '\x2', '\x2', 
		'\x58C', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x58D', '\x58E', '\a', 
		'\xA1', '\x2', '\x2', '\x58E', '\x590', '\x5', '\\', '/', '\x2', '\x58F', 
		'\x58D', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', '\x3', '\x2', '\x2', 
		'\x2', '\x590', '\x594', '\x3', '\x2', '\x2', '\x2', '\x591', '\x592', 
		'\a', '\x86', '\x2', '\x2', '\x592', '\x593', '\a', 'T', '\x2', '\x2', 
		'\x593', '\x595', '\x5', '\x13A', '\x9E', '\x2', '\x594', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', '\x595', 
		'\x597', '\x3', '\x2', '\x2', '\x2', '\x596', '\x572', '\x3', '\x2', '\x2', 
		'\x2', '\x596', '\x579', '\x3', '\x2', '\x2', '\x2', '\x597', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x598', '\x599', '\a', 'j', '\x2', '\x2', '\x599', 
		'\x59B', '\a', '\x82', '\x2', '\x2', '\x59A', '\x59C', '\x5', '\xBA', 
		'^', '\x2', '\x59B', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59C', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '\x59E', '\a', '\xA1', '\x2', '\x2', '\x59E', '\x59F', '\x5', 
		'\\', '/', '\x2', '\x59F', '\x5A0', '\a', '\x98', '\x2', '\x2', '\x5A0', 
		'\x5A1', '\a', '\x9F', '\x2', '\x2', '\x5A1', '\x5A2', '\x5', '\xCE', 
		'h', '\x2', '\x5A2', '\x5A3', '\a', '\x11', '\x2', '\x2', '\x5A3', '\x5A4', 
		'\x5', '\x8E', 'H', '\x2', '\x5A4', '\x5A5', '\x5', '\x108', '\x85', '\x2', 
		'\x5A5', '\x5A6', '\x5', '\x90', 'I', '\x2', '\x5A6', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5A7', '\x5B9', '\a', 'j', '\x2', '\x2', '\x5A8', 
		'\x5AA', '\a', 'I', '\x2', '\x2', '\x5A9', '\x5AB', '\x5', '\xBA', '^', 
		'\x2', '\x5AA', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', 
		'\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5BA', '\x3', '\x2', '\x2', '\x2', 
		'\x5AC', '\x5AE', '\x5', '\xBA', '^', '\x2', '\x5AD', '\x5AF', '\a', '\x8F', 
		'\x2', '\x2', '\x5AE', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B0', '\x3', '\x2', '\x2', '\x2', 
		'\x5B0', '\x5B1', '\x5', '\\', '/', '\x2', '\x5B1', '\x5B2', '\a', '\x9B', 
		'\x2', '\x2', '\x5B2', '\x5B3', '\x5', '\\', '/', '\x2', '\x5B3', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B5', '\a', '\x8F', '\x2', '\x2', 
		'\x5B5', '\x5B6', '\x5', '\\', '/', '\x2', '\x5B6', '\x5B7', '\a', '\x9B', 
		'\x2', '\x2', '\x5B7', '\x5B8', '\x5', '\\', '/', '\x2', '\x5B8', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5A8', '\x3', '\x2', '\x2', '\x2', 
		'\x5B9', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5B4', '\x3', 
		'\x2', '\x2', '\x2', '\x5BA', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BB', 
		'\x5BC', '\a', '\xA1', '\x2', '\x2', '\x5BC', '\x5BE', '\x5', '\\', '/', 
		'\x2', '\x5BD', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5C2', '\x3', '\x2', '\x2', '\x2', 
		'\x5BF', '\x5C0', '\a', '\x86', '\x2', '\x2', '\x5C0', '\x5C1', '\a', 
		'T', '\x2', '\x2', '\x5C1', '\x5C3', '\x5', '\x13A', '\x9E', '\x2', '\x5C2', 
		'\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', '\x3', '\x2', '\x2', 
		'\x2', '\x5C3', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', 
		'\a', '\x98', '\x2', '\x2', '\x5C5', '\x5C6', '\a', '\x9F', '\x2', '\x2', 
		'\x5C6', '\x5C7', '\x5', '\xCE', 'h', '\x2', '\x5C7', '\x5C8', '\a', '\x11', 
		'\x2', '\x2', '\x5C8', '\x5C9', '\x5', '\x8E', 'H', '\x2', '\x5C9', '\x5CA', 
		'\x5', '\x108', '\x85', '\x2', '\x5CA', '\x5CB', '\x5', '\x90', 'I', '\x2', 
		'\x5CB', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x598', '\x3', 
		'\x2', '\x2', '\x2', '\x5CC', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5CD', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5D0', '\a', '\x93', '\x2', 
		'\x2', '\x5CF', '\x5D1', '\a', '_', '\x2', '\x2', '\x5D0', '\x5CF', '\x3', 
		'\x2', '\x2', '\x2', '\x5D0', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', 
		'\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5D8', '\x5', '\x66', 
		'\x34', '\x2', '\x5D3', '\x5D4', '\a', '\x9F', '\x2', '\x2', '\x5D4', 
		'\x5D5', '\x5', '\x66', '\x34', '\x2', '\x5D5', '\x5D6', '\a', 'M', '\x2', 
		'\x2', '\x5D6', '\x5D7', '\x5', '\x144', '\xA3', '\x2', '\x5D7', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D3', '\x3', '\x2', '\x2', '\x2', 
		'\x5D8', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5D9', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x5DA', '\x5DB', '\x6', '?', ')', '\x3', '\x5DB', '\x5E1', 
		'\x5', '\\', '/', '\x2', '\x5DC', '\x5DF', '\x5', '~', '@', '\x2', '\x5DD', 
		'\x5DE', '\a', 'K', '\x2', '\x2', '\x5DE', '\x5E0', '\x5', '\x80', '\x41', 
		'\x2', '\x5DF', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', 
		'\x3', '\x2', '\x2', '\x2', '\x5E0', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E1', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', '\x3', 
		'\x2', '\x2', '\x2', '\x5E2', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E3', 
		'\x5E6', '\x5', '~', '@', '\x2', '\x5E4', '\x5E5', '\a', 'K', '\x2', '\x2', 
		'\x5E5', '\x5E7', '\x5', '\x80', '\x41', '\x2', '\x5E6', '\x5E4', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E7', 
		'\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5DA', '\x3', '\x2', '\x2', 
		'\x2', '\x5E8', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E9', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\b', '@', '\x1', '\x2', '\x5EB', 
		'\x5EC', '\a', '\x9F', '\x2', '\x2', '\x5EC', '\x5ED', '\x5', '\x80', 
		'\x41', '\x2', '\x5ED', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5EE', 
		'\x5EF', '\f', '\x3', '\x2', '\x2', '\x5EF', '\x5F0', '\a', '\x13', '\x2', 
		'\x2', '\x5F0', '\x5F2', '\x5', '\x80', '\x41', '\x2', '\x5F1', '\x5EE', 
		'\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F5', '\x3', '\x2', '\x2', '\x2', 
		'\x5F3', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F4', '\x3', 
		'\x2', '\x2', '\x2', '\x5F4', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x5F5', 
		'\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x5', '\\', '/', 
		'\x2', '\x5F7', '\x5F8', '\a', 'M', '\x2', '\x2', '\x5F8', '\x5FA', '\x3', 
		'\x2', '\x2', '\x2', '\x5F9', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F9', 
		'\x5FA', '\x3', '\x2', '\x2', '\x2', '\x5FA', '\x5FB', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5FC', '\x5', '\xCE', 'h', '\x2', '\x5FC', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x5FD', '\x5FE', '\x5', '\x132', '\x9A', '\x2', 
		'\x5FE', '\x5FF', '\x5', '\x14C', '\xA7', '\x2', '\x5FF', '\x600', '\x5', 
		'\\', '/', '\x2', '\x600', '\x83', '\x3', '\x2', '\x2', '\x2', '\x601', 
		'\x602', '\x6', '\x43', '+', '\x3', '\x602', '\x603', '\a', '\x15', '\x2', 
		'\x2', '\x603', '\x60A', '\x5', '\xCE', 'h', '\x2', '\x604', '\x605', 
		'\x6', '\x43', ',', '\x3', '\x605', '\x606', '\a', '\x18', '\x2', '\x2', 
		'\x606', '\x607', '\x5', '\\', '/', '\x2', '\x607', '\x608', '\a', '\x19', 
		'\x2', '\x2', '\x608', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x609', '\x601', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x604', '\x3', '\x2', '\x2', '\x2', 
		'\x60A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x60B', '\x60C', '\x5', 
		'\xF8', '}', '\x2', '\x60C', '\x60D', '\x5', '\x14C', '\xA7', '\x2', '\x60D', 
		'\x60E', '\x5', '\\', '/', '\x2', '\x60E', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x60F', '\x611', '\a', '\a', '\x2', '\x2', '\x610', '\x60F', '\x3', 
		'\x2', '\x2', '\x2', '\x611', '\x614', '\x3', '\x2', '\x2', '\x2', '\x612', 
		'\x610', '\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\x3', '\x2', '\x2', 
		'\x2', '\x613', '\x89', '\x3', '\x2', '\x2', '\x2', '\x614', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x615', '\x617', '\a', '\a', '\x2', '\x2', 
		'\x616', '\x615', '\x3', '\x2', '\x2', '\x2', '\x617', '\x618', '\x3', 
		'\x2', '\x2', '\x2', '\x618', '\x616', '\x3', '\x2', '\x2', '\x2', '\x618', 
		'\x619', '\x3', '\x2', '\x2', '\x2', '\x619', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x61A', '\x61C', '\t', '\x3', '\x2', '\x2', '\x61B', '\x61A', 
		'\x3', '\x2', '\x2', '\x2', '\x61C', '\x61F', '\x3', '\x2', '\x2', '\x2', 
		'\x61D', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x61D', '\x61E', '\x3', 
		'\x2', '\x2', '\x2', '\x61E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x61F', 
		'\x61D', '\x3', '\x2', '\x2', '\x2', '\x620', '\x622', '\a', '\a', '\x2', 
		'\x2', '\x621', '\x620', '\x3', '\x2', '\x2', '\x2', '\x622', '\x623', 
		'\x3', '\x2', '\x2', '\x2', '\x623', '\x621', '\x3', '\x2', '\x2', '\x2', 
		'\x623', '\x624', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\x3', 
		'\x2', '\x2', '\x2', '\x625', '\x626', '\a', '\x3', '\x2', '\x2', '\x626', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x627', '\x629', '\a', '\a', '\x2', 
		'\x2', '\x628', '\x627', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62C', 
		'\x3', '\x2', '\x2', '\x2', '\x62A', '\x628', '\x3', '\x2', '\x2', '\x2', 
		'\x62A', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x62D', '\x3', 
		'\x2', '\x2', '\x2', '\x62C', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62D', 
		'\x62E', '\a', '\x4', '\x2', '\x2', '\x62E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x62F', '\x630', '\a', '\x7F', '\x2', '\x2', '\x630', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x631', '\x633', '\x5', '\x96', 'L', '\x2', 
		'\x632', '\x631', '\x3', '\x2', '\x2', '\x2', '\x632', '\x633', '\x3', 
		'\x2', '\x2', '\x2', '\x633', '\x634', '\x3', '\x2', '\x2', '\x2', '\x634', 
		'\x635', '\x5', '\x88', '\x45', '\x2', '\x635', '\x636', '\a', '\x2', 
		'\x2', '\x3', '\x636', '\x95', '\x3', '\x2', '\x2', '\x2', '\x637', '\x63D', 
		'\x5', '\x98', 'M', '\x2', '\x638', '\x639', '\x5', '\x8A', '\x46', '\x2', 
		'\x639', '\x63A', '\x5', '\x98', 'M', '\x2', '\x63A', '\x63C', '\x3', 
		'\x2', '\x2', '\x2', '\x63B', '\x638', '\x3', '\x2', '\x2', '\x2', '\x63C', 
		'\x63F', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63B', '\x3', '\x2', '\x2', 
		'\x2', '\x63D', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x63F', '\x63D', '\x3', '\x2', '\x2', '\x2', 
		'\x640', '\x641', '\x5', '\xFE', '\x80', '\x2', '\x641', '\x642', '\x5', 
		'\x8A', '\x46', '\x2', '\x642', '\x644', '\x3', '\x2', '\x2', '\x2', '\x643', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x644', '\x647', '\x3', '\x2', '\x2', 
		'\x2', '\x645', '\x643', '\x3', '\x2', '\x2', '\x2', '\x645', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x64D', '\x3', '\x2', '\x2', '\x2', 
		'\x647', '\x645', '\x3', '\x2', '\x2', '\x2', '\x648', '\x649', '\x5', 
		'\x9A', 'N', '\x2', '\x649', '\x64A', '\x5', '\x8A', '\x46', '\x2', '\x64A', 
		'\x64C', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x648', '\x3', '\x2', '\x2', 
		'\x2', '\x64C', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x64D', '\x64B', 
		'\x3', '\x2', '\x2', '\x2', '\x64D', '\x64E', '\x3', '\x2', '\x2', '\x2', 
		'\x64E', '\x656', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x64D', '\x3', 
		'\x2', '\x2', '\x2', '\x650', '\x657', '\x5', '\n', '\x6', '\x2', '\x651', 
		'\x657', '\x5', '\xBE', '`', '\x2', '\x652', '\x657', '\x5', '\x9E', 'P', 
		'\x2', '\x653', '\x657', '\x5', '\xA0', 'Q', '\x2', '\x654', '\x657', 
		'\x5', '\xC0', '\x61', '\x2', '\x655', '\x657', '\x5', '\xFC', '\x7F', 
		'\x2', '\x656', '\x650', '\x3', '\x2', '\x2', '\x2', '\x656', '\x651', 
		'\x3', '\x2', '\x2', '\x2', '\x656', '\x652', '\x3', '\x2', '\x2', '\x2', 
		'\x656', '\x653', '\x3', '\x2', '\x2', '\x2', '\x656', '\x654', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '\x655', '\x3', '\x2', '\x2', '\x2', '\x657', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x658', '\x65D', '\x5', '\x9C', 'O', 
		'\x2', '\x659', '\x65A', '\a', '\x16', '\x2', '\x2', '\x65A', '\x65B', 
		'\x5', '\x11C', '\x8F', '\x2', '\x65B', '\x65C', '\a', '\x17', '\x2', 
		'\x2', '\x65C', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65D', '\x659', 
		'\x3', '\x2', '\x2', '\x2', '\x65D', '\x65E', '\x3', '\x2', '\x2', '\x2', 
		'\x65E', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x660', '\a', '\xAD', 
		'\x2', '\x2', '\x660', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x661', '\x662', 
		'\x5', '\"', '\x12', '\x2', '\x662', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x663', '\x666', '\x5', '\x2', '\x2', '\x2', '\x664', '\x666', '\x5', 
		'\x4', '\x3', '\x2', '\x665', '\x663', '\x3', '\x2', '\x2', '\x2', '\x665', 
		'\x664', '\x3', '\x2', '\x2', '\x2', '\x666', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x667', '\x66D', '\x5', '\x6', '\x4', '\x2', '\x668', '\x669', 
		'\x5', '\x8A', '\x46', '\x2', '\x669', '\x66A', '\x5', '\x6', '\x4', '\x2', 
		'\x66A', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x66B', '\x668', '\x3', 
		'\x2', '\x2', '\x2', '\x66C', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x66D', 
		'\x66B', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x66E', '\x3', '\x2', '\x2', 
		'\x2', '\x66E', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x66D', 
		'\x3', '\x2', '\x2', '\x2', '\x670', '\x676', '\x5', '\b', '\x5', '\x2', 
		'\x671', '\x672', '\x5', '\x8A', '\x46', '\x2', '\x672', '\x673', '\x5', 
		'\b', '\x5', '\x2', '\x673', '\x675', '\x3', '\x2', '\x2', '\x2', '\x674', 
		'\x671', '\x3', '\x2', '\x2', '\x2', '\x675', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x676', '\x674', '\x3', '\x2', '\x2', '\x2', '\x676', '\x677', 
		'\x3', '\x2', '\x2', '\x2', '\x677', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x678', '\x676', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67E', '\x5', 
		'\xD4', 'k', '\x2', '\x67A', '\x67B', '\a', '\x13', '\x2', '\x2', '\x67B', 
		'\x67D', '\x5', '\xD4', 'k', '\x2', '\x67C', '\x67A', '\x3', '\x2', '\x2', 
		'\x2', '\x67D', '\x680', '\x3', '\x2', '\x2', '\x2', '\x67E', '\x67C', 
		'\x3', '\x2', '\x2', '\x2', '\x67E', '\x67F', '\x3', '\x2', '\x2', '\x2', 
		'\x67F', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x680', '\x67E', '\x3', 
		'\x2', '\x2', '\x2', '\x681', '\x682', '\a', 's', '\x2', '\x2', '\x682', 
		'\x68C', '\x5', '\xAA', 'V', '\x2', '\x683', '\x684', '\a', 's', '\x2', 
		'\x2', '\x684', '\x68C', '\x5', '\xAC', 'W', '\x2', '\x685', '\x686', 
		'\a', 's', '\x2', '\x2', '\x686', '\x68C', '\x5', '\xB0', 'Y', '\x2', 
		'\x687', '\x688', '\a', 'w', '\x2', '\x2', '\x688', '\x68C', '\a', '\xAE', 
		'\x2', '\x2', '\x689', '\x68A', '\a', 'w', '\x2', '\x2', '\x68A', '\x68C', 
		'\x5', '\\', '/', '\x2', '\x68B', '\x681', '\x3', '\x2', '\x2', '\x2', 
		'\x68B', '\x683', '\x3', '\x2', '\x2', '\x2', '\x68B', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x68B', '\x687', '\x3', '\x2', '\x2', '\x2', '\x68B', 
		'\x689', '\x3', '\x2', '\x2', '\x2', '\x68C', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x68D', '\x68F', '\a', '{', '\x2', '\x2', '\x68E', '\x68D', '\x3', 
		'\x2', '\x2', '\x2', '\x68E', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x68F', 
		'\x690', '\x3', '\x2', '\x2', '\x2', '\x690', '\x692', '\a', '\x18', '\x2', 
		'\x2', '\x691', '\x693', '\x5', '\xAE', 'X', '\x2', '\x692', '\x691', 
		'\x3', '\x2', '\x2', '\x2', '\x692', '\x693', '\x3', '\x2', '\x2', '\x2', 
		'\x693', '\x694', '\x3', '\x2', '\x2', '\x2', '\x694', '\x695', '\a', 
		'\x19', '\x2', '\x2', '\x695', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x696', 
		'\x698', '\a', '{', '\x2', '\x2', '\x697', '\x696', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x698', '\x3', '\x2', '\x2', '\x2', '\x698', '\x699', 
		'\x3', '\x2', '\x2', '\x2', '\x699', '\x69B', '\a', '*', '\x2', '\x2', 
		'\x69A', '\x69C', '\x5', '\xAE', 'X', '\x2', '\x69B', '\x69A', '\x3', 
		'\x2', '\x2', '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69C', 
		'\x69D', '\x3', '\x2', '\x2', '\x2', '\x69D', '\x69E', '\a', '(', '\x2', 
		'\x2', '\x69E', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x6A4', 
		'\x5', '\\', '/', '\x2', '\x6A0', '\x6A1', '\a', '\x13', '\x2', '\x2', 
		'\x6A1', '\x6A3', '\x5', '\\', '/', '\x2', '\x6A2', '\x6A0', '\x3', '\x2', 
		'\x2', '\x2', '\x6A3', '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A2', 
		'\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A5', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A4', '\x3', 
		'\x2', '\x2', '\x2', '\x6A7', '\x6A8', '\a', '\x18', '\x2', '\x2', '\x6A8', 
		'\x6A9', '\x5', '\\', '/', '\x2', '\x6A9', '\x6AA', '\a', '\x14', '\x2', 
		'\x2', '\x6AA', '\x6AB', '\x5', '\\', '/', '\x2', '\x6AB', '\x6AC', '\a', 
		'\x19', '\x2', '\x2', '\x6AC', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x6AD', 
		'\x6AE', '\b', 'Z', '\x1', '\x2', '\x6AE', '\x6BA', '\x5', '\xB4', '[', 
		'\x2', '\x6AF', '\x6B0', '\a', '\x46', '\x2', '\x2', '\x6B0', '\x6B1', 
		'\a', '*', '\x2', '\x2', '\x6B1', '\x6B2', '\x5', '\xB2', 'Z', '\x2', 
		'\x6B2', '\x6B3', '\a', '(', '\x2', '\x2', '\x6B3', '\x6BA', '\x3', '\x2', 
		'\x2', '\x2', '\x6B4', '\x6B5', '\a', '\x45', '\x2', '\x2', '\x6B5', '\x6B6', 
		'\a', '*', '\x2', '\x2', '\x6B6', '\x6B7', '\x5', '\xB2', 'Z', '\x2', 
		'\x6B7', '\x6B8', '\a', '(', '\x2', '\x2', '\x6B8', '\x6BA', '\x3', '\x2', 
		'\x2', '\x2', '\x6B9', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6AF', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6B4', '\x3', '\x2', '\x2', '\x2', 
		'\x6BA', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6BB', '\x6BC', '\f', 
		'\a', '\x2', '\x2', '\x6BC', '\x6C3', '\a', ',', '\x2', '\x2', '\x6BD', 
		'\x6BE', '\f', '\x6', '\x2', '\x2', '\x6BE', '\x6BF', '\a', '\x18', '\x2', 
		'\x2', '\x6BF', '\x6C3', '\a', '\x19', '\x2', '\x2', '\x6C0', '\x6C1', 
		'\f', '\x5', '\x2', '\x2', '\x6C1', '\x6C3', '\a', '-', '\x2', '\x2', 
		'\x6C2', '\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6BD', '\x3', 
		'\x2', '\x2', '\x2', '\x6C2', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C3', 
		'\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6C4', '\x3', '\x2', '\x2', '\x2', 
		'\x6C7', '\x6CA', '\x5', '\xB6', '\\', '\x2', '\x6C8', '\x6CA', '\x5', 
		'\xB8', ']', '\x2', '\x6C9', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6C9', 
		'\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x6CB', '\x6DC', '\a', '\x35', '\x2', '\x2', '\x6CC', '\x6DC', 
		'\a', '\x36', '\x2', '\x2', '\x6CD', '\x6DC', '\a', '\x37', '\x2', '\x2', 
		'\x6CE', '\x6DC', '\a', '\x43', '\x2', '\x2', '\x6CF', '\x6DC', '\a', 
		'\x38', '\x2', '\x2', '\x6D0', '\x6DC', '\a', '\x39', '\x2', '\x2', '\x6D1', 
		'\x6DC', '\a', '\x41', '\x2', '\x2', '\x6D2', '\x6DC', '\a', ':', '\x2', 
		'\x2', '\x6D3', '\x6DC', '\a', '<', '\x2', '\x2', '\x6D4', '\x6DC', '\a', 
		';', '\x2', '\x2', '\x6D5', '\x6DC', '\a', '=', '\x2', '\x2', '\x6D6', 
		'\x6DC', '\a', '>', '\x2', '\x2', '\x6D7', '\x6DC', '\a', '@', '\x2', 
		'\x2', '\x6D8', '\x6DC', '\a', '\x42', '\x2', '\x2', '\x6D9', '\x6DC', 
		'\a', '\x44', '\x2', '\x2', '\x6DA', '\x6DC', '\a', 'G', '\x2', '\x2', 
		'\x6DB', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6CC', '\x3', 
		'\x2', '\x2', '\x2', '\x6DB', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6CF', '\x3', '\x2', '\x2', 
		'\x2', '\x6DB', '\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D1', 
		'\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D2', '\x3', '\x2', '\x2', '\x2', 
		'\x6DB', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D4', '\x3', 
		'\x2', '\x2', '\x2', '\x6DB', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D7', '\x3', '\x2', '\x2', 
		'\x2', '\x6DB', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6D9', 
		'\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6DC', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DE', '\a', '\xA9', 
		'\x2', '\x2', '\x6DE', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E1', 
		'\a', '{', '\x2', '\x2', '\x6E0', '\x6DF', '\x3', '\x2', '\x2', '\x2', 
		'\x6E0', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', 
		'\x2', '\x2', '\x2', '\x6E2', '\x6E3', '\x5', '\xB8', ']', '\x2', '\x6E3', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E5', '\a', '@', '\x2', 
		'\x2', '\x6E5', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6EA', 
		'\x5', '\x10', '\t', '\x2', '\x6E7', '\x6EA', '\x5', ' ', '\x11', '\x2', 
		'\x6E8', '\x6EA', '\x5', '\x12', '\n', '\x2', '\x6E9', '\x6E6', '\x3', 
		'\x2', '\x2', '\x2', '\x6E9', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E9', 
		'\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\x6EB', '\x6EE', '\x5', '\f', '\a', '\x2', '\x6EC', '\x6EE', '\x5', 
		'\xE', '\b', '\x2', '\x6ED', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6ED', 
		'\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x6EF', '\x6F4', '\x5', '\xD2', 'j', '\x2', '\x6F0', '\x6F1', 
		'\a', '\x13', '\x2', '\x2', '\x6F1', '\x6F3', '\x5', '\xD2', 'j', '\x2', 
		'\x6F2', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F6', '\x3', 
		'\x2', '\x2', '\x2', '\x6F4', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F4', 
		'\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6FA', 
		'\x5', '\xCE', 'h', '\x2', '\x6F8', '\x6FA', '\x5', '\xD2', 'j', '\x2', 
		'\x6F9', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6F8', '\x3', 
		'\x2', '\x2', '\x2', '\x6FA', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x6FB', 
		'\x6FE', '\x5', '\xCC', 'g', '\x2', '\x6FC', '\x6FE', '\x5', '\x140', 
		'\xA1', '\x2', '\x6FD', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FD', 
		'\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\x6FF', '\x700', '\x6', '\x65', '\x30', '\x3', '\x700', '\x701', 
		'\a', '#', '\x2', '\x2', '\x701', '\x702', '\x5', '\xCA', '\x66', '\x2', 
		'\x702', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x703', '\x704', '\x6', 
		'\x66', '\x31', '\x3', '\x704', '\x705', '\x5', '\xC6', '\x64', '\x2', 
		'\x705', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x706', '\x70A', '\x5', 
		'\xCE', 'h', '\x2', '\x707', '\x70A', '\x5', '\xD2', 'j', '\x2', '\x708', 
		'\x70A', '\x5', '\xD4', 'k', '\x2', '\x709', '\x706', '\x3', '\x2', '\x2', 
		'\x2', '\x709', '\x707', '\x3', '\x2', '\x2', '\x2', '\x709', '\x708', 
		'\x3', '\x2', '\x2', '\x2', '\x70A', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x70B', '\x70C', '\a', '\xAA', '\x2', '\x2', '\x70C', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\x70D', '\x70E', '\t', '\x4', '\x2', '\x2', '\x70E', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\x70F', '\x710', '\a', '\xA9', '\x2', 
		'\x2', '\x710', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x711', '\x712', 
		'\a', '\xA8', '\x2', '\x2', '\x712', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\x713', '\x714', '\t', '\x5', '\x2', '\x2', '\x714', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\x715', '\x71A', '\x5', '\xDA', 'n', '\x2', '\x716', '\x717', 
		'\a', '\x13', '\x2', '\x2', '\x717', '\x719', '\x5', '\xDA', 'n', '\x2', 
		'\x718', '\x716', '\x3', '\x2', '\x2', '\x2', '\x719', '\x71C', '\x3', 
		'\x2', '\x2', '\x2', '\x71A', '\x718', '\x3', '\x2', '\x2', '\x2', '\x71A', 
		'\x71B', '\x3', '\x2', '\x2', '\x2', '\x71B', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\x71C', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x723', 
		'\x5', '\xE0', 'q', '\x2', '\x71E', '\x720', '\a', '{', '\x2', '\x2', 
		'\x71F', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x720', '\x721', '\x3', '\x2', '\x2', '\x2', '\x721', 
		'\x723', '\x5', '\xDC', 'o', '\x2', '\x722', '\x71D', '\x3', '\x2', '\x2', 
		'\x2', '\x722', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x723', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\x724', '\x727', '\x5', '\xDE', 'p', '\x2', 
		'\x725', '\x727', '\x5', '\x36', '\x1C', '\x2', '\x726', '\x724', '\x3', 
		'\x2', '\x2', '\x2', '\x726', '\x725', '\x3', '\x2', '\x2', '\x2', '\x727', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\x728', '\x72B', '\x5', '\xCE', 'h', 
		'\x2', '\x729', '\x72A', '\a', '.', '\x2', '\x2', '\x72A', '\x72C', '\x5', 
		'\x11C', '\x8F', '\x2', '\x72B', '\x729', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x72C', '\x3', '\x2', '\x2', '\x2', '\x72C', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\x72D', '\x72E', '\x5', '\xBC', '_', '\x2', '\x72E', 
		'\x72F', '\x5', '\xCE', 'h', '\x2', '\x72F', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\x730', '\x733', '\x5', '\xB2', 'Z', '\x2', '\x731', '\x733', 
		'\x5', '\xE4', 's', '\x2', '\x732', '\x730', '\x3', '\x2', '\x2', '\x2', 
		'\x732', '\x731', '\x3', '\x2', '\x2', '\x2', '\x733', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x734', '\x735', '\b', 's', '\x1', '\x2', '\x735', 
		'\x736', '\a', 'L', '\x2', '\x2', '\x736', '\x73F', '\x3', '\x2', '\x2', 
		'\x2', '\x737', '\x738', '\f', '\x4', '\x2', '\x2', '\x738', '\x739', 
		'\a', '\x18', '\x2', '\x2', '\x739', '\x73E', '\a', '\x19', '\x2', '\x2', 
		'\x73A', '\x73B', '\f', '\x3', '\x2', '\x2', '\x73B', '\x73C', '\a', '\x1A', 
		'\x2', '\x2', '\x73C', '\x73E', '\a', '\x1B', '\x2', '\x2', '\x73D', '\x737', 
		'\x3', '\x2', '\x2', '\x2', '\x73D', '\x73A', '\x3', '\x2', '\x2', '\x2', 
		'\x73E', '\x741', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x73D', '\x3', 
		'\x2', '\x2', '\x2', '\x73F', '\x740', '\x3', '\x2', '\x2', '\x2', '\x740', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\x741', '\x73F', '\x3', '\x2', '\x2', 
		'\x2', '\x742', '\x748', '\x5', '\xE8', 'u', '\x2', '\x743', '\x744', 
		'\x5', '\x8A', '\x46', '\x2', '\x744', '\x745', '\x5', '\xE8', 'u', '\x2', 
		'\x745', '\x747', '\x3', '\x2', '\x2', '\x2', '\x746', '\x743', '\x3', 
		'\x2', '\x2', '\x2', '\x747', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x748', 
		'\x746', '\x3', '\x2', '\x2', '\x2', '\x748', '\x749', '\x3', '\x2', '\x2', 
		'\x2', '\x749', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x748', 
		'\x3', '\x2', '\x2', '\x2', '\x74B', '\x74C', '\x5', '\xFE', '\x80', '\x2', 
		'\x74C', '\x74D', '\x5', '\x8A', '\x46', '\x2', '\x74D', '\x74F', '\x3', 
		'\x2', '\x2', '\x2', '\x74E', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x74F', 
		'\x752', '\x3', '\x2', '\x2', '\x2', '\x750', '\x74E', '\x3', '\x2', '\x2', 
		'\x2', '\x750', '\x751', '\x3', '\x2', '\x2', '\x2', '\x751', '\x758', 
		'\x3', '\x2', '\x2', '\x2', '\x752', '\x750', '\x3', '\x2', '\x2', '\x2', 
		'\x753', '\x754', '\x5', '\x9A', 'N', '\x2', '\x754', '\x755', '\x5', 
		'\x8A', '\x46', '\x2', '\x755', '\x757', '\x3', '\x2', '\x2', '\x2', '\x756', 
		'\x753', '\x3', '\x2', '\x2', '\x2', '\x757', '\x75A', '\x3', '\x2', '\x2', 
		'\x2', '\x758', '\x756', '\x3', '\x2', '\x2', '\x2', '\x758', '\x759', 
		'\x3', '\x2', '\x2', '\x2', '\x759', '\x760', '\x3', '\x2', '\x2', '\x2', 
		'\x75A', '\x758', '\x3', '\x2', '\x2', '\x2', '\x75B', '\x761', '\x5', 
		'\x18', '\r', '\x2', '\x75C', '\x761', '\x5', '\x1C', '\xF', '\x2', '\x75D', 
		'\x761', '\x5', ',', '\x17', '\x2', '\x75E', '\x761', '\x5', '*', '\x16', 
		'\x2', '\x75F', '\x761', '\x5', '\x16', '\f', '\x2', '\x760', '\x75B', 
		'\x3', '\x2', '\x2', '\x2', '\x760', '\x75C', '\x3', '\x2', '\x2', '\x2', 
		'\x760', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x760', '\x75E', '\x3', 
		'\x2', '\x2', '\x2', '\x760', '\x75F', '\x3', '\x2', '\x2', '\x2', '\x761', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\x762', '\x768', '\x5', '\xEC', 'w', 
		'\x2', '\x763', '\x764', '\x5', '\x8A', '\x46', '\x2', '\x764', '\x765', 
		'\x5', '\xEC', 'w', '\x2', '\x765', '\x767', '\x3', '\x2', '\x2', '\x2', 
		'\x766', '\x763', '\x3', '\x2', '\x2', '\x2', '\x767', '\x76A', '\x3', 
		'\x2', '\x2', '\x2', '\x768', '\x766', '\x3', '\x2', '\x2', '\x2', '\x768', 
		'\x769', '\x3', '\x2', '\x2', '\x2', '\x769', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x76A', '\x768', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76F', 
		'\x5', '\x1E', '\x10', '\x2', '\x76C', '\x76F', '\x5', '\x1A', '\xE', 
		'\x2', '\x76D', '\x76F', '\x5', '.', '\x18', '\x2', '\x76E', '\x76B', 
		'\x3', '\x2', '\x2', '\x2', '\x76E', '\x76C', '\x3', '\x2', '\x2', '\x2', 
		'\x76E', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x76F', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\x770', '\x771', '\a', '\v', '\x2', '\x2', '\x771', 
		'\x77B', '\x5', '\x1A0', '\xD1', '\x2', '\x772', '\x773', '\a', '\f', 
		'\x2', '\x2', '\x773', '\x77B', '\x5', '\x1BA', '\xDE', '\x2', '\x774', 
		'\x775', '\a', '\r', '\x2', '\x2', '\x775', '\x77B', '\x5', '\xF0', 'y', 
		'\x2', '\x776', '\x777', '\a', '\xE', '\x2', '\x2', '\x777', '\x77B', 
		'\x5', '\xF0', 'y', '\x2', '\x778', '\x779', '\a', '\xF', '\x2', '\x2', 
		'\x779', '\x77B', '\x5', '\xF4', '{', '\x2', '\x77A', '\x770', '\x3', 
		'\x2', '\x2', '\x2', '\x77A', '\x772', '\x3', '\x2', '\x2', '\x2', '\x77A', 
		'\x774', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x776', '\x3', '\x2', '\x2', 
		'\x2', '\x77A', '\x778', '\x3', '\x2', '\x2', '\x2', '\x77B', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x77E', '\x5', '\xCC', 'g', '\x2', 
		'\x77D', '\x77F', '\x5', '\xF2', 'z', '\x2', '\x77E', '\x77D', '\x3', 
		'\x2', '\x2', '\x2', '\x77E', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x77F', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x780', '\x781', '\a', 'o', '\x2', 
		'\x2', '\x781', '\x782', '\x5', '\x146', '\xA4', '\x2', '\x782', '\x783', 
		'\a', '\x11', '\x2', '\x2', '\x783', '\x788', '\x5', '\x188', '\xC5', 
		'\x2', '\x784', '\x785', '\a', '\x15', '\x2', '\x2', '\x785', '\x787', 
		'\x5', '\x188', '\xC5', '\x2', '\x786', '\x784', '\x3', '\x2', '\x2', 
		'\x2', '\x787', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x788', '\x786', 
		'\x3', '\x2', '\x2', '\x2', '\x788', '\x789', '\x3', '\x2', '\x2', '\x2', 
		'\x789', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x788', '\x3', 
		'\x2', '\x2', '\x2', '\x78B', '\x790', '\x5', '\x16E', '\xB8', '\x2', 
		'\x78C', '\x78D', '\a', '\x15', '\x2', '\x2', '\x78D', '\x78F', '\x5', 
		'\x16E', '\xB8', '\x2', '\x78E', '\x78C', '\x3', '\x2', '\x2', '\x2', 
		'\x78F', '\x792', '\x3', '\x2', '\x2', '\x2', '\x790', '\x78E', '\x3', 
		'\x2', '\x2', '\x2', '\x790', '\x791', '\x3', '\x2', '\x2', '\x2', '\x791', 
		'\x794', '\x3', '\x2', '\x2', '\x2', '\x792', '\x790', '\x3', '\x2', '\x2', 
		'\x2', '\x793', '\x795', '\x5', '\xF6', '|', '\x2', '\x794', '\x793', 
		'\x3', '\x2', '\x2', '\x2', '\x794', '\x795', '\x3', '\x2', '\x2', '\x2', 
		'\x795', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\a', 'o', 
		'\x2', '\x2', '\x797', '\x798', '\x5', '\x146', '\xA4', '\x2', '\x798', 
		'\x79A', '\a', '\x11', '\x2', '\x2', '\x799', '\x79B', '\a', '%', '\x2', 
		'\x2', '\x79A', '\x799', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x79B', 
		'\x3', '\x2', '\x2', '\x2', '\x79B', '\x79C', '\x3', '\x2', '\x2', '\x2', 
		'\x79C', '\x7A1', '\x5', '\x16E', '\xB8', '\x2', '\x79D', '\x79E', '\a', 
		'%', '\x2', '\x2', '\x79E', '\x7A0', '\x5', '\x16E', '\xB8', '\x2', '\x79F', 
		'\x79D', '\x3', '\x2', '\x2', '\x2', '\x7A0', '\x7A3', '\x3', '\x2', '\x2', 
		'\x2', '\x7A1', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x7A2', 
		'\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A6', '\x3', '\x2', '\x2', '\x2', 
		'\x7A3', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A5', '\a', 
		'\x15', '\x2', '\x2', '\x7A5', '\x7A7', '\x5', '\x16E', '\xB8', '\x2', 
		'\x7A6', '\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', '\x3', 
		'\x2', '\x2', '\x2', '\x7A7', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x7A8', 
		'\x7AD', '\x5', '\xCE', 'h', '\x2', '\x7A9', '\x7AA', '\a', '\x13', '\x2', 
		'\x2', '\x7AA', '\x7AC', '\x5', '\xCE', 'h', '\x2', '\x7AB', '\x7A9', 
		'\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AF', '\x3', '\x2', '\x2', '\x2', 
		'\x7AD', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AE', '\x3', 
		'\x2', '\x2', '\x2', '\x7AE', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x7AF', 
		'\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7B0', '\x7B5', '\x5', '\xD0', 
		'i', '\x2', '\x7B1', '\x7B2', '\a', '\x13', '\x2', '\x2', '\x7B2', '\x7B4', 
		'\x5', '\xD0', 'i', '\x2', '\x7B3', '\x7B1', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7B3', '\x3', 
		'\x2', '\x2', '\x2', '\x7B5', '\x7B6', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B5', '\x3', '\x2', '\x2', 
		'\x2', '\x7B8', '\x7BD', '\x5', '*', '\x16', '\x2', '\x7B9', '\x7BD', 
		'\x5', ',', '\x17', '\x2', '\x7BA', '\x7BD', '\x5', '.', '\x18', '\x2', 
		'\x7BB', '\x7BD', '\x5', '\x30', '\x19', '\x2', '\x7BC', '\x7B8', '\x3', 
		'\x2', '\x2', '\x2', '\x7BC', '\x7B9', '\x3', '\x2', '\x2', '\x2', '\x7BC', 
		'\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BB', '\x3', '\x2', '\x2', 
		'\x2', '\x7BD', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7BF', 
		'\a', '\n', '\x2', '\x2', '\x7BF', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x7C0', '\x7C6', '\x5', '\x102', '\x82', '\x2', '\x7C1', '\x7C2', '\x5', 
		'\x8A', '\x46', '\x2', '\x7C2', '\x7C3', '\x5', '\x102', '\x82', '\x2', 
		'\x7C3', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x7C1', '\x3', 
		'\x2', '\x2', '\x2', '\x7C5', '\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7C6', 
		'\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C7', '\x3', '\x2', '\x2', 
		'\x2', '\x7C7', '\x101', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7C6', 
		'\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CA', '\a', '\v', '\x2', '\x2', 
		'\x7CA', '\x7D4', '\x5', '\x18A', '\xC6', '\x2', '\x7CB', '\x7CC', '\a', 
		'\f', '\x2', '\x2', '\x7CC', '\x7D4', '\x5', '\x1A6', '\xD4', '\x2', '\x7CD', 
		'\x7CE', '\a', '\r', '\x2', '\x2', '\x7CE', '\x7D4', '\x5', '\x104', '\x83', 
		'\x2', '\x7CF', '\x7D0', '\a', '\xE', '\x2', '\x2', '\x7D0', '\x7D4', 
		'\x5', '\x104', '\x83', '\x2', '\x7D1', '\x7D2', '\a', '\xF', '\x2', '\x2', 
		'\x7D2', '\x7D4', '\x5', '\x106', '\x84', '\x2', '\x7D3', '\x7C9', '\x3', 
		'\x2', '\x2', '\x2', '\x7D3', '\x7CB', '\x3', '\x2', '\x2', '\x2', '\x7D3', 
		'\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7CF', '\x3', '\x2', '\x2', 
		'\x2', '\x7D3', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x7D5', '\x7D7', '\x5', '\x170', '\xB9', 
		'\x2', '\x7D6', '\x7D8', '\a', '\x12', '\x2', '\x2', '\x7D7', '\x7D6', 
		'\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\x3', '\x2', '\x2', '\x2', 
		'\x7D8', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DB', '\x5', 
		'\xF2', 'z', '\x2', '\x7DA', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7DA', 
		'\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x7DC', '\x7DE', '\x5', '\x156', '\xAC', '\x2', '\x7DD', '\x7DF', 
		'\a', '\x12', '\x2', '\x2', '\x7DE', '\x7DD', '\x3', '\x2', '\x2', '\x2', 
		'\x7DE', '\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E1', '\x3', 
		'\x2', '\x2', '\x2', '\x7E0', '\x7E2', '\x5', '\xF6', '|', '\x2', '\x7E1', 
		'\x7E0', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', 
		'\x2', '\x7E2', '\x107', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E9', 
		'\x5', '\x38', '\x1D', '\x2', '\x7E4', '\x7E5', '\x5', '\x8A', '\x46', 
		'\x2', '\x7E5', '\x7E6', '\x5', '\x38', '\x1D', '\x2', '\x7E6', '\x7E8', 
		'\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E4', '\x3', '\x2', '\x2', '\x2', 
		'\x7E8', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7E7', '\x3', 
		'\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x7EA', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x7E9', '\x3', '\x2', '\x2', 
		'\x2', '\x7EC', '\x7F2', '\x5', '\x32', '\x1A', '\x2', '\x7ED', '\x7EE', 
		'\x5', '\x8A', '\x46', '\x2', '\x7EE', '\x7EF', '\x5', '\x32', '\x1A', 
		'\x2', '\x7EF', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7ED', 
		'\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F2', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F3', '\x3', 
		'\x2', '\x2', '\x2', '\x7F3', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x7F4', 
		'\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7FB', '\x5', '\x46', 
		'$', '\x2', '\x7F6', '\x7F7', '\x5', '\x8A', '\x46', '\x2', '\x7F7', '\x7F8', 
		'\x5', '\x46', '$', '\x2', '\x7F8', '\x7FA', '\x3', '\x2', '\x2', '\x2', 
		'\x7F9', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7FA', '\x7FD', '\x3', 
		'\x2', '\x2', '\x2', '\x7FB', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7FB', 
		'\x7FC', '\x3', '\x2', '\x2', '\x2', '\x7FC', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x7FD', '\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x804', 
		'\x5', 'V', ',', '\x2', '\x7FF', '\x800', '\x5', '\x8A', '\x46', '\x2', 
		'\x800', '\x801', '\x5', 'V', ',', '\x2', '\x801', '\x803', '\x3', '\x2', 
		'\x2', '\x2', '\x802', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x803', '\x806', 
		'\x3', '\x2', '\x2', '\x2', '\x804', '\x802', '\x3', '\x2', '\x2', '\x2', 
		'\x804', '\x805', '\x3', '\x2', '\x2', '\x2', '\x805', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x806', '\x804', '\x3', '\x2', '\x2', '\x2', '\x807', 
		'\x808', '\a', '\x18', '\x2', '\x2', '\x808', '\x809', '\x5', '\x112', 
		'\x8A', '\x2', '\x809', '\x80A', '\a', '\x14', '\x2', '\x2', '\x80A', 
		'\x80B', '\x5', '\x112', '\x8A', '\x2', '\x80B', '\x80C', '\a', '\x19', 
		'\x2', '\x2', '\x80C', '\x816', '\x3', '\x2', '\x2', '\x2', '\x80D', '\x80E', 
		'\a', '\x18', '\x2', '\x2', '\x80E', '\x80F', '\x5', '\x114', '\x8B', 
		'\x2', '\x80F', '\x810', '\a', '\x19', '\x2', '\x2', '\x810', '\x816', 
		'\x3', '\x2', '\x2', '\x2', '\x811', '\x812', '\a', '*', '\x2', '\x2', 
		'\x812', '\x813', '\x5', '\x114', '\x8B', '\x2', '\x813', '\x814', '\a', 
		'(', '\x2', '\x2', '\x814', '\x816', '\x3', '\x2', '\x2', '\x2', '\x815', 
		'\x807', '\x3', '\x2', '\x2', '\x2', '\x815', '\x80D', '\x3', '\x2', '\x2', 
		'\x2', '\x815', '\x811', '\x3', '\x2', '\x2', '\x2', '\x816', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x817', '\x827', '\a', '\xA6', '\x2', '\x2', 
		'\x818', '\x827', '\a', '\xA7', '\x2', '\x2', '\x819', '\x827', '\a', 
		'\xB0', '\x2', '\x2', '\x81A', '\x827', '\a', '\xB1', '\x2', '\x2', '\x81B', 
		'\x827', '\a', '\xA5', '\x2', '\x2', '\x81C', '\x827', '\a', '\xB5', '\x2', 
		'\x2', '\x81D', '\x827', '\a', '\xB4', '\x2', '\x2', '\x81E', '\x827', 
		'\a', '\xAE', '\x2', '\x2', '\x81F', '\x827', '\a', '\xB2', '\x2', '\x2', 
		'\x820', '\x827', '\a', '\xB3', '\x2', '\x2', '\x821', '\x827', '\a', 
		'\xA4', '\x2', '\x2', '\x822', '\x827', '\a', '\xB6', '\x2', '\x2', '\x823', 
		'\x827', '\a', '\xB7', '\x2', '\x2', '\x824', '\x827', '\a', '\xAF', '\x2', 
		'\x2', '\x825', '\x827', '\x5', '\x92', 'J', '\x2', '\x826', '\x817', 
		'\x3', '\x2', '\x2', '\x2', '\x826', '\x818', '\x3', '\x2', '\x2', '\x2', 
		'\x826', '\x819', '\x3', '\x2', '\x2', '\x2', '\x826', '\x81A', '\x3', 
		'\x2', '\x2', '\x2', '\x826', '\x81B', '\x3', '\x2', '\x2', '\x2', '\x826', 
		'\x81C', '\x3', '\x2', '\x2', '\x2', '\x826', '\x81D', '\x3', '\x2', '\x2', 
		'\x2', '\x826', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x826', '\x81F', 
		'\x3', '\x2', '\x2', '\x2', '\x826', '\x820', '\x3', '\x2', '\x2', '\x2', 
		'\x826', '\x821', '\x3', '\x2', '\x2', '\x2', '\x826', '\x822', '\x3', 
		'\x2', '\x2', '\x2', '\x826', '\x823', '\x3', '\x2', '\x2', '\x2', '\x826', 
		'\x824', '\x3', '\x2', '\x2', '\x2', '\x826', '\x825', '\x3', '\x2', '\x2', 
		'\x2', '\x827', '\x113', '\x3', '\x2', '\x2', '\x2', '\x828', '\x82D', 
		'\x5', '\x112', '\x8A', '\x2', '\x829', '\x82A', '\a', '\x13', '\x2', 
		'\x2', '\x82A', '\x82C', '\x5', '\x112', '\x8A', '\x2', '\x82B', '\x829', 
		'\x3', '\x2', '\x2', '\x2', '\x82C', '\x82F', '\x3', '\x2', '\x2', '\x2', 
		'\x82D', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x82E', '\x3', 
		'\x2', '\x2', '\x2', '\x82E', '\x115', '\x3', '\x2', '\x2', '\x2', '\x82F', 
		'\x82D', '\x3', '\x2', '\x2', '\x2', '\x830', '\x835', '\x5', '\x11A', 
		'\x8E', '\x2', '\x831', '\x835', '\x5', '\x11C', '\x8F', '\x2', '\x832', 
		'\x835', '\x5', '\xCC', 'g', '\x2', '\x833', '\x835', '\x5', '\x118', 
		'\x8D', '\x2', '\x834', '\x830', '\x3', '\x2', '\x2', '\x2', '\x834', 
		'\x831', '\x3', '\x2', '\x2', '\x2', '\x834', '\x832', '\x3', '\x2', '\x2', 
		'\x2', '\x834', '\x833', '\x3', '\x2', '\x2', '\x2', '\x835', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x836', '\x837', '\t', '\x6', '\x2', '\x2', 
		'\x837', '\x119', '\x3', '\x2', '\x2', '\x2', '\x838', '\x839', '\a', 
		'\x16', '\x2', '\x2', '\x839', '\x83A', '\x5', '\\', '/', '\x2', '\x83A', 
		'\x83B', '\a', '\x17', '\x2', '\x2', '\x83B', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x83C', '\x83F', '\x5', '\x112', '\x8A', '\x2', '\x83D', '\x83F', 
		'\x5', '\x11E', '\x90', '\x2', '\x83E', '\x83C', '\x3', '\x2', '\x2', 
		'\x2', '\x83E', '\x83D', '\x3', '\x2', '\x2', '\x2', '\x83F', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x840', '\x847', '\x5', '\xB0', 'Y', '\x2', 
		'\x841', '\x847', '\x5', '\xAA', 'V', '\x2', '\x842', '\x847', '\x5', 
		'\xAC', 'W', '\x2', '\x843', '\x847', '\x5', '\x122', '\x92', '\x2', '\x844', 
		'\x847', '\x5', '\x124', '\x93', '\x2', '\x845', '\x847', '\x5', '\x120', 
		'\x91', '\x2', '\x846', '\x840', '\x3', '\x2', '\x2', '\x2', '\x846', 
		'\x841', '\x3', '\x2', '\x2', '\x2', '\x846', '\x842', '\x3', '\x2', '\x2', 
		'\x2', '\x846', '\x843', '\x3', '\x2', '\x2', '\x2', '\x846', '\x844', 
		'\x3', '\x2', '\x2', '\x2', '\x846', '\x845', '\x3', '\x2', '\x2', '\x2', 
		'\x847', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x848', '\x84A', '\a', 
		'{', '\x2', '\x2', '\x849', '\x848', '\x3', '\x2', '\x2', '\x2', '\x849', 
		'\x84A', '\x3', '\x2', '\x2', '\x2', '\x84A', '\x84B', '\x3', '\x2', '\x2', 
		'\x2', '\x84B', '\x84D', '\a', '\x16', '\x2', '\x2', '\x84C', '\x84E', 
		'\x5', '\x126', '\x94', '\x2', '\x84D', '\x84C', '\x3', '\x2', '\x2', 
		'\x2', '\x84D', '\x84E', '\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', 
		'\x3', '\x2', '\x2', '\x2', '\x84F', '\x850', '\a', '\x17', '\x2', '\x2', 
		'\x850', '\x121', '\x3', '\x2', '\x2', '\x2', '\x851', '\x853', '\a', 
		'{', '\x2', '\x2', '\x852', '\x851', '\x3', '\x2', '\x2', '\x2', '\x852', 
		'\x853', '\x3', '\x2', '\x2', '\x2', '\x853', '\x85C', '\x3', '\x2', '\x2', 
		'\x2', '\x854', '\x855', '\a', '*', '\x2', '\x2', '\x855', '\x856', '\x5', 
		'\x128', '\x95', '\x2', '\x856', '\x857', '\a', '(', '\x2', '\x2', '\x857', 
		'\x85D', '\x3', '\x2', '\x2', '\x2', '\x858', '\x85D', '\a', '-', '\x2', 
		'\x2', '\x859', '\x85A', '\a', '*', '\x2', '\x2', '\x85A', '\x85B', '\a', 
		'\x11', '\x2', '\x2', '\x85B', '\x85D', '\a', '(', '\x2', '\x2', '\x85C', 
		'\x854', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x858', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x859', '\x3', '\x2', '\x2', '\x2', '\x85D', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x860', '\a', '\x1A', '\x2', '\x2', 
		'\x85F', '\x861', '\x5', '\x128', '\x95', '\x2', '\x860', '\x85F', '\x3', 
		'\x2', '\x2', '\x2', '\x860', '\x861', '\x3', '\x2', '\x2', '\x2', '\x861', 
		'\x862', '\x3', '\x2', '\x2', '\x2', '\x862', '\x863', '\a', '\x1B', '\x2', 
		'\x2', '\x863', '\x125', '\x3', '\x2', '\x2', '\x2', '\x864', '\x865', 
		'\x5', '\\', '/', '\x2', '\x865', '\x86E', '\a', '\x13', '\x2', '\x2', 
		'\x866', '\x86B', '\x5', '\\', '/', '\x2', '\x867', '\x868', '\a', '\x13', 
		'\x2', '\x2', '\x868', '\x86A', '\x5', '\\', '/', '\x2', '\x869', '\x867', 
		'\x3', '\x2', '\x2', '\x2', '\x86A', '\x86D', '\x3', '\x2', '\x2', '\x2', 
		'\x86B', '\x869', '\x3', '\x2', '\x2', '\x2', '\x86B', '\x86C', '\x3', 
		'\x2', '\x2', '\x2', '\x86C', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x86D', 
		'\x86B', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x866', '\x3', '\x2', '\x2', 
		'\x2', '\x86E', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x870', '\x875', '\x5', '\x12A', '\x96', 
		'\x2', '\x871', '\x872', '\a', '\x13', '\x2', '\x2', '\x872', '\x874', 
		'\x5', '\x12A', '\x96', '\x2', '\x873', '\x871', '\x3', '\x2', '\x2', 
		'\x2', '\x874', '\x877', '\x3', '\x2', '\x2', '\x2', '\x875', '\x873', 
		'\x3', '\x2', '\x2', '\x2', '\x875', '\x876', '\x3', '\x2', '\x2', '\x2', 
		'\x876', '\x129', '\x3', '\x2', '\x2', '\x2', '\x877', '\x875', '\x3', 
		'\x2', '\x2', '\x2', '\x878', '\x879', '\x5', '\x12C', '\x97', '\x2', 
		'\x879', '\x87A', '\a', '\x11', '\x2', '\x2', '\x87A', '\x87B', '\x5', 
		'\\', '/', '\x2', '\x87B', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x87C', 
		'\x87F', '\x5', '\xD6', 'l', '\x2', '\x87D', '\x87F', '\a', '\xAE', '\x2', 
		'\x2', '\x87E', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87E', '\x87D', 
		'\x3', '\x2', '\x2', '\x2', '\x87F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x880', '\x881', '\x5', '\\', '/', '\x2', '\x881', '\x882', '\a', '\x11', 
		'\x2', '\x2', '\x882', '\x883', '\x5', '\\', '/', '\x2', '\x883', '\x88A', 
		'\x3', '\x2', '\x2', '\x2', '\x884', '\x885', '\x5', '\\', '/', '\x2', 
		'\x885', '\x886', '\a', '\x11', '\x2', '\x2', '\x886', '\x88A', '\x3', 
		'\x2', '\x2', '\x2', '\x887', '\x888', '\a', '\x11', '\x2', '\x2', '\x888', 
		'\x88A', '\x5', '\\', '/', '\x2', '\x889', '\x880', '\x3', '\x2', '\x2', 
		'\x2', '\x889', '\x884', '\x3', '\x2', '\x2', '\x2', '\x889', '\x887', 
		'\x3', '\x2', '\x2', '\x2', '\x88A', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x88B', '\x88C', '\x5', '\xCE', 'h', '\x2', '\x88C', '\x88D', '\x5', 
		'\x14C', '\xA7', '\x2', '\x88D', '\x88E', '\x5', '\\', '/', '\x2', '\x88E', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x890', '\b', '\x9A', '\x1', 
		'\x2', '\x890', '\x891', '\x5', '\xCE', 'h', '\x2', '\x891', '\x896', 
		'\x3', '\x2', '\x2', '\x2', '\x892', '\x893', '\f', '\x3', '\x2', '\x2', 
		'\x893', '\x895', '\x5', '\x84', '\x43', '\x2', '\x894', '\x892', '\x3', 
		'\x2', '\x2', '\x2', '\x895', '\x898', '\x3', '\x2', '\x2', '\x2', '\x896', 
		'\x894', '\x3', '\x2', '\x2', '\x2', '\x896', '\x897', '\x3', '\x2', '\x2', 
		'\x2', '\x897', '\x133', '\x3', '\x2', '\x2', '\x2', '\x898', '\x896', 
		'\x3', '\x2', '\x2', '\x2', '\x899', '\x89A', '\x6', '\x9B', '\x35', '\x3', 
		'\x89A', '\x89B', '\a', '\xAA', '\x2', '\x2', '\x89B', '\x89E', '\x5', 
		'\xE2', 'r', '\x2', '\x89C', '\x89E', '\x5', '\\', '/', '\x2', '\x89D', 
		'\x899', '\x3', '\x2', '\x2', '\x2', '\x89D', '\x89C', '\x3', '\x2', '\x2', 
		'\x2', '\x89E', '\x135', '\x3', '\x2', '\x2', '\x2', '\x89F', '\x8A0', 
		'\a', '\x8A', '\x2', '\x2', '\x8A0', '\x8A1', '\a', 'I', '\x2', '\x2', 
		'\x8A1', '\x8A2', '\a', 'o', '\x2', '\x2', '\x8A2', '\x8A3', '\x5', '\\', 
		'/', '\x2', '\x8A3', '\x137', '\x3', '\x2', '\x2', '\x2', '\x8A4', '\x8A5', 
		'\a', '\x8A', '\x2', '\x2', '\x8A5', '\x8A6', '\a', '\x82', '\x2', '\x2', 
		'\x8A6', '\x8A7', '\a', 'o', '\x2', '\x2', '\x8A7', '\x8A8', '\x5', '\\', 
		'/', '\x2', '\x8A8', '\x139', '\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8AE', 
		'\x5', '\x13C', '\x9F', '\x2', '\x8AA', '\x8AB', '\a', '\x13', '\x2', 
		'\x2', '\x8AB', '\x8AD', '\x5', '\x13C', '\x9F', '\x2', '\x8AC', '\x8AA', 
		'\x3', '\x2', '\x2', '\x2', '\x8AD', '\x8B0', '\x3', '\x2', '\x2', '\x2', 
		'\x8AE', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AF', '\x3', 
		'\x2', '\x2', '\x2', '\x8AF', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x8B0', 
		'\x8AE', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8B6', '\x5', '\xCE', 
		'h', '\x2', '\x8B2', '\x8B3', '\a', '\x15', '\x2', '\x2', '\x8B3', '\x8B5', 
		'\x5', '\xCE', 'h', '\x2', '\x8B4', '\x8B2', '\x3', '\x2', '\x2', '\x2', 
		'\x8B5', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B6', '\x8B4', '\x3', 
		'\x2', '\x2', '\x2', '\x8B6', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x8B7', 
		'\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B6', '\x3', '\x2', '\x2', 
		'\x2', '\x8B9', '\x8BB', '\t', '\a', '\x2', '\x2', '\x8BA', '\x8B9', '\x3', 
		'\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BB', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8C3', '\a', '\"', '\x2', 
		'\x2', '\x8BD', '\x8C3', '\a', '#', '\x2', '\x2', '\x8BE', '\x8C3', '\x5', 
		'\x14E', '\xA8', '\x2', '\x8BF', '\x8C3', '\x5', '\x150', '\xA9', '\x2', 
		'\x8C0', '\x8C3', '\x5', '\x152', '\xAA', '\x2', '\x8C1', '\x8C3', '\x5', 
		'\x154', '\xAB', '\x2', '\x8C2', '\x8BC', '\x3', '\x2', '\x2', '\x2', 
		'\x8C2', '\x8BD', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x8BE', '\x3', 
		'\x2', '\x2', '\x2', '\x8C2', '\x8BF', '\x3', '\x2', '\x2', '\x2', '\x8C2', 
		'\x8C0', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x8C1', '\x3', '\x2', '\x2', 
		'\x2', '\x8C3', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C5', 
		'\t', '\b', '\x2', '\x2', '\x8C5', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x8C6', '\x8C7', '\a', '\xAA', '\x2', '\x2', '\x8C7', '\x8C8', '\x6', 
		'\xA2', '\x36', '\x3', '\x8C8', '\x143', '\x3', '\x2', '\x2', '\x2', '\x8C9', 
		'\x8CA', '\a', '\xAA', '\x2', '\x2', '\x8CA', '\x8CB', '\x6', '\xA3', 
		'\x37', '\x3', '\x8CB', '\x145', '\x3', '\x2', '\x2', '\x2', '\x8CC', 
		'\x8CD', '\a', '\xAA', '\x2', '\x2', '\x8CD', '\x8CE', '\x6', '\xA4', 
		'\x38', '\x3', '\x8CE', '\x147', '\x3', '\x2', '\x2', '\x2', '\x8CF', 
		'\x8D0', '\a', '\xAA', '\x2', '\x2', '\x8D0', '\x8D1', '\x6', '\xA5', 
		'\x39', '\x3', '\x8D1', '\x149', '\x3', '\x2', '\x2', '\x2', '\x8D2', 
		'\x8D3', '\a', '\xAA', '\x2', '\x2', '\x8D3', '\x8D4', '\x6', '\xA6', 
		':', '\x3', '\x8D4', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D6', 
		'\a', '.', '\x2', '\x2', '\x8D6', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x8D7', '\x8D8', '\a', '$', '\x2', '\x2', '\x8D8', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x8D9', '\x8DA', '\a', '%', '\x2', '\x2', '\x8DA', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x8DB', '\x8DC', '\a', '&', '\x2', '\x2', 
		'\x8DC', '\x153', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DE', '\t', 
		'\t', '\x2', '\x2', '\x8DE', '\x155', '\x3', '\x2', '\x2', '\x2', '\x8DF', 
		'\x8E0', '\a', '\x8D', '\x2', '\x2', '\x8E0', '\x8E1', '\x5', '\x158', 
		'\xAD', '\x2', '\x8E1', '\x8E2', '\a', '\x12', '\x2', '\x2', '\x8E2', 
		'\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x5', '\x158', 
		'\xAD', '\x2', '\x8E4', '\x8E5', '\a', '\x12', '\x2', '\x2', '\x8E5', 
		'\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8DF', '\x3', '\x2', '\x2', 
		'\x2', '\x8E6', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8E7', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8E9', '\b', '\xAD', '\x1', '\x2', 
		'\x8E9', '\x8EA', '\x5', '\x15A', '\xAE', '\x2', '\x8EA', '\x8EF', '\x3', 
		'\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\f', '\x3', '\x2', '\x2', '\x8EC', 
		'\x8EE', '\x5', '\x160', '\xB1', '\x2', '\x8ED', '\x8EB', '\x3', '\x2', 
		'\x2', '\x2', '\x8EE', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8ED', 
		'\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F0', '\x3', '\x2', '\x2', '\x2', 
		'\x8F0', '\x159', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8EF', '\x3', 
		'\x2', '\x2', '\x2', '\x8F2', '\x8FA', '\x5', '\x15C', '\xAF', '\x2', 
		'\x8F3', '\x8FA', '\x5', '\x15E', '\xB0', '\x2', '\x8F4', '\x8FA', '\x5', 
		'\x168', '\xB5', '\x2', '\x8F5', '\x8FA', '\x5', '\x16A', '\xB6', '\x2', 
		'\x8F6', '\x8FA', '\x5', '\x16C', '\xB7', '\x2', '\x8F7', '\x8FA', '\x5', 
		'\x162', '\xB2', '\x2', '\x8F8', '\x8FA', '\x5', '\x166', '\xB4', '\x2', 
		'\x8F9', '\x8F2', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F3', '\x3', 
		'\x2', '\x2', '\x2', '\x8F9', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8F9', 
		'\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F6', '\x3', '\x2', '\x2', 
		'\x2', '\x8F9', '\x8F7', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F8', 
		'\x3', '\x2', '\x2', '\x2', '\x8FA', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x8FB', '\x8FC', '\x5', '\x118', '\x8D', '\x2', '\x8FC', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x8FD', '\x8FE', '\x5', '\x142', '\xA2', '\x2', 
		'\x8FE', '\x8FF', '\x5', '\x162', '\xB2', '\x2', '\x8FF', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x900', '\x901', '\a', '\x15', '\x2', '\x2', '\x901', 
		'\x906', '\x5', '\x162', '\xB2', '\x2', '\x902', '\x903', '\a', '\x15', 
		'\x2', '\x2', '\x903', '\x906', '\x5', '\x16E', '\xB8', '\x2', '\x904', 
		'\x906', '\x5', '\x166', '\xB4', '\x2', '\x905', '\x900', '\x3', '\x2', 
		'\x2', '\x2', '\x905', '\x902', '\x3', '\x2', '\x2', '\x2', '\x905', '\x904', 
		'\x3', '\x2', '\x2', '\x2', '\x906', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x907', '\x908', '\x5', '\x16E', '\xB8', '\x2', '\x908', '\x90A', '\a', 
		'\x16', '\x2', '\x2', '\x909', '\x90B', '\x5', '\x164', '\xB3', '\x2', 
		'\x90A', '\x909', '\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', 
		'\x2', '\x2', '\x2', '\x90B', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x90C', 
		'\x90D', '\a', '\x17', '\x2', '\x2', '\x90D', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x90E', '\x90F', '\b', '\xB3', '\x1', '\x2', '\x90F', '\x910', 
		'\x5', '\x158', '\xAD', '\x2', '\x910', '\x916', '\x3', '\x2', '\x2', 
		'\x2', '\x911', '\x912', '\f', '\x3', '\x2', '\x2', '\x912', '\x913', 
		'\a', '\x13', '\x2', '\x2', '\x913', '\x915', '\x5', '\x158', '\xAD', 
		'\x2', '\x914', '\x911', '\x3', '\x2', '\x2', '\x2', '\x915', '\x918', 
		'\x3', '\x2', '\x2', '\x2', '\x916', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\x916', '\x917', '\x3', '\x2', '\x2', '\x2', '\x917', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x918', '\x916', '\x3', '\x2', '\x2', '\x2', '\x919', 
		'\x91A', '\a', '\x18', '\x2', '\x2', '\x91A', '\x91B', '\x5', '\x158', 
		'\xAD', '\x2', '\x91B', '\x91C', '\a', '\x19', '\x2', '\x2', '\x91C', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', '\a', '\x16', '\x2', 
		'\x2', '\x91E', '\x91F', '\x5', '\x158', '\xAD', '\x2', '\x91F', '\x920', 
		'\a', '\x17', '\x2', '\x2', '\x920', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x921', '\x922', '\x5', '\x16E', '\xB8', '\x2', '\x922', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x923', '\x929', '\a', '\xB0', '\x2', '\x2', '\x924', 
		'\x929', '\a', '\xB2', '\x2', '\x2', '\x925', '\x929', '\a', '\xAE', '\x2', 
		'\x2', '\x926', '\x929', '\a', '\xA4', '\x2', '\x2', '\x927', '\x929', 
		'\a', '\xA5', '\x2', '\x2', '\x928', '\x923', '\x3', '\x2', '\x2', '\x2', 
		'\x928', '\x924', '\x3', '\x2', '\x2', '\x2', '\x928', '\x925', '\x3', 
		'\x2', '\x2', '\x2', '\x928', '\x926', '\x3', '\x2', '\x2', '\x2', '\x928', 
		'\x927', '\x3', '\x2', '\x2', '\x2', '\x929', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x92A', '\x92B', '\t', '\n', '\x2', '\x2', '\x92B', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x92C', '\x92D', '\a', '\x8D', '\x2', '\x2', '\x92D', 
		'\x930', '\x5', '\x172', '\xBA', '\x2', '\x92E', '\x930', '\x5', '\x172', 
		'\xBA', '\x2', '\x92F', '\x92C', '\x3', '\x2', '\x2', '\x2', '\x92F', 
		'\x92E', '\x3', '\x2', '\x2', '\x2', '\x930', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x931', '\x932', '\b', '\xBA', '\x1', '\x2', '\x932', '\x933', 
		'\x5', '\x174', '\xBB', '\x2', '\x933', '\x938', '\x3', '\x2', '\x2', 
		'\x2', '\x934', '\x935', '\f', '\x3', '\x2', '\x2', '\x935', '\x937', 
		'\x5', '\x178', '\xBD', '\x2', '\x936', '\x934', '\x3', '\x2', '\x2', 
		'\x2', '\x937', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x938', '\x936', 
		'\x3', '\x2', '\x2', '\x2', '\x938', '\x939', '\x3', '\x2', '\x2', '\x2', 
		'\x939', '\x173', '\x3', '\x2', '\x2', '\x2', '\x93A', '\x938', '\x3', 
		'\x2', '\x2', '\x2', '\x93B', '\x941', '\x5', '\x176', '\xBC', '\x2', 
		'\x93C', '\x941', '\x5', '\x182', '\xC2', '\x2', '\x93D', '\x941', '\x5', 
		'\x184', '\xC3', '\x2', '\x93E', '\x941', '\x5', '\x186', '\xC4', '\x2', 
		'\x93F', '\x941', '\x5', '\x17A', '\xBE', '\x2', '\x940', '\x93B', '\x3', 
		'\x2', '\x2', '\x2', '\x940', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x940', 
		'\x93D', '\x3', '\x2', '\x2', '\x2', '\x940', '\x93E', '\x3', '\x2', '\x2', 
		'\x2', '\x940', '\x93F', '\x3', '\x2', '\x2', '\x2', '\x941', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x942', '\x943', '\x5', '\x118', '\x8D', 
		'\x2', '\x943', '\x177', '\x3', '\x2', '\x2', '\x2', '\x944', '\x945', 
		'\a', '\x15', '\x2', '\x2', '\x945', '\x94B', '\x5', '\x17A', '\xBE', 
		'\x2', '\x946', '\x947', '\a', '\x18', '\x2', '\x2', '\x947', '\x948', 
		'\x5', '\x172', '\xBA', '\x2', '\x948', '\x949', '\a', '\x19', '\x2', 
		'\x2', '\x949', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x944', 
		'\x3', '\x2', '\x2', '\x2', '\x94A', '\x946', '\x3', '\x2', '\x2', '\x2', 
		'\x94B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94D', '\x5', 
		'\x188', '\xC5', '\x2', '\x94D', '\x94F', '\a', '\x16', '\x2', '\x2', 
		'\x94E', '\x950', '\x5', '\x17C', '\xBF', '\x2', '\x94F', '\x94E', '\x3', 
		'\x2', '\x2', '\x2', '\x94F', '\x950', '\x3', '\x2', '\x2', '\x2', '\x950', 
		'\x951', '\x3', '\x2', '\x2', '\x2', '\x951', '\x952', '\a', '\x17', '\x2', 
		'\x2', '\x952', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x953', '\x95A', 
		'\x5', '\x17E', '\xC0', '\x2', '\x954', '\x95A', '\x5', '\x180', '\xC1', 
		'\x2', '\x955', '\x956', '\x5', '\x17E', '\xC0', '\x2', '\x956', '\x957', 
		'\a', '\x13', '\x2', '\x2', '\x957', '\x958', '\x5', '\x180', '\xC1', 
		'\x2', '\x958', '\x95A', '\x3', '\x2', '\x2', '\x2', '\x959', '\x953', 
		'\x3', '\x2', '\x2', '\x2', '\x959', '\x954', '\x3', '\x2', '\x2', '\x2', 
		'\x959', '\x955', '\x3', '\x2', '\x2', '\x2', '\x95A', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x95B', '\x95C', '\b', '\xC0', '\x1', '\x2', '\x95C', 
		'\x95D', '\x5', '\x172', '\xBA', '\x2', '\x95D', '\x963', '\x3', '\x2', 
		'\x2', '\x2', '\x95E', '\x95F', '\f', '\x3', '\x2', '\x2', '\x95F', '\x960', 
		'\a', '\x13', '\x2', '\x2', '\x960', '\x962', '\x5', '\x172', '\xBA', 
		'\x2', '\x961', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x962', '\x965', 
		'\x3', '\x2', '\x2', '\x2', '\x963', '\x961', '\x3', '\x2', '\x2', '\x2', 
		'\x963', '\x964', '\x3', '\x2', '\x2', '\x2', '\x964', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x965', '\x963', '\x3', '\x2', '\x2', '\x2', '\x966', 
		'\x967', '\b', '\xC1', '\x1', '\x2', '\x967', '\x968', '\x5', '\x188', 
		'\xC5', '\x2', '\x968', '\x969', '\a', '.', '\x2', '\x2', '\x969', '\x96A', 
		'\x5', '\x172', '\xBA', '\x2', '\x96A', '\x973', '\x3', '\x2', '\x2', 
		'\x2', '\x96B', '\x96C', '\f', '\x3', '\x2', '\x2', '\x96C', '\x96D', 
		'\a', '\x13', '\x2', '\x2', '\x96D', '\x96E', '\x5', '\x188', '\xC5', 
		'\x2', '\x96E', '\x96F', '\a', '.', '\x2', '\x2', '\x96F', '\x970', '\x5', 
		'\x172', '\xBA', '\x2', '\x970', '\x972', '\x3', '\x2', '\x2', '\x2', 
		'\x971', '\x96B', '\x3', '\x2', '\x2', '\x2', '\x972', '\x975', '\x3', 
		'\x2', '\x2', '\x2', '\x973', '\x971', '\x3', '\x2', '\x2', '\x2', '\x973', 
		'\x974', '\x3', '\x2', '\x2', '\x2', '\x974', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x975', '\x973', '\x3', '\x2', '\x2', '\x2', '\x976', '\x977', 
		'\a', '\x16', '\x2', '\x2', '\x977', '\x978', '\x5', '\x172', '\xBA', 
		'\x2', '\x978', '\x979', '\a', '\x17', '\x2', '\x2', '\x979', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x97A', '\x97B', '\b', '\xC3', '\x1', '\x2', 
		'\x97B', '\x97E', '\a', '\xAC', '\x2', '\x2', '\x97C', '\x97E', '\x5', 
		'\x188', '\xC5', '\x2', '\x97D', '\x97A', '\x3', '\x2', '\x2', '\x2', 
		'\x97D', '\x97C', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x984', '\x3', 
		'\x2', '\x2', '\x2', '\x97F', '\x980', '\f', '\x3', '\x2', '\x2', '\x980', 
		'\x981', '\a', '\x15', '\x2', '\x2', '\x981', '\x983', '\x5', '\x188', 
		'\xC5', '\x2', '\x982', '\x97F', '\x3', '\x2', '\x2', '\x2', '\x983', 
		'\x986', '\x3', '\x2', '\x2', '\x2', '\x984', '\x982', '\x3', '\x2', '\x2', 
		'\x2', '\x984', '\x985', '\x3', '\x2', '\x2', '\x2', '\x985', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x986', '\x984', '\x3', '\x2', '\x2', '\x2', 
		'\x987', '\x98D', '\a', '\xB0', '\x2', '\x2', '\x988', '\x98D', '\a', 
		'\xB2', '\x2', '\x2', '\x989', '\x98D', '\a', '\xAE', '\x2', '\x2', '\x98A', 
		'\x98D', '\a', '\xA4', '\x2', '\x2', '\x98B', '\x98D', '\a', '\xA5', '\x2', 
		'\x2', '\x98C', '\x987', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x988', 
		'\x3', '\x2', '\x2', '\x2', '\x98C', '\x989', '\x3', '\x2', '\x2', '\x2', 
		'\x98C', '\x98A', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98B', '\x3', 
		'\x2', '\x2', '\x2', '\x98D', '\x187', '\x3', '\x2', '\x2', '\x2', '\x98E', 
		'\x98F', '\t', '\v', '\x2', '\x2', '\x98F', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x990', '\x991', '\a', '\x8D', '\x2', '\x2', '\x991', '\x992', 
		'\x5', '\x18C', '\xC7', '\x2', '\x992', '\x993', '\a', '\x12', '\x2', 
		'\x2', '\x993', '\x998', '\x3', '\x2', '\x2', '\x2', '\x994', '\x995', 
		'\x5', '\x18C', '\xC7', '\x2', '\x995', '\x996', '\a', '\x12', '\x2', 
		'\x2', '\x996', '\x998', '\x3', '\x2', '\x2', '\x2', '\x997', '\x990', 
		'\x3', '\x2', '\x2', '\x2', '\x997', '\x994', '\x3', '\x2', '\x2', '\x2', 
		'\x998', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99A', '\b', 
		'\xC7', '\x1', '\x2', '\x99A', '\x99B', '\x5', '\x18E', '\xC8', '\x2', 
		'\x99B', '\x9A0', '\x3', '\x2', '\x2', '\x2', '\x99C', '\x99D', '\f', 
		'\x3', '\x2', '\x2', '\x99D', '\x99F', '\x5', '\x194', '\xCB', '\x2', 
		'\x99E', '\x99C', '\x3', '\x2', '\x2', '\x2', '\x99F', '\x9A2', '\x3', 
		'\x2', '\x2', '\x2', '\x9A0', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x9A0', 
		'\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x9A2', '\x9A0', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A9', 
		'\x5', '\x190', '\xC9', '\x2', '\x9A4', '\x9A9', '\x5', '\x192', '\xCA', 
		'\x2', '\x9A5', '\x9A9', '\x5', '\x19C', '\xCF', '\x2', '\x9A6', '\x9A9', 
		'\x5', '\x19E', '\xD0', '\x2', '\x9A7', '\x9A9', '\x5', '\x1A2', '\xD2', 
		'\x2', '\x9A8', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9A4', 
		'\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9A5', '\x3', '\x2', '\x2', '\x2', 
		'\x9A8', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9A7', '\x3', 
		'\x2', '\x2', '\x2', '\x9A9', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x9AA', 
		'\x9AB', '\x5', '\x118', '\x8D', '\x2', '\x9AB', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x9AC', '\x9AD', '\x5', '\x142', '\xA2', '\x2', '\x9AD', 
		'\x9AE', '\x5', '\x196', '\xCC', '\x2', '\x9AE', '\x193', '\x3', '\x2', 
		'\x2', '\x2', '\x9AF', '\x9B0', '\a', '\x15', '\x2', '\x2', '\x9B0', '\x9B3', 
		'\x5', '\x196', '\xCC', '\x2', '\x9B1', '\x9B3', '\x5', '\x19A', '\xCE', 
		'\x2', '\x9B2', '\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9B3', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x9B4', '\x9B5', '\x5', '\x1A4', '\xD3', '\x2', '\x9B5', '\x9B7', '\a', 
		'\x16', '\x2', '\x2', '\x9B6', '\x9B8', '\x5', '\x198', '\xCD', '\x2', 
		'\x9B7', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B8', '\x3', 
		'\x2', '\x2', '\x2', '\x9B8', '\x9B9', '\x3', '\x2', '\x2', '\x2', '\x9B9', 
		'\x9BA', '\a', '\x17', '\x2', '\x2', '\x9BA', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x9BB', '\x9BC', '\b', '\xCD', '\x1', '\x2', '\x9BC', '\x9BD', 
		'\x5', '\x18C', '\xC7', '\x2', '\x9BD', '\x9C3', '\x3', '\x2', '\x2', 
		'\x2', '\x9BE', '\x9BF', '\f', '\x3', '\x2', '\x2', '\x9BF', '\x9C0', 
		'\a', '\x13', '\x2', '\x2', '\x9C0', '\x9C2', '\x5', '\x18C', '\xC7', 
		'\x2', '\x9C1', '\x9BE', '\x3', '\x2', '\x2', '\x2', '\x9C2', '\x9C5', 
		'\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C1', '\x3', '\x2', '\x2', '\x2', 
		'\x9C3', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C4', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x9C5', '\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9C6', 
		'\x9C7', '\a', '\x18', '\x2', '\x2', '\x9C7', '\x9C8', '\x5', '\x18C', 
		'\xC7', '\x2', '\x9C8', '\x9C9', '\a', '\x19', '\x2', '\x2', '\x9C9', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CB', '\a', '\x16', '\x2', 
		'\x2', '\x9CB', '\x9CC', '\x5', '\x18C', '\xC7', '\x2', '\x9CC', '\x9CD', 
		'\a', '\x17', '\x2', '\x2', '\x9CD', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x9CE', '\x9CF', '\b', '\xD0', '\x1', '\x2', '\x9CF', '\x9D0', '\x5', 
		'\x1A4', '\xD3', '\x2', '\x9D0', '\x9D6', '\x3', '\x2', '\x2', '\x2', 
		'\x9D1', '\x9D2', '\f', '\x3', '\x2', '\x2', '\x9D2', '\x9D3', '\a', '\x15', 
		'\x2', '\x2', '\x9D3', '\x9D5', '\x5', '\x1A4', '\xD3', '\x2', '\x9D4', 
		'\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9D5', '\x9D8', '\x3', '\x2', '\x2', 
		'\x2', '\x9D6', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9D6', '\x9D7', 
		'\x3', '\x2', '\x2', '\x2', '\x9D7', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x9D8', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DA', '\b', 
		'\xD1', '\x1', '\x2', '\x9DA', '\x9DB', '\x5', '\x19E', '\xD0', '\x2', 
		'\x9DB', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9DC', '\x9DD', '\f', 
		'\x3', '\x2', '\x2', '\x9DD', '\x9DF', '\a', '\xAC', '\x2', '\x2', '\x9DE', 
		'\x9DC', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E2', '\x3', '\x2', '\x2', 
		'\x2', '\x9E0', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9E1', 
		'\x3', '\x2', '\x2', '\x2', '\x9E1', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x9E2', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E9', '\a', 
		'\xB0', '\x2', '\x2', '\x9E4', '\x9E9', '\a', '\xB2', '\x2', '\x2', '\x9E5', 
		'\x9E9', '\a', '\xAE', '\x2', '\x2', '\x9E6', '\x9E9', '\a', '\xA4', '\x2', 
		'\x2', '\x9E7', '\x9E9', '\a', '\xA5', '\x2', '\x2', '\x9E8', '\x9E3', 
		'\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E4', '\x3', '\x2', '\x2', '\x2', 
		'\x9E8', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E6', '\x3', 
		'\x2', '\x2', '\x2', '\x9E8', '\x9E7', '\x3', '\x2', '\x2', '\x2', '\x9E9', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x9EA', '\x9EB', '\t', '\f', '\x2', 
		'\x2', '\x9EB', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x9EC', '\x9ED', 
		'\a', '\x8D', '\x2', '\x2', '\x9ED', '\x9EE', '\x5', '\x1A8', '\xD5', 
		'\x2', '\x9EE', '\x9EF', '\a', '\x12', '\x2', '\x2', '\x9EF', '\x9F4', 
		'\x3', '\x2', '\x2', '\x2', '\x9F0', '\x9F1', '\x5', '\x1A8', '\xD5', 
		'\x2', '\x9F1', '\x9F2', '\a', '\x12', '\x2', '\x2', '\x9F2', '\x9F4', 
		'\x3', '\x2', '\x2', '\x2', '\x9F3', '\x9EC', '\x3', '\x2', '\x2', '\x2', 
		'\x9F3', '\x9F0', '\x3', '\x2', '\x2', '\x2', '\x9F4', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x9F5', '\x9F6', '\b', '\xD5', '\x1', '\x2', '\x9F6', 
		'\x9F7', '\x5', '\x1AA', '\xD6', '\x2', '\x9F7', '\x9FC', '\x3', '\x2', 
		'\x2', '\x2', '\x9F8', '\x9F9', '\f', '\x3', '\x2', '\x2', '\x9F9', '\x9FB', 
		'\x5', '\x1B0', '\xD9', '\x2', '\x9FA', '\x9F8', '\x3', '\x2', '\x2', 
		'\x2', '\x9FB', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9FA', 
		'\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9FD', '\x3', '\x2', '\x2', '\x2', 
		'\x9FD', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9FC', '\x3', 
		'\x2', '\x2', '\x2', '\x9FF', '\xA05', '\x5', '\x1AC', '\xD7', '\x2', 
		'\xA00', '\xA05', '\x5', '\x1AE', '\xD8', '\x2', '\xA01', '\xA05', '\x5', 
		'\x1B8', '\xDD', '\x2', '\xA02', '\xA05', '\x5', '\x1BA', '\xDE', '\x2', 
		'\xA03', '\xA05', '\x5', '\x1BC', '\xDF', '\x2', '\xA04', '\x9FF', '\x3', 
		'\x2', '\x2', '\x2', '\xA04', '\xA00', '\x3', '\x2', '\x2', '\x2', '\xA04', 
		'\xA01', '\x3', '\x2', '\x2', '\x2', '\xA04', '\xA02', '\x3', '\x2', '\x2', 
		'\x2', '\xA04', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xA05', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\xA06', '\xA07', '\x5', '\x118', '\x8D', 
		'\x2', '\xA07', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\xA08', '\xA09', 
		'\x5', '\x142', '\xA2', '\x2', '\xA09', '\xA0A', '\x5', '\x1B2', '\xDA', 
		'\x2', '\xA0A', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\xA0B', '\xA0C', 
		'\a', '\x15', '\x2', '\x2', '\xA0C', '\xA0F', '\x5', '\x1B2', '\xDA', 
		'\x2', '\xA0D', '\xA0F', '\x5', '\x1B6', '\xDC', '\x2', '\xA0E', '\xA0B', 
		'\x3', '\x2', '\x2', '\x2', '\xA0E', '\xA0D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0F', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\xA10', '\xA11', '\x5', 
		'\x1BE', '\xE0', '\x2', '\xA11', '\xA13', '\a', '\x16', '\x2', '\x2', 
		'\xA12', '\xA14', '\x5', '\x1B4', '\xDB', '\x2', '\xA13', '\xA12', '\x3', 
		'\x2', '\x2', '\x2', '\xA13', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xA14', 
		'\xA15', '\x3', '\x2', '\x2', '\x2', '\xA15', '\xA16', '\a', '\x17', '\x2', 
		'\x2', '\xA16', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\xA17', '\xA18', 
		'\b', '\xDB', '\x1', '\x2', '\xA18', '\xA19', '\x5', '\x1A8', '\xD5', 
		'\x2', '\xA19', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA1A', '\xA1B', 
		'\f', '\x3', '\x2', '\x2', '\xA1B', '\xA1C', '\a', '\x13', '\x2', '\x2', 
		'\xA1C', '\xA1E', '\x5', '\x1A8', '\xD5', '\x2', '\xA1D', '\xA1A', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\xA21', '\x3', '\x2', '\x2', '\x2', '\xA1F', 
		'\xA1D', '\x3', '\x2', '\x2', '\x2', '\xA1F', '\xA20', '\x3', '\x2', '\x2', 
		'\x2', '\xA20', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\xA21', '\xA1F', 
		'\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', '\a', '\x18', '\x2', '\x2', 
		'\xA23', '\xA24', '\x5', '\x1A8', '\xD5', '\x2', '\xA24', '\xA25', '\a', 
		'\x19', '\x2', '\x2', '\xA25', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\xA26', 
		'\xA27', '\a', '\x16', '\x2', '\x2', '\xA27', '\xA28', '\x5', '\x1A8', 
		'\xD5', '\x2', '\xA28', '\xA29', '\a', '\x17', '\x2', '\x2', '\xA29', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA2B', '\b', '\xDE', '\x1', 
		'\x2', '\xA2B', '\xA2E', '\a', '\xAC', '\x2', '\x2', '\xA2C', '\xA2E', 
		'\x5', '\x1BE', '\xE0', '\x2', '\xA2D', '\xA2A', '\x3', '\x2', '\x2', 
		'\x2', '\xA2D', '\xA2C', '\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA34', 
		'\x3', '\x2', '\x2', '\x2', '\xA2F', '\xA30', '\f', '\x3', '\x2', '\x2', 
		'\xA30', '\xA31', '\a', '\x15', '\x2', '\x2', '\xA31', '\xA33', '\x5', 
		'\x1BE', '\xE0', '\x2', '\xA32', '\xA2F', '\x3', '\x2', '\x2', '\x2', 
		'\xA33', '\xA36', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA32', '\x3', 
		'\x2', '\x2', '\x2', '\xA34', '\xA35', '\x3', '\x2', '\x2', '\x2', '\xA35', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\xA36', '\xA34', '\x3', '\x2', '\x2', 
		'\x2', '\xA37', '\xA3D', '\a', '\xB0', '\x2', '\x2', '\xA38', '\xA3D', 
		'\a', '\xB2', '\x2', '\x2', '\xA39', '\xA3D', '\a', '\xAE', '\x2', '\x2', 
		'\xA3A', '\xA3D', '\a', '\xA4', '\x2', '\x2', '\xA3B', '\xA3D', '\a', 
		'\xA5', '\x2', '\x2', '\xA3C', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA3C', 
		'\xA38', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA39', '\x3', '\x2', '\x2', 
		'\x2', '\xA3C', '\xA3A', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA3B', 
		'\x3', '\x2', '\x2', '\x2', '\xA3D', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\xA3E', '\xA3F', '\t', '\r', '\x2', '\x2', '\xA3F', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', '\xA40', '\xA43', '\x5', '\x1C2', '\xE2', '\x2', '\xA41', 
		'\xA43', '\x5', '\x1C4', '\xE3', '\x2', '\xA42', '\xA40', '\x3', '\x2', 
		'\x2', '\x2', '\xA42', '\xA41', '\x3', '\x2', '\x2', '\x2', '\xA43', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\xA44', '\xA4C', '\x5', '\x1CA', '\xE6', 
		'\x2', '\xA45', '\xA47', '\x5', '\x1CC', '\xE7', '\x2', '\xA46', '\xA48', 
		'\x5', '\x1D8', '\xED', '\x2', '\xA47', '\xA46', '\x3', '\x2', '\x2', 
		'\x2', '\xA47', '\xA48', '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', 
		'\x3', '\x2', '\x2', '\x2', '\xA49', '\xA4A', '\x5', '\x1CE', '\xE8', 
		'\x2', '\xA4A', '\xA4C', '\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA44', 
		'\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA45', '\x3', '\x2', '\x2', '\x2', 
		'\xA4C', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4F', '\x5', 
		'\x1C6', '\xE4', '\x2', '\xA4E', '\xA50', '\x5', '\x1D8', '\xED', '\x2', 
		'\xA4F', '\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA50', '\x3', 
		'\x2', '\x2', '\x2', '\xA50', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xA51', 
		'\xA52', '\x5', '\x1C8', '\xE5', '\x2', '\xA52', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', '\xA53', '\xA54', '\a', '*', '\x2', '\x2', '\xA54', '\xA57', 
		'\a', '(', '\x2', '\x2', '\xA55', '\xA57', '\a', ',', '\x2', '\x2', '\xA56', 
		'\xA53', '\x3', '\x2', '\x2', '\x2', '\xA56', '\xA55', '\x3', '\x2', '\x2', 
		'\x2', '\xA57', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\xA58', '\xA59', 
		'\a', '*', '\x2', '\x2', '\xA59', '\xA5A', '\a', '%', '\x2', '\x2', '\xA5A', 
		'\xA5B', '\a', '(', '\x2', '\x2', '\xA5B', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\xA5C', '\xA5D', '\a', '*', '\x2', '\x2', '\xA5D', '\xA5E', '\x5', 
		'\x1D0', '\xE9', '\x2', '\xA5E', '\xA62', '\x5', '\x8C', 'G', '\x2', '\xA5F', 
		'\xA61', '\x5', '\x1D4', '\xEB', '\x2', '\xA60', '\xA5F', '\x3', '\x2', 
		'\x2', '\x2', '\xA61', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA62', '\xA60', 
		'\x3', '\x2', '\x2', '\x2', '\xA62', '\xA63', '\x3', '\x2', '\x2', '\x2', 
		'\xA63', '\xA65', '\x3', '\x2', '\x2', '\x2', '\xA64', '\xA62', '\x3', 
		'\x2', '\x2', '\x2', '\xA65', '\xA66', '\a', '%', '\x2', '\x2', '\xA66', 
		'\xA67', '\a', '(', '\x2', '\x2', '\xA67', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\xA68', '\xA69', '\a', '*', '\x2', '\x2', '\xA69', '\xA6A', '\x5', 
		'\x1D0', '\xE9', '\x2', '\xA6A', '\xA6E', '\x5', '\x8C', 'G', '\x2', '\xA6B', 
		'\xA6D', '\x5', '\x1D4', '\xEB', '\x2', '\xA6C', '\xA6B', '\x3', '\x2', 
		'\x2', '\x2', '\xA6D', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA6E', '\xA6C', 
		'\x3', '\x2', '\x2', '\x2', '\xA6E', '\xA6F', '\x3', '\x2', '\x2', '\x2', 
		'\xA6F', '\xA71', '\x3', '\x2', '\x2', '\x2', '\xA70', '\xA6E', '\x3', 
		'\x2', '\x2', '\x2', '\xA71', '\xA72', '\a', '(', '\x2', '\x2', '\xA72', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\xA73', '\xA74', '\a', '*', '\x2', 
		'\x2', '\xA74', '\xA75', '\a', '%', '\x2', '\x2', '\xA75', '\xA76', '\x5', 
		'\x1D0', '\xE9', '\x2', '\xA76', '\xA77', '\a', '(', '\x2', '\x2', '\xA77', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\xA78', '\xA7D', '\x5', '\x1D2', 
		'\xEA', '\x2', '\xA79', '\xA7A', '\a', '\x15', '\x2', '\x2', '\xA7A', 
		'\xA7C', '\x5', '\x1D2', '\xEA', '\x2', '\xA7B', '\xA79', '\x3', '\x2', 
		'\x2', '\x2', '\xA7C', '\xA7F', '\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA7B', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA7E', '\x3', '\x2', '\x2', '\x2', 
		'\xA7E', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\xA7F', '\xA7D', '\x3', 
		'\x2', '\x2', '\x2', '\xA80', '\xA84', '\x5', '\xC6', '\x64', '\x2', '\xA81', 
		'\xA83', '\x5', '\xC8', '\x65', '\x2', '\xA82', '\xA81', '\x3', '\x2', 
		'\x2', '\x2', '\xA83', '\xA86', '\x3', '\x2', '\x2', '\x2', '\xA84', '\xA82', 
		'\x3', '\x2', '\x2', '\x2', '\xA84', '\xA85', '\x3', '\x2', '\x2', '\x2', 
		'\xA85', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\xA86', '\xA84', '\x3', 
		'\x2', '\x2', '\x2', '\xA87', '\xA8A', '\x5', '\x1D2', '\xEA', '\x2', 
		'\xA88', '\xA89', '\a', '.', '\x2', '\x2', '\xA89', '\xA8B', '\x5', '\x1D6', 
		'\xEC', '\x2', '\xA8A', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA8A', 
		'\xA8B', '\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA8C', '\x3', '\x2', '\x2', 
		'\x2', '\xA8C', '\xA8D', '\x5', '\x8C', 'G', '\x2', '\xA8D', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\xA8E', '\xA94', '\a', '\xAE', '\x2', '\x2', 
		'\xA8F', '\xA90', '\a', '\x1A', '\x2', '\x2', '\xA90', '\xA91', '\x5', 
		'\\', '/', '\x2', '\xA91', '\xA92', '\a', '\x1B', '\x2', '\x2', '\xA92', 
		'\xA94', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xA8E', '\x3', '\x2', '\x2', 
		'\x2', '\xA93', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA94', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\xA95', '\xA97', '\x5', '\x1DA', '\xEE', 
		'\x2', '\xA96', '\xA95', '\x3', '\x2', '\x2', '\x2', '\xA97', '\xA98', 
		'\x3', '\x2', '\x2', '\x2', '\xA98', '\xA96', '\x3', '\x2', '\x2', '\x2', 
		'\xA98', '\xA99', '\x3', '\x2', '\x2', '\x2', '\xA99', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9A', '\xAA2', '\x5', '\x1DC', '\xEF', '\x2', 
		'\xA9B', '\xAA2', '\x5', '\x1C2', '\xE2', '\x2', '\xA9C', '\xA9E', '\a', 
		'\x1A', '\x2', '\x2', '\xA9D', '\xA9F', '\x5', '\\', '/', '\x2', '\xA9E', 
		'\xA9D', '\x3', '\x2', '\x2', '\x2', '\xA9E', '\xA9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA9F', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xAA2', 
		'\a', '\x1B', '\x2', '\x2', '\xAA1', '\xA9A', '\x3', '\x2', '\x2', '\x2', 
		'\xAA1', '\xA9B', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xA9C', '\x3', 
		'\x2', '\x2', '\x2', '\xAA2', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\xAA3', 
		'\xAA5', '\n', '\xE', '\x2', '\x2', '\xAA4', '\xAA3', '\x3', '\x2', '\x2', 
		'\x2', '\xAA5', '\xAA6', '\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA4', 
		'\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA7', '\x3', '\x2', '\x2', '\x2', 
		'\xAA7', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\xAA8', '\xAAA', '\a', 
		'\x1A', '\x2', '\x2', '\xAA9', '\xAAB', '\x5', '\x1E0', '\xF1', '\x2', 
		'\xAAA', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAAB', '\xAAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAAC', '\xAAA', '\x3', '\x2', '\x2', '\x2', '\xAAC', 
		'\xAAD', '\x3', '\x2', '\x2', '\x2', '\xAAD', '\xAAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAAE', '\xAAF', '\a', '\x1B', '\x2', '\x2', '\xAAF', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAB1', '\x5', '\x1E2', '\xF2', 
		'\x2', '\xAB1', '\xAB2', '\a', '\x11', '\x2', '\x2', '\xAB2', '\xAB3', 
		'\x5', '\x1E4', '\xF3', '\x2', '\xAB3', '\xAB4', '\a', '\x12', '\x2', 
		'\x2', '\xAB4', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\xAB5', '\xAB6', 
		'\b', '\xF2', '\x1', '\x2', '\xAB6', '\xABA', '\x5', '\xC6', '\x64', '\x2', 
		'\xAB7', '\xAB8', '\a', '#', '\x2', '\x2', '\xAB8', '\xABA', '\x5', '\xCA', 
		'\x66', '\x2', '\xAB9', '\xAB5', '\x3', '\x2', '\x2', '\x2', '\xAB9', 
		'\xAB7', '\x3', '\x2', '\x2', '\x2', '\xABA', '\xAC3', '\x3', '\x2', '\x2', 
		'\x2', '\xABB', '\xABD', '\f', '\x3', '\x2', '\x2', '\xABC', '\xABE', 
		'\x5', '\xC8', '\x65', '\x2', '\xABD', '\xABC', '\x3', '\x2', '\x2', '\x2', 
		'\xABE', '\xABF', '\x3', '\x2', '\x2', '\x2', '\xABF', '\xABD', '\x3', 
		'\x2', '\x2', '\x2', '\xABF', '\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC0', 
		'\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC1', '\xABB', '\x3', '\x2', '\x2', 
		'\x2', '\xAC2', '\xAC5', '\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC1', 
		'\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC4', '\x3', '\x2', '\x2', '\x2', 
		'\xAC4', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC3', '\x3', 
		'\x2', '\x2', '\x2', '\xAC6', '\xAC7', '\a', '\x1A', '\x2', '\x2', '\xAC7', 
		'\xAC8', '\x5', '\\', '/', '\x2', '\xAC8', '\xAC9', '\a', '\x1B', '\x2', 
		'\x2', '\xAC9', '\xACC', '\x3', '\x2', '\x2', '\x2', '\xACA', '\xACC', 
		'\x5', '\x1E6', '\xF4', '\x2', '\xACB', '\xAC6', '\x3', '\x2', '\x2', 
		'\x2', '\xACB', '\xACA', '\x3', '\x2', '\x2', '\x2', '\xACC', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\xACD', '\xACF', '\n', '\xF', '\x2', '\x2', 
		'\xACE', '\xACD', '\x3', '\x2', '\x2', '\x2', '\xACF', '\xAD0', '\x3', 
		'\x2', '\x2', '\x2', '\xAD0', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xAD0', 
		'\xAD1', '\x3', '\x2', '\x2', '\x2', '\xAD1', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\x1EE', '\x1F5', '\x213', '\x219', '\x21E', '\x224', '\x226', 
		'\x229', '\x230', '\x239', '\x252', '\x256', '\x261', '\x26A', '\x279', 
		'\x282', '\x289', '\x293', '\x2A9', '\x2C0', '\x2CD', '\x2D8', '\x2E6', 
		'\x2EC', '\x2F7', '\x305', '\x319', '\x324', '\x326', '\x32F', '\x333', 
		'\x33B', '\x33F', '\x34B', '\x350', '\x354', '\x36F', '\x376', '\x37B', 
		'\x37F', '\x395', '\x39E', '\x3A2', '\x3AA', '\x3AE', '\x3B3', '\x3BA', 
		'\x3BD', '\x3DE', '\x3F1', '\x3F8', '\x41A', '\x423', '\x43A', '\x44A', 
		'\x44F', '\x457', '\x460', '\x477', '\x47D', '\x486', '\x4A0', '\x510', 
		'\x512', '\x51C', '\x531', '\x541', '\x546', '\x550', '\x555', '\x557', 
		'\x55D', '\x55F', '\x561', '\x575', '\x57C', '\x580', '\x58B', '\x58F', 
		'\x594', '\x596', '\x59B', '\x5AA', '\x5AE', '\x5B9', '\x5BD', '\x5C2', 
		'\x5CC', '\x5D0', '\x5D8', '\x5DF', '\x5E1', '\x5E6', '\x5E8', '\x5F3', 
		'\x5F9', '\x609', '\x612', '\x618', '\x61D', '\x623', '\x62A', '\x632', 
		'\x63D', '\x645', '\x64D', '\x656', '\x65D', '\x665', '\x66D', '\x676', 
		'\x67E', '\x68B', '\x68E', '\x692', '\x697', '\x69B', '\x6A4', '\x6B9', 
		'\x6C2', '\x6C4', '\x6C9', '\x6DB', '\x6E0', '\x6E9', '\x6ED', '\x6F4', 
		'\x6F9', '\x6FD', '\x709', '\x71A', '\x71F', '\x722', '\x726', '\x72B', 
		'\x732', '\x73D', '\x73F', '\x748', '\x750', '\x758', '\x760', '\x768', 
		'\x76E', '\x77A', '\x77E', '\x788', '\x790', '\x794', '\x79A', '\x7A1', 
		'\x7A6', '\x7AD', '\x7B5', '\x7BC', '\x7C6', '\x7D3', '\x7D7', '\x7DA', 
		'\x7DE', '\x7E1', '\x7E9', '\x7F2', '\x7FB', '\x804', '\x815', '\x826', 
		'\x82D', '\x834', '\x83E', '\x846', '\x849', '\x84D', '\x852', '\x85C', 
		'\x860', '\x86B', '\x86E', '\x875', '\x87E', '\x889', '\x896', '\x89D', 
		'\x8AE', '\x8B6', '\x8BA', '\x8C2', '\x8E6', '\x8EF', '\x8F9', '\x905', 
		'\x90A', '\x916', '\x928', '\x92F', '\x938', '\x940', '\x94A', '\x94F', 
		'\x959', '\x963', '\x973', '\x97D', '\x984', '\x98C', '\x997', '\x9A0', 
		'\x9A8', '\x9B2', '\x9B7', '\x9C3', '\x9D6', '\x9E0', '\x9E8', '\x9F3', 
		'\x9FC', '\xA04', '\xA0E', '\xA13', '\xA1F', '\xA2D', '\xA34', '\xA3C', 
		'\xA42', '\xA47', '\xA4B', '\xA4F', '\xA56', '\xA62', '\xA6E', '\xA7D', 
		'\xA84', '\xA8A', '\xA93', '\xA98', '\xA9E', '\xAA1', '\xAA6', '\xAAC', 
		'\xAB9', '\xABF', '\xAC3', '\xACB', '\xAD0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace prompto.parser
