//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace prompto.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="EParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IEParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_category_declaration([NotNull] EParser.Enum_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_category_declaration([NotNull] EParser.Enum_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_native_declaration([NotNull] EParser.Enum_native_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_native_declaration([NotNull] EParser.Enum_native_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol([NotNull] EParser.Native_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol([NotNull] EParser.Native_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol([NotNull] EParser.Category_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol([NotNull] EParser.Category_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_declaration([NotNull] EParser.Attribute_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_declaration([NotNull] EParser.Attribute_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.concrete_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_widget_declaration([NotNull] EParser.Concrete_widget_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.concrete_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_widget_declaration([NotNull] EParser.Concrete_widget_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_widget_declaration([NotNull] EParser.Native_widget_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_widget_declaration([NotNull] EParser.Native_widget_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_category_declaration([NotNull] EParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_category_declaration([NotNull] EParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleton_category_declaration([NotNull] EParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleton_category_declaration([NotNull] EParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DerivedList</c>
	/// labeled alternative in <see cref="EParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedList([NotNull] EParser.DerivedListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DerivedList</c>
	/// labeled alternative in <see cref="EParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedList([NotNull] EParser.DerivedListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DerivedListItem</c>
	/// labeled alternative in <see cref="EParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedListItem([NotNull] EParser.DerivedListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DerivedListItem</c>
	/// labeled alternative in <see cref="EParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedListItem([NotNull] EParser.DerivedListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_method_declaration([NotNull] EParser.Operator_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_method_declaration([NotNull] EParser.Operator_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter_method_declaration([NotNull] EParser.Setter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter_method_declaration([NotNull] EParser.Setter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_setter_declaration([NotNull] EParser.Native_setter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_setter_declaration([NotNull] EParser.Native_setter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter_method_declaration([NotNull] EParser.Getter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter_method_declaration([NotNull] EParser.Getter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_getter_declaration([NotNull] EParser.Native_getter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_getter_declaration([NotNull] EParser.Native_getter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_declaration([NotNull] EParser.Native_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_declaration([NotNull] EParser.Native_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_resource_declaration([NotNull] EParser.Native_resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_resource_declaration([NotNull] EParser.Native_resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_bindings([NotNull] EParser.Native_category_bindingsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_bindings([NotNull] EParser.Native_category_bindingsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="EParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingListItem([NotNull] EParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="EParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingListItem([NotNull] EParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="EParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingList([NotNull] EParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="EParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingList([NotNull] EParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeList</c>
	/// labeled alternative in <see cref="EParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeList([NotNull] EParser.AttributeListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeList</c>
	/// labeled alternative in <see cref="EParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeList([NotNull] EParser.AttributeListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeListItem</c>
	/// labeled alternative in <see cref="EParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeListItem([NotNull] EParser.AttributeListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeListItem</c>
	/// labeled alternative in <see cref="EParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeListItem([NotNull] EParser.AttributeListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method_declaration([NotNull] EParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method_declaration([NotNull] EParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_method_declaration([NotNull] EParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_method_declaration([NotNull] EParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_method_declaration([NotNull] EParser.Native_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_method_declaration([NotNull] EParser.Native_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTest_method_declaration([NotNull] EParser.Test_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTest_method_declaration([NotNull] EParser.Test_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] EParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] EParser.AssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.full_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFull_argument_list([NotNull] EParser.Full_argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.full_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFull_argument_list([NotNull] EParser.Full_argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyped_argument([NotNull] EParser.Typed_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyped_argument([NotNull] EParser.Typed_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignInstanceStatement([NotNull] EParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignInstanceStatement([NotNull] EParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallStatement([NotNull] EParser.MethodCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallStatement([NotNull] EParser.MethodCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignTupleStatement([NotNull] EParser.AssignTupleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignTupleStatement([NotNull] EParser.AssignTupleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStoreStatement([NotNull] EParser.StoreStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStoreStatement([NotNull] EParser.StoreStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchStatement([NotNull] EParser.FetchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchStatement([NotNull] EParser.FetchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FlushStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFlushStatement([NotNull] EParser.FlushStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FlushStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFlushStatement([NotNull] EParser.FlushStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] EParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] EParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] EParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] EParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] EParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] EParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] EParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] EParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] EParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] EParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] EParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] EParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] EParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] EParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseStatement([NotNull] EParser.RaiseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseStatement([NotNull] EParser.RaiseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] EParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] EParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] EParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] EParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithResourceStatement([NotNull] EParser.WithResourceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithResourceStatement([NotNull] EParser.WithResourceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithSingletonStatement([NotNull] EParser.WithSingletonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithSingletonStatement([NotNull] EParser.WithSingletonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureStatement([NotNull] EParser.ClosureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureStatement([NotNull] EParser.ClosureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommentStatement([NotNull] EParser.CommentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="EParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommentStatement([NotNull] EParser.CommentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.flush_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFlush_statement([NotNull] EParser.Flush_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.flush_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFlush_statement([NotNull] EParser.Flush_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStore_statement([NotNull] EParser.Store_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStore_statement([NotNull] EParser.Store_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnresolvedWithArgsStatement</c>
	/// labeled alternative in <see cref="EParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnresolvedWithArgsStatement([NotNull] EParser.UnresolvedWithArgsStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnresolvedWithArgsStatement</c>
	/// labeled alternative in <see cref="EParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnresolvedWithArgsStatement([NotNull] EParser.UnresolvedWithArgsStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InvokeStatement</c>
	/// labeled alternative in <see cref="EParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvokeStatement([NotNull] EParser.InvokeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InvokeStatement</c>
	/// labeled alternative in <see cref="EParser.method_call_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvokeStatement([NotNull] EParser.InvokeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_resource_statement([NotNull] EParser.With_resource_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_resource_statement([NotNull] EParser.With_resource_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_singleton_statement([NotNull] EParser.With_singleton_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_singleton_statement([NotNull] EParser.With_singleton_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] EParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] EParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="EParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicSwitchCase([NotNull] EParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="EParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicSwitchCase([NotNull] EParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="EParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionSwitchCase([NotNull] EParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="EParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionSwitchCase([NotNull] EParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_each_statement([NotNull] EParser.For_each_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_each_statement([NotNull] EParser.For_each_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] EParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] EParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] EParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] EParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] EParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] EParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="EParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementList([NotNull] EParser.ElseIfStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="EParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementList([NotNull] EParser.ElseIfStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="EParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementListItem([NotNull] EParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="EParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementListItem([NotNull] EParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaise_statement([NotNull] EParser.Raise_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaise_statement([NotNull] EParser.Raise_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] EParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] EParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="EParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchAtomicStatement([NotNull] EParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="EParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchAtomicStatement([NotNull] EParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="EParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchCollectionStatement([NotNull] EParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="EParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchCollectionStatement([NotNull] EParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreak_statement([NotNull] EParser.Break_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreak_statement([NotNull] EParser.Break_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] EParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] EParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivideExpression([NotNull] EParser.IntDivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivideExpression([NotNull] EParser.IntDivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasAnyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasAnyExpression([NotNull] EParser.HasAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasAnyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasAnyExpression([NotNull] EParser.HasAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasExpression([NotNull] EParser.HasExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasExpression([NotNull] EParser.HasExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] EParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] EParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxExpression([NotNull] EParser.JsxExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxExpression([NotNull] EParser.JsxExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpression([NotNull] EParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpression([NotNull] EParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] EParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] EParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadOneExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadOneExpression([NotNull] EParser.ReadOneExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadOneExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadOneExpression([NotNull] EParser.ReadOneExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasAnyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasAnyExpression([NotNull] EParser.NotHasAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasAnyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasAnyExpression([NotNull] EParser.NotHasAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] EParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] EParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowExpression([NotNull] EParser.ArrowExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowExpression([NotNull] EParser.ArrowExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallExpression([NotNull] EParser.MethodCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallExpression([NotNull] EParser.MethodCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchExpression([NotNull] EParser.FetchExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchExpression([NotNull] EParser.FetchExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasExpression([NotNull] EParser.NotHasExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasExpression([NotNull] EParser.NotHasExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSortedExpression([NotNull] EParser.SortedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSortedExpression([NotNull] EParser.SortedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotHasAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotHasAllExpression([NotNull] EParser.NotHasAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotHasAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotHasAllExpression([NotNull] EParser.NotHasAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsExpression([NotNull] EParser.ContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsExpression([NotNull] EParser.ContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsExpression([NotNull] EParser.NotContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsExpression([NotNull] EParser.NotContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoughlyEqualsExpression([NotNull] EParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoughlyEqualsExpression([NotNull] EParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecuteExpression([NotNull] EParser.ExecuteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecuteExpression([NotNull] EParser.ExecuteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpression([NotNull] EParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpression([NotNull] EParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorExpression([NotNull] EParser.IteratorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorExpression([NotNull] EParser.IteratorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotExpression([NotNull] EParser.IsNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotExpression([NotNull] EParser.IsNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] EParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] EParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsExpression([NotNull] EParser.IsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsExpression([NotNull] EParser.IsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] EParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] EParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] EParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] EParser.InstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableInstanceExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableInstanceExpression([NotNull] EParser.MutableInstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableInstanceExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableInstanceExpression([NotNull] EParser.MutableInstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadAllExpression([NotNull] EParser.ReadAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadAllExpression([NotNull] EParser.ReadAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] EParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] EParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] EParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] EParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] EParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] EParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsExpression([NotNull] EParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsExpression([NotNull] EParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentExpression([NotNull] EParser.DocumentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentExpression([NotNull] EParser.DocumentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] EParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] EParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InvocationExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocationExpression([NotNull] EParser.InvocationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InvocationExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocationExpression([NotNull] EParser.InvocationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeExpression([NotNull] EParser.CodeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeExpression([NotNull] EParser.CodeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AmbiguousExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAmbiguousExpression([NotNull] EParser.AmbiguousExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AmbiguousExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAmbiguousExpression([NotNull] EParser.AmbiguousExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpression([NotNull] EParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpression([NotNull] EParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] EParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] EParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlobExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlobExpression([NotNull] EParser.BlobExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlobExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlobExpression([NotNull] EParser.BlobExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FilteredListExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFilteredListExpression([NotNull] EParser.FilteredListExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FilteredListExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFilteredListExpression([NotNull] EParser.FilteredListExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorExpression([NotNull] EParser.ConstructorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorExpression([NotNull] EParser.ConstructorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] EParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] EParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotInExpression([NotNull] EParser.NotInExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotInExpression([NotNull] EParser.NotInExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnresolvedExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnresolvedExpression([NotNull] EParser.UnresolvedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnresolvedExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnresolvedExpression([NotNull] EParser.UnresolvedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] EParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] EParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HasAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasAllExpression([NotNull] EParser.HasAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HasAllExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasAllExpression([NotNull] EParser.HasAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssExpression([NotNull] EParser.CssExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssExpression([NotNull] EParser.CssExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpression([NotNull] EParser.LessThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpression([NotNull] EParser.LessThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsExpression([NotNull] EParser.EqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="EParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsExpression([NotNull] EParser.EqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnresolvedSelector</c>
	/// labeled alternative in <see cref="EParser.unresolved_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnresolvedSelector([NotNull] EParser.UnresolvedSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnresolvedSelector</c>
	/// labeled alternative in <see cref="EParser.unresolved_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnresolvedSelector([NotNull] EParser.UnresolvedSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnresolvedIdentifier</c>
	/// labeled alternative in <see cref="EParser.unresolved_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnresolvedIdentifier([NotNull] EParser.UnresolvedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnresolvedIdentifier</c>
	/// labeled alternative in <see cref="EParser.unresolved_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnresolvedIdentifier([NotNull] EParser.UnresolvedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.unresolved_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnresolved_selector([NotNull] EParser.Unresolved_selectorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.unresolved_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnresolved_selector([NotNull] EParser.Unresolved_selectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.invocation_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocation_expression([NotNull] EParser.Invocation_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.invocation_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocation_expression([NotNull] EParser.Invocation_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.invocation_trailer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocation_trailer([NotNull] EParser.Invocation_trailerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.invocation_trailer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocation_trailer([NotNull] EParser.Invocation_trailerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] EParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] EParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] EParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] EParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] EParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] EParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] EParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="EParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] EParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="EParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorExpression([NotNull] EParser.SelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="EParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorExpression([NotNull] EParser.SelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="EParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectableExpression([NotNull] EParser.SelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="EParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectableExpression([NotNull] EParser.SelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberSelector([NotNull] EParser.MemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberSelector([NotNull] EParser.MemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceSelector([NotNull] EParser.SliceSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceSelector([NotNull] EParser.SliceSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemSelector([NotNull] EParser.ItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="EParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemSelector([NotNull] EParser.ItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableSelectableExpression</c>
	/// labeled alternative in <see cref="EParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableSelectableExpression([NotNull] EParser.MutableSelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableSelectableExpression</c>
	/// labeled alternative in <see cref="EParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableSelectableExpression([NotNull] EParser.MutableSelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableSelectorExpression([NotNull] EParser.MutableSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.mutable_instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableSelectorExpression([NotNull] EParser.MutableSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_expression([NotNull] EParser.Document_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_expression([NotNull] EParser.Document_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.blob_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlob_expression([NotNull] EParser.Blob_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.blob_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlob_expression([NotNull] EParser.Blob_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorFrom</c>
	/// labeled alternative in <see cref="EParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorFrom([NotNull] EParser.ConstructorFromContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorFrom</c>
	/// labeled alternative in <see cref="EParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorFrom([NotNull] EParser.ConstructorFromContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorNoFrom</c>
	/// labeled alternative in <see cref="EParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorNoFrom([NotNull] EParser.ConstructorNoFromContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorNoFrom</c>
	/// labeled alternative in <see cref="EParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorNoFrom([NotNull] EParser.ConstructorNoFromContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite_statement([NotNull] EParser.Write_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite_statement([NotNull] EParser.Write_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.ambiguous_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAmbiguous_expression([NotNull] EParser.Ambiguous_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.ambiguous_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAmbiguous_expression([NotNull] EParser.Ambiguous_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.filtered_list_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFiltered_list_suffix([NotNull] EParser.Filtered_list_suffixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.filtered_list_suffix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFiltered_list_suffix([NotNull] EParser.Filtered_list_suffixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="EParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchOne([NotNull] EParser.FetchOneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="EParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchOne([NotNull] EParser.FetchOneContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchMany</c>
	/// labeled alternative in <see cref="EParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchMany([NotNull] EParser.FetchManyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchMany</c>
	/// labeled alternative in <see cref="EParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchMany([NotNull] EParser.FetchManyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchOneAsync</c>
	/// labeled alternative in <see cref="EParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchOneAsync([NotNull] EParser.FetchOneAsyncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchOneAsync</c>
	/// labeled alternative in <see cref="EParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchOneAsync([NotNull] EParser.FetchOneAsyncContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchManyAsync</c>
	/// labeled alternative in <see cref="EParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchManyAsync([NotNull] EParser.FetchManyAsyncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchManyAsync</c>
	/// labeled alternative in <see cref="EParser.fetch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchManyAsync([NotNull] EParser.FetchManyAsyncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_expression([NotNull] EParser.Sorted_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_expression([NotNull] EParser.Sorted_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListExpression</c>
	/// labeled alternative in <see cref="EParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListExpression([NotNull] EParser.ArgumentAssignmentListExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListExpression</c>
	/// labeled alternative in <see cref="EParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListExpression([NotNull] EParser.ArgumentAssignmentListExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListNoExpression</c>
	/// labeled alternative in <see cref="EParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListNoExpression([NotNull] EParser.ArgumentAssignmentListNoExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListNoExpression</c>
	/// labeled alternative in <see cref="EParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListNoExpression([NotNull] EParser.ArgumentAssignmentListNoExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="EParser.with_argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentList([NotNull] EParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="EParser.with_argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentList([NotNull] EParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="EParser.with_argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListItem([NotNull] EParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="EParser.with_argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListItem([NotNull] EParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_assignment([NotNull] EParser.Argument_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_assignment([NotNull] EParser.Argument_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_instance_statement([NotNull] EParser.Assign_instance_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_instance_statement([NotNull] EParser.Assign_instance_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="EParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInstance([NotNull] EParser.MemberInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="EParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInstance([NotNull] EParser.MemberInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="EParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemInstance([NotNull] EParser.ItemInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="EParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemInstance([NotNull] EParser.ItemInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_tuple_statement([NotNull] EParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_tuple_statement([NotNull] EParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfs([NotNull] EParser.LfsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfs([NotNull] EParser.LfsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfp([NotNull] EParser.LfpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfp([NotNull] EParser.LfpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.ws_plus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWs_plus([NotNull] EParser.Ws_plusContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.ws_plus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWs_plus([NotNull] EParser.Ws_plusContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndent([NotNull] EParser.IndentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndent([NotNull] EParser.IndentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDedent([NotNull] EParser.DedentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDedent([NotNull] EParser.DedentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.type_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_literal([NotNull] EParser.Type_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.type_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_literal([NotNull] EParser.Type_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_literal([NotNull] EParser.Null_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_literal([NotNull] EParser.Null_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.repl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepl([NotNull] EParser.ReplContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.repl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepl([NotNull] EParser.ReplContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="EParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullDeclarationList([NotNull] EParser.FullDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="EParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullDeclarationList([NotNull] EParser.FullDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarations([NotNull] EParser.DeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarations([NotNull] EParser.DeclarationsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] EParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] EParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.annotation_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_constructor([NotNull] EParser.Annotation_constructorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.annotation_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_constructor([NotNull] EParser.Annotation_constructorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.annotation_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_identifier([NotNull] EParser.Annotation_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.annotation_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_identifier([NotNull] EParser.Annotation_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.annotation_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_argument([NotNull] EParser.Annotation_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.annotation_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_argument([NotNull] EParser.Annotation_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.annotation_argument_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotation_argument_name([NotNull] EParser.Annotation_argument_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.annotation_argument_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotation_argument_name([NotNull] EParser.Annotation_argument_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnnotationLiteralValue</c>
	/// labeled alternative in <see cref="EParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationLiteralValue([NotNull] EParser.AnnotationLiteralValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnnotationLiteralValue</c>
	/// labeled alternative in <see cref="EParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationLiteralValue([NotNull] EParser.AnnotationLiteralValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnnotationTypeValue</c>
	/// labeled alternative in <see cref="EParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationTypeValue([NotNull] EParser.AnnotationTypeValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnnotationTypeValue</c>
	/// labeled alternative in <see cref="EParser.annotation_argument_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationTypeValue([NotNull] EParser.AnnotationTypeValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_declaration([NotNull] EParser.Resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_declaration([NotNull] EParser.Resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_declaration([NotNull] EParser.Enum_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_declaration([NotNull] EParser.Enum_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol_list([NotNull] EParser.Native_symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol_list([NotNull] EParser.Native_symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol_list([NotNull] EParser.Category_symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol_list([NotNull] EParser.Category_symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_list([NotNull] EParser.Symbol_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_list([NotNull] EParser.Symbol_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingList([NotNull] EParser.MatchingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingList([NotNull] EParser.MatchingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingSet([NotNull] EParser.MatchingSetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingSet([NotNull] EParser.MatchingSetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingRange([NotNull] EParser.MatchingRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingRange([NotNull] EParser.MatchingRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingPattern([NotNull] EParser.MatchingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingPattern([NotNull] EParser.MatchingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingExpression([NotNull] EParser.MatchingExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="EParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingExpression([NotNull] EParser.MatchingExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_literal([NotNull] EParser.List_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_literal([NotNull] EParser.List_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_literal([NotNull] EParser.Set_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_literal([NotNull] EParser.Set_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_list([NotNull] EParser.Expression_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_list([NotNull] EParser.Expression_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_literal([NotNull] EParser.Range_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_literal([NotNull] EParser.Range_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorType([NotNull] EParser.IteratorTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorType([NotNull] EParser.IteratorTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] EParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] EParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] EParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] EParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictType([NotNull] EParser.DictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictType([NotNull] EParser.DictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CursorType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCursorType([NotNull] EParser.CursorTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CursorType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCursorType([NotNull] EParser.CursorTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryType([NotNull] EParser.PrimaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="EParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryType([NotNull] EParser.PrimaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="EParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] EParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="EParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] EParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="EParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryType([NotNull] EParser.CategoryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="EParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryType([NotNull] EParser.CategoryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] EParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] EParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssType([NotNull] EParser.CssTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssType([NotNull] EParser.CssTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterType([NotNull] EParser.CharacterTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterType([NotNull] EParser.CharacterTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextType([NotNull] EParser.TextTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextType([NotNull] EParser.TextTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImageType([NotNull] EParser.ImageTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImageType([NotNull] EParser.ImageTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] EParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] EParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalType([NotNull] EParser.DecimalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalType([NotNull] EParser.DecimalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentType([NotNull] EParser.DocumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentType([NotNull] EParser.DocumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateType([NotNull] EParser.DateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateType([NotNull] EParser.DateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeType([NotNull] EParser.DateTimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeType([NotNull] EParser.DateTimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeType([NotNull] EParser.TimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeType([NotNull] EParser.TimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodType([NotNull] EParser.PeriodTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodType([NotNull] EParser.PeriodTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VersionType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVersionType([NotNull] EParser.VersionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VersionType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVersionType([NotNull] EParser.VersionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeType([NotNull] EParser.CodeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeType([NotNull] EParser.CodeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlobType([NotNull] EParser.BlobTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlobType([NotNull] EParser.BlobTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUUIDType([NotNull] EParser.UUIDTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUUIDType([NotNull] EParser.UUIDTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HtmlType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlType([NotNull] EParser.HtmlTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HtmlType</c>
	/// labeled alternative in <see cref="EParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlType([NotNull] EParser.HtmlTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_type([NotNull] EParser.Category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_type([NotNull] EParser.Category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutable_category_type([NotNull] EParser.Mutable_category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutable_category_type([NotNull] EParser.Mutable_category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_type([NotNull] EParser.Code_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_type([NotNull] EParser.Code_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteCategoryDeclaration([NotNull] EParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteCategoryDeclaration([NotNull] EParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryDeclaration([NotNull] EParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryDeclaration([NotNull] EParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingletonCategoryDeclaration([NotNull] EParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="EParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingletonCategoryDeclaration([NotNull] EParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteWidgetDeclaration</c>
	/// labeled alternative in <see cref="EParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteWidgetDeclaration([NotNull] EParser.ConcreteWidgetDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteWidgetDeclaration</c>
	/// labeled alternative in <see cref="EParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteWidgetDeclaration([NotNull] EParser.ConcreteWidgetDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeWidgetDeclaration</c>
	/// labeled alternative in <see cref="EParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeWidgetDeclaration([NotNull] EParser.NativeWidgetDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeWidgetDeclaration</c>
	/// labeled alternative in <see cref="EParser.widget_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeWidgetDeclaration([NotNull] EParser.NativeWidgetDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier_list([NotNull] EParser.Type_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier_list([NotNull] EParser.Type_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_identifier([NotNull] EParser.Method_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_identifier([NotNull] EParser.Method_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier_or_keyword([NotNull] EParser.Identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier_or_keyword([NotNull] EParser.Identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.nospace_hyphen_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNospace_hyphen_identifier_or_keyword([NotNull] EParser.Nospace_hyphen_identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.nospace_hyphen_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNospace_hyphen_identifier_or_keyword([NotNull] EParser.Nospace_hyphen_identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.nospace_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNospace_identifier_or_keyword([NotNull] EParser.Nospace_identifier_or_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.nospace_identifier_or_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNospace_identifier_or_keyword([NotNull] EParser.Nospace_identifier_or_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableIdentifier([NotNull] EParser.VariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableIdentifier([NotNull] EParser.VariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] EParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] EParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolIdentifier([NotNull] EParser.SymbolIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="EParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolIdentifier([NotNull] EParser.SymbolIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier([NotNull] EParser.Variable_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier([NotNull] EParser.Variable_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.attribute_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_identifier([NotNull] EParser.Attribute_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.attribute_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_identifier([NotNull] EParser.Attribute_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier([NotNull] EParser.Type_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier([NotNull] EParser.Type_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_identifier([NotNull] EParser.Symbol_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_identifier([NotNull] EParser.Symbol_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_list([NotNull] EParser.Argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_list([NotNull] EParser.Argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="EParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeArgument([NotNull] EParser.CodeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="EParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeArgument([NotNull] EParser.CodeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="EParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorArgument([NotNull] EParser.OperatorArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="EParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorArgument([NotNull] EParser.OperatorArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_argument([NotNull] EParser.Operator_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_argument([NotNull] EParser.Operator_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_argument([NotNull] EParser.Named_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_argument([NotNull] EParser.Named_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_argument([NotNull] EParser.Code_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_argument([NotNull] EParser.Code_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_or_any_type([NotNull] EParser.Category_or_any_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_or_any_type([NotNull] EParser.Category_or_any_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyListType([NotNull] EParser.AnyListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyListType([NotNull] EParser.AnyListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyType([NotNull] EParser.AnyTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyType([NotNull] EParser.AnyTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyDictType([NotNull] EParser.AnyDictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="EParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyDictType([NotNull] EParser.AnyDictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration_list([NotNull] EParser.Member_method_declaration_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration_list([NotNull] EParser.Member_method_declaration_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration([NotNull] EParser.Member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration([NotNull] EParser.Member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_member_method_declaration_list([NotNull] EParser.Native_member_method_declaration_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_member_method_declaration_list([NotNull] EParser.Native_member_method_declaration_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_member_method_declaration([NotNull] EParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_member_method_declaration([NotNull] EParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCategoryBinding([NotNull] EParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCategoryBinding([NotNull] EParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCategoryBinding([NotNull] EParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCategoryBinding([NotNull] EParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2CategoryBinding([NotNull] EParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2CategoryBinding([NotNull] EParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3CategoryBinding([NotNull] EParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3CategoryBinding([NotNull] EParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptCategoryBinding([NotNull] EParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="EParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptCategoryBinding([NotNull] EParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_category_binding([NotNull] EParser.Python_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_category_binding([NotNull] EParser.Python_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_module([NotNull] EParser.Python_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_module([NotNull] EParser.Python_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_category_binding([NotNull] EParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_category_binding([NotNull] EParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_module([NotNull] EParser.Javascript_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_module([NotNull] EParser.Javascript_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier_list([NotNull] EParser.Variable_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier_list([NotNull] EParser.Variable_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.attribute_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_identifier_list([NotNull] EParser.Attribute_identifier_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.attribute_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_identifier_list([NotNull] EParser.Attribute_identifier_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_declaration([NotNull] EParser.Method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_declaration([NotNull] EParser.Method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment_statement([NotNull] EParser.Comment_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment_statement([NotNull] EParser.Comment_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_statement_list([NotNull] EParser.Native_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_statement_list([NotNull] EParser.Native_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaNativeStatement([NotNull] EParser.JavaNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaNativeStatement([NotNull] EParser.JavaNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpNativeStatement([NotNull] EParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpNativeStatement([NotNull] EParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2NativeStatement([NotNull] EParser.Python2NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2NativeStatement([NotNull] EParser.Python2NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3NativeStatement([NotNull] EParser.Python3NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3NativeStatement([NotNull] EParser.Python3NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptNativeStatement([NotNull] EParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="EParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptNativeStatement([NotNull] EParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_native_statement([NotNull] EParser.Python_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_native_statement([NotNull] EParser.Python_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_native_statement([NotNull] EParser.Javascript_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_native_statement([NotNull] EParser.Javascript_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement_list([NotNull] EParser.Statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement_list([NotNull] EParser.Statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion_list([NotNull] EParser.Assertion_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion_list([NotNull] EParser.Assertion_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_case_statement_list([NotNull] EParser.Switch_case_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_case_statement_list([NotNull] EParser.Switch_case_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatch_statement_list([NotNull] EParser.Catch_statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatch_statement_list([NotNull] EParser.Catch_statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralRangeLiteral([NotNull] EParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralRangeLiteral([NotNull] EParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListLiteral([NotNull] EParser.LiteralListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListLiteral([NotNull] EParser.LiteralListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralSetLiteral([NotNull] EParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="EParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralSetLiteral([NotNull] EParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinIntegerLiteral([NotNull] EParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinIntegerLiteral([NotNull] EParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxIntegerLiteral([NotNull] EParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxIntegerLiteral([NotNull] EParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] EParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] EParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimalLiteral([NotNull] EParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimalLiteral([NotNull] EParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterLiteral([NotNull] EParser.CharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterLiteral([NotNull] EParser.CharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] EParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] EParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] EParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] EParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextLiteral([NotNull] EParser.TextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextLiteral([NotNull] EParser.TextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] EParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] EParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] EParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] EParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] EParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] EParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodLiteral([NotNull] EParser.PeriodLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodLiteral([NotNull] EParser.PeriodLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VersionLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVersionLiteral([NotNull] EParser.VersionLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VersionLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVersionLiteral([NotNull] EParser.VersionLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UUIDLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUUIDLiteral([NotNull] EParser.UUIDLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UUIDLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUUIDLiteral([NotNull] EParser.UUIDLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeLiteral([NotNull] EParser.TypeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeLiteral([NotNull] EParser.TypeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] EParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="EParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] EParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral_list_literal([NotNull] EParser.Literal_list_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral_list_literal([NotNull] EParser.Literal_list_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThis_expression([NotNull] EParser.This_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThis_expression([NotNull] EParser.This_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] EParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] EParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral_expression([NotNull] EParser.Literal_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral_expression([NotNull] EParser.Literal_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollection_literal([NotNull] EParser.Collection_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollection_literal([NotNull] EParser.Collection_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_literal([NotNull] EParser.Tuple_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_literal([NotNull] EParser.Tuple_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_literal([NotNull] EParser.Dict_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_literal([NotNull] EParser.Dict_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.document_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_literal([NotNull] EParser.Document_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.document_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_literal([NotNull] EParser.Document_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_tuple([NotNull] EParser.Expression_tupleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_tuple([NotNull] EParser.Expression_tupleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry_list([NotNull] EParser.Dict_entry_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry_list([NotNull] EParser.Dict_entry_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry([NotNull] EParser.Dict_entryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry([NotNull] EParser.Dict_entryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictKeyIdentifier</c>
	/// labeled alternative in <see cref="EParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictKeyIdentifier([NotNull] EParser.DictKeyIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictKeyIdentifier</c>
	/// labeled alternative in <see cref="EParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictKeyIdentifier([NotNull] EParser.DictKeyIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictKeyText</c>
	/// labeled alternative in <see cref="EParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictKeyText([NotNull] EParser.DictKeyTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictKeyText</c>
	/// labeled alternative in <see cref="EParser.dict_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictKeyText([NotNull] EParser.DictKeyTextContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstAndLast([NotNull] EParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstAndLast([NotNull] EParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstOnly([NotNull] EParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstOnly([NotNull] EParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLastOnly([NotNull] EParser.SliceLastOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="EParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLastOnly([NotNull] EParser.SliceLastOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_variable_statement([NotNull] EParser.Assign_variable_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_variable_statement([NotNull] EParser.Assign_variable_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="EParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChildInstance([NotNull] EParser.ChildInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="EParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChildInstance([NotNull] EParser.ChildInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="EParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRootInstance([NotNull] EParser.RootInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="EParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRootInstance([NotNull] EParser.RootInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="EParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsATypeExpression([NotNull] EParser.IsATypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="EParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsATypeExpression([NotNull] EParser.IsATypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="EParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsOtherExpression([NotNull] EParser.IsOtherExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="EParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsOtherExpression([NotNull] EParser.IsOtherExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowExpressionBody</c>
	/// labeled alternative in <see cref="EParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowExpressionBody([NotNull] EParser.ArrowExpressionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowExpressionBody</c>
	/// labeled alternative in <see cref="EParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowExpressionBody([NotNull] EParser.ArrowExpressionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowStatementsBody</c>
	/// labeled alternative in <see cref="EParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowStatementsBody([NotNull] EParser.ArrowStatementsBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowStatementsBody</c>
	/// labeled alternative in <see cref="EParser.arrow_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowStatementsBody([NotNull] EParser.ArrowStatementsBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.arrow_prefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrow_prefix([NotNull] EParser.Arrow_prefixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.arrow_prefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrow_prefix([NotNull] EParser.Arrow_prefixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowSingleArg</c>
	/// labeled alternative in <see cref="EParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowSingleArg([NotNull] EParser.ArrowSingleArgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowSingleArg</c>
	/// labeled alternative in <see cref="EParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowSingleArg([NotNull] EParser.ArrowSingleArgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowListArg</c>
	/// labeled alternative in <see cref="EParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowListArg([NotNull] EParser.ArrowListArgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowListArg</c>
	/// labeled alternative in <see cref="EParser.arrow_args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowListArg([NotNull] EParser.ArrowListArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.sorted_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_key([NotNull] EParser.Sorted_keyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.sorted_key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_key([NotNull] EParser.Sorted_keyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.read_all_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_all_expression([NotNull] EParser.Read_all_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.read_all_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_all_expression([NotNull] EParser.Read_all_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.read_one_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_one_expression([NotNull] EParser.Read_one_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.read_one_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_one_expression([NotNull] EParser.Read_one_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by_list([NotNull] EParser.Order_by_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by_list([NotNull] EParser.Order_by_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by([NotNull] EParser.Order_byContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by([NotNull] EParser.Order_byContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorPlus([NotNull] EParser.OperatorPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorPlus([NotNull] EParser.OperatorPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMinus([NotNull] EParser.OperatorMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMinus([NotNull] EParser.OperatorMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMultiply([NotNull] EParser.OperatorMultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMultiply([NotNull] EParser.OperatorMultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorDivide([NotNull] EParser.OperatorDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorDivide([NotNull] EParser.OperatorDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIDivide([NotNull] EParser.OperatorIDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIDivide([NotNull] EParser.OperatorIDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorModulo([NotNull] EParser.OperatorModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="EParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorModulo([NotNull] EParser.OperatorModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] EParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] EParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNew_token([NotNull] EParser.New_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNew_token([NotNull] EParser.New_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey_token([NotNull] EParser.Key_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey_token([NotNull] EParser.Key_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule_token([NotNull] EParser.Module_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule_token([NotNull] EParser.Module_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_token([NotNull] EParser.Value_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_token([NotNull] EParser.Value_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbols_token([NotNull] EParser.Symbols_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbols_token([NotNull] EParser.Symbols_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] EParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] EParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] EParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] EParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivide([NotNull] EParser.DivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivide([NotNull] EParser.DivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdivide([NotNull] EParser.IdivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdivide([NotNull] EParser.IdivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulo([NotNull] EParser.ModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulo([NotNull] EParser.ModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="EParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptReturnStatement([NotNull] EParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="EParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptReturnStatement([NotNull] EParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="EParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptStatement([NotNull] EParser.JavascriptStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="EParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptStatement([NotNull] EParser.JavascriptStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptSelectorExpression([NotNull] EParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptSelectorExpression([NotNull] EParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptPrimaryExpression([NotNull] EParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptPrimaryExpression([NotNull] EParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_primary_expression([NotNull] EParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_primary_expression([NotNull] EParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_this_expression([NotNull] EParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_this_expression([NotNull] EParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_new_expression([NotNull] EParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_new_expression([NotNull] EParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMethodExpression([NotNull] EParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMethodExpression([NotNull] EParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMemberExpression([NotNull] EParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMemberExpression([NotNull] EParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptItemExpression([NotNull] EParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="EParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptItemExpression([NotNull] EParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_method_expression([NotNull] EParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_method_expression([NotNull] EParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="EParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentList([NotNull] EParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="EParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentList([NotNull] EParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentListItem([NotNull] EParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentListItem([NotNull] EParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_item_expression([NotNull] EParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_item_expression([NotNull] EParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_parenthesis_expression([NotNull] EParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_parenthesis_expression([NotNull] EParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier_expression([NotNull] EParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier_expression([NotNull] EParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIntegerLiteral([NotNull] EParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIntegerLiteral([NotNull] EParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptDecimalLiteral([NotNull] EParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptDecimalLiteral([NotNull] EParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptTextLiteral([NotNull] EParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptTextLiteral([NotNull] EParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptBooleanLiteral([NotNull] EParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptBooleanLiteral([NotNull] EParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptCharacterLiteral([NotNull] EParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptCharacterLiteral([NotNull] EParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier([NotNull] EParser.Javascript_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier([NotNull] EParser.Javascript_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="EParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonReturnStatement([NotNull] EParser.PythonReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="EParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonReturnStatement([NotNull] EParser.PythonReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="EParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonStatement([NotNull] EParser.PythonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="EParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonStatement([NotNull] EParser.PythonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelectorExpression([NotNull] EParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelectorExpression([NotNull] EParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPrimaryExpression([NotNull] EParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPrimaryExpression([NotNull] EParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelfExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelfExpression([NotNull] EParser.PythonSelfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelfExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelfExpression([NotNull] EParser.PythonSelfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonParenthesisExpression([NotNull] EParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonParenthesisExpression([NotNull] EParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifierExpression([NotNull] EParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifierExpression([NotNull] EParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonLiteralExpression([NotNull] EParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonLiteralExpression([NotNull] EParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonGlobalMethodExpression([NotNull] EParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="EParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonGlobalMethodExpression([NotNull] EParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_self_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_self_expression([NotNull] EParser.Python_self_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_self_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_self_expression([NotNull] EParser.Python_self_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="EParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonMethodExpression([NotNull] EParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="EParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonMethodExpression([NotNull] EParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="EParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonItemExpression([NotNull] EParser.PythonItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="EParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonItemExpression([NotNull] EParser.PythonItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_method_expression([NotNull] EParser.Python_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_method_expression([NotNull] EParser.Python_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalOnlyArgumentList([NotNull] EParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalOnlyArgumentList([NotNull] EParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedOnlyArgumentList([NotNull] EParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedOnlyArgumentList([NotNull] EParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonArgumentList([NotNull] EParser.PythonArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonArgumentList([NotNull] EParser.PythonArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentList([NotNull] EParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentList([NotNull] EParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentListItem([NotNull] EParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentListItem([NotNull] EParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentList([NotNull] EParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="EParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentList([NotNull] EParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentListItem([NotNull] EParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentListItem([NotNull] EParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_parenthesis_expression([NotNull] EParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_parenthesis_expression([NotNull] EParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonChildIdentifier([NotNull] EParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonChildIdentifier([NotNull] EParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPromptoIdentifier([NotNull] EParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPromptoIdentifier([NotNull] EParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifier([NotNull] EParser.PythonIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="EParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifier([NotNull] EParser.PythonIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIntegerLiteral([NotNull] EParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIntegerLiteral([NotNull] EParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonDecimalLiteral([NotNull] EParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonDecimalLiteral([NotNull] EParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonTextLiteral([NotNull] EParser.PythonTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonTextLiteral([NotNull] EParser.PythonTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonBooleanLiteral([NotNull] EParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonBooleanLiteral([NotNull] EParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonCharacterLiteral([NotNull] EParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonCharacterLiteral([NotNull] EParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_identifier([NotNull] EParser.Python_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_identifier([NotNull] EParser.Python_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="EParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaReturnStatement([NotNull] EParser.JavaReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="EParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaReturnStatement([NotNull] EParser.JavaReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="EParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaStatement([NotNull] EParser.JavaStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="EParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaStatement([NotNull] EParser.JavaStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaSelectorExpression([NotNull] EParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaSelectorExpression([NotNull] EParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaPrimaryExpression([NotNull] EParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaPrimaryExpression([NotNull] EParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_primary_expression([NotNull] EParser.Java_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_primary_expression([NotNull] EParser.Java_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_this_expression([NotNull] EParser.Java_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_this_expression([NotNull] EParser.Java_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_new_expression([NotNull] EParser.Java_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_new_expression([NotNull] EParser.Java_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="EParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaMethodExpression([NotNull] EParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="EParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaMethodExpression([NotNull] EParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="EParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaItemExpression([NotNull] EParser.JavaItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="EParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaItemExpression([NotNull] EParser.JavaItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_method_expression([NotNull] EParser.Java_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_method_expression([NotNull] EParser.Java_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentListItem([NotNull] EParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentListItem([NotNull] EParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="EParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentList([NotNull] EParser.JavaArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="EParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentList([NotNull] EParser.JavaArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_item_expression([NotNull] EParser.Java_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_item_expression([NotNull] EParser.Java_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_parenthesis_expression([NotNull] EParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_parenthesis_expression([NotNull] EParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifier([NotNull] EParser.JavaIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifier([NotNull] EParser.JavaIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildIdentifier([NotNull] EParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildIdentifier([NotNull] EParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaClassIdentifier([NotNull] EParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaClassIdentifier([NotNull] EParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildClassIdentifier([NotNull] EParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="EParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildClassIdentifier([NotNull] EParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIntegerLiteral([NotNull] EParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIntegerLiteral([NotNull] EParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaDecimalLiteral([NotNull] EParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaDecimalLiteral([NotNull] EParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaTextLiteral([NotNull] EParser.JavaTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaTextLiteral([NotNull] EParser.JavaTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaBooleanLiteral([NotNull] EParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaBooleanLiteral([NotNull] EParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCharacterLiteral([NotNull] EParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCharacterLiteral([NotNull] EParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_identifier([NotNull] EParser.Java_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_identifier([NotNull] EParser.Java_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="EParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpReturnStatement([NotNull] EParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="EParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpReturnStatement([NotNull] EParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="EParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpStatement([NotNull] EParser.CSharpStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="EParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpStatement([NotNull] EParser.CSharpStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpSelectorExpression([NotNull] EParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpSelectorExpression([NotNull] EParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPrimaryExpression([NotNull] EParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPrimaryExpression([NotNull] EParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_primary_expression([NotNull] EParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_primary_expression([NotNull] EParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_this_expression([NotNull] EParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_this_expression([NotNull] EParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_new_expression([NotNull] EParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_new_expression([NotNull] EParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpMethodExpression([NotNull] EParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpMethodExpression([NotNull] EParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpItemExpression([NotNull] EParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="EParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpItemExpression([NotNull] EParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_method_expression([NotNull] EParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_method_expression([NotNull] EParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="EParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentList([NotNull] EParser.CSharpArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="EParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentList([NotNull] EParser.CSharpArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentListItem([NotNull] EParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="EParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentListItem([NotNull] EParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_item_expression([NotNull] EParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_item_expression([NotNull] EParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_parenthesis_expression([NotNull] EParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_parenthesis_expression([NotNull] EParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifier([NotNull] EParser.CSharpIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifier([NotNull] EParser.CSharpIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpChildIdentifier([NotNull] EParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpChildIdentifier([NotNull] EParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPromptoIdentifier([NotNull] EParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="EParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPromptoIdentifier([NotNull] EParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIntegerLiteral([NotNull] EParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIntegerLiteral([NotNull] EParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpDecimalLiteral([NotNull] EParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpDecimalLiteral([NotNull] EParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpTextLiteral([NotNull] EParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpTextLiteral([NotNull] EParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpBooleanLiteral([NotNull] EParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpBooleanLiteral([NotNull] EParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCharacterLiteral([NotNull] EParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="EParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCharacterLiteral([NotNull] EParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_identifier([NotNull] EParser.Csharp_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_identifier([NotNull] EParser.Csharp_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_expression([NotNull] EParser.Jsx_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_expression([NotNull] EParser.Jsx_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxSelfClosing</c>
	/// labeled alternative in <see cref="EParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxSelfClosing([NotNull] EParser.JsxSelfClosingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxSelfClosing</c>
	/// labeled alternative in <see cref="EParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxSelfClosing([NotNull] EParser.JsxSelfClosingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxElement</c>
	/// labeled alternative in <see cref="EParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxElement([NotNull] EParser.JsxElementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxElement</c>
	/// labeled alternative in <see cref="EParser.jsx_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxElement([NotNull] EParser.JsxElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_fragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment([NotNull] EParser.Jsx_fragmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_fragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment([NotNull] EParser.Jsx_fragmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_fragment_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment_start([NotNull] EParser.Jsx_fragment_startContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_fragment_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment_start([NotNull] EParser.Jsx_fragment_startContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_fragment_end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_fragment_end([NotNull] EParser.Jsx_fragment_endContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_fragment_end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_fragment_end([NotNull] EParser.Jsx_fragment_endContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_self_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_self_closing([NotNull] EParser.Jsx_self_closingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_self_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_self_closing([NotNull] EParser.Jsx_self_closingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_opening"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_opening([NotNull] EParser.Jsx_openingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_opening"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_opening([NotNull] EParser.Jsx_openingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_closing([NotNull] EParser.Jsx_closingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_closing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_closing([NotNull] EParser.Jsx_closingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_element_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_element_name([NotNull] EParser.Jsx_element_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_element_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_element_name([NotNull] EParser.Jsx_element_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_identifier([NotNull] EParser.Jsx_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_identifier([NotNull] EParser.Jsx_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_attribute([NotNull] EParser.Jsx_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_attribute([NotNull] EParser.Jsx_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxLiteral</c>
	/// labeled alternative in <see cref="EParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxLiteral([NotNull] EParser.JsxLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxLiteral</c>
	/// labeled alternative in <see cref="EParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxLiteral([NotNull] EParser.JsxLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxValue</c>
	/// labeled alternative in <see cref="EParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxValue([NotNull] EParser.JsxValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxValue</c>
	/// labeled alternative in <see cref="EParser.jsx_attribute_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxValue([NotNull] EParser.JsxValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_children"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_children([NotNull] EParser.Jsx_childrenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_children"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_children([NotNull] EParser.Jsx_childrenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxText</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxText([NotNull] EParser.JsxTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxText</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxText([NotNull] EParser.JsxTextContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxChild</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxChild([NotNull] EParser.JsxChildContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxChild</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxChild([NotNull] EParser.JsxChildContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JsxCode</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsxCode([NotNull] EParser.JsxCodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JsxCode</c>
	/// labeled alternative in <see cref="EParser.jsx_child"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsxCode([NotNull] EParser.JsxCodeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.jsx_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJsx_text([NotNull] EParser.Jsx_textContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.jsx_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJsx_text([NotNull] EParser.Jsx_textContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.css_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_expression([NotNull] EParser.Css_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.css_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_expression([NotNull] EParser.Css_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.css_field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_field([NotNull] EParser.Css_fieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.css_field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_field([NotNull] EParser.Css_fieldContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.css_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_identifier([NotNull] EParser.Css_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.css_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_identifier([NotNull] EParser.Css_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssValue</c>
	/// labeled alternative in <see cref="EParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssValue([NotNull] EParser.CssValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssValue</c>
	/// labeled alternative in <see cref="EParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssValue([NotNull] EParser.CssValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CssText</c>
	/// labeled alternative in <see cref="EParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCssText([NotNull] EParser.CssTextContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CssText</c>
	/// labeled alternative in <see cref="EParser.css_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCssText([NotNull] EParser.CssTextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EParser.css_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCss_text([NotNull] EParser.Css_textContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EParser.css_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCss_text([NotNull] EParser.Css_textContext context);
}
} // namespace prompto.parser
