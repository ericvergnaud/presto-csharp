//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace prompto.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public interface ISParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_category_declaration([NotNull] SParser.Enum_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_category_declaration([NotNull] SParser.Enum_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_native_declaration([NotNull] SParser.Enum_native_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_native_declaration([NotNull] SParser.Enum_native_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol([NotNull] SParser.Native_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol([NotNull] SParser.Native_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol([NotNull] SParser.Category_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol([NotNull] SParser.Category_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_declaration([NotNull] SParser.Attribute_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_declaration([NotNull] SParser.Attribute_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_category_declaration([NotNull] SParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_category_declaration([NotNull] SParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleton_category_declaration([NotNull] SParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleton_category_declaration([NotNull] SParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerived_list([NotNull] SParser.Derived_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerived_list([NotNull] SParser.Derived_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_method_declaration([NotNull] SParser.Operator_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_method_declaration([NotNull] SParser.Operator_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter_method_declaration([NotNull] SParser.Setter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter_method_declaration([NotNull] SParser.Setter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_setter_declaration([NotNull] SParser.Native_setter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_setter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_setter_declaration([NotNull] SParser.Native_setter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter_method_declaration([NotNull] SParser.Getter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter_method_declaration([NotNull] SParser.Getter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_getter_declaration([NotNull] SParser.Native_getter_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_getter_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_getter_declaration([NotNull] SParser.Native_getter_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_declaration([NotNull] SParser.Native_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_declaration([NotNull] SParser.Native_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_resource_declaration([NotNull] SParser.Native_resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_resource_declaration([NotNull] SParser.Native_resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_bindings([NotNull] SParser.Native_category_bindingsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_category_bindings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_bindings([NotNull] SParser.Native_category_bindingsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="SParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingListItem([NotNull] SParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingListItem</c>
	/// labeled alternative in <see cref="SParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingListItem([NotNull] SParser.NativeCategoryBindingListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="SParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryBindingList([NotNull] SParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryBindingList</c>
	/// labeled alternative in <see cref="SParser.native_category_binding_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryBindingList([NotNull] SParser.NativeCategoryBindingListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_list([NotNull] SParser.Attribute_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_list([NotNull] SParser.Attribute_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method_declaration([NotNull] SParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method_declaration([NotNull] SParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_method_declaration([NotNull] SParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_method_declaration([NotNull] SParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_method_declaration([NotNull] SParser.Native_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_method_declaration([NotNull] SParser.Native_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTest_method_declaration([NotNull] SParser.Test_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTest_method_declaration([NotNull] SParser.Test_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] SParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] SParser.AssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyped_argument([NotNull] SParser.Typed_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyped_argument([NotNull] SParser.Typed_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallStatement([NotNull] SParser.MethodCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallStatement([NotNull] SParser.MethodCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignInstanceStatement([NotNull] SParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignInstanceStatement([NotNull] SParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignTupleStatement([NotNull] SParser.AssignTupleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignTupleStatement([NotNull] SParser.AssignTupleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStoreStatement([NotNull] SParser.StoreStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StoreStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStoreStatement([NotNull] SParser.StoreStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] SParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] SParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] SParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] SParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] SParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] SParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] SParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] SParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] SParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] SParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] SParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] SParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseStatement([NotNull] SParser.RaiseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseStatement([NotNull] SParser.RaiseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] SParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] SParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] SParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] SParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithResourceStatement([NotNull] SParser.WithResourceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithResourceStatement([NotNull] SParser.WithResourceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithSingletonStatement([NotNull] SParser.WithSingletonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithSingletonStatement([NotNull] SParser.WithSingletonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureStatement([NotNull] SParser.ClosureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureStatement([NotNull] SParser.ClosureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommentStatement([NotNull] SParser.CommentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommentStatement</c>
	/// labeled alternative in <see cref="SParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommentStatement([NotNull] SParser.CommentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStore_statement([NotNull] SParser.Store_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.store_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStore_statement([NotNull] SParser.Store_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call([NotNull] SParser.Method_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call([NotNull] SParser.Method_callContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="SParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodName([NotNull] SParser.MethodNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="SParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodName([NotNull] SParser.MethodNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="SParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodParent([NotNull] SParser.MethodParentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="SParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodParent([NotNull] SParser.MethodParentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="SParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableSelector([NotNull] SParser.CallableSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="SParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableSelector([NotNull] SParser.CallableSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="SParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableRoot([NotNull] SParser.CallableRootContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="SParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableRoot([NotNull] SParser.CallableRootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="SParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableMemberSelector([NotNull] SParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="SParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableMemberSelector([NotNull] SParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="SParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableItemSelector([NotNull] SParser.CallableItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="SParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableItemSelector([NotNull] SParser.CallableItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_resource_statement([NotNull] SParser.With_resource_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_resource_statement([NotNull] SParser.With_resource_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_singleton_statement([NotNull] SParser.With_singleton_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_singleton_statement([NotNull] SParser.With_singleton_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] SParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] SParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicSwitchCase([NotNull] SParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicSwitchCase([NotNull] SParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionSwitchCase([NotNull] SParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionSwitchCase([NotNull] SParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_each_statement([NotNull] SParser.For_each_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_each_statement([NotNull] SParser.For_each_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] SParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] SParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] SParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] SParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] SParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] SParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="SParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementList([NotNull] SParser.ElseIfStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="SParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementList([NotNull] SParser.ElseIfStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="SParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementListItem([NotNull] SParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="SParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementListItem([NotNull] SParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaise_statement([NotNull] SParser.Raise_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaise_statement([NotNull] SParser.Raise_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] SParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] SParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="SParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchAtomicStatement([NotNull] SParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="SParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchAtomicStatement([NotNull] SParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="SParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchCollectionStatement([NotNull] SParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="SParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchCollectionStatement([NotNull] SParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] SParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] SParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivideExpression([NotNull] SParser.IntDivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivideExpression([NotNull] SParser.IntDivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] SParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] SParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAllExpression([NotNull] SParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAllExpression([NotNull] SParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsExpression([NotNull] SParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsExpression([NotNull] SParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] SParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] SParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] SParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] SParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpression([NotNull] SParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpression([NotNull] SParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] SParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] SParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeExpression([NotNull] SParser.CodeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeExpression([NotNull] SParser.CodeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpression([NotNull] SParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpression([NotNull] SParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] SParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] SParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] SParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] SParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAnyExpression([NotNull] SParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAnyExpression([NotNull] SParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsExpression([NotNull] SParser.ContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsExpression([NotNull] SParser.ContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsExpression([NotNull] SParser.NotContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsExpression([NotNull] SParser.NotContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] SParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] SParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoughlyEqualsExpression([NotNull] SParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoughlyEqualsExpression([NotNull] SParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecuteExpression([NotNull] SParser.ExecuteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecuteExpression([NotNull] SParser.ExecuteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodExpression([NotNull] SParser.MethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodExpression([NotNull] SParser.MethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpression([NotNull] SParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpression([NotNull] SParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotInExpression([NotNull] SParser.NotInExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotInExpression([NotNull] SParser.NotInExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorExpression([NotNull] SParser.IteratorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorExpression([NotNull] SParser.IteratorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotExpression([NotNull] SParser.IsNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotExpression([NotNull] SParser.IsNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] SParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] SParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsExpression([NotNull] SParser.IsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsExpression([NotNull] SParser.IsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] SParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] SParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] SParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] SParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAllExpression([NotNull] SParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAllExpression([NotNull] SParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] SParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] SParser.InstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAnyExpression([NotNull] SParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAnyExpression([NotNull] SParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] SParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] SParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] SParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] SParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpression([NotNull] SParser.LessThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpression([NotNull] SParser.LessThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsExpression([NotNull] SParser.EqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="SParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsExpression([NotNull] SParser.EqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosure_expression([NotNull] SParser.Closure_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosure_expression([NotNull] SParser.Closure_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="SParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorExpression([NotNull] SParser.SelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="SParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorExpression([NotNull] SParser.SelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="SParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectableExpression([NotNull] SParser.SelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="SParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectableExpression([NotNull] SParser.SelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentExpression([NotNull] SParser.DocumentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentExpression([NotNull] SParser.DocumentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchExpression([NotNull] SParser.FetchExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchExpression([NotNull] SParser.FetchExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadExpression([NotNull] SParser.ReadExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadExpression([NotNull] SParser.ReadExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSortedExpression([NotNull] SParser.SortedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSortedExpression([NotNull] SParser.SortedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallExpression([NotNull] SParser.MethodCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallExpression([NotNull] SParser.MethodCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorExpression([NotNull] SParser.ConstructorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="SParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorExpression([NotNull] SParser.ConstructorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberSelector([NotNull] SParser.MemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberSelector([NotNull] SParser.MemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceSelector([NotNull] SParser.SliceSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceSelector([NotNull] SParser.SliceSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemSelector([NotNull] SParser.ItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="SParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemSelector([NotNull] SParser.ItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_expression([NotNull] SParser.Document_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_expression([NotNull] SParser.Document_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor_expression([NotNull] SParser.Constructor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor_expression([NotNull] SParser.Constructor_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAssignmentList([NotNull] SParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAssignmentList([NotNull] SParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentList([NotNull] SParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentList([NotNull] SParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListItem([NotNull] SParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="SParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListItem([NotNull] SParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_assignment([NotNull] SParser.Argument_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_assignment([NotNull] SParser.Argument_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_expression([NotNull] SParser.Read_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_expression([NotNull] SParser.Read_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite_statement([NotNull] SParser.Write_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite_statement([NotNull] SParser.Write_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchList</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchList([NotNull] SParser.FetchListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchList</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchList([NotNull] SParser.FetchListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchOne([NotNull] SParser.FetchOneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchOne</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchOne([NotNull] SParser.FetchOneContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchAll</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchAll([NotNull] SParser.FetchAllContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchAll</c>
	/// labeled alternative in <see cref="SParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchAll([NotNull] SParser.FetchAllContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_expression([NotNull] SParser.Sorted_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_expression([NotNull] SParser.Sorted_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_instance_statement([NotNull] SParser.Assign_instance_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_instance_statement([NotNull] SParser.Assign_instance_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="SParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInstance([NotNull] SParser.MemberInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="SParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInstance([NotNull] SParser.MemberInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="SParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemInstance([NotNull] SParser.ItemInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="SParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemInstance([NotNull] SParser.ItemInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_tuple_statement([NotNull] SParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_tuple_statement([NotNull] SParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfs([NotNull] SParser.LfsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfs([NotNull] SParser.LfsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfp([NotNull] SParser.LfpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfp([NotNull] SParser.LfpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndent([NotNull] SParser.IndentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndent([NotNull] SParser.IndentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDedent([NotNull] SParser.DedentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDedent([NotNull] SParser.DedentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_literal([NotNull] SParser.Null_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_literal([NotNull] SParser.Null_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="SParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullDeclarationList([NotNull] SParser.FullDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="SParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullDeclarationList([NotNull] SParser.FullDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="SParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationListItem([NotNull] SParser.DeclarationListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="SParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationListItem([NotNull] SParser.DeclarationListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="SParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationList([NotNull] SParser.DeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="SParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationList([NotNull] SParser.DeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] SParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] SParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_declaration([NotNull] SParser.Resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_declaration([NotNull] SParser.Resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumCategoryDeclaration([NotNull] SParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumCategoryDeclaration([NotNull] SParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="SParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumNativeDeclaration([NotNull] SParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="SParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumNativeDeclaration([NotNull] SParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="SParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolList([NotNull] SParser.NativeSymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="SParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolList([NotNull] SParser.NativeSymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="SParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolListItem([NotNull] SParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="SParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolListItem([NotNull] SParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="SParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolListItem([NotNull] SParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="SParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolListItem([NotNull] SParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="SParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolList([NotNull] SParser.CategorySymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="SParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolList([NotNull] SParser.CategorySymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="SParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolList([NotNull] SParser.SymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="SParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolList([NotNull] SParser.SymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="SParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolListItem([NotNull] SParser.SymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="SParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolListItem([NotNull] SParser.SymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingList([NotNull] SParser.MatchingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingList([NotNull] SParser.MatchingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingSet([NotNull] SParser.MatchingSetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingSet([NotNull] SParser.MatchingSetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingRange([NotNull] SParser.MatchingRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingRange([NotNull] SParser.MatchingRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingPattern([NotNull] SParser.MatchingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingPattern([NotNull] SParser.MatchingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingExpression([NotNull] SParser.MatchingExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="SParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingExpression([NotNull] SParser.MatchingExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_literal([NotNull] SParser.List_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_literal([NotNull] SParser.List_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_literal([NotNull] SParser.Set_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_literal([NotNull] SParser.Set_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="SParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueList([NotNull] SParser.ValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="SParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueList([NotNull] SParser.ValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="SParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueListItem([NotNull] SParser.ValueListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="SParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueListItem([NotNull] SParser.ValueListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_literal([NotNull] SParser.Range_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_literal([NotNull] SParser.Range_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] SParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] SParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] SParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] SParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictType([NotNull] SParser.DictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictType([NotNull] SParser.DictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryType([NotNull] SParser.PrimaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="SParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryType([NotNull] SParser.PrimaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="SParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] SParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="SParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] SParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="SParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryType([NotNull] SParser.CategoryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="SParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryType([NotNull] SParser.CategoryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] SParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] SParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterType([NotNull] SParser.CharacterTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterType([NotNull] SParser.CharacterTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextType([NotNull] SParser.TextTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextType([NotNull] SParser.TextTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImageType([NotNull] SParser.ImageTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImageType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImageType([NotNull] SParser.ImageTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] SParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] SParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalType([NotNull] SParser.DecimalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalType([NotNull] SParser.DecimalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentType([NotNull] SParser.DocumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentType([NotNull] SParser.DocumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateType([NotNull] SParser.DateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateType([NotNull] SParser.DateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeType([NotNull] SParser.DateTimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeType([NotNull] SParser.DateTimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeType([NotNull] SParser.TimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeType([NotNull] SParser.TimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodType([NotNull] SParser.PeriodTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodType([NotNull] SParser.PeriodTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeType([NotNull] SParser.CodeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeType([NotNull] SParser.CodeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlobType([NotNull] SParser.BlobTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlobType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlobType([NotNull] SParser.BlobTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUUIDType([NotNull] SParser.UUIDTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UUIDType</c>
	/// labeled alternative in <see cref="SParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUUIDType([NotNull] SParser.UUIDTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_type([NotNull] SParser.Category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_type([NotNull] SParser.Category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutable_category_type([NotNull] SParser.Mutable_category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.mutable_category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutable_category_type([NotNull] SParser.Mutable_category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_type([NotNull] SParser.Code_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_type([NotNull] SParser.Code_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteCategoryDeclaration([NotNull] SParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteCategoryDeclaration([NotNull] SParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryDeclaration([NotNull] SParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryDeclaration([NotNull] SParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingletonCategoryDeclaration([NotNull] SParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="SParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingletonCategoryDeclaration([NotNull] SParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="SParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierList([NotNull] SParser.TypeIdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="SParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierList([NotNull] SParser.TypeIdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="SParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierListItem([NotNull] SParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="SParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierListItem([NotNull] SParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="SParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodVariableIdentifier([NotNull] SParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="SParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodVariableIdentifier([NotNull] SParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="SParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodTypeIdentifier([NotNull] SParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="SParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodTypeIdentifier([NotNull] SParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableIdentifier([NotNull] SParser.VariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableIdentifier([NotNull] SParser.VariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] SParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] SParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolIdentifier([NotNull] SParser.SymbolIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="SParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolIdentifier([NotNull] SParser.SymbolIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier([NotNull] SParser.Variable_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier([NotNull] SParser.Variable_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier([NotNull] SParser.Type_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier([NotNull] SParser.Type_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_identifier([NotNull] SParser.Symbol_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_identifier([NotNull] SParser.Symbol_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentListItem([NotNull] SParser.ArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentListItem([NotNull] SParser.ArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="SParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] SParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="SParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] SParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="SParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeArgument([NotNull] SParser.CodeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="SParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeArgument([NotNull] SParser.CodeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="SParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorArgument([NotNull] SParser.OperatorArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="SParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorArgument([NotNull] SParser.OperatorArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="SParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedArgument([NotNull] SParser.NamedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="SParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedArgument([NotNull] SParser.NamedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="SParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedArgument([NotNull] SParser.TypedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="SParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedArgument([NotNull] SParser.TypedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_argument([NotNull] SParser.Named_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_argument([NotNull] SParser.Named_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_argument([NotNull] SParser.Code_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_argument([NotNull] SParser.Code_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="SParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryArgumentType([NotNull] SParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="SParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryArgumentType([NotNull] SParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="SParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyArgumentType([NotNull] SParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="SParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyArgumentType([NotNull] SParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyListType([NotNull] SParser.AnyListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyListType([NotNull] SParser.AnyListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyType([NotNull] SParser.AnyTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyType([NotNull] SParser.AnyTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyDictType([NotNull] SParser.AnyDictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="SParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyDictType([NotNull] SParser.AnyDictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="SParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodListItem([NotNull] SParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="SParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodListItem([NotNull] SParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="SParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodList([NotNull] SParser.CategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="SParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodList([NotNull] SParser.CategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration([NotNull] SParser.Member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration([NotNull] SParser.Member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMethodList</c>
	/// labeled alternative in <see cref="SParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMethodList([NotNull] SParser.NativeCategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMethodList</c>
	/// labeled alternative in <see cref="SParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMethodList([NotNull] SParser.NativeCategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMethodListItem</c>
	/// labeled alternative in <see cref="SParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMethodListItem([NotNull] SParser.NativeCategoryMethodListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMethodListItem</c>
	/// labeled alternative in <see cref="SParser.native_member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMethodListItem([NotNull] SParser.NativeCategoryMethodListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_member_method_declaration([NotNull] SParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.native_member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_member_method_declaration([NotNull] SParser.Native_member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCategoryBinding([NotNull] SParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCategoryBinding([NotNull] SParser.JavaCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCategoryBinding([NotNull] SParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCategoryBinding([NotNull] SParser.CSharpCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2CategoryBinding([NotNull] SParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2CategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2CategoryBinding([NotNull] SParser.Python2CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3CategoryBinding([NotNull] SParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3CategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3CategoryBinding([NotNull] SParser.Python3CategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptCategoryBinding([NotNull] SParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptCategoryBinding</c>
	/// labeled alternative in <see cref="SParser.native_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptCategoryBinding([NotNull] SParser.JavaScriptCategoryBindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_category_binding([NotNull] SParser.Python_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_category_binding([NotNull] SParser.Python_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_module([NotNull] SParser.Python_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_module([NotNull] SParser.Python_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule_token([NotNull] SParser.Module_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule_token([NotNull] SParser.Module_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_category_binding([NotNull] SParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_category_binding"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_category_binding([NotNull] SParser.Javascript_category_bindingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_module([NotNull] SParser.Javascript_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_module([NotNull] SParser.Javascript_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="SParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableList([NotNull] SParser.VariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="SParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableList([NotNull] SParser.VariableListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="SParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableListItem([NotNull] SParser.VariableListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="SParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableListItem([NotNull] SParser.VariableListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractMethod([NotNull] SParser.AbstractMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractMethod([NotNull] SParser.AbstractMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteMethod([NotNull] SParser.ConcreteMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteMethod([NotNull] SParser.ConcreteMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeMethod([NotNull] SParser.NativeMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeMethod([NotNull] SParser.NativeMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTestMethod([NotNull] SParser.TestMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="SParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTestMethod([NotNull] SParser.TestMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment_statement([NotNull] SParser.Comment_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.comment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment_statement([NotNull] SParser.Comment_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="SParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementListItem([NotNull] SParser.NativeStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="SParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementListItem([NotNull] SParser.NativeStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="SParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementList([NotNull] SParser.NativeStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="SParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementList([NotNull] SParser.NativeStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaNativeStatement([NotNull] SParser.JavaNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaNativeStatement([NotNull] SParser.JavaNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpNativeStatement([NotNull] SParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpNativeStatement([NotNull] SParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2NativeStatement([NotNull] SParser.Python2NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2NativeStatement([NotNull] SParser.Python2NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3NativeStatement([NotNull] SParser.Python3NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3NativeStatement([NotNull] SParser.Python3NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptNativeStatement([NotNull] SParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="SParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptNativeStatement([NotNull] SParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_native_statement([NotNull] SParser.Python_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_native_statement([NotNull] SParser.Python_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_native_statement([NotNull] SParser.Javascript_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_native_statement([NotNull] SParser.Javascript_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="SParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] SParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="SParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] SParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="SParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementListItem([NotNull] SParser.StatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="SParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementListItem([NotNull] SParser.StatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="SParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionList([NotNull] SParser.AssertionListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="SParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionList([NotNull] SParser.AssertionListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="SParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionListItem([NotNull] SParser.AssertionListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="SParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionListItem([NotNull] SParser.AssertionListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementList([NotNull] SParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementList([NotNull] SParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementListItem([NotNull] SParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="SParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementListItem([NotNull] SParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="SParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementList([NotNull] SParser.CatchStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="SParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementList([NotNull] SParser.CatchStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="SParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementListItem([NotNull] SParser.CatchStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="SParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementListItem([NotNull] SParser.CatchStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralRangeLiteral([NotNull] SParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralRangeLiteral([NotNull] SParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListLiteral([NotNull] SParser.LiteralListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListLiteral([NotNull] SParser.LiteralListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralSetLiteral([NotNull] SParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralSetLiteral([NotNull] SParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinIntegerLiteral([NotNull] SParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinIntegerLiteral([NotNull] SParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxIntegerLiteral([NotNull] SParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxIntegerLiteral([NotNull] SParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] SParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] SParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimalLiteral([NotNull] SParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimalLiteral([NotNull] SParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterLiteral([NotNull] SParser.CharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterLiteral([NotNull] SParser.CharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] SParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] SParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] SParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] SParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextLiteral([NotNull] SParser.TextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextLiteral([NotNull] SParser.TextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] SParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] SParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] SParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] SParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] SParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] SParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodLiteral([NotNull] SParser.PeriodLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodLiteral([NotNull] SParser.PeriodLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] SParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="SParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] SParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="SParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralList([NotNull] SParser.LiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="SParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralList([NotNull] SParser.LiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="SParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListItem([NotNull] SParser.LiteralListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="SParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListItem([NotNull] SParser.LiteralListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] SParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] SParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] SParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] SParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] SParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] SParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] SParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="SParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] SParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThis_expression([NotNull] SParser.This_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThis_expression([NotNull] SParser.This_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] SParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] SParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicLiteral([NotNull] SParser.AtomicLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicLiteral([NotNull] SParser.AtomicLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionLiteral([NotNull] SParser.CollectionLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="SParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionLiteral([NotNull] SParser.CollectionLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeLiteral([NotNull] SParser.RangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeLiteral([NotNull] SParser.RangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListLiteral([NotNull] SParser.ListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListLiteral([NotNull] SParser.ListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetLiteral([NotNull] SParser.SetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetLiteral([NotNull] SParser.SetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictLiteral([NotNull] SParser.DictLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictLiteral([NotNull] SParser.DictLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleLiteral([NotNull] SParser.TupleLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="SParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleLiteral([NotNull] SParser.TupleLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_literal([NotNull] SParser.Tuple_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_literal([NotNull] SParser.Tuple_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_literal([NotNull] SParser.Dict_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_literal([NotNull] SParser.Dict_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="SParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTuple([NotNull] SParser.ValueTupleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="SParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTuple([NotNull] SParser.ValueTupleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="SParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTupleItem([NotNull] SParser.ValueTupleItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="SParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTupleItem([NotNull] SParser.ValueTupleItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="SParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryList([NotNull] SParser.DictEntryListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="SParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryList([NotNull] SParser.DictEntryListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="SParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryListItem([NotNull] SParser.DictEntryListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="SParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryListItem([NotNull] SParser.DictEntryListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry([NotNull] SParser.Dict_entryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry([NotNull] SParser.Dict_entryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstAndLast([NotNull] SParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstAndLast([NotNull] SParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstOnly([NotNull] SParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstOnly([NotNull] SParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLastOnly([NotNull] SParser.SliceLastOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="SParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLastOnly([NotNull] SParser.SliceLastOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_variable_statement([NotNull] SParser.Assign_variable_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_variable_statement([NotNull] SParser.Assign_variable_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="SParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChildInstance([NotNull] SParser.ChildInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="SParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChildInstance([NotNull] SParser.ChildInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="SParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRootInstance([NotNull] SParser.RootInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="SParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRootInstance([NotNull] SParser.RootInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="SParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsATypeExpression([NotNull] SParser.IsATypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="SParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsATypeExpression([NotNull] SParser.IsATypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="SParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsOtherExpression([NotNull] SParser.IsOtherExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="SParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsOtherExpression([NotNull] SParser.IsOtherExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by_list([NotNull] SParser.Order_by_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.order_by_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by_list([NotNull] SParser.Order_by_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by([NotNull] SParser.Order_byContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.order_by"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by([NotNull] SParser.Order_byContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorPlus([NotNull] SParser.OperatorPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorPlus([NotNull] SParser.OperatorPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMinus([NotNull] SParser.OperatorMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMinus([NotNull] SParser.OperatorMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMultiply([NotNull] SParser.OperatorMultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMultiply([NotNull] SParser.OperatorMultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorDivide([NotNull] SParser.OperatorDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorDivide([NotNull] SParser.OperatorDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIDivide([NotNull] SParser.OperatorIDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIDivide([NotNull] SParser.OperatorIDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorModulo([NotNull] SParser.OperatorModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="SParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorModulo([NotNull] SParser.OperatorModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNew_token([NotNull] SParser.New_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.new_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNew_token([NotNull] SParser.New_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey_token([NotNull] SParser.Key_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey_token([NotNull] SParser.Key_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_token([NotNull] SParser.Value_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_token([NotNull] SParser.Value_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbols_token([NotNull] SParser.Symbols_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbols_token([NotNull] SParser.Symbols_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] SParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] SParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] SParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] SParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivide([NotNull] SParser.DivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivide([NotNull] SParser.DivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdivide([NotNull] SParser.IdivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdivide([NotNull] SParser.IdivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulo([NotNull] SParser.ModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulo([NotNull] SParser.ModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="SParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptReturnStatement([NotNull] SParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="SParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptReturnStatement([NotNull] SParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="SParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptStatement([NotNull] SParser.JavascriptStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="SParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptStatement([NotNull] SParser.JavascriptStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptSelectorExpression([NotNull] SParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptSelectorExpression([NotNull] SParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptPrimaryExpression([NotNull] SParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptPrimaryExpression([NotNull] SParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_primary_expression([NotNull] SParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_primary_expression([NotNull] SParser.Javascript_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_this_expression([NotNull] SParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_this_expression([NotNull] SParser.Javascript_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_new_expression([NotNull] SParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_new_expression([NotNull] SParser.Javascript_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMethodExpression([NotNull] SParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMethodExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMethodExpression([NotNull] SParser.JavaScriptMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptMemberExpression([NotNull] SParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptMemberExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptMemberExpression([NotNull] SParser.JavaScriptMemberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptItemExpression([NotNull] SParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptItemExpression</c>
	/// labeled alternative in <see cref="SParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptItemExpression([NotNull] SParser.JavaScriptItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_method_expression([NotNull] SParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_method_expression([NotNull] SParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="SParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentList([NotNull] SParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="SParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentList([NotNull] SParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentListItem([NotNull] SParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentListItem([NotNull] SParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_item_expression([NotNull] SParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_item_expression([NotNull] SParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_parenthesis_expression([NotNull] SParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_parenthesis_expression([NotNull] SParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier_expression([NotNull] SParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier_expression([NotNull] SParser.Javascript_identifier_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIntegerLiteral([NotNull] SParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIntegerLiteral([NotNull] SParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptDecimalLiteral([NotNull] SParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptDecimalLiteral([NotNull] SParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptTextLiteral([NotNull] SParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptTextLiteral([NotNull] SParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptBooleanLiteral([NotNull] SParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptBooleanLiteral([NotNull] SParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptCharacterLiteral([NotNull] SParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptCharacterLiteral([NotNull] SParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier([NotNull] SParser.Javascript_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier([NotNull] SParser.Javascript_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="SParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonReturnStatement([NotNull] SParser.PythonReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="SParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonReturnStatement([NotNull] SParser.PythonReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="SParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonStatement([NotNull] SParser.PythonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="SParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonStatement([NotNull] SParser.PythonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelectorExpression([NotNull] SParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelectorExpression([NotNull] SParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPrimaryExpression([NotNull] SParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPrimaryExpression([NotNull] SParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonParenthesisExpression([NotNull] SParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonParenthesisExpression([NotNull] SParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifierExpression([NotNull] SParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifierExpression([NotNull] SParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonLiteralExpression([NotNull] SParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonLiteralExpression([NotNull] SParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonGlobalMethodExpression([NotNull] SParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="SParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonGlobalMethodExpression([NotNull] SParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="SParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonMethodExpression([NotNull] SParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="SParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonMethodExpression([NotNull] SParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="SParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonItemExpression([NotNull] SParser.PythonItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="SParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonItemExpression([NotNull] SParser.PythonItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_method_expression([NotNull] SParser.Python_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_method_expression([NotNull] SParser.Python_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalOnlyArgumentList([NotNull] SParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalOnlyArgumentList([NotNull] SParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedOnlyArgumentList([NotNull] SParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedOnlyArgumentList([NotNull] SParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonArgumentList([NotNull] SParser.PythonArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonArgumentList([NotNull] SParser.PythonArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentList([NotNull] SParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentList([NotNull] SParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentListItem([NotNull] SParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentListItem([NotNull] SParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentList([NotNull] SParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="SParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentList([NotNull] SParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentListItem([NotNull] SParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentListItem([NotNull] SParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_parenthesis_expression([NotNull] SParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_parenthesis_expression([NotNull] SParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonChildIdentifier([NotNull] SParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonChildIdentifier([NotNull] SParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPromptoIdentifier([NotNull] SParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPromptoIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPromptoIdentifier([NotNull] SParser.PythonPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifier([NotNull] SParser.PythonIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="SParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifier([NotNull] SParser.PythonIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIntegerLiteral([NotNull] SParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIntegerLiteral([NotNull] SParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonDecimalLiteral([NotNull] SParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonDecimalLiteral([NotNull] SParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonTextLiteral([NotNull] SParser.PythonTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonTextLiteral([NotNull] SParser.PythonTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonBooleanLiteral([NotNull] SParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonBooleanLiteral([NotNull] SParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonCharacterLiteral([NotNull] SParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonCharacterLiteral([NotNull] SParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_identifier([NotNull] SParser.Python_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_identifier([NotNull] SParser.Python_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="SParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaReturnStatement([NotNull] SParser.JavaReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="SParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaReturnStatement([NotNull] SParser.JavaReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="SParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaStatement([NotNull] SParser.JavaStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="SParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaStatement([NotNull] SParser.JavaStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaSelectorExpression([NotNull] SParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaSelectorExpression([NotNull] SParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaPrimaryExpression([NotNull] SParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaPrimaryExpression([NotNull] SParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_primary_expression([NotNull] SParser.Java_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_primary_expression([NotNull] SParser.Java_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_this_expression([NotNull] SParser.Java_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_this_expression([NotNull] SParser.Java_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_new_expression([NotNull] SParser.Java_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_new_expression([NotNull] SParser.Java_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="SParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaMethodExpression([NotNull] SParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="SParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaMethodExpression([NotNull] SParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="SParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaItemExpression([NotNull] SParser.JavaItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="SParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaItemExpression([NotNull] SParser.JavaItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_method_expression([NotNull] SParser.Java_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_method_expression([NotNull] SParser.Java_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentListItem([NotNull] SParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentListItem([NotNull] SParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="SParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentList([NotNull] SParser.JavaArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="SParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentList([NotNull] SParser.JavaArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_item_expression([NotNull] SParser.Java_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_item_expression([NotNull] SParser.Java_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_parenthesis_expression([NotNull] SParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_parenthesis_expression([NotNull] SParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifier([NotNull] SParser.JavaIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifier([NotNull] SParser.JavaIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildIdentifier([NotNull] SParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildIdentifier([NotNull] SParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaClassIdentifier([NotNull] SParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaClassIdentifier([NotNull] SParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildClassIdentifier([NotNull] SParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="SParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildClassIdentifier([NotNull] SParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIntegerLiteral([NotNull] SParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIntegerLiteral([NotNull] SParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaDecimalLiteral([NotNull] SParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaDecimalLiteral([NotNull] SParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaTextLiteral([NotNull] SParser.JavaTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaTextLiteral([NotNull] SParser.JavaTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaBooleanLiteral([NotNull] SParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaBooleanLiteral([NotNull] SParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCharacterLiteral([NotNull] SParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCharacterLiteral([NotNull] SParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_identifier([NotNull] SParser.Java_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_identifier([NotNull] SParser.Java_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="SParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpReturnStatement([NotNull] SParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="SParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpReturnStatement([NotNull] SParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="SParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpStatement([NotNull] SParser.CSharpStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="SParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpStatement([NotNull] SParser.CSharpStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpSelectorExpression([NotNull] SParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpSelectorExpression([NotNull] SParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPrimaryExpression([NotNull] SParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPrimaryExpression([NotNull] SParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_primary_expression([NotNull] SParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_primary_expression([NotNull] SParser.Csharp_primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_this_expression([NotNull] SParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_this_expression([NotNull] SParser.Csharp_this_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_new_expression([NotNull] SParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_new_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_new_expression([NotNull] SParser.Csharp_new_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpMethodExpression([NotNull] SParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpMethodExpression([NotNull] SParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpItemExpression([NotNull] SParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="SParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpItemExpression([NotNull] SParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_method_expression([NotNull] SParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_method_expression([NotNull] SParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="SParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentList([NotNull] SParser.CSharpArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="SParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentList([NotNull] SParser.CSharpArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentListItem([NotNull] SParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="SParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentListItem([NotNull] SParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_item_expression([NotNull] SParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_item_expression([NotNull] SParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_parenthesis_expression([NotNull] SParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_parenthesis_expression([NotNull] SParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifier([NotNull] SParser.CSharpIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifier([NotNull] SParser.CSharpIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpChildIdentifier([NotNull] SParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpChildIdentifier([NotNull] SParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPromptoIdentifier([NotNull] SParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPromptoIdentifier</c>
	/// labeled alternative in <see cref="SParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPromptoIdentifier([NotNull] SParser.CSharpPromptoIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIntegerLiteral([NotNull] SParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIntegerLiteral([NotNull] SParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpDecimalLiteral([NotNull] SParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpDecimalLiteral([NotNull] SParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpTextLiteral([NotNull] SParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpTextLiteral([NotNull] SParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpBooleanLiteral([NotNull] SParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpBooleanLiteral([NotNull] SParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCharacterLiteral([NotNull] SParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="SParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCharacterLiteral([NotNull] SParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_identifier([NotNull] SParser.Csharp_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_identifier([NotNull] SParser.Csharp_identifierContext context);
}
} // namespace prompto.parser
