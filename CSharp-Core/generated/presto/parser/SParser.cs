//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace presto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class SParser : AbstractParser {
	public const int
		INDENT=1, DEDENT=2, LF_TAB=3, LF_MORE=4, LF=5, TAB=6, WS=7, JAVA=8, CSHARP=9, 
		PYTHON2=10, PYTHON3=11, JAVASCRIPT=12, SWIFT=13, COLON=14, SEMI=15, COMMA=16, 
		RANGE=17, DOT=18, LPAR=19, RPAR=20, LBRAK=21, RBRAK=22, LCURL=23, RCURL=24, 
		QMARK=25, XMARK=26, AMP=27, AMP2=28, PIPE=29, PIPE2=30, PLUS=31, MINUS=32, 
		STAR=33, SLASH=34, BSLASH=35, PERCENT=36, GT=37, GTE=38, LT=39, LTE=40, 
		LTGT=41, EQ=42, XEQ=43, EQ2=44, TEQ=45, TILDE=46, LARROW=47, RARROW=48, 
		BOOLEAN=49, CHARACTER=50, TEXT=51, INTEGER=52, DECIMAL=53, DATE=54, TIME=55, 
		DATETIME=56, PERIOD=57, METHOD_T=58, CODE=59, DOCUMENT=60, ABSTRACT=61, 
		ALL=62, ALWAYS=63, AND=64, ANY=65, AS=66, ATTR=67, ATTRIBUTE=68, ATTRIBUTES=69, 
		BINDINGS=70, CASE=71, CATCH=72, CATEGORY=73, CLASS=74, CLOSE=75, CONTAINS=76, 
		DEF=77, DEFAULT=78, DEFINE=79, DO=80, DOING=81, EACH=82, ELSE=83, ENUM=84, 
		ENUMERATED=85, EXCEPT=86, EXECUTE=87, EXPECTING=88, EXTENDS=89, FETCH=90, 
		FINALLY=91, FOR=92, FROM=93, GETTER=94, IF=95, IN=96, INVOKE=97, IS=98, 
		MATCHING=99, METHOD=100, METHODS=101, MODULO=102, MUTABLE=103, NATIVE=104, 
		NONE=105, NOT=106, NOTHING=107, NULL=108, ON=109, OPEN=110, OPERATOR=111, 
		OR=112, OTHERWISE=113, PASS=114, RAISE=115, READ=116, RECEIVING=117, RESOURCE=118, 
		RETURN=119, RETURNING=120, SELF=121, SETTER=122, SINGLETON=123, SORTED=124, 
		SWITCH=125, TEST=126, THIS=127, THROW=128, TO=129, TRY=130, WITH=131, 
		WHEN=132, WHERE=133, WHILE=134, WRITE=135, BOOLEAN_LITERAL=136, CHAR_LITERAL=137, 
		MIN_INTEGER=138, MAX_INTEGER=139, SYMBOL_IDENTIFIER=140, TYPE_IDENTIFIER=141, 
		VARIABLE_IDENTIFIER=142, NATIVE_IDENTIFIER=143, DOLLAR_IDENTIFIER=144, 
		TEXT_LITERAL=145, INTEGER_LITERAL=146, HEXA_LITERAL=147, DECIMAL_LITERAL=148, 
		DATETIME_LITERAL=149, TIME_LITERAL=150, DATE_LITERAL=151, PERIOD_LITERAL=152, 
		COMMENT=153;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_native_symbol = 2, RULE_category_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_category_declaration = 5, RULE_singleton_category_declaration = 6, 
		RULE_derived_list = 7, RULE_operator_method_declaration = 8, RULE_setter_method_declaration = 9, 
		RULE_getter_method_declaration = 10, RULE_native_category_declaration = 11, 
		RULE_native_resource_declaration = 12, RULE_native_category_bindings = 13, 
		RULE_native_category_binding_list = 14, RULE_attribute_list = 15, RULE_abstract_method_declaration = 16, 
		RULE_concrete_method_declaration = 17, RULE_native_method_declaration = 18, 
		RULE_test_method_declaration = 19, RULE_assertion = 20, RULE_typed_argument = 21, 
		RULE_statement = 22, RULE_method_call = 23, RULE_method_selector = 24, 
		RULE_callable_parent = 25, RULE_callable_selector = 26, RULE_with_resource_statement = 27, 
		RULE_with_singleton_statement = 28, RULE_switch_statement = 29, RULE_switch_case_statement = 30, 
		RULE_for_each_statement = 31, RULE_do_while_statement = 32, RULE_while_statement = 33, 
		RULE_if_statement = 34, RULE_else_if_statement_list = 35, RULE_raise_statement = 36, 
		RULE_try_statement = 37, RULE_catch_statement = 38, RULE_return_statement = 39, 
		RULE_expression = 40, RULE_closure_expression = 41, RULE_instance_expression = 42, 
		RULE_method_expression = 43, RULE_instance_selector = 44, RULE_document_expression = 45, 
		RULE_constructor_expression = 46, RULE_argument_assignment_list = 47, 
		RULE_argument_assignment = 48, RULE_read_expression = 49, RULE_write_statement = 50, 
		RULE_fetch_expression = 51, RULE_sorted_expression = 52, RULE_assign_instance_statement = 53, 
		RULE_child_instance = 54, RULE_assign_tuple_statement = 55, RULE_lfs = 56, 
		RULE_lfp = 57, RULE_indent = 58, RULE_dedent = 59, RULE_null_literal = 60, 
		RULE_declaration_list = 61, RULE_declarations = 62, RULE_declaration = 63, 
		RULE_resource_declaration = 64, RULE_enum_declaration = 65, RULE_native_symbol_list = 66, 
		RULE_category_symbol_list = 67, RULE_symbol_list = 68, RULE_attribute_constraint = 69, 
		RULE_list_literal = 70, RULE_set_literal = 71, RULE_expression_list = 72, 
		RULE_range_literal = 73, RULE_typedef = 74, RULE_primary_type = 75, RULE_native_type = 76, 
		RULE_category_type = 77, RULE_code_type = 78, RULE_document_type = 79, 
		RULE_category_declaration = 80, RULE_type_identifier_list = 81, RULE_method_identifier = 82, 
		RULE_identifier = 83, RULE_variable_identifier = 84, RULE_type_identifier = 85, 
		RULE_symbol_identifier = 86, RULE_argument_list = 87, RULE_argument = 88, 
		RULE_operator_argument = 89, RULE_named_argument = 90, RULE_code_argument = 91, 
		RULE_category_or_any_type = 92, RULE_any_type = 93, RULE_member_method_declaration_list = 94, 
		RULE_member_method_declaration = 95, RULE_native_member_method_declaration_list = 96, 
		RULE_native_member_method_declaration = 97, RULE_native_category_binding = 98, 
		RULE_python_category_binding = 99, RULE_python_module = 100, RULE_module_token = 101, 
		RULE_javascript_category_binding = 102, RULE_javascript_module = 103, 
		RULE_variable_identifier_list = 104, RULE_method_declaration = 105, RULE_native_statement_list = 106, 
		RULE_native_statement = 107, RULE_python_native_statement = 108, RULE_javascript_native_statement = 109, 
		RULE_statement_list = 110, RULE_assertion_list = 111, RULE_switch_case_statement_list = 112, 
		RULE_catch_statement_list = 113, RULE_literal_collection = 114, RULE_atomic_literal = 115, 
		RULE_literal_list_literal = 116, RULE_selectable_expression = 117, RULE_this_expression = 118, 
		RULE_parenthesis_expression = 119, RULE_literal_expression = 120, RULE_collection_literal = 121, 
		RULE_tuple_literal = 122, RULE_dict_literal = 123, RULE_expression_tuple = 124, 
		RULE_dict_entry_list = 125, RULE_dict_entry = 126, RULE_slice_arguments = 127, 
		RULE_assign_variable_statement = 128, RULE_assignable_instance = 129, 
		RULE_is_expression = 130, RULE_operator = 131, RULE_key_token = 132, RULE_value_token = 133, 
		RULE_symbols_token = 134, RULE_assign = 135, RULE_multiply = 136, RULE_divide = 137, 
		RULE_idivide = 138, RULE_modulo = 139, RULE_javascript_statement = 140, 
		RULE_javascript_expression = 141, RULE_javascript_primary_expression = 142, 
		RULE_javascript_this_expression = 143, RULE_javascript_selector_expression = 144, 
		RULE_javascript_member_expression = 145, RULE_javascript_method_expression = 146, 
		RULE_javascript_arguments = 147, RULE_javascript_item_expression = 148, 
		RULE_javascript_parenthesis_expression = 149, RULE_javascript_identifier_expression = 150, 
		RULE_javascript_literal_expression = 151, RULE_javascript_identifier = 152, 
		RULE_python_statement = 153, RULE_python_expression = 154, RULE_python_primary_expression = 155, 
		RULE_python_selector_expression = 156, RULE_python_method_expression = 157, 
		RULE_python_argument_list = 158, RULE_python_ordinal_argument_list = 159, 
		RULE_python_named_argument_list = 160, RULE_python_parenthesis_expression = 161, 
		RULE_python_identifier_expression = 162, RULE_python_literal_expression = 163, 
		RULE_python_identifier = 164, RULE_java_statement = 165, RULE_java_expression = 166, 
		RULE_java_primary_expression = 167, RULE_java_this_expression = 168, RULE_java_selector_expression = 169, 
		RULE_java_method_expression = 170, RULE_java_arguments = 171, RULE_java_item_expression = 172, 
		RULE_java_parenthesis_expression = 173, RULE_java_identifier_expression = 174, 
		RULE_java_class_identifier_expression = 175, RULE_java_literal_expression = 176, 
		RULE_java_identifier = 177, RULE_csharp_statement = 178, RULE_csharp_expression = 179, 
		RULE_csharp_primary_expression = 180, RULE_csharp_this_expression = 181, 
		RULE_csharp_selector_expression = 182, RULE_csharp_method_expression = 183, 
		RULE_csharp_arguments = 184, RULE_csharp_item_expression = 185, RULE_csharp_parenthesis_expression = 186, 
		RULE_csharp_identifier_expression = 187, RULE_csharp_literal_expression = 188, 
		RULE_csharp_identifier = 189;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "operator_method_declaration", 
		"setter_method_declaration", "getter_method_declaration", "native_category_declaration", 
		"native_resource_declaration", "native_category_bindings", "native_category_binding_list", 
		"attribute_list", "abstract_method_declaration", "concrete_method_declaration", 
		"native_method_declaration", "test_method_declaration", "assertion", "typed_argument", 
		"statement", "method_call", "method_selector", "callable_parent", "callable_selector", 
		"with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "return_statement", "expression", "closure_expression", 
		"instance_expression", "method_expression", "instance_selector", "document_expression", 
		"constructor_expression", "argument_assignment_list", "argument_assignment", 
		"read_expression", "write_statement", "fetch_expression", "sorted_expression", 
		"assign_instance_statement", "child_instance", "assign_tuple_statement", 
		"lfs", "lfp", "indent", "dedent", "null_literal", "declaration_list", 
		"declarations", "declaration", "resource_declaration", "enum_declaration", 
		"native_symbol_list", "category_symbol_list", "symbol_list", "attribute_constraint", 
		"list_literal", "set_literal", "expression_list", "range_literal", "typedef", 
		"primary_type", "native_type", "category_type", "code_type", "document_type", 
		"category_declaration", "type_identifier_list", "method_identifier", "identifier", 
		"variable_identifier", "type_identifier", "symbol_identifier", "argument_list", 
		"argument", "operator_argument", "named_argument", "code_argument", "category_or_any_type", 
		"any_type", "member_method_declaration_list", "member_method_declaration", 
		"native_member_method_declaration_list", "native_member_method_declaration", 
		"native_category_binding", "python_category_binding", "python_module", 
		"module_token", "javascript_category_binding", "javascript_module", "variable_identifier_list", 
		"method_declaration", "native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "operator", 
		"key_token", "value_token", "symbols_token", "assign", "multiply", "divide", 
		"idivide", "modulo", "javascript_statement", "javascript_expression", 
		"javascript_primary_expression", "javascript_this_expression", "javascript_selector_expression", 
		"javascript_member_expression", "javascript_method_expression", "javascript_arguments", 
		"javascript_item_expression", "javascript_parenthesis_expression", "javascript_identifier_expression", 
		"javascript_literal_expression", "javascript_identifier", "python_statement", 
		"python_expression", "python_primary_expression", "python_selector_expression", 
		"python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
		"python_named_argument_list", "python_parenthesis_expression", "python_identifier_expression", 
		"python_literal_expression", "python_identifier", "java_statement", "java_expression", 
		"java_primary_expression", "java_this_expression", "java_selector_expression", 
		"java_method_expression", "java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_selector_expression", "csharp_method_expression", 
		"csharp_arguments", "csharp_item_expression", "csharp_parenthesis_expression", 
		"csharp_identifier_expression", "csharp_literal_expression", "csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'\t'", "' '", "'Java:'", "'C#:'", 
		"'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", "';'", 
		"','", "'..'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
		"'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
		"'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
		"'~'", "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", "'Integer'", 
		"'Decimal'", "'Date'", "'Time'", "'DateTime'", "'Period'", "'Method'", 
		"'Code'", "'Document'", "'abstract'", "'all'", "'always'", "'and'", "'any'", 
		"'as'", "'attr'", "'attribute'", "'attributes'", "'bindings'", "'case'", 
		"'catch'", "'category'", "'class'", "'close'", "'contains'", "'def'", 
		"'default'", "'define'", "'do'", "'doing'", "'each'", "'else'", "'enum'", 
		"'enumerated'", "'except'", "'execute'", "'expecting'", "'extends'", "'fetch'", 
		"'finally'", "'for'", "'from'", "'getter'", "'if'", "'in'", "'invoke'", 
		"'is'", "'matching'", "'method'", "'methods'", "'modulo'", "'mutable'", 
		"'native'", "'None'", "'not'", null, "'null'", "'on'", "'open'", "'operator'", 
		"'or'", "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", "'resource'", 
		"'return'", "'returning'", "'self'", "'setter'", "'singleton'", "'sorted'", 
		"'switch'", "'test'", "'this'", "'throw'", "'to'", "'try'", "'with'", 
		"'when'", "'where'", "'while'", "'write'", null, null, "'MIN_INTEGER'", 
		"'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", "TAB", "WS", "JAVA", 
		"CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", "SEMI", 
		"COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", "RCURL", 
		"QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
		"SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", "EQ", 
		"XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", "BOOLEAN", "CHARACTER", 
		"TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
		"CODE", "DOCUMENT", "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", "AS", "ATTR", 
		"ATTRIBUTE", "ATTRIBUTES", "BINDINGS", "CASE", "CATCH", "CATEGORY", "CLASS", 
		"CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DO", "DOING", "EACH", 
		"ELSE", "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", 
		"FETCH", "FINALLY", "FOR", "FROM", "GETTER", "IF", "IN", "INVOKE", "IS", 
		"MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", "NONE", 
		"NOT", "NOTHING", "NULL", "ON", "OPEN", "OPERATOR", "OR", "OTHERWISE", 
		"PASS", "RAISE", "READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", 
		"SELF", "SETTER", "SINGLETON", "SORTED", "SWITCH", "TEST", "THIS", "THROW", 
		"TO", "TRY", "WITH", "WHEN", "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
		"VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", "TEXT_LITERAL", 
		"INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
		"TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext derived;
		public Attribute_listContext attrs;
		public Category_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(ENUM);
			State = 381; _localctx.name = type_identifier();
			State = 382; Match(LPAR);
			State = 389;
			switch (TokenStream.La(1)) {
			case TYPE_IDENTIFIER:
				{
				State = 383; _localctx.derived = type_identifier();
				State = 386;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 384; Match(COMMA);
					State = 385; _localctx.attrs = attribute_list();
					}
				}

				}
				break;
			case VARIABLE_IDENTIFIER:
				{
				State = 388; _localctx.attrs = attribute_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 391; Match(RPAR);
			State = 392; Match(COLON);
			State = 393; indent();
			State = 394; _localctx.symbols = category_symbol_list(0);
			State = 395; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode ENUM() { return GetToken(SParser.ENUM, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(ENUM);
			State = 398; _localctx.name = type_identifier();
			State = 399; Match(LPAR);
			State = 400; _localctx.typ = native_type();
			State = 401; Match(RPAR);
			State = 402; Match(COLON);
			State = 403; indent();
			State = 404; _localctx.symbols = native_symbol_list(0);
			State = 405; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; _localctx.name = symbol_identifier();
			State = 408; Match(EQ);
			State = 409; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_category_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; _localctx.name = symbol_identifier();
			State = 412; Match(LPAR);
			State = 414;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 413; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 416; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public ITerminalNode ATTR() { return GetToken(SParser.ATTR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(ATTR);
			State = 419; _localctx.name = variable_identifier();
			State = 420; Match(LPAR);
			State = 421; _localctx.typ = typedef(0);
			State = 422; Match(RPAR);
			State = 423; Match(COLON);
			State = 424; indent();
			State = 427;
			switch (TokenStream.La(1)) {
			case IN:
			case MATCHING:
				{
				State = 425; _localctx.match = attribute_constraint();
				}
				break;
			case PASS:
				{
				State = 426; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 429; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Derived_listContext derived;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 432; _localctx.name = type_identifier();
			State = 433; Match(LPAR);
			State = 440;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 434; _localctx.derived = derived_list();
				}
				break;
			case 2:
				{
				State = 435; _localctx.attrs = attribute_list();
				}
				break;
			case 3:
				{
				State = 436; _localctx.derived = derived_list();
				State = 437; Match(COMMA);
				State = 438; _localctx.attrs = attribute_list();
				}
				break;
			}
			State = 442; Match(RPAR);
			State = 443; Match(COLON);
			State = 444; indent();
			State = 447;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 445; _localctx.methods = member_method_declaration_list(0);
				}
				break;
			case PASS:
				{
				State = 446; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 449; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Member_method_declaration_listContext methods;
		public ITerminalNode SINGLETON() { return GetToken(SParser.SINGLETON, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode PASS() { return GetToken(SParser.PASS, 0); }
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleton_category_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(SINGLETON);
			State = 452; _localctx.name = type_identifier();
			State = 453; Match(LPAR);
			State = 454; _localctx.attrs = attribute_list();
			State = 455; Match(RPAR);
			State = 456; Match(COLON);
			State = 457; indent();
			State = 460;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case DEF:
				{
				State = 458; _localctx.methods = member_method_declaration_list(0);
				}
				break;
			case PASS:
				{
				State = 459; Match(PASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 462; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Type_identifier_listContext items;
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDerived_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDerived_list(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		Derived_listContext _localctx = new Derived_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_derived_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; _localctx.items = type_identifier_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public OperatorContext op;
		public Operator_argumentContext arg;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode OPERATOR() { return GetToken(SParser.OPERATOR, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(DEF);
			State = 467; Match(OPERATOR);
			State = 468; _localctx.op = @operator();
			State = 469; Match(LPAR);
			State = 470; _localctx.arg = operator_argument();
			State = 471; Match(RPAR);
			State = 474;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 472; Match(RARROW);
				State = 473; _localctx.typ = typedef(0);
				}
			}

			State = 476; Match(COLON);
			State = 477; indent();
			State = 478; _localctx.stmts = statement_list(0);
			State = 479; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode SETTER() { return GetToken(SParser.SETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_setter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(DEF);
			State = 482; _localctx.name = variable_identifier();
			State = 483; Match(SETTER);
			State = 484; Match(LPAR);
			State = 485; Match(RPAR);
			State = 486; Match(COLON);
			State = 487; indent();
			State = 488; _localctx.stmts = statement_list(0);
			State = 489; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode GETTER() { return GetToken(SParser.GETTER, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_getter_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(DEF);
			State = 492; _localctx.name = variable_identifier();
			State = 493; Match(GETTER);
			State = 494; Match(LPAR);
			State = 495; Match(RPAR);
			State = 496; Match(COLON);
			State = 497; indent();
			State = 498; _localctx.stmts = statement_list(0);
			State = 499; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(NATIVE);
			State = 502;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 503; _localctx.name = type_identifier();
			State = 504; Match(LPAR);
			State = 506;
			_la = TokenStream.La(1);
			if (_la==VARIABLE_IDENTIFIER) {
				{
				State = 505; _localctx.attrs = attribute_list();
				}
			}

			State = 508; Match(RPAR);
			State = 509; Match(COLON);
			State = 510; indent();
			State = 511; _localctx.bindings = native_category_bindings();
			State = 515;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 512; lfp();
				State = 513; _localctx.methods = native_member_method_declaration_list(0);
				}
				break;
			}
			State = 517; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_bindingsContext bindings;
		public Native_member_method_declaration_listContext methods;
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(SParser.RESOURCE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_bindingsContext native_category_bindings() {
			return GetRuleContext<Native_category_bindingsContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_native_resource_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(NATIVE);
			State = 520; Match(RESOURCE);
			State = 521; _localctx.name = type_identifier();
			State = 522; Match(LPAR);
			State = 524;
			_la = TokenStream.La(1);
			if (_la==VARIABLE_IDENTIFIER) {
				{
				State = 523; _localctx.attrs = attribute_list();
				}
			}

			State = 526; Match(RPAR);
			State = 527; Match(COLON);
			State = 528; indent();
			State = 529; _localctx.bindings = native_category_bindings();
			State = 533;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 530; lfp();
				State = 531; _localctx.methods = native_member_method_declaration_list(0);
				}
				break;
			}
			State = 535; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingsContext : ParserRuleContext {
		public Native_category_binding_listContext items;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode BINDINGS() { return GetToken(SParser.BINDINGS, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SParser.CLASS, 0); }
		public ITerminalNode CATEGORY() { return GetToken(SParser.CATEGORY, 0); }
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_bindings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_category_bindings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_category_bindings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingsContext native_category_bindings() {
		Native_category_bindingsContext _localctx = new Native_category_bindingsContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_category_bindings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(DEF);
			State = 538;
			_la = TokenStream.La(1);
			if ( !(_la==CATEGORY || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 539; Match(BINDINGS);
			State = 540; Match(COLON);
			State = 541; indent();
			State = 542; _localctx.items = native_category_binding_list(0);
			State = 543; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_binding_listContext : ParserRuleContext {
		public Native_category_binding_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding_list; } }
	 
		public Native_category_binding_listContext() { }
		public virtual void CopyFrom(Native_category_binding_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryBindingListContext : Native_category_binding_listContext {
		public Native_category_bindingContext item;
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingList(this);
		}
	}
	public partial class NativeCategoryBindingListItemContext : Native_category_binding_listContext {
		public Native_category_binding_listContext items;
		public Native_category_bindingContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_category_binding_listContext native_category_binding_list() {
			return GetRuleContext<Native_category_binding_listContext>(0);
		}
		public Native_category_bindingContext native_category_binding() {
			return GetRuleContext<Native_category_bindingContext>(0);
		}
		public NativeCategoryBindingListItemContext(Native_category_binding_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryBindingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryBindingListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_binding_listContext native_category_binding_list() {
		return native_category_binding_list(0);
	}

	private Native_category_binding_listContext native_category_binding_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_binding_listContext _localctx = new Native_category_binding_listContext(Context, _parentState);
		Native_category_binding_listContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_native_category_binding_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryBindingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 546; ((NativeCategoryBindingListContext)_localctx).item = native_category_binding();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryBindingListItemContext(new Native_category_binding_listContext(_parentctx, _parentState));
					((NativeCategoryBindingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_binding_list);
					State = 548;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 549; lfp();
					State = 550; ((NativeCategoryBindingListItemContext)_localctx).item = native_category_binding();
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; _localctx.items = variable_identifier_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public ITerminalNode ABSTRACT() { return GetToken(SParser.ABSTRACT, 0); }
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(ABSTRACT);
			State = 560; Match(DEF);
			State = 561; _localctx.name = method_identifier();
			State = 562; Match(LPAR);
			State = 564;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 563; _localctx.args = argument_list(0);
				}
			}

			State = 566; Match(RPAR);
			State = 569;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 567; Match(RARROW);
				State = 568; _localctx.typ = typedef(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public TypedefContext typ;
		public Statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(DEF);
			State = 572; _localctx.name = method_identifier();
			State = 573; Match(LPAR);
			State = 575;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 574; _localctx.args = argument_list(0);
				}
			}

			State = 577; Match(RPAR);
			State = 580;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 578; Match(RARROW);
				State = 579; _localctx.typ = typedef(0);
				}
			}

			State = 582; Match(COLON);
			State = 583; indent();
			State = 584; _localctx.stmts = statement_list(0);
			State = 585; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public Method_identifierContext name;
		public Argument_listContext args;
		public Category_or_any_typeContext typ;
		public Native_statement_listContext stmts;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode NATIVE() { return GetToken(SParser.NATIVE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(SParser.RARROW, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; Match(DEF);
			State = 588; Match(NATIVE);
			State = 589; _localctx.name = method_identifier();
			State = 590; Match(LPAR);
			State = 592;
			_la = TokenStream.La(1);
			if (_la==CODE || _la==MUTABLE || _la==VARIABLE_IDENTIFIER) {
				{
				State = 591; _localctx.args = argument_list(0);
				}
			}

			State = 594; Match(RPAR);
			State = 597;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 595; Match(RARROW);
				State = 596; _localctx.typ = category_or_any_type();
				}
			}

			State = 599; Match(COLON);
			State = 600; indent();
			State = 601; _localctx.stmts = native_statement_list(0);
			State = 602; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode DEF() { return GetToken(SParser.DEF, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode EXPECTING() { return GetToken(SParser.EXPECTING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(DEF);
			State = 605; Match(TEST);
			State = 606; _localctx.name = Match(TEXT_LITERAL);
			State = 607; Match(LPAR);
			State = 608; Match(RPAR);
			State = 609; Match(COLON);
			State = 610; indent();
			State = 611; _localctx.stmts = statement_list(0);
			State = 612; dedent();
			State = 613; lfp();
			State = 614; Match(EXPECTING);
			State = 615; Match(COLON);
			State = 621;
			switch (TokenStream.La(1)) {
			case LF:
				{
				{
				State = 616; indent();
				State = 617; _localctx.exps = assertion_list(0);
				State = 618; dedent();
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				{
				State = 620; _localctx.error = symbol_identifier();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Category_or_any_typeContext typ;
		public Attribute_listContext attrs;
		public Literal_expressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 42, RULE_typed_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; _localctx.name = variable_identifier();
			State = 626; Match(COLON);
			State = 627; _localctx.typ = category_or_any_type();
			State = 632;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 628; Match(LPAR);
				State = 629; _localctx.attrs = attribute_list();
				State = 630; Match(RPAR);
				}
				break;
			}
			State = 636;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 634; Match(EQ);
				State = 635; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_callContext stmt;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		try {
			State = 653;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 638; ((MethodCallStatementContext)_localctx).stmt = method_call();
				}
				break;
			case 2:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 639; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 640; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 641; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 5:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 642; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 6:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 643; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 7:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 644; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 8:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 645; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 9:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 646; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 10:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 647; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 11:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 648; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 12:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 649; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 13:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 650; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 14:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 651; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 15:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 652; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		public Method_selectorContext method;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 46, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; _localctx.method = method_selector();
			State = 656; Match(LPAR);
			State = 658;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 657; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 660; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_selectorContext : ParserRuleContext {
		public Method_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_selector; } }
	 
		public Method_selectorContext() { }
		public virtual void CopyFrom(Method_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodNameContext : Method_selectorContext {
		public Method_identifierContext name;
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodNameContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}
	public partial class MethodParentContext : Method_selectorContext {
		public Callable_parentContext parent;
		public Method_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodParentContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodParent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodParent(this);
		}
	}

	[RuleVersion(0)]
	public Method_selectorContext method_selector() {
		Method_selectorContext _localctx = new Method_selectorContext(Context, State);
		EnterRule(_localctx, 48, RULE_method_selector);
		try {
			State = 667;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new MethodNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 662; ((MethodNameContext)_localctx).name = method_identifier();
				}
				break;
			case 2:
				_localctx = new MethodParentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; ((MethodParentContext)_localctx).parent = callable_parent(0);
				State = 664; Match(DOT);
				State = 665; ((MethodParentContext)_localctx).name = method_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_parentContext : ParserRuleContext {
		public Callable_parentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_parent; } }
	 
		public Callable_parentContext() { }
		public virtual void CopyFrom(Callable_parentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableRootContext : Callable_parentContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CallableRootContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableRoot(this);
		}
	}
	public partial class CallableSelectorContext : Callable_parentContext {
		public Callable_parentContext parent;
		public Callable_selectorContext select;
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Callable_selectorContext callable_selector() {
			return GetRuleContext<Callable_selectorContext>(0);
		}
		public CallableSelectorContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_parentContext callable_parent() {
		return callable_parent(0);
	}

	private Callable_parentContext callable_parent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Callable_parentContext _localctx = new Callable_parentContext(Context, _parentState);
		Callable_parentContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_callable_parent, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallableRootContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 670; ((CallableRootContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallableSelectorContext(new Callable_parentContext(_parentctx, _parentState));
					((CallableSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_callable_parent);
					State = 672;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 673; ((CallableSelectorContext)_localctx).select = callable_selector();
					}
					} 
				}
				State = 678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Callable_selectorContext : ParserRuleContext {
		public Callable_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_selector; } }
	 
		public Callable_selectorContext() { }
		public virtual void CopyFrom(Callable_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableItemSelectorContext : Callable_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallableItemSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableItemSelector(this);
		}
	}
	public partial class CallableMemberSelectorContext : Callable_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public CallableMemberSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCallableMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCallableMemberSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_selectorContext callable_selector() {
		Callable_selectorContext _localctx = new Callable_selectorContext(Context, State);
		EnterRule(_localctx, 52, RULE_callable_selector);
		try {
			State = 685;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CallableMemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 679; Match(DOT);
				State = 680; ((CallableMemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case LBRAK:
				_localctx = new CallableItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; Match(LBRAK);
				State = 682; ((CallableItemSelectorContext)_localctx).exp = expression(0);
				State = 683; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(WITH);
			State = 688; _localctx.stmt = assign_variable_statement();
			State = 689; Match(COLON);
			State = 690; indent();
			State = 691; _localctx.stmts = statement_list(0);
			State = 692; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_listContext stmts;
		public ITerminalNode WITH() { return GetToken(SParser.WITH, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(WITH);
			State = 695; _localctx.typ = type_identifier();
			State = 696; Match(COLON);
			State = 697; indent();
			State = 698; _localctx.stmts = statement_list(0);
			State = 699; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(SParser.SWITCH, 0); }
		public ITerminalNode ON() { return GetToken(SParser.ON, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(SParser.OTHERWISE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701; Match(SWITCH);
			State = 702; Match(ON);
			State = 703; _localctx.exp = expression(0);
			State = 704; Match(COLON);
			State = 705; indent();
			State = 706; _localctx.cases = switch_case_statement_list(0);
			State = 714;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 707; lfp();
				State = 708; Match(OTHERWISE);
				State = 709; Match(COLON);
				State = 710; indent();
				State = 711; _localctx.stmts = statement_list(0);
				State = 712; dedent();
				}
				break;
			}
			State = 716; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHEN() { return GetToken(SParser.WHEN, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_case_statement);
		try {
			State = 733;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 718; Match(WHEN);
				State = 719; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 720; Match(COLON);
				State = 721; indent();
				State = 722; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 723; dedent();
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 725; Match(WHEN);
				State = 726; Match(IN);
				State = 727; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 728; Match(COLON);
				State = 729; indent();
				State = 730; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list(0);
				State = 731; dedent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_listContext stmts;
		public ITerminalNode FOR() { return GetToken(SParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(FOR);
			State = 736; _localctx.name1 = variable_identifier();
			State = 739;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 737; Match(COMMA);
				State = 738; _localctx.name2 = variable_identifier();
				}
			}

			State = 741; Match(IN);
			State = 742; _localctx.source = expression(0);
			State = 743; Match(COLON);
			State = 744; indent();
			State = 745; _localctx.stmts = statement_list(0);
			State = 746; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(SParser.DO, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_do_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; Match(DO);
			State = 749; Match(COLON);
			State = 750; indent();
			State = 751; _localctx.stmts = statement_list(0);
			State = 752; dedent();
			State = 753; lfp();
			State = 754; Match(WHILE);
			State = 755; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(SParser.WHILE, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757; Match(WHILE);
			State = 758; _localctx.exp = expression(0);
			State = 759; Match(COLON);
			State = 760; indent();
			State = 761; _localctx.stmts = statement_list(0);
			State = 762; dedent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public LfpContext[] lfp() {
			return GetRuleContexts<LfpContext>();
		}
		public LfpContext lfp(int i) {
			return GetRuleContext<LfpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; Match(IF);
			State = 765; _localctx.exp = expression(0);
			State = 766; Match(COLON);
			State = 767; indent();
			State = 768; _localctx.stmts = statement_list(0);
			State = 769; dedent();
			State = 773;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 770; lfp();
				State = 771; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 782;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 775; lfp();
				State = 776; Match(ELSE);
				State = 777; Match(COLON);
				State = 778; indent();
				State = 779; _localctx.elseStmts = statement_list(0);
				State = 780; dedent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_listContext stmts;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 785; Match(ELSE);
			State = 786; Match(IF);
			State = 787; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 788; Match(COLON);
			State = 789; indent();
			State = 790; ((ElseIfStatementListContext)_localctx).stmts = statement_list(0);
			State = 791; dedent();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 805;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 793;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 794; lfp();
					State = 795; Match(ELSE);
					State = 796; Match(IF);
					State = 797; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 798; Match(COLON);
					State = 799; indent();
					State = 800; ((ElseIfStatementListItemContext)_localctx).stmts = statement_list(0);
					State = 801; dedent();
					}
					} 
				}
				State = 807;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RAISE() { return GetToken(SParser.RAISE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(RAISE);
			State = 809; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode TRY() { return GetToken(SParser.TRY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(SParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(SParser.COLON, i);
		}
		public IndentContext[] indent() {
			return GetRuleContexts<IndentContext>();
		}
		public IndentContext indent(int i) {
			return GetRuleContext<IndentContext>(i);
		}
		public DedentContext[] dedent() {
			return GetRuleContexts<DedentContext>();
		}
		public DedentContext dedent(int i) {
			return GetRuleContext<DedentContext>(i);
		}
		public LfsContext[] lfs() {
			return GetRuleContexts<LfsContext>();
		}
		public LfsContext lfs(int i) {
			return GetRuleContext<LfsContext>(i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode FINALLY() { return GetToken(SParser.FINALLY, 0); }
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_try_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(TRY);
			State = 812; _localctx.name = variable_identifier();
			State = 813; Match(COLON);
			State = 814; indent();
			State = 815; _localctx.stmts = statement_list(0);
			State = 816; dedent();
			State = 817; lfs();
			State = 819;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 818; _localctx.handlers = catch_statement_list(0);
				}
				break;
			}
			State = 828;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 821; Match(EXCEPT);
				State = 822; Match(COLON);
				State = 823; indent();
				State = 824; _localctx.anyStmts = statement_list(0);
				State = 825; dedent();
				State = 826; lfs();
				}
				break;
			}
			State = 837;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 830; Match(FINALLY);
				State = 831; Match(COLON);
				State = 832; indent();
				State = 833; _localctx.finalStmts = statement_list(0);
				State = 834; dedent();
				State = 835; lfs();
				}
				break;
			}
			State = 839; lfs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode EXCEPT() { return GetToken(SParser.EXCEPT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_catch_statement);
		try {
			State = 860;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 841; Match(EXCEPT);
				State = 842; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 843; Match(COLON);
				State = 844; indent();
				State = 845; ((CatchAtomicStatementContext)_localctx).stmts = statement_list(0);
				State = 846; dedent();
				State = 847; lfs();
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 849; Match(EXCEPT);
				State = 850; Match(IN);
				State = 851; Match(LBRAK);
				State = 852; ((CatchCollectionStatementContext)_localctx).exp = symbol_list(0);
				State = 853; Match(RBRAK);
				State = 854; Match(COLON);
				State = 855; indent();
				State = 856; ((CatchCollectionStatementContext)_localctx).stmts = statement_list(0);
				State = 857; dedent();
				State = 858; lfs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862; Match(RETURN);
			State = 864;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 863; _localctx.exp = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ifTrue;
		public ExpressionContext test;
		public ExpressionContext ifFalse;
		public ITerminalNode IF() { return GetToken(SParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SParser.ELSE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Closure_expressionContext exp;
		public Closure_expressionContext closure_expression() {
			return GetRuleContext<Closure_expressionContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(SParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ2() { return GetToken(SParser.EQ2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TEQ() { return GetToken(SParser.TEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode XEQ() { return GetToken(SParser.XEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Category_or_any_typeContext right;
		public ITerminalNode AS() { return GetToken(SParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public Method_expressionContext exp;
		public Method_expressionContext method_expression() {
			return GetRuleContext<Method_expressionContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(SParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(SParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(SParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(SParser.EXECUTE, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(SParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(SParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(SParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(SParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 867; Match(MINUS);
				State = 868; ((MinusExpressionContext)_localctx).exp = expression(31);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 869; Match(NOT);
				State = 870; ((NotExpressionContext)_localctx).exp = expression(30);
				}
				break;
			case 3:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 871; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new MethodExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 872; ((MethodExpressionContext)_localctx).exp = method_expression();
				}
				break;
			case 5:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 873; Match(CODE);
				State = 874; Match(LPAR);
				State = 875; ((CodeExpressionContext)_localctx).exp = expression(0);
				State = 876; Match(RPAR);
				}
				break;
			case 6:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 878; Match(EXECUTE);
				State = 879; Match(LPAR);
				State = 880; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				State = 881; Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 883; ((ClosureExpressionContext)_localctx).exp = closure_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 980;
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 886;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 887; multiply();
						State = 888; ((MultiplyExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 890;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 891; divide();
						State = 892; ((DivideExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 895; modulo();
						State = 896; ((ModuloExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 898;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 899; idivide();
						State = 900; ((IntDivideExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 902;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 903;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 904; ((AddExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 905;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 906; Match(LT);
						State = 907; ((LessThanExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 908;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 909; Match(LTE);
						State = 910; ((LessThanOrEqualExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 911;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 912; Match(GT);
						State = 913; ((GreaterThanExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 914;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 915; Match(GTE);
						State = 916; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 917;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 918; Match(EQ2);
						State = 919; ((EqualsExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 920;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 921; Match(XEQ);
						State = 922; ((NotEqualsExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 923;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 924; Match(TEQ);
						State = 925; ((RoughlyEqualsExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 926;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 927; Match(OR);
						State = 928; ((OrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 929;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 930; Match(AND);
						State = 931; ((AndExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ifTrue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 932;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 933; Match(IF);
						State = 934; ((TernaryExpressionContext)_localctx).test = expression(0);
						State = 935; Match(ELSE);
						State = 936; ((TernaryExpressionContext)_localctx).ifFalse = expression(14);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 938;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 939; Match(IN);
						State = 940; ((InExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 941;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 942; Match(CONTAINS);
						State = 943; ((ContainsExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 944;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 945; Match(CONTAINS);
						State = 946; Match(ALL);
						State = 947; ((ContainsAllExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 948;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 949; Match(CONTAINS);
						State = 950; Match(ANY);
						State = 951; ((ContainsAnyExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 952;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 953; Match(NOT);
						State = 954; Match(IN);
						State = 955; ((NotInExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 956;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 957; Match(NOT);
						State = 958; Match(CONTAINS);
						State = 959; ((NotContainsExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 960;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 961; Match(NOT);
						State = 962; Match(CONTAINS);
						State = 963; Match(ALL);
						State = 964; ((NotContainsAllExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 965;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 966; Match(NOT);
						State = 967; Match(CONTAINS);
						State = 968; Match(ANY);
						State = 969; ((NotContainsAnyExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 24:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 970;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 971; Match(IS);
						State = 972; Match(NOT);
						State = 973; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 25:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 974;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 975; Match(IS);
						State = 976; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 26:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 977;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 978; Match(AS);
						State = 979; ((CastExpressionContext)_localctx).right = category_or_any_type();
						}
						break;
					}
					} 
				}
				State = 984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Closure_expressionContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Closure_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closure_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterClosure_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitClosure_expression(this);
		}
	}

	[RuleVersion(0)]
	public Closure_expressionContext closure_expression() {
		Closure_expressionContext _localctx = new Closure_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_closure_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985; _localctx.name = type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Instance_selectorContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Instance_selectorContext instance_selector() {
			return GetRuleContext<Instance_selectorContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 988; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 994;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 990;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 991; ((SelectorExpressionContext)_localctx).selector = instance_selector();
					}
					} 
				}
				State = 996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_expressionContext : ParserRuleContext {
		public Method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_expression; } }
	 
		public Method_expressionContext() { }
		public virtual void CopyFrom(Method_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodCallExpressionContext : Method_expressionContext {
		public Method_callContext exp;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class SortedExpressionContext : Method_expressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}
	public partial class ReadExpressionContext : Method_expressionContext {
		public Read_expressionContext exp;
		public Read_expressionContext read_expression() {
			return GetRuleContext<Read_expressionContext>(0);
		}
		public ReadExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterReadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitReadExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : Method_expressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class FetchExpressionContext : Method_expressionContext {
		public Fetch_expressionContext exp;
		public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public FetchExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetchExpression(this);
		}
	}
	public partial class DocumentExpressionContext : Method_expressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}

	[RuleVersion(0)]
	public Method_expressionContext method_expression() {
		Method_expressionContext _localctx = new Method_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_method_expression);
		try {
			State = 1003;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				_localctx = new DocumentExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 997; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 2:
				_localctx = new FetchExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; ((FetchExpressionContext)_localctx).exp = fetch_expression();
				}
				break;
			case 3:
				_localctx = new ReadExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 999; ((ReadExpressionContext)_localctx).exp = read_expression();
				}
				break;
			case 4:
				_localctx = new SortedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1000; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 5:
				_localctx = new MethodCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001; ((MethodCallExpressionContext)_localctx).exp = method_call();
				}
				break;
			case 6:
				_localctx = new ConstructorExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1002; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_selectorContext : ParserRuleContext {
		public Instance_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_selector; } }
	 
		public Instance_selectorContext() { }
		public virtual void CopyFrom(Instance_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Instance_selectorContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Instance_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Instance_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Instance_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Instance_selectorContext instance_selector() {
		Instance_selectorContext _localctx = new Instance_selectorContext(Context, State);
		EnterRule(_localctx, 88, RULE_instance_selector);
		try {
			State = 1018;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1005;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1006; Match(DOT);
				State = 1007; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1008;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1009; Match(LBRAK);
				State = 1010; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1011; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1013;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1014; Match(LBRAK);
				State = 1015; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1016; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public Document_typeContext document_type() {
			return GetRuleContext<Document_typeContext>(0);
		}
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020; document_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Category_typeContext typ;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConstructor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConstructor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_constructor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			_la = TokenStream.La(1);
			if (_la==MUTABLE) {
				{
				State = 1022; Match(MUTABLE);
				}
			}

			State = 1025; _localctx.typ = category_type();
			State = 1026; Match(LPAR);
			State = 1028;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 1027; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 1030; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAssignmentListContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterExpressionAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitExpressionAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListContext : Argument_assignment_listContext {
		public Argument_assignmentContext item;
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : Argument_assignment_listContext {
		public Argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		return argument_assignment_list(0);
	}

	private Argument_assignment_listContext argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, _parentState);
		Argument_assignment_listContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				_localctx = new ExpressionAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1033; ((ExpressionAssignmentListContext)_localctx).exp = expression(0);
				State = 1034;
				if (!(this.willNotBe(this.equalToken()))) throw new FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
				}
				break;
			case 2:
				{
				_localctx = new ArgumentAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1036; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1044;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new Argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_assignment_list);
					State = 1039;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1040; Match(COMMA);
					State = 1041; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1046;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 96, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047; _localctx.name = variable_identifier();
			State = 1048; assign();
			State = 1049; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRead_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRead_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_expressionContext read_expression() {
		Read_expressionContext _localctx = new Read_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_read_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; Match(READ);
			State = 1052; Match(FROM);
			State = 1053; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TO() { return GetToken(SParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 100, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; Match(WRITE);
			State = 1056; _localctx.what = expression(0);
			State = 1057; Match(TO);
			State = 1058; _localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(SParser.FETCH, 0); }
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(SParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFetch_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFetch_expression(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_fetch_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; Match(FETCH);
			State = 1061; _localctx.name = variable_identifier();
			State = 1062; Match(FROM);
			State = 1063; _localctx.source = expression(0);
			State = 1064; Match(WHERE);
			State = 1065; _localctx.xfilter = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(SParser.SORTED, 0); }
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067; Match(SORTED);
			State = 1068; Match(LPAR);
			State = 1069; _localctx.source = instance_expression(0);
			State = 1075;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1070; Match(COMMA);
				State = 1071; key_token();
				State = 1072; Match(EQ);
				State = 1073; _localctx.key = instance_expression(0);
				}
			}

			State = 1077; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1079; _localctx.inst = assignable_instance(0);
			State = 1080; assign();
			State = 1081; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 108, RULE_child_instance);
		try {
			State = 1091;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1083;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1084; Match(DOT);
				State = 1085; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1086;
				if (!(this.wasNot(SParser.WS))) throw new FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
				State = 1087; Match(LBRAK);
				State = 1088; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1089; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 110, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093; _localctx.items = variable_identifier_list(0);
			State = 1094; assign();
			State = 1095; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 112, RULE_lfs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1097; Match(LF);
					}
					} 
				}
				State = 1102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 114, RULE_lfp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1103; Match(LF);
				}
				}
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(SParser.INDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 116, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1108; Match(LF);
				}
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==LF );
			State = 1113; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public ITerminalNode DEDENT() { return GetToken(SParser.DEDENT, 0); }
		public ITerminalNode[] LF() { return GetTokens(SParser.LF); }
		public ITerminalNode LF(int i) {
			return GetToken(SParser.LF, i);
		}
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 118, RULE_dedent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LF) {
				{
				{
				State = 1115; Match(LF);
				}
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1121; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NONE() { return GetToken(SParser.NONE, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 120, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123; Match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public DeclarationsContext items;
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			_la = TokenStream.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (ABSTRACT - 61)) | (1L << (ATTR - 61)) | (1L << (CATEGORY - 61)) | (1L << (CLASS - 61)) | (1L << (DEF - 61)) | (1L << (ENUM - 61)) | (1L << (NATIVE - 61)) | (1L << (SINGLETON - 61)))) != 0)) {
				{
				State = 1125; ((FullDeclarationListContext)_localctx).items = declarations(0);
				}
			}

			State = 1128; lfs();
			State = 1129; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationListContext : DeclarationsContext {
		public DeclarationContext item;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
	}
	public partial class DeclarationListItemContext : DeclarationsContext {
		public DeclarationsContext items;
		public DeclarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListItemContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDeclarationListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDeclarationListItem(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(Context, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DeclarationListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1132; ((DeclarationListContext)_localctx).item = declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListItemContext(new DeclarationsContext(_parentctx, _parentState));
					((DeclarationListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_declarations);
					State = 1134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1135; lfp();
					State = 1136; ((DeclarationListItemContext)_localctx).item = declaration();
					}
					} 
				}
				State = 1142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryDeclarationContext : DeclarationContext {
		public Category_declarationContext decl;
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public CategoryDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryDeclaration(this);
		}
	}
	public partial class ResourceDeclarationContext : DeclarationContext {
		public Resource_declarationContext decl;
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public ResourceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterResourceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitResourceDeclaration(this);
		}
	}
	public partial class AttributeDeclarationContext : DeclarationContext {
		public Attribute_declarationContext decl;
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public AttributeDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
	}
	public partial class MethodDeclarationContext : DeclarationContext {
		public Method_declarationContext decl;
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public MethodDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}
	public partial class EnumDeclarationContext : DeclarationContext {
		public Enum_declarationContext decl;
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public EnumDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_declaration);
		try {
			State = 1148;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				_localctx = new AttributeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1143; ((AttributeDeclarationContext)_localctx).decl = attribute_declaration();
				}
				break;
			case 2:
				_localctx = new CategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1144; ((CategoryDeclarationContext)_localctx).decl = category_declaration();
				}
				break;
			case 3:
				_localctx = new ResourceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1145; ((ResourceDeclarationContext)_localctx).decl = resource_declaration();
				}
				break;
			case 4:
				_localctx = new EnumDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1146; ((EnumDeclarationContext)_localctx).decl = enum_declaration();
				}
				break;
			case 5:
				_localctx = new MethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1147; ((MethodDeclarationContext)_localctx).decl = method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext decl;
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150; _localctx.decl = native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
	 
		public Enum_declarationContext() { }
		public virtual void CopyFrom(Enum_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumNativeDeclarationContext : Enum_declarationContext {
		public Enum_native_declarationContext decl;
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public EnumNativeDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumNativeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumNativeDeclaration(this);
		}
	}
	public partial class EnumCategoryDeclarationContext : Enum_declarationContext {
		public Enum_category_declarationContext decl;
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public EnumCategoryDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterEnumCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitEnumCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_enum_declaration);
		try {
			State = 1154;
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				_localctx = new EnumCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152; ((EnumCategoryDeclarationContext)_localctx).decl = enum_category_declaration();
				}
				break;
			case 2:
				_localctx = new EnumNativeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1153; ((EnumNativeDeclarationContext)_localctx).decl = enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
	 
		public Native_symbol_listContext() { }
		public virtual void CopyFrom(Native_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeSymbolListContext : Native_symbol_listContext {
		public Native_symbolContext item;
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolList(this);
		}
	}
	public partial class NativeSymbolListItemContext : Native_symbol_listContext {
		public Native_symbol_listContext items;
		public Native_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListItemContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		return native_symbol_list(0);
	}

	private Native_symbol_listContext native_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, _parentState);
		Native_symbol_listContext _prevctx = _localctx;
		int _startState = 132;
		EnterRecursionRule(_localctx, 132, RULE_native_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeSymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1157; ((NativeSymbolListContext)_localctx).item = native_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeSymbolListItemContext(new Native_symbol_listContext(_parentctx, _parentState));
					((NativeSymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_symbol_list);
					State = 1159;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1160; lfp();
					State = 1161; ((NativeSymbolListItemContext)_localctx).item = native_symbol();
					}
					} 
				}
				State = 1167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
	 
		public Category_symbol_listContext() { }
		public virtual void CopyFrom(Category_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategorySymbolListItemContext : Category_symbol_listContext {
		public Category_symbol_listContext items;
		public Category_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListItemContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolListItem(this);
		}
	}
	public partial class CategorySymbolListContext : Category_symbol_listContext {
		public Category_symbolContext item;
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolList(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		return category_symbol_list(0);
	}

	private Category_symbol_listContext category_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, _parentState);
		Category_symbol_listContext _prevctx = _localctx;
		int _startState = 134;
		EnterRecursionRule(_localctx, 134, RULE_category_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategorySymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1169; ((CategorySymbolListContext)_localctx).item = category_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategorySymbolListItemContext(new Category_symbol_listContext(_parentctx, _parentState));
					((CategorySymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_category_symbol_list);
					State = 1171;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1172; lfp();
					State = 1173; ((CategorySymbolListItemContext)_localctx).item = category_symbol();
					}
					} 
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
	 
		public Symbol_listContext() { }
		public virtual void CopyFrom(Symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolListContext : Symbol_listContext {
		public Symbol_identifierContext item;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
	}
	public partial class SymbolListItemContext : Symbol_listContext {
		public Symbol_listContext items;
		public Symbol_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListItemContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		return symbol_list(0);
	}

	private Symbol_listContext symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_listContext _localctx = new Symbol_listContext(Context, _parentState);
		Symbol_listContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1181; ((SymbolListContext)_localctx).item = symbol_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SymbolListItemContext(new Symbol_listContext(_parentctx, _parentState));
					((SymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_list);
					State = 1183;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1184; Match(COMMA);
					State = 1185; ((SymbolListItemContext)_localctx).item = symbol_identifier();
					}
					} 
				}
				State = 1190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(SParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(SParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 138, RULE_attribute_constraint);
		try {
			State = 1201;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1191; Match(IN);
				State = 1192; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1193; Match(IN);
				State = 1194; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1195; Match(IN);
				State = 1196; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1197; Match(MATCHING);
				State = 1198; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1199; Match(MATCHING);
				State = 1200; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 140, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203; Match(LBRAK);
			State = 1205;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 1204; _localctx.items = expression_list(0);
				}
			}

			State = 1207; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 142, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; Match(LT);
			State = 1211;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 1210; _localctx.items = expression_list(0);
				}
			}

			State = 1213; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	 
		public Expression_listContext() { }
		public virtual void CopyFrom(Expression_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueListItemContext : Expression_listContext {
		public Expression_listContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListItemContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueListItem(this);
		}
	}
	public partial class ValueListContext : Expression_listContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 144;
		EnterRecursionRule(_localctx, 144, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1216; ((ValueListContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueListItemContext(new Expression_listContext(_parentctx, _parentState));
					((ValueListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 1218;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1219; Match(COMMA);
					State = 1220; ((ValueListItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 146, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226; Match(LBRAK);
			State = 1227; _localctx.low = expression(0);
			State = 1228; Match(RANGE);
			State = 1229; _localctx.high = expression(0);
			State = 1230; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(SParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 148;
		EnterRecursionRule(_localctx, 148, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1233; ((PrimaryTypeContext)_localctx).p = primary_type();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1243;
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1235;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1236; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1237;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1238; Match(LBRAK);
						State = 1239; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1240;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1241; Match(LCURL);
						State = 1242; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 150, RULE_primary_type);
		try {
			State = 1250;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 152, RULE_native_type);
		try {
			State = 1262;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1252; ((BooleanTypeContext)_localctx).t1 = Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1253; ((CharacterTypeContext)_localctx).t1 = Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1254; ((TextTypeContext)_localctx).t1 = Match(TEXT);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1255; ((IntegerTypeContext)_localctx).t1 = Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1256; ((DecimalTypeContext)_localctx).t1 = Match(DECIMAL);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1257; ((DateTypeContext)_localctx).t1 = Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1258; ((DateTimeTypeContext)_localctx).t1 = Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1259; ((TimeTypeContext)_localctx).t1 = Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1260; ((PeriodTypeContext)_localctx).t1 = Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1261; ((CodeTypeContext)_localctx).t1 = Match(CODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 154, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(SParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode DOCUMENT() { return GetToken(SParser.DOCUMENT, 0); }
		public Document_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDocument_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDocument_type(this);
		}
	}

	[RuleVersion(0)]
	public Document_typeContext document_type() {
		Document_typeContext _localctx = new Document_typeContext(Context, State);
		EnterRule(_localctx, 158, RULE_document_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; _localctx.t1 = Match(DOCUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 160, RULE_category_declaration);
		try {
			State = 1273;
			switch (TokenStream.La(1)) {
			case CATEGORY:
			case CLASS:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1270; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case NATIVE:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1271; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case SINGLETON:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1272; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
	 
		public Type_identifier_listContext() { }
		public virtual void CopyFrom(Type_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierListItemContext : Type_identifier_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListItemContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierListItem(this);
		}
	}
	public partial class TypeIdentifierListContext : Type_identifier_listContext {
		public Type_identifierContext item;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		return type_identifier_list(0);
	}

	private Type_identifier_listContext type_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, _parentState);
		Type_identifier_listContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_type_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TypeIdentifierListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1276; ((TypeIdentifierListContext)_localctx).item = type_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdentifierListItemContext(new Type_identifier_listContext(_parentctx, _parentState));
					((TypeIdentifierListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type_identifier_list);
					State = 1278;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1279; Match(COMMA);
					State = 1280; ((TypeIdentifierListItemContext)_localctx).item = type_identifier();
					}
					} 
				}
				State = 1285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
	 
		public Method_identifierContext() { }
		public virtual void CopyFrom(Method_identifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodVariableIdentifierContext : Method_identifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MethodVariableIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodVariableIdentifier(this);
		}
	}
	public partial class MethodTypeIdentifierContext : Method_identifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public MethodTypeIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMethodTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMethodTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_method_identifier);
		try {
			State = 1288;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new MethodVariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1286; ((MethodVariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new MethodTypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1287; ((MethodTypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext name;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_identifier);
		try {
			State = 1293;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290; ((VariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1291; ((TypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1292; ((SymbolIdentifierContext)_localctx).name = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	 
		public Argument_listContext() { }
		public virtual void CopyFrom(Argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentListItemContext : Argument_listContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListItemContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentListItem(this);
		}
	}
	public partial class ArgumentListContext : Argument_listContext {
		public ArgumentContext item;
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 174;
		EnterRecursionRule(_localctx, 174, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1302; ((ArgumentListContext)_localctx).item = argument();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListItemContext(new Argument_listContext(_parentctx, _parentState));
					((ArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 1304;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1305; Match(COMMA);
					State = 1306; ((ArgumentListItemContext)_localctx).item = argument();
					}
					} 
				}
				State = 1311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public ITerminalNode MUTABLE() { return GetToken(SParser.MUTABLE, 0); }
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 176, RULE_argument);
		int _la;
		try {
			State = 1317;
			switch (TokenStream.La(1)) {
			case CODE:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1312; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case MUTABLE:
			case VARIABLE_IDENTIFIER:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1314;
				_la = TokenStream.La(1);
				if (_la==MUTABLE) {
					{
					State = 1313; Match(MUTABLE);
					}
				}

				State = 1316; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
	 
		public Operator_argumentContext() { }
		public virtual void CopyFrom(Operator_argumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedArgumentContext : Operator_argumentContext {
		public Named_argumentContext arg;
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public NamedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}
	public partial class TypedArgumentContext : Operator_argumentContext {
		public Typed_argumentContext arg;
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public TypedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTypedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTypedArgument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 178, RULE_operator_argument);
		try {
			State = 1321;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1319; ((NamedArgumentContext)_localctx).arg = named_argument();
				}
				break;
			case 2:
				_localctx = new TypedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1320; ((TypedArgumentContext)_localctx).arg = typed_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Literal_expressionContext value;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 180, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323; _localctx.name = variable_identifier();
			State = 1326;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1324; Match(EQ);
				State = 1325; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 182, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328; code_type();
			State = 1329; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
	 
		public Category_or_any_typeContext() { }
		public virtual void CopyFrom(Category_or_any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyArgumentTypeContext : Category_or_any_typeContext {
		public Any_typeContext typ;
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyArgumentType(this);
		}
	}
	public partial class CategoryArgumentTypeContext : Category_or_any_typeContext {
		public TypedefContext typ;
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CategoryArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryArgumentType(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 184, RULE_category_or_any_type);
		try {
			State = 1333;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case TYPE_IDENTIFIER:
				_localctx = new CategoryArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; ((CategoryArgumentTypeContext)_localctx).typ = typedef(0);
				}
				break;
			case ANY:
				_localctx = new AnyArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332; ((AnyArgumentTypeContext)_localctx).typ = any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(SParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1336; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1344;
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyListTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1338;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1339; Match(LBRAK);
						State = 1340; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyDictTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1341;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1342; Match(LCURL);
						State = 1343; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declaration_listContext : ParserRuleContext {
		public Member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration_list; } }
	 
		public Member_method_declaration_listContext() { }
		public virtual void CopyFrom(Member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryMethodListContext : Member_method_declaration_listContext {
		public Member_method_declarationContext item;
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodList(this);
		}
	}
	public partial class CategoryMethodListItemContext : Member_method_declaration_listContext {
		public Member_method_declaration_listContext items;
		public Member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Member_method_declaration_listContext member_method_declaration_list() {
			return GetRuleContext<Member_method_declaration_listContext>(0);
		}
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public CategoryMethodListItemContext(Member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodListItem(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declaration_listContext member_method_declaration_list() {
		return member_method_declaration_list(0);
	}

	private Member_method_declaration_listContext member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Member_method_declaration_listContext _localctx = new Member_method_declaration_listContext(Context, _parentState);
		Member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1350; ((CategoryMethodListContext)_localctx).item = member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategoryMethodListItemContext(new Member_method_declaration_listContext(_parentctx, _parentState));
					((CategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_member_method_declaration_list);
					State = 1352;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1353; lfp();
					State = 1354; ((CategoryMethodListItemContext)_localctx).item = member_method_declaration();
					}
					} 
				}
				State = 1360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 190, RULE_member_method_declaration);
		try {
			State = 1366;
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1361; setter_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1362; getter_method_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1363; concrete_method_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1364; abstract_method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1365; operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_member_method_declaration_listContext : ParserRuleContext {
		public Native_member_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration_list; } }
	 
		public Native_member_method_declaration_listContext() { }
		public virtual void CopyFrom(Native_member_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryMethodListContext : Native_member_method_declaration_listContext {
		public Native_member_method_declarationContext item;
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodList(this);
		}
	}
	public partial class NativeCategoryMethodListItemContext : Native_member_method_declaration_listContext {
		public Native_member_method_declaration_listContext items;
		public Native_member_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_member_method_declaration_listContext native_member_method_declaration_list() {
			return GetRuleContext<Native_member_method_declaration_listContext>(0);
		}
		public Native_member_method_declarationContext native_member_method_declaration() {
			return GetRuleContext<Native_member_method_declarationContext>(0);
		}
		public NativeCategoryMethodListItemContext(Native_member_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMethodListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declaration_listContext native_member_method_declaration_list() {
		return native_member_method_declaration_list(0);
	}

	private Native_member_method_declaration_listContext native_member_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_member_method_declaration_listContext _localctx = new Native_member_method_declaration_listContext(Context, _parentState);
		Native_member_method_declaration_listContext _prevctx = _localctx;
		int _startState = 192;
		EnterRecursionRule(_localctx, 192, RULE_native_member_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1369; ((NativeCategoryMethodListContext)_localctx).item = native_member_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryMethodListItemContext(new Native_member_method_declaration_listContext(_parentctx, _parentState));
					((NativeCategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_member_method_declaration_list);
					State = 1371;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1372; lfp();
					State = 1373; ((NativeCategoryMethodListItemContext)_localctx).item = native_member_method_declaration();
					}
					} 
				}
				State = 1379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_member_method_declarationContext : ParserRuleContext {
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public Native_member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNative_member_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNative_member_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_member_method_declarationContext native_member_method_declaration() {
		Native_member_method_declarationContext _localctx = new Native_member_method_declarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_native_member_method_declaration);
		try {
			State = 1382;
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1380; member_method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1381; native_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_bindingContext : ParserRuleContext {
		public Native_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_binding; } }
	 
		public Native_category_bindingContext() { }
		public virtual void CopyFrom(Native_category_bindingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python2CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryBinding(this);
		}
	}
	public partial class CSharpCategoryBindingContext : Native_category_bindingContext {
		public Csharp_identifier_expressionContext binding;
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryBinding(this);
		}
	}
	public partial class JavaScriptCategoryBindingContext : Native_category_bindingContext {
		public Javascript_category_bindingContext binding;
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_category_bindingContext javascript_category_binding() {
			return GetRuleContext<Javascript_category_bindingContext>(0);
		}
		public JavaScriptCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryBinding(this);
		}
	}
	public partial class JavaCategoryBindingContext : Native_category_bindingContext {
		public Java_class_identifier_expressionContext binding;
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryBinding(this);
		}
	}
	public partial class Python3CategoryBindingContext : Native_category_bindingContext {
		public Python_category_bindingContext binding;
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_category_bindingContext python_category_binding() {
			return GetRuleContext<Python_category_bindingContext>(0);
		}
		public Python3CategoryBindingContext(Native_category_bindingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryBinding(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_bindingContext native_category_binding() {
		Native_category_bindingContext _localctx = new Native_category_bindingContext(Context, State);
		EnterRule(_localctx, 196, RULE_native_category_binding);
		try {
			State = 1394;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1384; Match(JAVA);
				State = 1385; ((JavaCategoryBindingContext)_localctx).binding = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1386; Match(CSHARP);
				State = 1387; ((CSharpCategoryBindingContext)_localctx).binding = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1388; Match(PYTHON2);
				State = 1389; ((Python2CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1390; Match(PYTHON3);
				State = 1391; ((Python3CategoryBindingContext)_localctx).binding = python_category_binding();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryBindingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1392; Match(JAVASCRIPT);
				State = 1393; ((JavaScriptCategoryBindingContext)_localctx).binding = javascript_category_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Python_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_bindingContext python_category_binding() {
		Python_category_bindingContext _localctx = new Python_category_bindingContext(Context, State);
		EnterRule(_localctx, 198, RULE_python_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396; _localctx.id_ = identifier();
			State = 1398;
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1397; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 200, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400; Match(FROM);
			State = 1401; module_token();
			State = 1402; Match(COLON);
			State = 1403; identifier();
			State = 1408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1404; Match(DOT);
					State = 1405; identifier();
					}
					} 
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 202, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1412;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_bindingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Javascript_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_binding(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_bindingContext javascript_category_binding() {
		Javascript_category_bindingContext _localctx = new Javascript_category_bindingContext(Context, State);
		EnterRule(_localctx, 204, RULE_javascript_category_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414; _localctx.id_ = identifier();
			State = 1416;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1415; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(SParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(SParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 206, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418; Match(FROM);
			State = 1419; module_token();
			State = 1420; Match(COLON);
			State = 1422;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1421; Match(SLASH);
				}
			}

			State = 1424; javascript_identifier();
			State = 1429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1425; Match(SLASH);
					State = 1426; javascript_identifier();
					}
					} 
				}
				State = 1431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			State = 1434;
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1432; Match(DOT);
				State = 1433; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
	 
		public Variable_identifier_listContext() { }
		public virtual void CopyFrom(Variable_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableListContext : Variable_identifier_listContext {
		public Variable_identifierContext item;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
	}
	public partial class VariableListItemContext : Variable_identifier_listContext {
		public Variable_identifier_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListItemContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterVariableListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitVariableListItem(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		return variable_identifier_list(0);
	}

	private Variable_identifier_listContext variable_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, _parentState);
		Variable_identifier_listContext _prevctx = _localctx;
		int _startState = 208;
		EnterRecursionRule(_localctx, 208, RULE_variable_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new VariableListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1437; ((VariableListContext)_localctx).item = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableListItemContext(new Variable_identifier_listContext(_parentctx, _parentState));
					((VariableListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_variable_identifier_list);
					State = 1439;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1440; Match(COMMA);
					State = 1441; ((VariableListItemContext)_localctx).item = variable_identifier();
					}
					} 
				}
				State = 1446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
	 
		public Method_declarationContext() { }
		public virtual void CopyFrom(Method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteMethodContext : Method_declarationContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ConcreteMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterConcreteMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitConcreteMethod(this);
		}
	}
	public partial class TestMethodContext : Method_declarationContext {
		public Test_method_declarationContext decl;
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public TestMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTestMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTestMethod(this);
		}
	}
	public partial class AbstractMethodContext : Method_declarationContext {
		public Abstract_method_declarationContext decl;
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public AbstractMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAbstractMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAbstractMethod(this);
		}
	}
	public partial class NativeMethodContext : Method_declarationContext {
		public Native_method_declarationContext decl;
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public NativeMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeMethod(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_method_declaration);
		try {
			State = 1451;
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				_localctx = new AbstractMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1447; ((AbstractMethodContext)_localctx).decl = abstract_method_declaration();
				}
				break;
			case 2:
				_localctx = new ConcreteMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1448; ((ConcreteMethodContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 3:
				_localctx = new NativeMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1449; ((NativeMethodContext)_localctx).decl = native_method_declaration();
				}
				break;
			case 4:
				_localctx = new TestMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1450; ((TestMethodContext)_localctx).decl = test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
	 
		public Native_statement_listContext() { }
		public virtual void CopyFrom(Native_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeStatementListContext : Native_statement_listContext {
		public Native_statementContext item;
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementList(this);
		}
	}
	public partial class NativeStatementListItemContext : Native_statement_listContext {
		public Native_statement_listContext items;
		public Native_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListItemContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		return native_statement_list(0);
	}

	private Native_statement_listContext native_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, _parentState);
		Native_statement_listContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_native_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1454; ((NativeStatementListContext)_localctx).item = native_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeStatementListItemContext(new Native_statement_listContext(_parentctx, _parentState));
					((NativeStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_statement_list);
					State = 1456;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1457; lfp();
					State = 1458; ((NativeStatementListItemContext)_localctx).item = native_statement();
					}
					} 
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON2() { return GetToken(SParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public Csharp_statementContext stmt;
		public ITerminalNode CSHARP() { return GetToken(SParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public Java_statementContext stmt;
		public ITerminalNode JAVA() { return GetToken(SParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public Javascript_native_statementContext stmt;
		public ITerminalNode JAVASCRIPT() { return GetToken(SParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON3() { return GetToken(SParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 214, RULE_native_statement);
		try {
			State = 1475;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465; Match(JAVA);
				State = 1466; ((JavaNativeStatementContext)_localctx).stmt = java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1467; Match(CSHARP);
				State = 1468; ((CSharpNativeStatementContext)_localctx).stmt = csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1469; Match(PYTHON2);
				State = 1470; ((Python2NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1471; Match(PYTHON3);
				State = 1472; ((Python3NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1473; Match(JAVASCRIPT);
				State = 1474; ((JavaScriptNativeStatementContext)_localctx).stmt = javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext stmt;
		public Python_moduleContext module;
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 216, RULE_python_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; _localctx.stmt = python_statement();
			State = 1479;
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1478; Match(SEMI);
				}
				break;
			}
			State = 1482;
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1481; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext stmt;
		public Javascript_moduleContext module;
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 218, RULE_javascript_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484; _localctx.stmt = javascript_statement();
			State = 1486;
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1485; Match(SEMI);
				}
				break;
			}
			State = 1489;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1488; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
	 
		public Statement_listContext() { }
		public virtual void CopyFrom(Statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementListItemContext : Statement_listContext {
		public Statement_listContext items;
		public StatementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListItemContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStatementListItem(this);
		}
	}
	public partial class StatementListContext : Statement_listContext {
		public StatementContext item;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new StatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1492; ((StatementListContext)_localctx).item = statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1500;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementListItemContext(new Statement_listContext(_parentctx, _parentState));
					((StatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 1494;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1495; lfp();
					State = 1496; ((StatementListItemContext)_localctx).item = statement();
					}
					} 
				}
				State = 1502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
	 
		public Assertion_listContext() { }
		public virtual void CopyFrom(Assertion_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssertionListItemContext : Assertion_listContext {
		public Assertion_listContext items;
		public AssertionContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListItemContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertionListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertionListItem(this);
		}
	}
	public partial class AssertionListContext : Assertion_listContext {
		public AssertionContext item;
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssertionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssertionList(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		return assertion_list(0);
	}

	private Assertion_listContext assertion_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assertion_listContext _localctx = new Assertion_listContext(Context, _parentState);
		Assertion_listContext _prevctx = _localctx;
		int _startState = 222;
		EnterRecursionRule(_localctx, 222, RULE_assertion_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AssertionListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1504; ((AssertionListContext)_localctx).item = assertion();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssertionListItemContext(new Assertion_listContext(_parentctx, _parentState));
					((AssertionListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assertion_list);
					State = 1506;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1507; lfp();
					State = 1508; ((AssertionListItemContext)_localctx).item = assertion();
					}
					} 
				}
				State = 1514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
	 
		public Switch_case_statement_listContext() { }
		public virtual void CopyFrom(Switch_case_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseStatementListItemContext : Switch_case_statement_listContext {
		public Switch_case_statement_listContext items;
		public Switch_case_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListItemContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementListItem(this);
		}
	}
	public partial class SwitchCaseStatementListContext : Switch_case_statement_listContext {
		public Switch_case_statementContext item;
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		return switch_case_statement_list(0);
	}

	private Switch_case_statement_listContext switch_case_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, _parentState);
		Switch_case_statement_listContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_switch_case_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SwitchCaseStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1516; ((SwitchCaseStatementListContext)_localctx).item = switch_case_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1524;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SwitchCaseStatementListItemContext(new Switch_case_statement_listContext(_parentctx, _parentState));
					((SwitchCaseStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_switch_case_statement_list);
					State = 1518;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1519; lfp();
					State = 1520; ((SwitchCaseStatementListItemContext)_localctx).item = switch_case_statement();
					}
					} 
				}
				State = 1526;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
	 
		public Catch_statement_listContext() { }
		public virtual void CopyFrom(Catch_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchStatementListContext : Catch_statement_listContext {
		public Catch_statementContext item;
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementList(this);
		}
	}
	public partial class CatchStatementListItemContext : Catch_statement_listContext {
		public Catch_statement_listContext items;
		public Catch_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListItemContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		return catch_statement_list(0);
	}

	private Catch_statement_listContext catch_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, _parentState);
		Catch_statement_listContext _prevctx = _localctx;
		int _startState = 226;
		EnterRecursionRule(_localctx, 226, RULE_catch_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CatchStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1528; ((CatchStatementListContext)_localctx).item = catch_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1536;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CatchStatementListItemContext(new Catch_statement_listContext(_parentctx, _parentState));
					((CatchStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_catch_statement_list);
					State = 1530;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1531; lfp();
					State = 1532; ((CatchStatementListItemContext)_localctx).item = catch_statement();
					}
					} 
				}
				State = 1538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LT() { return GetToken(SParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SParser.GT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(SParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 228, RULE_literal_collection);
		try {
			State = 1553;
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1539; Match(LBRAK);
				State = 1540; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1541; Match(RANGE);
				State = 1542; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1543; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545; Match(LBRAK);
				State = 1546; ((LiteralListLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1547; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1549; Match(LT);
				State = 1550; ((LiteralSetLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1551; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(SParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(SParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(SParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(SParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(SParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(SParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(SParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 230, RULE_atomic_literal);
		try {
			State = 1568;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1558; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1559; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1560; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1561; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1562; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1563; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1564; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1565; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1566; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case NONE:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1567; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
	 
		public Literal_list_literalContext() { }
		public virtual void CopyFrom(Literal_list_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListContext : Literal_list_literalContext {
		public Atomic_literalContext item;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}
	public partial class LiteralListItemContext : Literal_list_literalContext {
		public Literal_list_literalContext items;
		public Atomic_literalContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListItemContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralListItem(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		return literal_list_literal(0);
	}

	private Literal_list_literalContext literal_list_literal(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, _parentState);
		Literal_list_literalContext _prevctx = _localctx;
		int _startState = 232;
		EnterRecursionRule(_localctx, 232, RULE_literal_list_literal, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LiteralListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1571; ((LiteralListContext)_localctx).item = atomic_literal();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1578;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LiteralListItemContext(new Literal_list_literalContext(_parentctx, _parentState));
					((LiteralListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_literal_list_literal);
					State = 1573;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1574; Match(COMMA);
					State = 1575; ((LiteralListItemContext)_localctx).item = atomic_literal();
					}
					} 
				}
				State = 1580;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_selectable_expression);
		try {
			State = 1585;
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1581; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1582; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1583; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1584; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 236, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 238, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(LPAR);
			State = 1590; _localctx.exp = expression(0);
			State = 1591; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
	 
		public Literal_expressionContext() { }
		public virtual void CopyFrom(Literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CollectionLiteralContext : Literal_expressionContext {
		public Collection_literalContext exp;
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public CollectionLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCollectionLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCollectionLiteral(this);
		}
	}
	public partial class AtomicLiteralContext : Literal_expressionContext {
		public Atomic_literalContext exp;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public AtomicLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAtomicLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAtomicLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_literal_expression);
		try {
			State = 1595;
			switch (TokenStream.La(1)) {
			case NONE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				_localctx = new AtomicLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593; ((AtomicLiteralContext)_localctx).exp = atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
				_localctx = new CollectionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1594; ((CollectionLiteralContext)_localctx).exp = collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
	 
		public Collection_literalContext() { }
		public virtual void CopyFrom(Collection_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TupleLiteralContext : Collection_literalContext {
		public Tuple_literalContext exp;
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public TupleLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTupleLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTupleLiteral(this);
		}
	}
	public partial class ListLiteralContext : Collection_literalContext {
		public List_literalContext exp;
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public ListLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
	}
	public partial class DictLiteralContext : Collection_literalContext {
		public Dict_literalContext exp;
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public DictLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
	}
	public partial class RangeLiteralContext : Collection_literalContext {
		public Range_literalContext exp;
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRangeLiteral(this);
		}
	}
	public partial class SetLiteralContext : Collection_literalContext {
		public Set_literalContext exp;
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public SetLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 242, RULE_collection_literal);
		try {
			State = 1602;
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				_localctx = new RangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1597; ((RangeLiteralContext)_localctx).exp = range_literal();
				}
				break;
			case 2:
				_localctx = new ListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1598; ((ListLiteralContext)_localctx).exp = list_literal();
				}
				break;
			case 3:
				_localctx = new SetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1599; ((SetLiteralContext)_localctx).exp = set_literal();
				}
				break;
			case 4:
				_localctx = new DictLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1600; ((DictLiteralContext)_localctx).exp = dict_literal();
				}
				break;
			case 5:
				_localctx = new TupleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1601; ((TupleLiteralContext)_localctx).exp = tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public Expression_tupleContext items;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 244, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; Match(LPAR);
			State = 1606;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 1605; _localctx.items = expression_tuple(0);
				}
			}

			State = 1608; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public Dict_entry_listContext items;
		public ITerminalNode LCURL() { return GetToken(SParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SParser.RCURL, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 246, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(LCURL);
			State = 1612;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (EXECUTE - 87)) | (1L << (FETCH - 87)) | (1L << (MUTABLE - 87)) | (1L << (NONE - 87)) | (1L << (NOT - 87)) | (1L << (READ - 87)) | (1L << (SELF - 87)) | (1L << (SORTED - 87)) | (1L << (THIS - 87)) | (1L << (BOOLEAN_LITERAL - 87)) | (1L << (CHAR_LITERAL - 87)) | (1L << (MIN_INTEGER - 87)) | (1L << (MAX_INTEGER - 87)) | (1L << (SYMBOL_IDENTIFIER - 87)) | (1L << (TYPE_IDENTIFIER - 87)) | (1L << (VARIABLE_IDENTIFIER - 87)) | (1L << (TEXT_LITERAL - 87)) | (1L << (INTEGER_LITERAL - 87)) | (1L << (HEXA_LITERAL - 87)) | (1L << (DECIMAL_LITERAL - 87)) | (1L << (DATETIME_LITERAL - 87)) | (1L << (TIME_LITERAL - 87)))) != 0) || _la==DATE_LITERAL || _la==PERIOD_LITERAL) {
				{
				State = 1611; _localctx.items = dict_entry_list(0);
				}
			}

			State = 1614; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
	 
		public Expression_tupleContext() { }
		public virtual void CopyFrom(Expression_tupleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTupleItemContext : Expression_tupleContext {
		public Expression_tupleContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleItemContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueTupleItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueTupleItem(this);
		}
	}
	public partial class ValueTupleContext : Expression_tupleContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValueTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValueTuple(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		return expression_tuple(0);
	}

	private Expression_tupleContext expression_tuple(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, _parentState);
		Expression_tupleContext _prevctx = _localctx;
		int _startState = 248;
		EnterRecursionRule(_localctx, 248, RULE_expression_tuple, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueTupleContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1617; ((ValueTupleContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueTupleItemContext(new Expression_tupleContext(_parentctx, _parentState));
					((ValueTupleItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_tuple);
					State = 1619;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1620; Match(COMMA);
					State = 1621; ((ValueTupleItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
	 
		public Dict_entry_listContext() { }
		public virtual void CopyFrom(Dict_entry_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DictEntryListContext : Dict_entry_listContext {
		public Dict_entryContext item;
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictEntryList(this);
		}
	}
	public partial class DictEntryListItemContext : Dict_entry_listContext {
		public Dict_entry_listContext items;
		public Dict_entryContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListItemContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDictEntryListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDictEntryListItem(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		return dict_entry_list(0);
	}

	private Dict_entry_listContext dict_entry_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, _parentState);
		Dict_entry_listContext _prevctx = _localctx;
		int _startState = 250;
		EnterRecursionRule(_localctx, 250, RULE_dict_entry_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DictEntryListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1628; ((DictEntryListContext)_localctx).item = dict_entry();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1635;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DictEntryListItemContext(new Dict_entry_listContext(_parentctx, _parentState));
					((DictEntryListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_dict_entry_list);
					State = 1630;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1631; Match(COMMA);
					State = 1632; ((DictEntryListItemContext)_localctx).item = dict_entry();
					}
					} 
				}
				State = 1637;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 252, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; _localctx.key = expression(0);
			State = 1639; Match(COLON);
			State = 1640; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(SParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 254, RULE_slice_arguments);
		try {
			State = 1651;
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1643; Match(COLON);
				State = 1644; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1646; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1647; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1649; Match(COLON);
				State = 1650; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 256, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; _localctx.name = variable_identifier();
			State = 1654; assign();
			State = 1655; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext parent;
		public Child_instanceContext child;
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1658; ((RootInstanceContext)_localctx).name = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					((ChildInstanceContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1660;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1661; ((ChildInstanceContext)_localctx).child = child_instance();
					}
					} 
				}
				State = 1666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public Category_or_any_typeContext typ;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 260, RULE_is_expression);
		try {
			State = 1671;
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1667;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1668; Match(VARIABLE_IDENTIFIER);
				State = 1669; ((IsATypeExpressionContext)_localctx).typ = category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1670; ((IsOtherExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(SParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(SParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 262, RULE_operator);
		try {
			State = 1679;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1673; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1674; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1675; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1676; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1677; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1678; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 264, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1682;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 266, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1685;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 268, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1688;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 270, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(SParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 272, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(SParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 274, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(SParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 276, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(SParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(SParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 278, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 280, RULE_javascript_statement);
		try {
			State = 1707;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1700; Match(RETURN);
				State = 1701; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1702; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1704; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1705; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 282;
		EnterRecursionRule(_localctx, 282, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1710; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1712;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1713; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_this_expressionContext javascript_this_expression() {
			return GetRuleContext<Javascript_this_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 284, RULE_javascript_primary_expression);
		try {
			State = 1724;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1719; javascript_this_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1720; javascript_parenthesis_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1721; javascript_identifier_expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1722; javascript_literal_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1723; javascript_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Javascript_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_this_expressionContext javascript_this_expression() {
		Javascript_this_expressionContext _localctx = new Javascript_this_expressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_javascript_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public Javascript_member_expressionContext javascript_member_expression() {
			return GetRuleContext<Javascript_member_expressionContext>(0);
		}
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_selector_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_selector_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 288, RULE_javascript_selector_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(DOT);
			State = 1732;
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 1729; javascript_method_expression();
				}
				break;
			case 2:
				{
				State = 1730; javascript_member_expression();
				}
				break;
			case 3:
				{
				State = 1731; javascript_item_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_member_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_member_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_member_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_member_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_member_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_member_expressionContext javascript_member_expression() {
		Javascript_member_expressionContext _localctx = new Javascript_member_expressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_javascript_member_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734; _localctx.name = javascript_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 292, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736; _localctx.name = javascript_identifier();
			State = 1737; Match(LPAR);
			State = 1739;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (SELF - 116)) | (1L << (TEST - 116)) | (1L << (THIS - 116)) | (1L << (WRITE - 116)) | (1L << (BOOLEAN_LITERAL - 116)) | (1L << (CHAR_LITERAL - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)) | (1L << (TEXT_LITERAL - 116)) | (1L << (INTEGER_LITERAL - 116)) | (1L << (DECIMAL_LITERAL - 116)))) != 0)) {
				{
				State = 1738; _localctx.args = javascript_arguments(0);
				}
			}

			State = 1741; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 294;
		EnterRecursionRule(_localctx, 294, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1744; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1751;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 1746;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1747; Match(COMMA);
					State = 1748; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 1753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(LBRAK);
			State = 1755; _localctx.exp = javascript_expression(0);
			State = 1756; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; Match(LPAR);
			State = 1759; _localctx.exp = javascript_expression(0);
			State = 1760; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
	 
		public Javascript_identifier_expressionContext() { }
		public virtual void CopyFrom(Javascript_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIdentifierContext : Javascript_identifier_expressionContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavascriptIdentifierContext(Javascript_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIdentifier(this);
		}
	}
	public partial class JavascriptChildIdentifierContext : Javascript_identifier_expressionContext {
		public Javascript_identifier_expressionContext parent;
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavascriptChildIdentifierContext(Javascript_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		return javascript_identifier_expression(0);
	}

	private Javascript_identifier_expressionContext javascript_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, _parentState);
		Javascript_identifier_expressionContext _prevctx = _localctx;
		int _startState = 300;
		EnterRecursionRule(_localctx, 300, RULE_javascript_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1763; ((JavascriptIdentifierContext)_localctx).name = javascript_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1770;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptChildIdentifierContext(new Javascript_identifier_expressionContext(_parentctx, _parentState));
					((JavascriptChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_identifier_expression);
					State = 1765;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1766; Match(DOT);
					State = 1767; ((JavascriptChildIdentifierContext)_localctx).name = javascript_identifier();
					}
					} 
				}
				State = 1772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_javascript_literal_expression);
		try {
			State = 1778;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1773; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1774; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1775; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1776; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1777; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 304, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (TEST - 116)) | (1L << (WRITE - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 306, RULE_python_statement);
		try {
			State = 1785;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1782; Match(RETURN);
				State = 1783; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1784; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 308;
		EnterRecursionRule(_localctx, 308, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1788; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1794;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 1790;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1791; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 1796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_python_primary_expression);
		try {
			State = 1801;
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1797; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1798; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1799; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1800; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_python_selector_expression);
		try {
			State = 1809;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1803; Match(DOT);
				State = 1804; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1805; Match(LBRAK);
				State = 1806; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 1807; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811; _localctx.name = python_identifier();
			State = 1812; Match(LPAR);
			State = 1814;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (SELF - 116)) | (1L << (TEST - 116)) | (1L << (THIS - 116)) | (1L << (WRITE - 116)) | (1L << (BOOLEAN_LITERAL - 116)) | (1L << (CHAR_LITERAL - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)) | (1L << (TEXT_LITERAL - 116)) | (1L << (INTEGER_LITERAL - 116)) | (1L << (DECIMAL_LITERAL - 116)))) != 0)) {
				{
				State = 1813; _localctx.args = python_argument_list();
				}
			}

			State = 1816; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 316, RULE_python_argument_list);
		try {
			State = 1824;
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1818; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1819; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1820; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 1821; Match(COMMA);
				State = 1822; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1827; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1834;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 1829;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1830; Match(COMMA);
					State = 1831; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 1836;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(SParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 320;
		EnterRecursionRule(_localctx, 320, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1838; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 1839; Match(EQ);
			State = 1840; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1850;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 1842;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1843; Match(COMMA);
					State = 1844; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 1845; Match(EQ);
					State = 1846; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 1852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853; Match(LPAR);
			State = 1854; _localctx.exp = python_expression(0);
			State = 1855; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}
	public partial class PythonPrestoIdentifierContext : Python_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public PythonPrestoIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonPrestoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonPrestoIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 324;
		EnterRecursionRule(_localctx, 324, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new PythonPrestoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1858; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new PythonIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1859; ((PythonIdentifierContext)_localctx).name = python_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1867;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 1862;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1863; Match(DOT);
					State = 1864; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 1869;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_python_literal_expression);
		try {
			State = 1875;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1870; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1871; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1872; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1873; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1874; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public ITerminalNode SELF() { return GetToken(SParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(SParser.THIS, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (SELF - 116)) | (1L << (TEST - 116)) | (1L << (THIS - 116)) | (1L << (WRITE - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 330, RULE_java_statement);
		try {
			State = 1886;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1879; Match(RETURN);
				State = 1880; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 1881; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1883; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 1884; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 332;
		EnterRecursionRule(_localctx, 332, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1889; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1895;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 1891;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1892; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 1897;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_this_expressionContext java_this_expression() {
			return GetRuleContext<Java_this_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_java_primary_expression);
		try {
			State = 1902;
			switch (TokenStream.La(1)) {
			case SELF:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1898; java_this_expression();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1899; java_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case NATIVE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1900; java_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1901; java_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Java_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_this_expressionContext java_this_expression() {
		Java_this_expressionContext _localctx = new Java_this_expressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_java_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_java_selector_expression);
		try {
			State = 1909;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906; Match(DOT);
				State = 1907; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1908; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 340, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911; _localctx.name = java_identifier();
			State = 1912; Match(LPAR);
			State = 1914;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (SELF - 116)) | (1L << (TEST - 116)) | (1L << (THIS - 116)) | (1L << (WRITE - 116)) | (1L << (BOOLEAN_LITERAL - 116)) | (1L << (CHAR_LITERAL - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (NATIVE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)) | (1L << (TEXT_LITERAL - 116)) | (1L << (INTEGER_LITERAL - 116)) | (1L << (DECIMAL_LITERAL - 116)))) != 0)) {
				{
				State = 1913; _localctx.args = java_arguments(0);
				}
			}

			State = 1916; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1919; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1926;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 1921;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1922; Match(COMMA);
					State = 1923; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 1928;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1929; Match(LBRAK);
			State = 1930; _localctx.exp = java_expression(0);
			State = 1931; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 346, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933; Match(LPAR);
			State = 1934; _localctx.exp = java_expression(0);
			State = 1935; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 348;
		EnterRecursionRule(_localctx, 348, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1938; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1945;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 1940;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1941; Match(DOT);
					State = 1942; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 1947;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 350;
		EnterRecursionRule(_localctx, 350, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1949; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1955;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 1951;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1952; ((JavaChildClassIdentifierContext)_localctx).name = Match(DOLLAR_IDENTIFIER);
					}
					} 
				}
				State = 1957;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_java_literal_expression);
		try {
			State = 1963;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1958; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1959; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1960; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1961; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1962; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode NATIVE_IDENTIFIER() { return GetToken(SParser.NATIVE_IDENTIFIER, 0); }
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 354, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (TEST - 116)) | (1L << (WRITE - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (NATIVE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(SParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(SParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 356, RULE_csharp_statement);
		try {
			State = 1974;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1967; Match(RETURN);
				State = 1968; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 1969; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case SELF:
			case TEST:
			case THIS:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1971; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 1972; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 358;
		EnterRecursionRule(_localctx, 358, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1977; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1983;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 1979;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1980; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 1985;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_this_expressionContext csharp_this_expression() {
			return GetRuleContext<Csharp_this_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_primary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_primary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_csharp_primary_expression);
		try {
			State = 1990;
			switch (TokenStream.La(1)) {
			case SELF:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986; csharp_this_expression();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1987; csharp_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case DOLLAR_IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1988; csharp_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1989; csharp_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_this_expressionContext : ParserRuleContext {
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public Csharp_this_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_this_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_this_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_this_expressionContext csharp_this_expression() {
		Csharp_this_expressionContext _localctx = new Csharp_this_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_csharp_this_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992; this_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 364, RULE_csharp_selector_expression);
		try {
			State = 1997;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994; Match(DOT);
				State = 1995; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1996; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; _localctx.name = csharp_identifier();
			State = 2000; Match(LPAR);
			State = 2002;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (SELF - 116)) | (1L << (TEST - 116)) | (1L << (THIS - 116)) | (1L << (WRITE - 116)) | (1L << (BOOLEAN_LITERAL - 116)) | (1L << (CHAR_LITERAL - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)) | (1L << (DOLLAR_IDENTIFIER - 116)) | (1L << (TEXT_LITERAL - 116)) | (1L << (INTEGER_LITERAL - 116)) | (1L << (DECIMAL_LITERAL - 116)))) != 0)) {
				{
				State = 2001; _localctx.args = csharp_arguments(0);
				}
			}

			State = 2004; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(SParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 368;
		EnterRecursionRule(_localctx, 368, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2007; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2014;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 2009;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2010; Match(COMMA);
					State = 2011; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 2016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(SParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(SParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017; Match(LBRAK);
			State = 2018; _localctx.exp = csharp_expression(0);
			State = 2019; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(SParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021; Match(LPAR);
			State = 2022; _localctx.exp = csharp_expression(0);
			State = 2023; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpPrestoIdentifierContext : Csharp_identifier_expressionContext {
		public ITerminalNode DOLLAR_IDENTIFIER() { return GetToken(SParser.DOLLAR_IDENTIFIER, 0); }
		public CSharpPrestoIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrestoIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrestoIdentifier(this);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(SParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 374;
		EnterRecursionRule(_localctx, 374, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			switch (TokenStream.La(1)) {
			case DOLLAR_IDENTIFIER:
				{
				_localctx = new CSharpPrestoIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2026; Match(DOLLAR_IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				{
				_localctx = new CSharpIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2027; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2035;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 2030;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2031; Match(DOT);
					State = 2032; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 2037;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(SParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(SParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(SParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(SParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(SParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 376, RULE_csharp_literal_expression);
		try {
			State = 2043;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2038; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2039; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2040; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2041; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2042; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(SParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(SParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(SParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(SParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(SParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(SParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(SParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(SParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(SParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(SParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(SParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISParserListener typedListener = listener as ISParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 378, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (READ - 116)) | (1L << (TEST - 116)) | (1L << (WRITE - 116)) | (1L << (SYMBOL_IDENTIFIER - 116)) | (1L << (TYPE_IDENTIFIER - 116)) | (1L << (VARIABLE_IDENTIFIER - 116)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return native_category_binding_list_sempred((Native_category_binding_listContext)_localctx, predIndex);
		case 25: return callable_parent_sempred((Callable_parentContext)_localctx, predIndex);
		case 35: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 40: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 42: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 44: return instance_selector_sempred((Instance_selectorContext)_localctx, predIndex);
		case 47: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 54: return child_instance_sempred((Child_instanceContext)_localctx, predIndex);
		case 62: return declarations_sempred((DeclarationsContext)_localctx, predIndex);
		case 66: return native_symbol_list_sempred((Native_symbol_listContext)_localctx, predIndex);
		case 67: return category_symbol_list_sempred((Category_symbol_listContext)_localctx, predIndex);
		case 68: return symbol_list_sempred((Symbol_listContext)_localctx, predIndex);
		case 72: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 74: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 81: return type_identifier_list_sempred((Type_identifier_listContext)_localctx, predIndex);
		case 87: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		case 93: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 94: return member_method_declaration_list_sempred((Member_method_declaration_listContext)_localctx, predIndex);
		case 96: return native_member_method_declaration_list_sempred((Native_member_method_declaration_listContext)_localctx, predIndex);
		case 101: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 104: return variable_identifier_list_sempred((Variable_identifier_listContext)_localctx, predIndex);
		case 106: return native_statement_list_sempred((Native_statement_listContext)_localctx, predIndex);
		case 110: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 111: return assertion_list_sempred((Assertion_listContext)_localctx, predIndex);
		case 112: return switch_case_statement_list_sempred((Switch_case_statement_listContext)_localctx, predIndex);
		case 113: return catch_statement_list_sempred((Catch_statement_listContext)_localctx, predIndex);
		case 116: return literal_list_literal_sempred((Literal_list_literalContext)_localctx, predIndex);
		case 124: return expression_tuple_sempred((Expression_tupleContext)_localctx, predIndex);
		case 125: return dict_entry_list_sempred((Dict_entry_listContext)_localctx, predIndex);
		case 129: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 130: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 132: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 133: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 134: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 141: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 147: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 150: return javascript_identifier_expression_sempred((Javascript_identifier_expressionContext)_localctx, predIndex);
		case 154: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 159: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 160: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 162: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 166: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 171: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 174: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 175: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 179: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 184: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 187: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool native_category_binding_list_sempred(Native_category_binding_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool callable_parent_sempred(Callable_parentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 18);
		case 13: return Precpred(Context, 17);
		case 14: return Precpred(Context, 16);
		case 15: return Precpred(Context, 15);
		case 16: return Precpred(Context, 14);
		case 17: return Precpred(Context, 13);
		case 18: return Precpred(Context, 11);
		case 19: return Precpred(Context, 10);
		case 20: return Precpred(Context, 9);
		case 21: return Precpred(Context, 8);
		case 22: return Precpred(Context, 7);
		case 23: return Precpred(Context, 6);
		case 24: return Precpred(Context, 5);
		case 25: return Precpred(Context, 4);
		case 26: return Precpred(Context, 20);
		case 27: return Precpred(Context, 19);
		case 28: return Precpred(Context, 12);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool instance_selector_sempred(Instance_selectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return this.wasNot(SParser.WS);
		case 31: return this.wasNot(SParser.WS);
		case 32: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.willNotBe(this.equalToken());
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool child_instance_sempred(Child_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.wasNot(SParser.WS);
		case 36: return this.wasNot(SParser.WS);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_symbol_list_sempred(Native_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool category_symbol_list_sempred(Category_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_list_sempred(Symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_identifier_list_sempred(Type_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 1);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 2);
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_method_declaration_list_sempred(Member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_member_method_declaration_list_sempred(Native_member_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool variable_identifier_list_sempred(Variable_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_statement_list_sempred(Native_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assertion_list_sempred(Assertion_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool switch_case_statement_list_sempred(Switch_case_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool catch_statement_list_sempred(Catch_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return Precpred(Context, 1);
		}
		return true;
	}
	private bool literal_list_literal_sempred(Literal_list_literalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_tuple_sempred(Expression_tupleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dict_entry_list_sempred(Dict_entry_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return this.willBeAOrAn();
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_identifier_expression_sempred(Javascript_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x9B\x802\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x185\n\x2\x3\x2"+
		"\x5\x2\x188\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x1A1\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1AE\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1BB\n\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x5\a\x1C2\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\x1CF\n\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x5\n\x1DD\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1FD\n\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x5\r\x206\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x20F\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x218\n\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x22B\n\x10\f\x10\xE\x10\x22E"+
		"\v\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x237\n"+
		"\x12\x3\x12\x3\x12\x3\x12\x5\x12\x23C\n\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x242\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x247\n\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x253\n"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x258\n\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x270\n"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5"+
		"\x17\x27B\n\x17\x3\x17\x3\x17\x5\x17\x27F\n\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x5\x18\x290\n\x18\x3\x19\x3\x19\x3\x19\x5\x19\x295\n\x19\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x29E\n\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x2A5\n\x1B\f\x1B\xE\x1B\x2A8\v\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2B0\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2CD\n\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2E0"+
		"\n \x3!\x3!\x3!\x3!\x5!\x2E6\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x308\n$\x3$\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x5$\x311\n$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\a%\x326\n%\f%\xE%\x329\v%\x3&\x3&\x3&\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x336\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x5\'\x33F\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x348\n\'\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x5(\x35F\n(\x3)\x3)\x5)\x363\n)\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x377\n*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\a*\x3D7\n*\f*\xE*\x3DA\v*\x3+\x3+\x3,\x3,\x3,\x3,\x3"+
		",\a,\x3E3\n,\f,\xE,\x3E6\v,\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x3EE\n-\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3FD\n.\x3/\x3/\x3\x30"+
		"\x5\x30\x402\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x407\n\x30\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x410\n\x31\x3\x31\x3\x31\x3"+
		"\x31\a\x31\x415\n\x31\f\x31\xE\x31\x418\v\x31\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x436\n\x36\x3\x36\x3\x36\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x5\x38\x446\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\a:\x44D\n:\f"+
		":\xE:\x450\v:\x3;\x6;\x453\n;\r;\xE;\x454\x3<\x6<\x458\n<\r<\xE<\x459"+
		"\x3<\x3<\x3=\a=\x45F\n=\f=\xE=\x462\v=\x3=\x3=\x3>\x3>\x3?\x5?\x469\n"+
		"?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\a@\x475\n@\f@\xE@\x478\v@\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x47F\n\x41\x3\x42\x3\x42\x3\x43"+
		"\x3\x43\x5\x43\x485\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\a\x44\x48E\n\x44\f\x44\xE\x44\x491\v\x44\x3\x45\x3\x45\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\a\x45\x49A\n\x45\f\x45\xE\x45\x49D\v\x45\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x4A5\n\x46\f\x46\xE\x46"+
		"\x4A8\v\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x4B4\nG\x3H\x3"+
		"H\x5H\x4B8\nH\x3H\x3H\x3I\x3I\x5I\x4BE\nI\x3I\x3I\x3J\x3J\x3J\x3J\x3J"+
		"\x3J\aJ\x4C8\nJ\fJ\xEJ\x4CB\vJ\x3K\x3K\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\aL\x4DE\nL\fL\xEL\x4E1\vL\x3M\x3M\x5M\x4E5"+
		"\nM\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x4F1\nN\x3O\x3O\x3P\x3"+
		"P\x3Q\x3Q\x3R\x3R\x3R\x5R\x4FC\nR\x3S\x3S\x3S\x3S\x3S\x3S\aS\x504\nS\f"+
		"S\xES\x507\vS\x3T\x3T\x5T\x50B\nT\x3U\x3U\x3U\x5U\x510\nU\x3V\x3V\x3W"+
		"\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\aY\x51E\nY\fY\xEY\x521\vY\x3Z\x3"+
		"Z\x5Z\x525\nZ\x3Z\x5Z\x528\nZ\x3[\x3[\x5[\x52C\n[\x3\\\x3\\\x3\\\x5\\"+
		"\x531\n\\\x3]\x3]\x3]\x3^\x3^\x5^\x538\n^\x3_\x3_\x3_\x3_\x3_\x3_\x3_"+
		"\x3_\x3_\a_\x543\n_\f_\xE_\x546\v_\x3`\x3`\x3`\x3`\x3`\x3`\x3`\a`\x54F"+
		"\n`\f`\xE`\x552\v`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x559\n\x61"+
		"\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\a\x62\x562\n\x62\f\x62"+
		"\xE\x62\x565\v\x62\x3\x63\x3\x63\x5\x63\x569\n\x63\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x575\n\x64\x3"+
		"\x65\x3\x65\x5\x65\x579\n\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66"+
		"\a\x66\x581\n\x66\f\x66\xE\x66\x584\v\x66\x3g\x3g\x3g\x3h\x3h\x5h\x58B"+
		"\nh\x3i\x3i\x3i\x3i\x5i\x591\ni\x3i\x3i\x3i\ai\x596\ni\fi\xEi\x599\vi"+
		"\x3i\x3i\x5i\x59D\ni\x3j\x3j\x3j\x3j\x3j\x3j\aj\x5A5\nj\fj\xEj\x5A8\v"+
		"j\x3k\x3k\x3k\x3k\x5k\x5AE\nk\x3l\x3l\x3l\x3l\x3l\x3l\x3l\al\x5B7\nl\f"+
		"l\xEl\x5BA\vl\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x5m\x5C6\nm\x3n"+
		"\x3n\x5n\x5CA\nn\x3n\x5n\x5CD\nn\x3o\x3o\x5o\x5D1\no\x3o\x5o\x5D4\no\x3"+
		"p\x3p\x3p\x3p\x3p\x3p\x3p\ap\x5DD\np\fp\xEp\x5E0\vp\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\aq\x5E9\nq\fq\xEq\x5EC\vq\x3r\x3r\x3r\x3r\x3r\x3r\x3r\ar\x5F5"+
		"\nr\fr\xEr\x5F8\vr\x3s\x3s\x3s\x3s\x3s\x3s\x3s\as\x601\ns\fs\xEs\x604"+
		"\vs\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x5t\x614\n"+
		"t\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x5u\x623\nu\x3v"+
		"\x3v\x3v\x3v\x3v\x3v\av\x62B\nv\fv\xEv\x62E\vv\x3w\x3w\x3w\x3w\x5w\x634"+
		"\nw\x3x\x3x\x3y\x3y\x3y\x3y\x3z\x3z\x5z\x63E\nz\x3{\x3{\x3{\x3{\x3{\x5"+
		"{\x645\n{\x3|\x3|\x5|\x649\n|\x3|\x3|\x3}\x3}\x5}\x64F\n}\x3}\x3}\x3~"+
		"\x3~\x3~\x3~\x3~\x3~\a~\x659\n~\f~\xE~\x65C\v~\x3\x7F\x3\x7F\x3\x7F\x3"+
		"\x7F\x3\x7F\x3\x7F\a\x7F\x664\n\x7F\f\x7F\xE\x7F\x667\v\x7F\x3\x80\x3"+
		"\x80\x3\x80\x3\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3"+
		"\x81\x3\x81\x5\x81\x676\n\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x83\x3\x83"+
		"\x3\x83\x3\x83\x3\x83\a\x83\x681\n\x83\f\x83\xE\x83\x684\v\x83\x3\x84"+
		"\x3\x84\x3\x84\x3\x84\x5\x84\x68A\n\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\x692\n\x85\x3\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87"+
		"\x3\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C"+
		"\x3\x8C\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x5\x8E\x6AE\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\a\x8F\x6B5\n\x8F"+
		"\f\x8F\xE\x8F\x6B8\v\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\x6BF"+
		"\n\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\x6C7\n\x92\x3"+
		"\x93\x3\x93\x3\x94\x3\x94\x3\x94\x5\x94\x6CE\n\x94\x3\x94\x3\x94\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\a\x95\x6D8\n\x95\f\x95\xE\x95\x6DB"+
		"\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\a\x98\x6EB\n\x98\f\x98\xE\x98\x6EE"+
		"\v\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\x6F5\n\x99\x3\x9A\x3"+
		"\x9A\x3\x9B\x3\x9B\x3\x9B\x5\x9B\x6FC\n\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C"+
		"\x3\x9C\a\x9C\x703\n\x9C\f\x9C\xE\x9C\x706\v\x9C\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x5\x9D\x70C\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5"+
		"\x9E\x714\n\x9E\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x719\n\x9F\x3\x9F\x3\x9F\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x723\n\xA0\x3\xA1\x3\xA1"+
		"\x3\xA1\x3\xA1\x3\xA1\x3\xA1\a\xA1\x72B\n\xA1\f\xA1\xE\xA1\x72E\v\xA1"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2"+
		"\x3\xA2\a\xA2\x73B\n\xA2\f\xA2\xE\xA2\x73E\v\xA2\x3\xA3\x3\xA3\x3\xA3"+
		"\x3\xA3\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x747\n\xA4\x3\xA4\x3\xA4\x3\xA4\a"+
		"\xA4\x74C\n\xA4\f\xA4\xE\xA4\x74F\v\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x5\xA5\x756\n\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x3\xA7\x5\xA7\x761\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\a"+
		"\xA8\x768\n\xA8\f\xA8\xE\xA8\x76B\v\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x5"+
		"\xA9\x771\n\xA9\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x778\n\xAB\x3"+
		"\xAC\x3\xAC\x3\xAC\x5\xAC\x77D\n\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\a\xAD\x787\n\xAD\f\xAD\xE\xAD\x78A\v\xAD\x3\xAE"+
		"\x3\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0"+
		"\x3\xB0\x3\xB0\x3\xB0\a\xB0\x79A\n\xB0\f\xB0\xE\xB0\x79D\v\xB0\x3\xB1"+
		"\x3\xB1\x3\xB1\x3\xB1\x3\xB1\a\xB1\x7A4\n\xB1\f\xB1\xE\xB1\x7A7\v\xB1"+
		"\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x7AE\n\xB2\x3\xB3\x3\xB3\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x7B9\n\xB4\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\a\xB5\x7C0\n\xB5\f\xB5\xE\xB5\x7C3\v\xB5"+
		"\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x7C9\n\xB6\x3\xB7\x3\xB7\x3\xB8\x3"+
		"\xB8\x3\xB8\x5\xB8\x7D0\n\xB8\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x7D5\n\xB9\x3"+
		"\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\a\xBA\x7DF\n\xBA"+
		"\f\xBA\xE\xBA\x7E2\v\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x7EF\n\xBD\x3\xBD\x3\xBD\x3\xBD"+
		"\a\xBD\x7F4\n\xBD\f\xBD\xE\xBD\x7F7\v\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x7FE\n\xBE\x3\xBF\x3\xBF\x3\xBF\x2+\x1E\x34HRV`~\x86\x88"+
		"\x8A\x92\x96\xA4\xB0\xBC\xBE\xC2\xD2\xD6\xDE\xE0\xE2\xE4\xEA\xFA\xFC\x104"+
		"\x11C\x128\x12E\x136\x140\x142\x146\x14E\x158\x15E\x160\x168\x172\x178"+
		"\xC0\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80"+
		"\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4"+
		"\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8"+
		"\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC"+
		"\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C"+
		"\x10E\x110\x112\x114\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128"+
		"\x12A\x12C\x12E\x130\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144"+
		"\x146\x148\x14A\x14C\x14E\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160"+
		"\x162\x164\x166\x168\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C"+
		"\x2\n\x3\x2KL\x3\x2!\"\x4\x2{{\x81\x81\x4\x2&&hh\b\x2\x33;vv\x80\x80\x89"+
		"\x89\x8E\x90\x92\x92\b\x2\x33;vv{{\x80\x81\x89\x89\x8E\x90\a\x2\x33;v"+
		"v\x80\x80\x89\x89\x8E\x92\a\x2\x33;vv\x80\x80\x89\x89\x8E\x90\x857\x2"+
		"\x17E\x3\x2\x2\x2\x4\x18F\x3\x2\x2\x2\x6\x199\x3\x2\x2\x2\b\x19D\x3\x2"+
		"\x2\x2\n\x1A4\x3\x2\x2\x2\f\x1B1\x3\x2\x2\x2\xE\x1C5\x3\x2\x2\x2\x10\x1D2"+
		"\x3\x2\x2\x2\x12\x1D4\x3\x2\x2\x2\x14\x1E3\x3\x2\x2\x2\x16\x1ED\x3\x2"+
		"\x2\x2\x18\x1F7\x3\x2\x2\x2\x1A\x209\x3\x2\x2\x2\x1C\x21B\x3\x2\x2\x2"+
		"\x1E\x223\x3\x2\x2\x2 \x22F\x3\x2\x2\x2\"\x231\x3\x2\x2\x2$\x23D\x3\x2"+
		"\x2\x2&\x24D\x3\x2\x2\x2(\x25E\x3\x2\x2\x2*\x271\x3\x2\x2\x2,\x273\x3"+
		"\x2\x2\x2.\x28F\x3\x2\x2\x2\x30\x291\x3\x2\x2\x2\x32\x29D\x3\x2\x2\x2"+
		"\x34\x29F\x3\x2\x2\x2\x36\x2AF\x3\x2\x2\x2\x38\x2B1\x3\x2\x2\x2:\x2B8"+
		"\x3\x2\x2\x2<\x2BF\x3\x2\x2\x2>\x2DF\x3\x2\x2\x2@\x2E1\x3\x2\x2\x2\x42"+
		"\x2EE\x3\x2\x2\x2\x44\x2F7\x3\x2\x2\x2\x46\x2FE\x3\x2\x2\x2H\x312\x3\x2"+
		"\x2\x2J\x32A\x3\x2\x2\x2L\x32D\x3\x2\x2\x2N\x35E\x3\x2\x2\x2P\x360\x3"+
		"\x2\x2\x2R\x376\x3\x2\x2\x2T\x3DB\x3\x2\x2\x2V\x3DD\x3\x2\x2\x2X\x3ED"+
		"\x3\x2\x2\x2Z\x3FC\x3\x2\x2\x2\\\x3FE\x3\x2\x2\x2^\x401\x3\x2\x2\x2`\x40F"+
		"\x3\x2\x2\x2\x62\x419\x3\x2\x2\x2\x64\x41D\x3\x2\x2\x2\x66\x421\x3\x2"+
		"\x2\x2h\x426\x3\x2\x2\x2j\x42D\x3\x2\x2\x2l\x439\x3\x2\x2\x2n\x445\x3"+
		"\x2\x2\x2p\x447\x3\x2\x2\x2r\x44E\x3\x2\x2\x2t\x452\x3\x2\x2\x2v\x457"+
		"\x3\x2\x2\x2x\x460\x3\x2\x2\x2z\x465\x3\x2\x2\x2|\x468\x3\x2\x2\x2~\x46D"+
		"\x3\x2\x2\x2\x80\x47E\x3\x2\x2\x2\x82\x480\x3\x2\x2\x2\x84\x484\x3\x2"+
		"\x2\x2\x86\x486\x3\x2\x2\x2\x88\x492\x3\x2\x2\x2\x8A\x49E\x3\x2\x2\x2"+
		"\x8C\x4B3\x3\x2\x2\x2\x8E\x4B5\x3\x2\x2\x2\x90\x4BB\x3\x2\x2\x2\x92\x4C1"+
		"\x3\x2\x2\x2\x94\x4CC\x3\x2\x2\x2\x96\x4D2\x3\x2\x2\x2\x98\x4E4\x3\x2"+
		"\x2\x2\x9A\x4F0\x3\x2\x2\x2\x9C\x4F2\x3\x2\x2\x2\x9E\x4F4\x3\x2\x2\x2"+
		"\xA0\x4F6\x3\x2\x2\x2\xA2\x4FB\x3\x2\x2\x2\xA4\x4FD\x3\x2\x2\x2\xA6\x50A"+
		"\x3\x2\x2\x2\xA8\x50F\x3\x2\x2\x2\xAA\x511\x3\x2\x2\x2\xAC\x513\x3\x2"+
		"\x2\x2\xAE\x515\x3\x2\x2\x2\xB0\x517\x3\x2\x2\x2\xB2\x527\x3\x2\x2\x2"+
		"\xB4\x52B\x3\x2\x2\x2\xB6\x52D\x3\x2\x2\x2\xB8\x532\x3\x2\x2\x2\xBA\x537"+
		"\x3\x2\x2\x2\xBC\x539\x3\x2\x2\x2\xBE\x547\x3\x2\x2\x2\xC0\x558\x3\x2"+
		"\x2\x2\xC2\x55A\x3\x2\x2\x2\xC4\x568\x3\x2\x2\x2\xC6\x574\x3\x2\x2\x2"+
		"\xC8\x576\x3\x2\x2\x2\xCA\x57A\x3\x2\x2\x2\xCC\x585\x3\x2\x2\x2\xCE\x588"+
		"\x3\x2\x2\x2\xD0\x58C\x3\x2\x2\x2\xD2\x59E\x3\x2\x2\x2\xD4\x5AD\x3\x2"+
		"\x2\x2\xD6\x5AF\x3\x2\x2\x2\xD8\x5C5\x3\x2\x2\x2\xDA\x5C7\x3\x2\x2\x2"+
		"\xDC\x5CE\x3\x2\x2\x2\xDE\x5D5\x3\x2\x2\x2\xE0\x5E1\x3\x2\x2\x2\xE2\x5ED"+
		"\x3\x2\x2\x2\xE4\x5F9\x3\x2\x2\x2\xE6\x613\x3\x2\x2\x2\xE8\x622\x3\x2"+
		"\x2\x2\xEA\x624\x3\x2\x2\x2\xEC\x633\x3\x2\x2\x2\xEE\x635\x3\x2\x2\x2"+
		"\xF0\x637\x3\x2\x2\x2\xF2\x63D\x3\x2\x2\x2\xF4\x644\x3\x2\x2\x2\xF6\x646"+
		"\x3\x2\x2\x2\xF8\x64C\x3\x2\x2\x2\xFA\x652\x3\x2\x2\x2\xFC\x65D\x3\x2"+
		"\x2\x2\xFE\x668\x3\x2\x2\x2\x100\x675\x3\x2\x2\x2\x102\x677\x3\x2\x2\x2"+
		"\x104\x67B\x3\x2\x2\x2\x106\x689\x3\x2\x2\x2\x108\x691\x3\x2\x2\x2\x10A"+
		"\x693\x3\x2\x2\x2\x10C\x696\x3\x2\x2\x2\x10E\x699\x3\x2\x2\x2\x110\x69C"+
		"\x3\x2\x2\x2\x112\x69E\x3\x2\x2\x2\x114\x6A0\x3\x2\x2\x2\x116\x6A2\x3"+
		"\x2\x2\x2\x118\x6A4\x3\x2\x2\x2\x11A\x6AD\x3\x2\x2\x2\x11C\x6AF\x3\x2"+
		"\x2\x2\x11E\x6BE\x3\x2\x2\x2\x120\x6C0\x3\x2\x2\x2\x122\x6C2\x3\x2\x2"+
		"\x2\x124\x6C8\x3\x2\x2\x2\x126\x6CA\x3\x2\x2\x2\x128\x6D1\x3\x2\x2\x2"+
		"\x12A\x6DC\x3\x2\x2\x2\x12C\x6E0\x3\x2\x2\x2\x12E\x6E4\x3\x2\x2\x2\x130"+
		"\x6F4\x3\x2\x2\x2\x132\x6F6\x3\x2\x2\x2\x134\x6FB\x3\x2\x2\x2\x136\x6FD"+
		"\x3\x2\x2\x2\x138\x70B\x3\x2\x2\x2\x13A\x713\x3\x2\x2\x2\x13C\x715\x3"+
		"\x2\x2\x2\x13E\x722\x3\x2\x2\x2\x140\x724\x3\x2\x2\x2\x142\x72F\x3\x2"+
		"\x2\x2\x144\x73F\x3\x2\x2\x2\x146\x746\x3\x2\x2\x2\x148\x755\x3\x2\x2"+
		"\x2\x14A\x757\x3\x2\x2\x2\x14C\x760\x3\x2\x2\x2\x14E\x762\x3\x2\x2\x2"+
		"\x150\x770\x3\x2\x2\x2\x152\x772\x3\x2\x2\x2\x154\x777\x3\x2\x2\x2\x156"+
		"\x779\x3\x2\x2\x2\x158\x780\x3\x2\x2\x2\x15A\x78B\x3\x2\x2\x2\x15C\x78F"+
		"\x3\x2\x2\x2\x15E\x793\x3\x2\x2\x2\x160\x79E\x3\x2\x2\x2\x162\x7AD\x3"+
		"\x2\x2\x2\x164\x7AF\x3\x2\x2\x2\x166\x7B8\x3\x2\x2\x2\x168\x7BA\x3\x2"+
		"\x2\x2\x16A\x7C8\x3\x2\x2\x2\x16C\x7CA\x3\x2\x2\x2\x16E\x7CF\x3\x2\x2"+
		"\x2\x170\x7D1\x3\x2\x2\x2\x172\x7D8\x3\x2\x2\x2\x174\x7E3\x3\x2\x2\x2"+
		"\x176\x7E7\x3\x2\x2\x2\x178\x7EE\x3\x2\x2\x2\x17A\x7FD\x3\x2\x2\x2\x17C"+
		"\x7FF\x3\x2\x2\x2\x17E\x17F\aV\x2\x2\x17F\x180\x5\xACW\x2\x180\x187\a"+
		"\x15\x2\x2\x181\x184\x5\xACW\x2\x182\x183\a\x12\x2\x2\x183\x185\x5 \x11"+
		"\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2"+
		"\x186\x188\x5 \x11\x2\x187\x181\x3\x2\x2\x2\x187\x186\x3\x2\x2\x2\x188"+
		"\x189\x3\x2\x2\x2\x189\x18A\a\x16\x2\x2\x18A\x18B\a\x10\x2\x2\x18B\x18C"+
		"\x5v<\x2\x18C\x18D\x5\x88\x45\x2\x18D\x18E\x5x=\x2\x18E\x3\x3\x2\x2\x2"+
		"\x18F\x190\aV\x2\x2\x190\x191\x5\xACW\x2\x191\x192\a\x15\x2\x2\x192\x193"+
		"\x5\x9AN\x2\x193\x194\a\x16\x2\x2\x194\x195\a\x10\x2\x2\x195\x196\x5v"+
		"<\x2\x196\x197\x5\x86\x44\x2\x197\x198\x5x=\x2\x198\x5\x3\x2\x2\x2\x199"+
		"\x19A\x5\xAEX\x2\x19A\x19B\a,\x2\x2\x19B\x19C\x5R*\x2\x19C\a\x3\x2\x2"+
		"\x2\x19D\x19E\x5\xAEX\x2\x19E\x1A0\a\x15\x2\x2\x19F\x1A1\x5`\x31\x2\x1A0"+
		"\x19F\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3"+
		"\a\x16\x2\x2\x1A3\t\x3\x2\x2\x2\x1A4\x1A5\a\x45\x2\x2\x1A5\x1A6\x5\xAA"+
		"V\x2\x1A6\x1A7\a\x15\x2\x2\x1A7\x1A8\x5\x96L\x2\x1A8\x1A9\a\x16\x2\x2"+
		"\x1A9\x1AA\a\x10\x2\x2\x1AA\x1AD\x5v<\x2\x1AB\x1AE\x5\x8CG\x2\x1AC\x1AE"+
		"\at\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2"+
		"\x2\x2\x1AF\x1B0\x5x=\x2\x1B0\v\x3\x2\x2\x2\x1B1\x1B2\t\x2\x2\x2\x1B2"+
		"\x1B3\x5\xACW\x2\x1B3\x1BA\a\x15\x2\x2\x1B4\x1BB\x5\x10\t\x2\x1B5\x1BB"+
		"\x5 \x11\x2\x1B6\x1B7\x5\x10\t\x2\x1B7\x1B8\a\x12\x2\x2\x1B8\x1B9\x5 "+
		"\x11\x2\x1B9\x1BB\x3\x2\x2\x2\x1BA\x1B4\x3\x2\x2\x2\x1BA\x1B5\x3\x2\x2"+
		"\x2\x1BA\x1B6\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BD\a\x16\x2\x2"+
		"\x1BD\x1BE\a\x10\x2\x2\x1BE\x1C1\x5v<\x2\x1BF\x1C2\x5\xBE`\x2\x1C0\x1C2"+
		"\at\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2"+
		"\x2\x2\x1C3\x1C4\x5x=\x2\x1C4\r\x3\x2\x2\x2\x1C5\x1C6\a}\x2\x2\x1C6\x1C7"+
		"\x5\xACW\x2\x1C7\x1C8\a\x15\x2\x2\x1C8\x1C9\x5 \x11\x2\x1C9\x1CA\a\x16"+
		"\x2\x2\x1CA\x1CB\a\x10\x2\x2\x1CB\x1CE\x5v<\x2\x1CC\x1CF\x5\xBE`\x2\x1CD"+
		"\x1CF\at\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CD\x3\x2\x2\x2\x1CF\x1D0\x3"+
		"\x2\x2\x2\x1D0\x1D1\x5x=\x2\x1D1\xF\x3\x2\x2\x2\x1D2\x1D3\x5\xA4S\x2\x1D3"+
		"\x11\x3\x2\x2\x2\x1D4\x1D5\aO\x2\x2\x1D5\x1D6\aq\x2\x2\x1D6\x1D7\x5\x108"+
		"\x85\x2\x1D7\x1D8\a\x15\x2\x2\x1D8\x1D9\x5\xB4[\x2\x1D9\x1DC\a\x16\x2"+
		"\x2\x1DA\x1DB\a\x32\x2\x2\x1DB\x1DD\x5\x96L\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC"+
		"\x1DD\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\a\x10\x2\x2\x1DF\x1E0"+
		"\x5v<\x2\x1E0\x1E1\x5\xDEp\x2\x1E1\x1E2\x5x=\x2\x1E2\x13\x3\x2\x2\x2\x1E3"+
		"\x1E4\aO\x2\x2\x1E4\x1E5\x5\xAAV\x2\x1E5\x1E6\a|\x2\x2\x1E6\x1E7\a\x15"+
		"\x2\x2\x1E7\x1E8\a\x16\x2\x2\x1E8\x1E9\a\x10\x2\x2\x1E9\x1EA\x5v<\x2\x1EA"+
		"\x1EB\x5\xDEp\x2\x1EB\x1EC\x5x=\x2\x1EC\x15\x3\x2\x2\x2\x1ED\x1EE\aO\x2"+
		"\x2\x1EE\x1EF\x5\xAAV\x2\x1EF\x1F0\a`\x2\x2\x1F0\x1F1\a\x15\x2\x2\x1F1"+
		"\x1F2\a\x16\x2\x2\x1F2\x1F3\a\x10\x2\x2\x1F3\x1F4\x5v<\x2\x1F4\x1F5\x5"+
		"\xDEp\x2\x1F5\x1F6\x5x=\x2\x1F6\x17\x3\x2\x2\x2\x1F7\x1F8\aj\x2\x2\x1F8"+
		"\x1F9\t\x2\x2\x2\x1F9\x1FA\x5\xACW\x2\x1FA\x1FC\a\x15\x2\x2\x1FB\x1FD"+
		"\x5 \x11\x2\x1FC\x1FB\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE\x3\x2"+
		"\x2\x2\x1FE\x1FF\a\x16\x2\x2\x1FF\x200\a\x10\x2\x2\x200\x201\x5v<\x2\x201"+
		"\x205\x5\x1C\xF\x2\x202\x203\x5t;\x2\x203\x204\x5\xC2\x62\x2\x204\x206"+
		"\x3\x2\x2\x2\x205\x202\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x207\x3"+
		"\x2\x2\x2\x207\x208\x5x=\x2\x208\x19\x3\x2\x2\x2\x209\x20A\aj\x2\x2\x20A"+
		"\x20B\ax\x2\x2\x20B\x20C\x5\xACW\x2\x20C\x20E\a\x15\x2\x2\x20D\x20F\x5"+
		" \x11\x2\x20E\x20D\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x210\x3\x2\x2"+
		"\x2\x210\x211\a\x16\x2\x2\x211\x212\a\x10\x2\x2\x212\x213\x5v<\x2\x213"+
		"\x217\x5\x1C\xF\x2\x214\x215\x5t;\x2\x215\x216\x5\xC2\x62\x2\x216\x218"+
		"\x3\x2\x2\x2\x217\x214\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\x3"+
		"\x2\x2\x2\x219\x21A\x5x=\x2\x21A\x1B\x3\x2\x2\x2\x21B\x21C\aO\x2\x2\x21C"+
		"\x21D\t\x2\x2\x2\x21D\x21E\aH\x2\x2\x21E\x21F\a\x10\x2\x2\x21F\x220\x5"+
		"v<\x2\x220\x221\x5\x1E\x10\x2\x221\x222\x5x=\x2\x222\x1D\x3\x2\x2\x2\x223"+
		"\x224\b\x10\x1\x2\x224\x225\x5\xC6\x64\x2\x225\x22C\x3\x2\x2\x2\x226\x227"+
		"\f\x3\x2\x2\x227\x228\x5t;\x2\x228\x229\x5\xC6\x64\x2\x229\x22B\x3\x2"+
		"\x2\x2\x22A\x226\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2"+
		"\x2\x22C\x22D\x3\x2\x2\x2\x22D\x1F\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F"+
		"\x230\x5\xD2j\x2\x230!\x3\x2\x2\x2\x231\x232\a?\x2\x2\x232\x233\aO\x2"+
		"\x2\x233\x234\x5\xA6T\x2\x234\x236\a\x15\x2\x2\x235\x237\x5\xB0Y\x2\x236"+
		"\x235\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x23B"+
		"\a\x16\x2\x2\x239\x23A\a\x32\x2\x2\x23A\x23C\x5\x96L\x2\x23B\x239\x3\x2"+
		"\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C#\x3\x2\x2\x2\x23D\x23E\aO\x2\x2\x23E"+
		"\x23F\x5\xA6T\x2\x23F\x241\a\x15\x2\x2\x240\x242\x5\xB0Y\x2\x241\x240"+
		"\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x246\a\x16"+
		"\x2\x2\x244\x245\a\x32\x2\x2\x245\x247\x5\x96L\x2\x246\x244\x3\x2\x2\x2"+
		"\x246\x247\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x249\a\x10\x2\x2\x249"+
		"\x24A\x5v<\x2\x24A\x24B\x5\xDEp\x2\x24B\x24C\x5x=\x2\x24C%\x3\x2\x2\x2"+
		"\x24D\x24E\aO\x2\x2\x24E\x24F\aj\x2\x2\x24F\x250\x5\xA6T\x2\x250\x252"+
		"\a\x15\x2\x2\x251\x253\x5\xB0Y\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2"+
		"\x2\x2\x253\x254\x3\x2\x2\x2\x254\x257\a\x16\x2\x2\x255\x256\a\x32\x2"+
		"\x2\x256\x258\x5\xBA^\x2\x257\x255\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258"+
		"\x259\x3\x2\x2\x2\x259\x25A\a\x10\x2\x2\x25A\x25B\x5v<\x2\x25B\x25C\x5"+
		"\xD6l\x2\x25C\x25D\x5x=\x2\x25D\'\x3\x2\x2\x2\x25E\x25F\aO\x2\x2\x25F"+
		"\x260\a\x80\x2\x2\x260\x261\a\x93\x2\x2\x261\x262\a\x15\x2\x2\x262\x263"+
		"\a\x16\x2\x2\x263\x264\a\x10\x2\x2\x264\x265\x5v<\x2\x265\x266\x5\xDE"+
		"p\x2\x266\x267\x5x=\x2\x267\x268\x5t;\x2\x268\x269\aZ\x2\x2\x269\x26F"+
		"\a\x10\x2\x2\x26A\x26B\x5v<\x2\x26B\x26C\x5\xE0q\x2\x26C\x26D\x5x=\x2"+
		"\x26D\x270\x3\x2\x2\x2\x26E\x270\x5\xAEX\x2\x26F\x26A\x3\x2\x2\x2\x26F"+
		"\x26E\x3\x2\x2\x2\x270)\x3\x2\x2\x2\x271\x272\x5R*\x2\x272+\x3\x2\x2\x2"+
		"\x273\x274\x5\xAAV\x2\x274\x275\a\x10\x2\x2\x275\x27A\x5\xBA^\x2\x276"+
		"\x277\a\x15\x2\x2\x277\x278\x5 \x11\x2\x278\x279\a\x16\x2\x2\x279\x27B"+
		"\x3\x2\x2\x2\x27A\x276\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27E\x3"+
		"\x2\x2\x2\x27C\x27D\a,\x2\x2\x27D\x27F\x5\xF2z\x2\x27E\x27C\x3\x2\x2\x2"+
		"\x27E\x27F\x3\x2\x2\x2\x27F-\x3\x2\x2\x2\x280\x290\x5\x30\x19\x2\x281"+
		"\x290\x5l\x37\x2\x282\x290\x5p\x39\x2\x283\x290\x5P)\x2\x284\x290\x5\x46"+
		"$\x2\x285\x290\x5<\x1F\x2\x286\x290\x5@!\x2\x287\x290\x5\x44#\x2\x288"+
		"\x290\x5\x42\"\x2\x289\x290\x5J&\x2\x28A\x290\x5L\'\x2\x28B\x290\x5\x66"+
		"\x34\x2\x28C\x290\x5\x38\x1D\x2\x28D\x290\x5:\x1E\x2\x28E\x290\x5$\x13"+
		"\x2\x28F\x280\x3\x2\x2\x2\x28F\x281\x3\x2\x2\x2\x28F\x282\x3\x2\x2\x2"+
		"\x28F\x283\x3\x2\x2\x2\x28F\x284\x3\x2\x2\x2\x28F\x285\x3\x2\x2\x2\x28F"+
		"\x286\x3\x2\x2\x2\x28F\x287\x3\x2\x2\x2\x28F\x288\x3\x2\x2\x2\x28F\x289"+
		"\x3\x2\x2\x2\x28F\x28A\x3\x2\x2\x2\x28F\x28B\x3\x2\x2\x2\x28F\x28C\x3"+
		"\x2\x2\x2\x28F\x28D\x3\x2\x2\x2\x28F\x28E\x3\x2\x2\x2\x290/\x3\x2\x2\x2"+
		"\x291\x292\x5\x32\x1A\x2\x292\x294\a\x15\x2\x2\x293\x295\x5`\x31\x2\x294"+
		"\x293\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x297"+
		"\a\x16\x2\x2\x297\x31\x3\x2\x2\x2\x298\x29E\x5\xA6T\x2\x299\x29A\x5\x34"+
		"\x1B\x2\x29A\x29B\a\x14\x2\x2\x29B\x29C\x5\xA6T\x2\x29C\x29E\x3\x2\x2"+
		"\x2\x29D\x298\x3\x2\x2\x2\x29D\x299\x3\x2\x2\x2\x29E\x33\x3\x2\x2\x2\x29F"+
		"\x2A0\b\x1B\x1\x2\x2A0\x2A1\x5\xA8U\x2\x2A1\x2A6\x3\x2\x2\x2\x2A2\x2A3"+
		"\f\x3\x2\x2\x2A3\x2A5\x5\x36\x1C\x2\x2A4\x2A2\x3\x2\x2\x2\x2A5\x2A8\x3"+
		"\x2\x2\x2\x2A6\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x35\x3\x2\x2"+
		"\x2\x2A8\x2A6\x3\x2\x2\x2\x2A9\x2AA\a\x14\x2\x2\x2AA\x2B0\x5\xAAV\x2\x2AB"+
		"\x2AC\a\x17\x2\x2\x2AC\x2AD\x5R*\x2\x2AD\x2AE\a\x18\x2\x2\x2AE\x2B0\x3"+
		"\x2\x2\x2\x2AF\x2A9\x3\x2\x2\x2\x2AF\x2AB\x3\x2\x2\x2\x2B0\x37\x3\x2\x2"+
		"\x2\x2B1\x2B2\a\x85\x2\x2\x2B2\x2B3\x5\x102\x82\x2\x2B3\x2B4\a\x10\x2"+
		"\x2\x2B4\x2B5\x5v<\x2\x2B5\x2B6\x5\xDEp\x2\x2B6\x2B7\x5x=\x2\x2B7\x39"+
		"\x3\x2\x2\x2\x2B8\x2B9\a\x85\x2\x2\x2B9\x2BA\x5\xACW\x2\x2BA\x2BB\a\x10"+
		"\x2\x2\x2BB\x2BC\x5v<\x2\x2BC\x2BD\x5\xDEp\x2\x2BD\x2BE\x5x=\x2\x2BE;"+
		"\x3\x2\x2\x2\x2BF\x2C0\a\x7F\x2\x2\x2C0\x2C1\ao\x2\x2\x2C1\x2C2\x5R*\x2"+
		"\x2C2\x2C3\a\x10\x2\x2\x2C3\x2C4\x5v<\x2\x2C4\x2CC\x5\xE2r\x2\x2C5\x2C6"+
		"\x5t;\x2\x2C6\x2C7\as\x2\x2\x2C7\x2C8\a\x10\x2\x2\x2C8\x2C9\x5v<\x2\x2C9"+
		"\x2CA\x5\xDEp\x2\x2CA\x2CB\x5x=\x2\x2CB\x2CD\x3\x2\x2\x2\x2CC\x2C5\x3"+
		"\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\x5x=\x2"+
		"\x2CF=\x3\x2\x2\x2\x2D0\x2D1\a\x86\x2\x2\x2D1\x2D2\x5\xE8u\x2\x2D2\x2D3"+
		"\a\x10\x2\x2\x2D3\x2D4\x5v<\x2\x2D4\x2D5\x5\xDEp\x2\x2D5\x2D6\x5x=\x2"+
		"\x2D6\x2E0\x3\x2\x2\x2\x2D7\x2D8\a\x86\x2\x2\x2D8\x2D9\a\x62\x2\x2\x2D9"+
		"\x2DA\x5\xE6t\x2\x2DA\x2DB\a\x10\x2\x2\x2DB\x2DC\x5v<\x2\x2DC\x2DD\x5"+
		"\xDEp\x2\x2DD\x2DE\x5x=\x2\x2DE\x2E0\x3\x2\x2\x2\x2DF\x2D0\x3\x2\x2\x2"+
		"\x2DF\x2D7\x3\x2\x2\x2\x2E0?\x3\x2\x2\x2\x2E1\x2E2\a^\x2\x2\x2E2\x2E5"+
		"\x5\xAAV\x2\x2E3\x2E4\a\x12\x2\x2\x2E4\x2E6\x5\xAAV\x2\x2E5\x2E3\x3\x2"+
		"\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\a\x62\x2"+
		"\x2\x2E8\x2E9\x5R*\x2\x2E9\x2EA\a\x10\x2\x2\x2EA\x2EB\x5v<\x2\x2EB\x2EC"+
		"\x5\xDEp\x2\x2EC\x2ED\x5x=\x2\x2ED\x41\x3\x2\x2\x2\x2EE\x2EF\aR\x2\x2"+
		"\x2EF\x2F0\a\x10\x2\x2\x2F0\x2F1\x5v<\x2\x2F1\x2F2\x5\xDEp\x2\x2F2\x2F3"+
		"\x5x=\x2\x2F3\x2F4\x5t;\x2\x2F4\x2F5\a\x88\x2\x2\x2F5\x2F6\x5R*\x2\x2F6"+
		"\x43\x3\x2\x2\x2\x2F7\x2F8\a\x88\x2\x2\x2F8\x2F9\x5R*\x2\x2F9\x2FA\a\x10"+
		"\x2\x2\x2FA\x2FB\x5v<\x2\x2FB\x2FC\x5\xDEp\x2\x2FC\x2FD\x5x=\x2\x2FD\x45"+
		"\x3\x2\x2\x2\x2FE\x2FF\a\x61\x2\x2\x2FF\x300\x5R*\x2\x300\x301\a\x10\x2"+
		"\x2\x301\x302\x5v<\x2\x302\x303\x5\xDEp\x2\x303\x307\x5x=\x2\x304\x305"+
		"\x5t;\x2\x305\x306\x5H%\x2\x306\x308\x3\x2\x2\x2\x307\x304\x3\x2\x2\x2"+
		"\x307\x308\x3\x2\x2\x2\x308\x310\x3\x2\x2\x2\x309\x30A\x5t;\x2\x30A\x30B"+
		"\aU\x2\x2\x30B\x30C\a\x10\x2\x2\x30C\x30D\x5v<\x2\x30D\x30E\x5\xDEp\x2"+
		"\x30E\x30F\x5x=\x2\x30F\x311\x3\x2\x2\x2\x310\x309\x3\x2\x2\x2\x310\x311"+
		"\x3\x2\x2\x2\x311G\x3\x2\x2\x2\x312\x313\b%\x1\x2\x313\x314\aU\x2\x2\x314"+
		"\x315\a\x61\x2\x2\x315\x316\x5R*\x2\x316\x317\a\x10\x2\x2\x317\x318\x5"+
		"v<\x2\x318\x319\x5\xDEp\x2\x319\x31A\x5x=\x2\x31A\x327\x3\x2\x2\x2\x31B"+
		"\x31C\f\x3\x2\x2\x31C\x31D\x5t;\x2\x31D\x31E\aU\x2\x2\x31E\x31F\a\x61"+
		"\x2\x2\x31F\x320\x5R*\x2\x320\x321\a\x10\x2\x2\x321\x322\x5v<\x2\x322"+
		"\x323\x5\xDEp\x2\x323\x324\x5x=\x2\x324\x326\x3\x2\x2\x2\x325\x31B\x3"+
		"\x2\x2\x2\x326\x329\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x327\x328\x3\x2"+
		"\x2\x2\x328I\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x32A\x32B\au\x2\x2\x32B"+
		"\x32C\x5R*\x2\x32CK\x3\x2\x2\x2\x32D\x32E\a\x84\x2\x2\x32E\x32F\x5\xAA"+
		"V\x2\x32F\x330\a\x10\x2\x2\x330\x331\x5v<\x2\x331\x332\x5\xDEp\x2\x332"+
		"\x333\x5x=\x2\x333\x335\x5r:\x2\x334\x336\x5\xE4s\x2\x335\x334\x3\x2\x2"+
		"\x2\x335\x336\x3\x2\x2\x2\x336\x33E\x3\x2\x2\x2\x337\x338\aX\x2\x2\x338"+
		"\x339\a\x10\x2\x2\x339\x33A\x5v<\x2\x33A\x33B\x5\xDEp\x2\x33B\x33C\x5"+
		"x=\x2\x33C\x33D\x5r:\x2\x33D\x33F\x3\x2\x2\x2\x33E\x337\x3\x2\x2\x2\x33E"+
		"\x33F\x3\x2\x2\x2\x33F\x347\x3\x2\x2\x2\x340\x341\a]\x2\x2\x341\x342\a"+
		"\x10\x2\x2\x342\x343\x5v<\x2\x343\x344\x5\xDEp\x2\x344\x345\x5x=\x2\x345"+
		"\x346\x5r:\x2\x346\x348\x3\x2\x2\x2\x347\x340\x3\x2\x2\x2\x347\x348\x3"+
		"\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34A\x5r:\x2\x34AM\x3\x2\x2\x2\x34B"+
		"\x34C\aX\x2\x2\x34C\x34D\x5\xAEX\x2\x34D\x34E\a\x10\x2\x2\x34E\x34F\x5"+
		"v<\x2\x34F\x350\x5\xDEp\x2\x350\x351\x5x=\x2\x351\x352\x5r:\x2\x352\x35F"+
		"\x3\x2\x2\x2\x353\x354\aX\x2\x2\x354\x355\a\x62\x2\x2\x355\x356\a\x17"+
		"\x2\x2\x356\x357\x5\x8A\x46\x2\x357\x358\a\x18\x2\x2\x358\x359\a\x10\x2"+
		"\x2\x359\x35A\x5v<\x2\x35A\x35B\x5\xDEp\x2\x35B\x35C\x5x=\x2\x35C\x35D"+
		"\x5r:\x2\x35D\x35F\x3\x2\x2\x2\x35E\x34B\x3\x2\x2\x2\x35E\x353\x3\x2\x2"+
		"\x2\x35FO\x3\x2\x2\x2\x360\x362\ay\x2\x2\x361\x363\x5R*\x2\x362\x361\x3"+
		"\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363Q\x3\x2\x2\x2\x364\x365\b*\x1\x2\x365"+
		"\x366\a\"\x2\x2\x366\x377\x5R*!\x367\x368\al\x2\x2\x368\x377\x5R* \x369"+
		"\x377\x5V,\x2\x36A\x377\x5X-\x2\x36B\x36C\a=\x2\x2\x36C\x36D\a\x15\x2"+
		"\x2\x36D\x36E\x5R*\x2\x36E\x36F\a\x16\x2\x2\x36F\x377\x3\x2\x2\x2\x370"+
		"\x371\aY\x2\x2\x371\x372\a\x15\x2\x2\x372\x373\x5\xAAV\x2\x373\x374\a"+
		"\x16\x2\x2\x374\x377\x3\x2\x2\x2\x375\x377\x5T+\x2\x376\x364\x3\x2\x2"+
		"\x2\x376\x367\x3\x2\x2\x2\x376\x369\x3\x2\x2\x2\x376\x36A\x3\x2\x2\x2"+
		"\x376\x36B\x3\x2\x2\x2\x376\x370\x3\x2\x2\x2\x376\x375\x3\x2\x2\x2\x377"+
		"\x3D8\x3\x2\x2\x2\x378\x379\f\x1F\x2\x2\x379\x37A\x5\x112\x8A\x2\x37A"+
		"\x37B\x5R* \x37B\x3D7\x3\x2\x2\x2\x37C\x37D\f\x1E\x2\x2\x37D\x37E\x5\x114"+
		"\x8B\x2\x37E\x37F\x5R*\x1F\x37F\x3D7\x3\x2\x2\x2\x380\x381\f\x1D\x2\x2"+
		"\x381\x382\x5\x118\x8D\x2\x382\x383\x5R*\x1E\x383\x3D7\x3\x2\x2\x2\x384"+
		"\x385\f\x1C\x2\x2\x385\x386\x5\x116\x8C\x2\x386\x387\x5R*\x1D\x387\x3D7"+
		"\x3\x2\x2\x2\x388\x389\f\x1B\x2\x2\x389\x38A\t\x3\x2\x2\x38A\x3D7\x5R"+
		"*\x1C\x38B\x38C\f\x1A\x2\x2\x38C\x38D\a)\x2\x2\x38D\x3D7\x5R*\x1B\x38E"+
		"\x38F\f\x19\x2\x2\x38F\x390\a*\x2\x2\x390\x3D7\x5R*\x1A\x391\x392\f\x18"+
		"\x2\x2\x392\x393\a\'\x2\x2\x393\x3D7\x5R*\x19\x394\x395\f\x17\x2\x2\x395"+
		"\x396\a(\x2\x2\x396\x3D7\x5R*\x18\x397\x398\f\x14\x2\x2\x398\x399\a.\x2"+
		"\x2\x399\x3D7\x5R*\x15\x39A\x39B\f\x13\x2\x2\x39B\x39C\a-\x2\x2\x39C\x3D7"+
		"\x5R*\x14\x39D\x39E\f\x12\x2\x2\x39E\x39F\a/\x2\x2\x39F\x3D7\x5R*\x13"+
		"\x3A0\x3A1\f\x11\x2\x2\x3A1\x3A2\ar\x2\x2\x3A2\x3D7\x5R*\x12\x3A3\x3A4"+
		"\f\x10\x2\x2\x3A4\x3A5\a\x42\x2\x2\x3A5\x3D7\x5R*\x11\x3A6\x3A7\f\xF\x2"+
		"\x2\x3A7\x3A8\a\x61\x2\x2\x3A8\x3A9\x5R*\x2\x3A9\x3AA\aU\x2\x2\x3AA\x3AB"+
		"\x5R*\x10\x3AB\x3D7\x3\x2\x2\x2\x3AC\x3AD\f\r\x2\x2\x3AD\x3AE\a\x62\x2"+
		"\x2\x3AE\x3D7\x5R*\xE\x3AF\x3B0\f\f\x2\x2\x3B0\x3B1\aN\x2\x2\x3B1\x3D7"+
		"\x5R*\r\x3B2\x3B3\f\v\x2\x2\x3B3\x3B4\aN\x2\x2\x3B4\x3B5\a@\x2\x2\x3B5"+
		"\x3D7\x5R*\f\x3B6\x3B7\f\n\x2\x2\x3B7\x3B8\aN\x2\x2\x3B8\x3B9\a\x43\x2"+
		"\x2\x3B9\x3D7\x5R*\v\x3BA\x3BB\f\t\x2\x2\x3BB\x3BC\al\x2\x2\x3BC\x3BD"+
		"\a\x62\x2\x2\x3BD\x3D7\x5R*\n\x3BE\x3BF\f\b\x2\x2\x3BF\x3C0\al\x2\x2\x3C0"+
		"\x3C1\aN\x2\x2\x3C1\x3D7\x5R*\t\x3C2\x3C3\f\a\x2\x2\x3C3\x3C4\al\x2\x2"+
		"\x3C4\x3C5\aN\x2\x2\x3C5\x3C6\a@\x2\x2\x3C6\x3D7\x5R*\b\x3C7\x3C8\f\x6"+
		"\x2\x2\x3C8\x3C9\al\x2\x2\x3C9\x3CA\aN\x2\x2\x3CA\x3CB\a\x43\x2\x2\x3CB"+
		"\x3D7\x5R*\a\x3CC\x3CD\f\x16\x2\x2\x3CD\x3CE\a\x64\x2\x2\x3CE\x3CF\al"+
		"\x2\x2\x3CF\x3D7\x5\x106\x84\x2\x3D0\x3D1\f\x15\x2\x2\x3D1\x3D2\a\x64"+
		"\x2\x2\x3D2\x3D7\x5\x106\x84\x2\x3D3\x3D4\f\xE\x2\x2\x3D4\x3D5\a\x44\x2"+
		"\x2\x3D5\x3D7\x5\xBA^\x2\x3D6\x378\x3\x2\x2\x2\x3D6\x37C\x3\x2\x2\x2\x3D6"+
		"\x380\x3\x2\x2\x2\x3D6\x384\x3\x2\x2\x2\x3D6\x388\x3\x2\x2\x2\x3D6\x38B"+
		"\x3\x2\x2\x2\x3D6\x38E\x3\x2\x2\x2\x3D6\x391\x3\x2\x2\x2\x3D6\x394\x3"+
		"\x2\x2\x2\x3D6\x397\x3\x2\x2\x2\x3D6\x39A\x3\x2\x2\x2\x3D6\x39D\x3\x2"+
		"\x2\x2\x3D6\x3A0\x3\x2\x2\x2\x3D6\x3A3\x3\x2\x2\x2\x3D6\x3A6\x3\x2\x2"+
		"\x2\x3D6\x3AC\x3\x2\x2\x2\x3D6\x3AF\x3\x2\x2\x2\x3D6\x3B2\x3\x2\x2\x2"+
		"\x3D6\x3B6\x3\x2\x2\x2\x3D6\x3BA\x3\x2\x2\x2\x3D6\x3BE\x3\x2\x2\x2\x3D6"+
		"\x3C2\x3\x2\x2\x2\x3D6\x3C7\x3\x2\x2\x2\x3D6\x3CC\x3\x2\x2\x2\x3D6\x3D0"+
		"\x3\x2\x2\x2\x3D6\x3D3\x3\x2\x2\x2\x3D7\x3DA\x3\x2\x2\x2\x3D8\x3D6\x3"+
		"\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9S\x3\x2\x2\x2\x3DA\x3D8\x3\x2\x2\x2"+
		"\x3DB\x3DC\x5\xACW\x2\x3DCU\x3\x2\x2\x2\x3DD\x3DE\b,\x1\x2\x3DE\x3DF\x5"+
		"\xECw\x2\x3DF\x3E4\x3\x2\x2\x2\x3E0\x3E1\f\x3\x2\x2\x3E1\x3E3\x5Z.\x2"+
		"\x3E2\x3E0\x3\x2\x2\x2\x3E3\x3E6\x3\x2\x2\x2\x3E4\x3E2\x3\x2\x2\x2\x3E4"+
		"\x3E5\x3\x2\x2\x2\x3E5W\x3\x2\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E7\x3EE\x5"+
		"\\/\x2\x3E8\x3EE\x5h\x35\x2\x3E9\x3EE\x5\x64\x33\x2\x3EA\x3EE\x5j\x36"+
		"\x2\x3EB\x3EE\x5\x30\x19\x2\x3EC\x3EE\x5^\x30\x2\x3ED\x3E7\x3\x2\x2\x2"+
		"\x3ED\x3E8\x3\x2\x2\x2\x3ED\x3E9\x3\x2\x2\x2\x3ED\x3EA\x3\x2\x2\x2\x3ED"+
		"\x3EB\x3\x2\x2\x2\x3ED\x3EC\x3\x2\x2\x2\x3EEY\x3\x2\x2\x2\x3EF\x3F0\x6"+
		". \x3\x3F0\x3F1\a\x14\x2\x2\x3F1\x3FD\x5\xAAV\x2\x3F2\x3F3\x6.!\x3\x3F3"+
		"\x3F4\a\x17\x2\x2\x3F4\x3F5\x5\x100\x81\x2\x3F5\x3F6\a\x18\x2\x2\x3F6"+
		"\x3FD\x3\x2\x2\x2\x3F7\x3F8\x6.\"\x3\x3F8\x3F9\a\x17\x2\x2\x3F9\x3FA\x5"+
		"R*\x2\x3FA\x3FB\a\x18\x2\x2\x3FB\x3FD\x3\x2\x2\x2\x3FC\x3EF\x3\x2\x2\x2"+
		"\x3FC\x3F2\x3\x2\x2\x2\x3FC\x3F7\x3\x2\x2\x2\x3FD[\x3\x2\x2\x2\x3FE\x3FF"+
		"\x5\xA0Q\x2\x3FF]\x3\x2\x2\x2\x400\x402\ai\x2\x2\x401\x400\x3\x2\x2\x2"+
		"\x401\x402\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x404\x5\x9CO\x2\x404"+
		"\x406\a\x15\x2\x2\x405\x407\x5`\x31\x2\x406\x405\x3\x2\x2\x2\x406\x407"+
		"\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409\a\x16\x2\x2\x409_\x3\x2\x2"+
		"\x2\x40A\x40B\b\x31\x1\x2\x40B\x40C\x5R*\x2\x40C\x40D\x6\x31#\x3\x40D"+
		"\x410\x3\x2\x2\x2\x40E\x410\x5\x62\x32\x2\x40F\x40A\x3\x2\x2\x2\x40F\x40E"+
		"\x3\x2\x2\x2\x410\x416\x3\x2\x2\x2\x411\x412\f\x3\x2\x2\x412\x413\a\x12"+
		"\x2\x2\x413\x415\x5\x62\x32\x2\x414\x411\x3\x2\x2\x2\x415\x418\x3\x2\x2"+
		"\x2\x416\x414\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x61\x3\x2\x2\x2\x418"+
		"\x416\x3\x2\x2\x2\x419\x41A\x5\xAAV\x2\x41A\x41B\x5\x110\x89\x2\x41B\x41C"+
		"\x5R*\x2\x41C\x63\x3\x2\x2\x2\x41D\x41E\av\x2\x2\x41E\x41F\a_\x2\x2\x41F"+
		"\x420\x5R*\x2\x420\x65\x3\x2\x2\x2\x421\x422\a\x89\x2\x2\x422\x423\x5"+
		"R*\x2\x423\x424\a\x83\x2\x2\x424\x425\x5R*\x2\x425g\x3\x2\x2\x2\x426\x427"+
		"\a\\\x2\x2\x427\x428\x5\xAAV\x2\x428\x429\a_\x2\x2\x429\x42A\x5R*\x2\x42A"+
		"\x42B\a\x87\x2\x2\x42B\x42C\x5R*\x2\x42Ci\x3\x2\x2\x2\x42D\x42E\a~\x2"+
		"\x2\x42E\x42F\a\x15\x2\x2\x42F\x435\x5V,\x2\x430\x431\a\x12\x2\x2\x431"+
		"\x432\x5\x10A\x86\x2\x432\x433\a,\x2\x2\x433\x434\x5V,\x2\x434\x436\x3"+
		"\x2\x2\x2\x435\x430\x3\x2\x2\x2\x435\x436\x3\x2\x2\x2\x436\x437\x3\x2"+
		"\x2\x2\x437\x438\a\x16\x2\x2\x438k\x3\x2\x2\x2\x439\x43A\x5\x104\x83\x2"+
		"\x43A\x43B\x5\x110\x89\x2\x43B\x43C\x5R*\x2\x43Cm\x3\x2\x2\x2\x43D\x43E"+
		"\x6\x38%\x3\x43E\x43F\a\x14\x2\x2\x43F\x446\x5\xAAV\x2\x440\x441\x6\x38"+
		"&\x3\x441\x442\a\x17\x2\x2\x442\x443\x5R*\x2\x443\x444\a\x18\x2\x2\x444"+
		"\x446\x3\x2\x2\x2\x445\x43D\x3\x2\x2\x2\x445\x440\x3\x2\x2\x2\x446o\x3"+
		"\x2\x2\x2\x447\x448\x5\xD2j\x2\x448\x449\x5\x110\x89\x2\x449\x44A\x5R"+
		"*\x2\x44Aq\x3\x2\x2\x2\x44B\x44D\a\a\x2\x2\x44C\x44B\x3\x2\x2\x2\x44D"+
		"\x450\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44Fs\x3"+
		"\x2\x2\x2\x450\x44E\x3\x2\x2\x2\x451\x453\a\a\x2\x2\x452\x451\x3\x2\x2"+
		"\x2\x453\x454\x3\x2\x2\x2\x454\x452\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2"+
		"\x455u\x3\x2\x2\x2\x456\x458\a\a\x2\x2\x457\x456\x3\x2\x2\x2\x458\x459"+
		"\x3\x2\x2\x2\x459\x457\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45B\x3"+
		"\x2\x2\x2\x45B\x45C\a\x3\x2\x2\x45Cw\x3\x2\x2\x2\x45D\x45F\a\a\x2\x2\x45E"+
		"\x45D\x3\x2\x2\x2\x45F\x462\x3\x2\x2\x2\x460\x45E\x3\x2\x2\x2\x460\x461"+
		"\x3\x2\x2\x2\x461\x463\x3\x2\x2\x2\x462\x460\x3\x2\x2\x2\x463\x464\a\x4"+
		"\x2\x2\x464y\x3\x2\x2\x2\x465\x466\ak\x2\x2\x466{\x3\x2\x2\x2\x467\x469"+
		"\x5~@\x2\x468\x467\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46A\x3\x2\x2"+
		"\x2\x46A\x46B\x5r:\x2\x46B\x46C\a\x2\x2\x3\x46C}\x3\x2\x2\x2\x46D\x46E"+
		"\b@\x1\x2\x46E\x46F\x5\x80\x41\x2\x46F\x476\x3\x2\x2\x2\x470\x471\f\x3"+
		"\x2\x2\x471\x472\x5t;\x2\x472\x473\x5\x80\x41\x2\x473\x475\x3\x2\x2\x2"+
		"\x474\x470\x3\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x476"+
		"\x477\x3\x2\x2\x2\x477\x7F\x3\x2\x2\x2\x478\x476\x3\x2\x2\x2\x479\x47F"+
		"\x5\n\x6\x2\x47A\x47F\x5\xA2R\x2\x47B\x47F\x5\x82\x42\x2\x47C\x47F\x5"+
		"\x84\x43\x2\x47D\x47F\x5\xD4k\x2\x47E\x479\x3\x2\x2\x2\x47E\x47A\x3\x2"+
		"\x2\x2\x47E\x47B\x3\x2\x2\x2\x47E\x47C\x3\x2\x2\x2\x47E\x47D\x3\x2\x2"+
		"\x2\x47F\x81\x3\x2\x2\x2\x480\x481\x5\x1A\xE\x2\x481\x83\x3\x2\x2\x2\x482"+
		"\x485\x5\x2\x2\x2\x483\x485\x5\x4\x3\x2\x484\x482\x3\x2\x2\x2\x484\x483"+
		"\x3\x2\x2\x2\x485\x85\x3\x2\x2\x2\x486\x487\b\x44\x1\x2\x487\x488\x5\x6"+
		"\x4\x2\x488\x48F\x3\x2\x2\x2\x489\x48A\f\x3\x2\x2\x48A\x48B\x5t;\x2\x48B"+
		"\x48C\x5\x6\x4\x2\x48C\x48E\x3\x2\x2\x2\x48D\x489\x3\x2\x2\x2\x48E\x491"+
		"\x3\x2\x2\x2\x48F\x48D\x3\x2\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x87\x3\x2"+
		"\x2\x2\x491\x48F\x3\x2\x2\x2\x492\x493\b\x45\x1\x2\x493\x494\x5\b\x5\x2"+
		"\x494\x49B\x3\x2\x2\x2\x495\x496\f\x3\x2\x2\x496\x497\x5t;\x2\x497\x498"+
		"\x5\b\x5\x2\x498\x49A\x3\x2\x2\x2\x499\x495\x3\x2\x2\x2\x49A\x49D\x3\x2"+
		"\x2\x2\x49B\x499\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x89\x3\x2\x2\x2"+
		"\x49D\x49B\x3\x2\x2\x2\x49E\x49F\b\x46\x1\x2\x49F\x4A0\x5\xAEX\x2\x4A0"+
		"\x4A6\x3\x2\x2\x2\x4A1\x4A2\f\x3\x2\x2\x4A2\x4A3\a\x12\x2\x2\x4A3\x4A5"+
		"\x5\xAEX\x2\x4A4\x4A1\x3\x2\x2\x2\x4A5\x4A8\x3\x2\x2\x2\x4A6\x4A4\x3\x2"+
		"\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x8B\x3\x2\x2\x2\x4A8\x4A6\x3\x2\x2\x2"+
		"\x4A9\x4AA\a\x62\x2\x2\x4AA\x4B4\x5\x8EH\x2\x4AB\x4AC\a\x62\x2\x2\x4AC"+
		"\x4B4\x5\x90I\x2\x4AD\x4AE\a\x62\x2\x2\x4AE\x4B4\x5\x94K\x2\x4AF\x4B0"+
		"\a\x65\x2\x2\x4B0\x4B4\a\x93\x2\x2\x4B1\x4B2\a\x65\x2\x2\x4B2\x4B4\x5"+
		"R*\x2\x4B3\x4A9\x3\x2\x2\x2\x4B3\x4AB\x3\x2\x2\x2\x4B3\x4AD\x3\x2\x2\x2"+
		"\x4B3\x4AF\x3\x2\x2\x2\x4B3\x4B1\x3\x2\x2\x2\x4B4\x8D\x3\x2\x2\x2\x4B5"+
		"\x4B7\a\x17\x2\x2\x4B6\x4B8\x5\x92J\x2\x4B7\x4B6\x3\x2\x2\x2\x4B7\x4B8"+
		"\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9\x4BA\a\x18\x2\x2\x4BA\x8F\x3\x2"+
		"\x2\x2\x4BB\x4BD\a)\x2\x2\x4BC\x4BE\x5\x92J\x2\x4BD\x4BC\x3\x2\x2\x2\x4BD"+
		"\x4BE\x3\x2\x2\x2\x4BE\x4BF\x3\x2\x2\x2\x4BF\x4C0\a\'\x2\x2\x4C0\x91\x3"+
		"\x2\x2\x2\x4C1\x4C2\bJ\x1\x2\x4C2\x4C3\x5R*\x2\x4C3\x4C9\x3\x2\x2\x2\x4C4"+
		"\x4C5\f\x3\x2\x2\x4C5\x4C6\a\x12\x2\x2\x4C6\x4C8\x5R*\x2\x4C7\x4C4\x3"+
		"\x2\x2\x2\x4C8\x4CB\x3\x2\x2\x2\x4C9\x4C7\x3\x2\x2\x2\x4C9\x4CA\x3\x2"+
		"\x2\x2\x4CA\x93\x3\x2\x2\x2\x4CB\x4C9\x3\x2\x2\x2\x4CC\x4CD\a\x17\x2\x2"+
		"\x4CD\x4CE\x5R*\x2\x4CE\x4CF\a\x13\x2\x2\x4CF\x4D0\x5R*\x2\x4D0\x4D1\a"+
		"\x18\x2\x2\x4D1\x95\x3\x2\x2\x2\x4D2\x4D3\bL\x1\x2\x4D3\x4D4\x5\x98M\x2"+
		"\x4D4\x4DF\x3\x2\x2\x2\x4D5\x4D6\f\x5\x2\x2\x4D6\x4DE\a+\x2\x2\x4D7\x4D8"+
		"\f\x4\x2\x2\x4D8\x4D9\a\x17\x2\x2\x4D9\x4DE\a\x18\x2\x2\x4DA\x4DB\f\x3"+
		"\x2\x2\x4DB\x4DC\a\x19\x2\x2\x4DC\x4DE\a\x1A\x2\x2\x4DD\x4D5\x3\x2\x2"+
		"\x2\x4DD\x4D7\x3\x2\x2\x2\x4DD\x4DA\x3\x2\x2\x2\x4DE\x4E1\x3\x2\x2\x2"+
		"\x4DF\x4DD\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x97\x3\x2\x2\x2\x4E1"+
		"\x4DF\x3\x2\x2\x2\x4E2\x4E5\x5\x9AN\x2\x4E3\x4E5\x5\x9CO\x2\x4E4\x4E2"+
		"\x3\x2\x2\x2\x4E4\x4E3\x3\x2\x2\x2\x4E5\x99\x3\x2\x2\x2\x4E6\x4F1\a\x33"+
		"\x2\x2\x4E7\x4F1\a\x34\x2\x2\x4E8\x4F1\a\x35\x2\x2\x4E9\x4F1\a\x36\x2"+
		"\x2\x4EA\x4F1\a\x37\x2\x2\x4EB\x4F1\a\x38\x2\x2\x4EC\x4F1\a:\x2\x2\x4ED"+
		"\x4F1\a\x39\x2\x2\x4EE\x4F1\a;\x2\x2\x4EF\x4F1\a=\x2\x2\x4F0\x4E6\x3\x2"+
		"\x2\x2\x4F0\x4E7\x3\x2\x2\x2\x4F0\x4E8\x3\x2\x2\x2\x4F0\x4E9\x3\x2\x2"+
		"\x2\x4F0\x4EA\x3\x2\x2\x2\x4F0\x4EB\x3\x2\x2\x2\x4F0\x4EC\x3\x2\x2\x2"+
		"\x4F0\x4ED\x3\x2\x2\x2\x4F0\x4EE\x3\x2\x2\x2\x4F0\x4EF\x3\x2\x2\x2\x4F1"+
		"\x9B\x3\x2\x2\x2\x4F2\x4F3\a\x8F\x2\x2\x4F3\x9D\x3\x2\x2\x2\x4F4\x4F5"+
		"\a=\x2\x2\x4F5\x9F\x3\x2\x2\x2\x4F6\x4F7\a>\x2\x2\x4F7\xA1\x3\x2\x2\x2"+
		"\x4F8\x4FC\x5\f\a\x2\x4F9\x4FC\x5\x18\r\x2\x4FA\x4FC\x5\xE\b\x2\x4FB\x4F8"+
		"\x3\x2\x2\x2\x4FB\x4F9\x3\x2\x2\x2\x4FB\x4FA\x3\x2\x2\x2\x4FC\xA3\x3\x2"+
		"\x2\x2\x4FD\x4FE\bS\x1\x2\x4FE\x4FF\x5\xACW\x2\x4FF\x505\x3\x2\x2\x2\x500"+
		"\x501\f\x3\x2\x2\x501\x502\a\x12\x2\x2\x502\x504\x5\xACW\x2\x503\x500"+
		"\x3\x2\x2\x2\x504\x507\x3\x2\x2\x2\x505\x503\x3\x2\x2\x2\x505\x506\x3"+
		"\x2\x2\x2\x506\xA5\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x508\x50B\x5\xAA"+
		"V\x2\x509\x50B\x5\xACW\x2\x50A\x508\x3\x2\x2\x2\x50A\x509\x3\x2\x2\x2"+
		"\x50B\xA7\x3\x2\x2\x2\x50C\x510\x5\xAAV\x2\x50D\x510\x5\xACW\x2\x50E\x510"+
		"\x5\xAEX\x2\x50F\x50C\x3\x2\x2\x2\x50F\x50D\x3\x2\x2\x2\x50F\x50E\x3\x2"+
		"\x2\x2\x510\xA9\x3\x2\x2\x2\x511\x512\a\x90\x2\x2\x512\xAB\x3\x2\x2\x2"+
		"\x513\x514\a\x8F\x2\x2\x514\xAD\x3\x2\x2\x2\x515\x516\a\x8E\x2\x2\x516"+
		"\xAF\x3\x2\x2\x2\x517\x518\bY\x1\x2\x518\x519\x5\xB2Z\x2\x519\x51F\x3"+
		"\x2\x2\x2\x51A\x51B\f\x3\x2\x2\x51B\x51C\a\x12\x2\x2\x51C\x51E\x5\xB2"+
		"Z\x2\x51D\x51A\x3\x2\x2\x2\x51E\x521\x3\x2\x2\x2\x51F\x51D\x3\x2\x2\x2"+
		"\x51F\x520\x3\x2\x2\x2\x520\xB1\x3\x2\x2\x2\x521\x51F\x3\x2\x2\x2\x522"+
		"\x528\x5\xB8]\x2\x523\x525\ai\x2\x2\x524\x523\x3\x2\x2\x2\x524\x525\x3"+
		"\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x528\x5\xB4[\x2\x527\x522\x3\x2\x2"+
		"\x2\x527\x524\x3\x2\x2\x2\x528\xB3\x3\x2\x2\x2\x529\x52C\x5\xB6\\\x2\x52A"+
		"\x52C\x5,\x17\x2\x52B\x529\x3\x2\x2\x2\x52B\x52A\x3\x2\x2\x2\x52C\xB5"+
		"\x3\x2\x2\x2\x52D\x530\x5\xAAV\x2\x52E\x52F\a,\x2\x2\x52F\x531\x5\xF2"+
		"z\x2\x530\x52E\x3\x2\x2\x2\x530\x531\x3\x2\x2\x2\x531\xB7\x3\x2\x2\x2"+
		"\x532\x533\x5\x9EP\x2\x533\x534\x5\xAAV\x2\x534\xB9\x3\x2\x2\x2\x535\x538"+
		"\x5\x96L\x2\x536\x538\x5\xBC_\x2\x537\x535\x3\x2\x2\x2\x537\x536\x3\x2"+
		"\x2\x2\x538\xBB\x3\x2\x2\x2\x539\x53A\b_\x1\x2\x53A\x53B\a\x43\x2\x2\x53B"+
		"\x544\x3\x2\x2\x2\x53C\x53D\f\x4\x2\x2\x53D\x53E\a\x17\x2\x2\x53E\x543"+
		"\a\x18\x2\x2\x53F\x540\f\x3\x2\x2\x540\x541\a\x19\x2\x2\x541\x543\a\x1A"+
		"\x2\x2\x542\x53C\x3\x2\x2\x2\x542\x53F\x3\x2\x2\x2\x543\x546\x3\x2\x2"+
		"\x2\x544\x542\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545\xBD\x3\x2\x2\x2\x546"+
		"\x544\x3\x2\x2\x2\x547\x548\b`\x1\x2\x548\x549\x5\xC0\x61\x2\x549\x550"+
		"\x3\x2\x2\x2\x54A\x54B\f\x3\x2\x2\x54B\x54C\x5t;\x2\x54C\x54D\x5\xC0\x61"+
		"\x2\x54D\x54F\x3\x2\x2\x2\x54E\x54A\x3\x2\x2\x2\x54F\x552\x3\x2\x2\x2"+
		"\x550\x54E\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\xBF\x3\x2\x2\x2\x552"+
		"\x550\x3\x2\x2\x2\x553\x559\x5\x14\v\x2\x554\x559\x5\x16\f\x2\x555\x559"+
		"\x5$\x13\x2\x556\x559\x5\"\x12\x2\x557\x559\x5\x12\n\x2\x558\x553\x3\x2"+
		"\x2\x2\x558\x554\x3\x2\x2\x2\x558\x555\x3\x2\x2\x2\x558\x556\x3\x2\x2"+
		"\x2\x558\x557\x3\x2\x2\x2\x559\xC1\x3\x2\x2\x2\x55A\x55B\b\x62\x1\x2\x55B"+
		"\x55C\x5\xC4\x63\x2\x55C\x563\x3\x2\x2\x2\x55D\x55E\f\x3\x2\x2\x55E\x55F"+
		"\x5t;\x2\x55F\x560\x5\xC4\x63\x2\x560\x562\x3\x2\x2\x2\x561\x55D\x3\x2"+
		"\x2\x2\x562\x565\x3\x2\x2\x2\x563\x561\x3\x2\x2\x2\x563\x564\x3\x2\x2"+
		"\x2\x564\xC3\x3\x2\x2\x2\x565\x563\x3\x2\x2\x2\x566\x569\x5\xC0\x61\x2"+
		"\x567\x569\x5&\x14\x2\x568\x566\x3\x2\x2\x2\x568\x567\x3\x2\x2\x2\x569"+
		"\xC5\x3\x2\x2\x2\x56A\x56B\a\n\x2\x2\x56B\x575\x5\x160\xB1\x2\x56C\x56D"+
		"\a\v\x2\x2\x56D\x575\x5\x178\xBD\x2\x56E\x56F\a\f\x2\x2\x56F\x575\x5\xC8"+
		"\x65\x2\x570\x571\a\r\x2\x2\x571\x575\x5\xC8\x65\x2\x572\x573\a\xE\x2"+
		"\x2\x573\x575\x5\xCEh\x2\x574\x56A\x3\x2\x2\x2\x574\x56C\x3\x2\x2\x2\x574"+
		"\x56E\x3\x2\x2\x2\x574\x570\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x575\xC7"+
		"\x3\x2\x2\x2\x576\x578\x5\xA8U\x2\x577\x579\x5\xCA\x66\x2\x578\x577\x3"+
		"\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\xC9\x3\x2\x2\x2\x57A\x57B\a_\x2\x2"+
		"\x57B\x57C\x5\xCCg\x2\x57C\x57D\a\x10\x2\x2\x57D\x582\x5\xA8U\x2\x57E"+
		"\x57F\a\x14\x2\x2\x57F\x581\x5\xA8U\x2\x580\x57E\x3\x2\x2\x2\x581\x584"+
		"\x3\x2\x2\x2\x582\x580\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\xCB\x3\x2"+
		"\x2\x2\x584\x582\x3\x2\x2\x2\x585\x586\a\x90\x2\x2\x586\x587\x6g\x35\x3"+
		"\x587\xCD\x3\x2\x2\x2\x588\x58A\x5\xA8U\x2\x589\x58B\x5\xD0i\x2\x58A\x589"+
		"\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\xCF\x3\x2\x2\x2\x58C\x58D\a_\x2"+
		"\x2\x58D\x58E\x5\xCCg\x2\x58E\x590\a\x10\x2\x2\x58F\x591\a$\x2\x2\x590"+
		"\x58F\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x597"+
		"\x5\x132\x9A\x2\x593\x594\a$\x2\x2\x594\x596\x5\x132\x9A\x2\x595\x593"+
		"\x3\x2\x2\x2\x596\x599\x3\x2\x2\x2\x597\x595\x3\x2\x2\x2\x597\x598\x3"+
		"\x2\x2\x2\x598\x59C\x3\x2\x2\x2\x599\x597\x3\x2\x2\x2\x59A\x59B\a\x14"+
		"\x2\x2\x59B\x59D\x5\x132\x9A\x2\x59C\x59A\x3\x2\x2\x2\x59C\x59D\x3\x2"+
		"\x2\x2\x59D\xD1\x3\x2\x2\x2\x59E\x59F\bj\x1\x2\x59F\x5A0\x5\xAAV\x2\x5A0"+
		"\x5A6\x3\x2\x2\x2\x5A1\x5A2\f\x3\x2\x2\x5A2\x5A3\a\x12\x2\x2\x5A3\x5A5"+
		"\x5\xAAV\x2\x5A4\x5A1\x3\x2\x2\x2\x5A5\x5A8\x3\x2\x2\x2\x5A6\x5A4\x3\x2"+
		"\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\xD3\x3\x2\x2\x2\x5A8\x5A6\x3\x2\x2\x2"+
		"\x5A9\x5AE\x5\"\x12\x2\x5AA\x5AE\x5$\x13\x2\x5AB\x5AE\x5&\x14\x2\x5AC"+
		"\x5AE\x5(\x15\x2\x5AD\x5A9\x3\x2\x2\x2\x5AD\x5AA\x3\x2\x2\x2\x5AD\x5AB"+
		"\x3\x2\x2\x2\x5AD\x5AC\x3\x2\x2\x2\x5AE\xD5\x3\x2\x2\x2\x5AF\x5B0\bl\x1"+
		"\x2\x5B0\x5B1\x5\xD8m\x2\x5B1\x5B8\x3\x2\x2\x2\x5B2\x5B3\f\x3\x2\x2\x5B3"+
		"\x5B4\x5t;\x2\x5B4\x5B5\x5\xD8m\x2\x5B5\x5B7\x3\x2\x2\x2\x5B6\x5B2\x3"+
		"\x2\x2\x2\x5B7\x5BA\x3\x2\x2\x2\x5B8\x5B6\x3\x2\x2\x2\x5B8\x5B9\x3\x2"+
		"\x2\x2\x5B9\xD7\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BB\x5BC\a\n\x2\x2"+
		"\x5BC\x5C6\x5\x14C\xA7\x2\x5BD\x5BE\a\v\x2\x2\x5BE\x5C6\x5\x166\xB4\x2"+
		"\x5BF\x5C0\a\f\x2\x2\x5C0\x5C6\x5\xDAn\x2\x5C1\x5C2\a\r\x2\x2\x5C2\x5C6"+
		"\x5\xDAn\x2\x5C3\x5C4\a\xE\x2\x2\x5C4\x5C6\x5\xDCo\x2\x5C5\x5BB\x3\x2"+
		"\x2\x2\x5C5\x5BD\x3\x2\x2\x2\x5C5\x5BF\x3\x2\x2\x2\x5C5\x5C1\x3\x2\x2"+
		"\x2\x5C5\x5C3\x3\x2\x2\x2\x5C6\xD9\x3\x2\x2\x2\x5C7\x5C9\x5\x134\x9B\x2"+
		"\x5C8\x5CA\a\x11\x2\x2\x5C9\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA"+
		"\x5CC\x3\x2\x2\x2\x5CB\x5CD\x5\xCA\x66\x2\x5CC\x5CB\x3\x2\x2\x2\x5CC\x5CD"+
		"\x3\x2\x2\x2\x5CD\xDB\x3\x2\x2\x2\x5CE\x5D0\x5\x11A\x8E\x2\x5CF\x5D1\a"+
		"\x11\x2\x2\x5D0\x5CF\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D3\x3\x2"+
		"\x2\x2\x5D2\x5D4\x5\xD0i\x2\x5D3\x5D2\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2"+
		"\x5D4\xDD\x3\x2\x2\x2\x5D5\x5D6\bp\x1\x2\x5D6\x5D7\x5.\x18\x2\x5D7\x5DE"+
		"\x3\x2\x2\x2\x5D8\x5D9\f\x3\x2\x2\x5D9\x5DA\x5t;\x2\x5DA\x5DB\x5.\x18"+
		"\x2\x5DB\x5DD\x3\x2\x2\x2\x5DC\x5D8\x3\x2\x2\x2\x5DD\x5E0\x3\x2\x2\x2"+
		"\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\xDF\x3\x2\x2\x2\x5E0"+
		"\x5DE\x3\x2\x2\x2\x5E1\x5E2\bq\x1\x2\x5E2\x5E3\x5*\x16\x2\x5E3\x5EA\x3"+
		"\x2\x2\x2\x5E4\x5E5\f\x3\x2\x2\x5E5\x5E6\x5t;\x2\x5E6\x5E7\x5*\x16\x2"+
		"\x5E7\x5E9\x3\x2\x2\x2\x5E8\x5E4\x3\x2\x2\x2\x5E9\x5EC\x3\x2\x2\x2\x5EA"+
		"\x5E8\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\xE1\x3\x2\x2\x2\x5EC\x5EA"+
		"\x3\x2\x2\x2\x5ED\x5EE\br\x1\x2\x5EE\x5EF\x5> \x2\x5EF\x5F6\x3\x2\x2\x2"+
		"\x5F0\x5F1\f\x3\x2\x2\x5F1\x5F2\x5t;\x2\x5F2\x5F3\x5> \x2\x5F3\x5F5\x3"+
		"\x2\x2\x2\x5F4\x5F0\x3\x2\x2\x2\x5F5\x5F8\x3\x2\x2\x2\x5F6\x5F4\x3\x2"+
		"\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\xE3\x3\x2\x2\x2\x5F8\x5F6\x3\x2\x2\x2"+
		"\x5F9\x5FA\bs\x1\x2\x5FA\x5FB\x5N(\x2\x5FB\x602\x3\x2\x2\x2\x5FC\x5FD"+
		"\f\x3\x2\x2\x5FD\x5FE\x5t;\x2\x5FE\x5FF\x5N(\x2\x5FF\x601\x3\x2\x2\x2"+
		"\x600\x5FC\x3\x2\x2\x2\x601\x604\x3\x2\x2\x2\x602\x600\x3\x2\x2\x2\x602"+
		"\x603\x3\x2\x2\x2\x603\xE5\x3\x2\x2\x2\x604\x602\x3\x2\x2\x2\x605\x606"+
		"\a\x17\x2\x2\x606\x607\x5\xE8u\x2\x607\x608\a\x13\x2\x2\x608\x609\x5\xE8"+
		"u\x2\x609\x60A\a\x18\x2\x2\x60A\x614\x3\x2\x2\x2\x60B\x60C\a\x17\x2\x2"+
		"\x60C\x60D\x5\xEAv\x2\x60D\x60E\a\x18\x2\x2\x60E\x614\x3\x2\x2\x2\x60F"+
		"\x610\a)\x2\x2\x610\x611\x5\xEAv\x2\x611\x612\a\'\x2\x2\x612\x614\x3\x2"+
		"\x2\x2\x613\x605\x3\x2\x2\x2\x613\x60B\x3\x2\x2\x2\x613\x60F\x3\x2\x2"+
		"\x2\x614\xE7\x3\x2\x2\x2\x615\x623\a\x8C\x2\x2\x616\x623\a\x8D\x2\x2\x617"+
		"\x623\a\x94\x2\x2\x618\x623\a\x95\x2\x2\x619\x623\a\x8B\x2\x2\x61A\x623"+
		"\a\x99\x2\x2\x61B\x623\a\x98\x2\x2\x61C\x623\a\x93\x2\x2\x61D\x623\a\x96"+
		"\x2\x2\x61E\x623\a\x97\x2\x2\x61F\x623\a\x8A\x2\x2\x620\x623\a\x9A\x2"+
		"\x2\x621\x623\x5z>\x2\x622\x615\x3\x2\x2\x2\x622\x616\x3\x2\x2\x2\x622"+
		"\x617\x3\x2\x2\x2\x622\x618\x3\x2\x2\x2\x622\x619\x3\x2\x2\x2\x622\x61A"+
		"\x3\x2\x2\x2\x622\x61B\x3\x2\x2\x2\x622\x61C\x3\x2\x2\x2\x622\x61D\x3"+
		"\x2\x2\x2\x622\x61E\x3\x2\x2\x2\x622\x61F\x3\x2\x2\x2\x622\x620\x3\x2"+
		"\x2\x2\x622\x621\x3\x2\x2\x2\x623\xE9\x3\x2\x2\x2\x624\x625\bv\x1\x2\x625"+
		"\x626\x5\xE8u\x2\x626\x62C\x3\x2\x2\x2\x627\x628\f\x3\x2\x2\x628\x629"+
		"\a\x12\x2\x2\x629\x62B\x5\xE8u\x2\x62A\x627\x3\x2\x2\x2\x62B\x62E\x3\x2"+
		"\x2\x2\x62C\x62A\x3\x2\x2\x2\x62C\x62D\x3\x2\x2\x2\x62D\xEB\x3\x2\x2\x2"+
		"\x62E\x62C\x3\x2\x2\x2\x62F\x634\x5\xF0y\x2\x630\x634\x5\xF2z\x2\x631"+
		"\x634\x5\xA8U\x2\x632\x634\x5\xEEx\x2\x633\x62F\x3\x2\x2\x2\x633\x630"+
		"\x3\x2\x2\x2\x633\x631\x3\x2\x2\x2\x633\x632\x3\x2\x2\x2\x634\xED\x3\x2"+
		"\x2\x2\x635\x636\t\x4\x2\x2\x636\xEF\x3\x2\x2\x2\x637\x638\a\x15\x2\x2"+
		"\x638\x639\x5R*\x2\x639\x63A\a\x16\x2\x2\x63A\xF1\x3\x2\x2\x2\x63B\x63E"+
		"\x5\xE8u\x2\x63C\x63E\x5\xF4{\x2\x63D\x63B\x3\x2\x2\x2\x63D\x63C\x3\x2"+
		"\x2\x2\x63E\xF3\x3\x2\x2\x2\x63F\x645\x5\x94K\x2\x640\x645\x5\x8EH\x2"+
		"\x641\x645\x5\x90I\x2\x642\x645\x5\xF8}\x2\x643\x645\x5\xF6|\x2\x644\x63F"+
		"\x3\x2\x2\x2\x644\x640\x3\x2\x2\x2\x644\x641\x3\x2\x2\x2\x644\x642\x3"+
		"\x2\x2\x2\x644\x643\x3\x2\x2\x2\x645\xF5\x3\x2\x2\x2\x646\x648\a\x15\x2"+
		"\x2\x647\x649\x5\xFA~\x2\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649"+
		"\x64A\x3\x2\x2\x2\x64A\x64B\a\x16\x2\x2\x64B\xF7\x3\x2\x2\x2\x64C\x64E"+
		"\a\x19\x2\x2\x64D\x64F\x5\xFC\x7F\x2\x64E\x64D\x3\x2\x2\x2\x64E\x64F\x3"+
		"\x2\x2\x2\x64F\x650\x3\x2\x2\x2\x650\x651\a\x1A\x2\x2\x651\xF9\x3\x2\x2"+
		"\x2\x652\x653\b~\x1\x2\x653\x654\x5R*\x2\x654\x65A\x3\x2\x2\x2\x655\x656"+
		"\f\x3\x2\x2\x656\x657\a\x12\x2\x2\x657\x659\x5R*\x2\x658\x655\x3\x2\x2"+
		"\x2\x659\x65C\x3\x2\x2\x2\x65A\x658\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2"+
		"\x65B\xFB\x3\x2\x2\x2\x65C\x65A\x3\x2\x2\x2\x65D\x65E\b\x7F\x1\x2\x65E"+
		"\x65F\x5\xFE\x80\x2\x65F\x665\x3\x2\x2\x2\x660\x661\f\x3\x2\x2\x661\x662"+
		"\a\x12\x2\x2\x662\x664\x5\xFE\x80\x2\x663\x660\x3\x2\x2\x2\x664\x667\x3"+
		"\x2\x2\x2\x665\x663\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\xFD\x3\x2\x2"+
		"\x2\x667\x665\x3\x2\x2\x2\x668\x669\x5R*\x2\x669\x66A\a\x10\x2\x2\x66A"+
		"\x66B\x5R*\x2\x66B\xFF\x3\x2\x2\x2\x66C\x66D\x5R*\x2\x66D\x66E\a\x10\x2"+
		"\x2\x66E\x66F\x5R*\x2\x66F\x676\x3\x2\x2\x2\x670\x671\x5R*\x2\x671\x672"+
		"\a\x10\x2\x2\x672\x676\x3\x2\x2\x2\x673\x674\a\x10\x2\x2\x674\x676\x5"+
		"R*\x2\x675\x66C\x3\x2\x2\x2\x675\x670\x3\x2\x2\x2\x675\x673\x3\x2\x2\x2"+
		"\x676\x101\x3\x2\x2\x2\x677\x678\x5\xAAV\x2\x678\x679\x5\x110\x89\x2\x679"+
		"\x67A\x5R*\x2\x67A\x103\x3\x2\x2\x2\x67B\x67C\b\x83\x1\x2\x67C\x67D\x5"+
		"\xAAV\x2\x67D\x682\x3\x2\x2\x2\x67E\x67F\f\x3\x2\x2\x67F\x681\x5n\x38"+
		"\x2\x680\x67E\x3\x2\x2\x2\x681\x684\x3\x2\x2\x2\x682\x680\x3\x2\x2\x2"+
		"\x682\x683\x3\x2\x2\x2\x683\x105\x3\x2\x2\x2\x684\x682\x3\x2\x2\x2\x685"+
		"\x686\x6\x84@\x3\x686\x687\a\x90\x2\x2\x687\x68A\x5\xBA^\x2\x688\x68A"+
		"\x5R*\x2\x689\x685\x3\x2\x2\x2\x689\x688\x3\x2\x2\x2\x68A\x107\x3\x2\x2"+
		"\x2\x68B\x692\a!\x2\x2\x68C\x692\a\"\x2\x2\x68D\x692\x5\x112\x8A\x2\x68E"+
		"\x692\x5\x114\x8B\x2\x68F\x692\x5\x116\x8C\x2\x690\x692\x5\x118\x8D\x2"+
		"\x691\x68B\x3\x2\x2\x2\x691\x68C\x3\x2\x2\x2\x691\x68D\x3\x2\x2\x2\x691"+
		"\x68E\x3\x2\x2\x2\x691\x68F\x3\x2\x2\x2\x691\x690\x3\x2\x2\x2\x692\x109"+
		"\x3\x2\x2\x2\x693\x694\a\x90\x2\x2\x694\x695\x6\x86\x41\x3\x695\x10B\x3"+
		"\x2\x2\x2\x696\x697\a\x90\x2\x2\x697\x698\x6\x87\x42\x3\x698\x10D\x3\x2"+
		"\x2\x2\x699\x69A\a\x90\x2\x2\x69A\x69B\x6\x88\x43\x3\x69B\x10F\x3\x2\x2"+
		"\x2\x69C\x69D\a,\x2\x2\x69D\x111\x3\x2\x2\x2\x69E\x69F\a#\x2\x2\x69F\x113"+
		"\x3\x2\x2\x2\x6A0\x6A1\a$\x2\x2\x6A1\x115\x3\x2\x2\x2\x6A2\x6A3\a%\x2"+
		"\x2\x6A3\x117\x3\x2\x2\x2\x6A4\x6A5\t\x5\x2\x2\x6A5\x119\x3\x2\x2\x2\x6A6"+
		"\x6A7\ay\x2\x2\x6A7\x6A8\x5\x11C\x8F\x2\x6A8\x6A9\a\x11\x2\x2\x6A9\x6AE"+
		"\x3\x2\x2\x2\x6AA\x6AB\x5\x11C\x8F\x2\x6AB\x6AC\a\x11\x2\x2\x6AC\x6AE"+
		"\x3\x2\x2\x2\x6AD\x6A6\x3\x2\x2\x2\x6AD\x6AA\x3\x2\x2\x2\x6AE\x11B\x3"+
		"\x2\x2\x2\x6AF\x6B0\b\x8F\x1\x2\x6B0\x6B1\x5\x11E\x90\x2\x6B1\x6B6\x3"+
		"\x2\x2\x2\x6B2\x6B3\f\x3\x2\x2\x6B3\x6B5\x5\x122\x92\x2\x6B4\x6B2\x3\x2"+
		"\x2\x2\x6B5\x6B8\x3\x2\x2\x2\x6B6\x6B4\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2"+
		"\x2\x6B7\x11D\x3\x2\x2\x2\x6B8\x6B6\x3\x2\x2\x2\x6B9\x6BF\x5\x120\x91"+
		"\x2\x6BA\x6BF\x5\x12C\x97\x2\x6BB\x6BF\x5\x12E\x98\x2\x6BC\x6BF\x5\x130"+
		"\x99\x2\x6BD\x6BF\x5\x126\x94\x2\x6BE\x6B9\x3\x2\x2\x2\x6BE\x6BA\x3\x2"+
		"\x2\x2\x6BE\x6BB\x3\x2\x2\x2\x6BE\x6BC\x3\x2\x2\x2\x6BE\x6BD\x3\x2\x2"+
		"\x2\x6BF\x11F\x3\x2\x2\x2\x6C0\x6C1\x5\xEEx\x2\x6C1\x121\x3\x2\x2\x2\x6C2"+
		"\x6C6\a\x14\x2\x2\x6C3\x6C7\x5\x126\x94\x2\x6C4\x6C7\x5\x124\x93\x2\x6C5"+
		"\x6C7\x5\x12A\x96\x2\x6C6\x6C3\x3\x2\x2\x2\x6C6\x6C4\x3\x2\x2\x2\x6C6"+
		"\x6C5\x3\x2\x2\x2\x6C7\x123\x3\x2\x2\x2\x6C8\x6C9\x5\x132\x9A\x2\x6C9"+
		"\x125\x3\x2\x2\x2\x6CA\x6CB\x5\x132\x9A\x2\x6CB\x6CD\a\x15\x2\x2\x6CC"+
		"\x6CE\x5\x128\x95\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE"+
		"\x6CF\x3\x2\x2\x2\x6CF\x6D0\a\x16\x2\x2\x6D0\x127\x3\x2\x2\x2\x6D1\x6D2"+
		"\b\x95\x1\x2\x6D2\x6D3\x5\x11C\x8F\x2\x6D3\x6D9\x3\x2\x2\x2\x6D4\x6D5"+
		"\f\x3\x2\x2\x6D5\x6D6\a\x12\x2\x2\x6D6\x6D8\x5\x11C\x8F\x2\x6D7\x6D4\x3"+
		"\x2\x2\x2\x6D8\x6DB\x3\x2\x2\x2\x6D9\x6D7\x3\x2\x2\x2\x6D9\x6DA\x3\x2"+
		"\x2\x2\x6DA\x129\x3\x2\x2\x2\x6DB\x6D9\x3\x2\x2\x2\x6DC\x6DD\a\x17\x2"+
		"\x2\x6DD\x6DE\x5\x11C\x8F\x2\x6DE\x6DF\a\x18\x2\x2\x6DF\x12B\x3\x2\x2"+
		"\x2\x6E0\x6E1\a\x15\x2\x2\x6E1\x6E2\x5\x11C\x8F\x2\x6E2\x6E3\a\x16\x2"+
		"\x2\x6E3\x12D\x3\x2\x2\x2\x6E4\x6E5\b\x98\x1\x2\x6E5\x6E6\x5\x132\x9A"+
		"\x2\x6E6\x6EC\x3\x2\x2\x2\x6E7\x6E8\f\x3\x2\x2\x6E8\x6E9\a\x14\x2\x2\x6E9"+
		"\x6EB\x5\x132\x9A\x2\x6EA\x6E7\x3\x2\x2\x2\x6EB\x6EE\x3\x2\x2\x2\x6EC"+
		"\x6EA\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED\x12F\x3\x2\x2\x2\x6EE\x6EC"+
		"\x3\x2\x2\x2\x6EF\x6F5\a\x94\x2\x2\x6F0\x6F5\a\x96\x2\x2\x6F1\x6F5\a\x93"+
		"\x2\x2\x6F2\x6F5\a\x8A\x2\x2\x6F3\x6F5\a\x8B\x2\x2\x6F4\x6EF\x3\x2\x2"+
		"\x2\x6F4\x6F0\x3\x2\x2\x2\x6F4\x6F1\x3\x2\x2\x2\x6F4\x6F2\x3\x2\x2\x2"+
		"\x6F4\x6F3\x3\x2\x2\x2\x6F5\x131\x3\x2\x2\x2\x6F6\x6F7\t\x6\x2\x2\x6F7"+
		"\x133\x3\x2\x2\x2\x6F8\x6F9\ay\x2\x2\x6F9\x6FC\x5\x136\x9C\x2\x6FA\x6FC"+
		"\x5\x136\x9C\x2\x6FB\x6F8\x3\x2\x2\x2\x6FB\x6FA\x3\x2\x2\x2\x6FC\x135"+
		"\x3\x2\x2\x2\x6FD\x6FE\b\x9C\x1\x2\x6FE\x6FF\x5\x138\x9D\x2\x6FF\x704"+
		"\x3\x2\x2\x2\x700\x701\f\x3\x2\x2\x701\x703\x5\x13A\x9E\x2\x702\x700\x3"+
		"\x2\x2\x2\x703\x706\x3\x2\x2\x2\x704\x702\x3\x2\x2\x2\x704\x705\x3\x2"+
		"\x2\x2\x705\x137\x3\x2\x2\x2\x706\x704\x3\x2\x2\x2\x707\x70C\x5\x144\xA3"+
		"\x2\x708\x70C\x5\x146\xA4\x2\x709\x70C\x5\x148\xA5\x2\x70A\x70C\x5\x13C"+
		"\x9F\x2\x70B\x707\x3\x2\x2\x2\x70B\x708\x3\x2\x2\x2\x70B\x709\x3\x2\x2"+
		"\x2\x70B\x70A\x3\x2\x2\x2\x70C\x139\x3\x2\x2\x2\x70D\x70E\a\x14\x2\x2"+
		"\x70E\x714\x5\x13C\x9F\x2\x70F\x710\a\x17\x2\x2\x710\x711\x5\x136\x9C"+
		"\x2\x711\x712\a\x18\x2\x2\x712\x714\x3\x2\x2\x2\x713\x70D\x3\x2\x2\x2"+
		"\x713\x70F\x3\x2\x2\x2\x714\x13B\x3\x2\x2\x2\x715\x716\x5\x14A\xA6\x2"+
		"\x716\x718\a\x15\x2\x2\x717\x719\x5\x13E\xA0\x2\x718\x717\x3\x2\x2\x2"+
		"\x718\x719\x3\x2\x2\x2\x719\x71A\x3\x2\x2\x2\x71A\x71B\a\x16\x2\x2\x71B"+
		"\x13D\x3\x2\x2\x2\x71C\x723\x5\x140\xA1\x2\x71D\x723\x5\x142\xA2\x2\x71E"+
		"\x71F\x5\x140\xA1\x2\x71F\x720\a\x12\x2\x2\x720\x721\x5\x142\xA2\x2\x721"+
		"\x723\x3\x2\x2\x2\x722\x71C\x3\x2\x2\x2\x722\x71D\x3\x2\x2\x2\x722\x71E"+
		"\x3\x2\x2\x2\x723\x13F\x3\x2\x2\x2\x724\x725\b\xA1\x1\x2\x725\x726\x5"+
		"\x136\x9C\x2\x726\x72C\x3\x2\x2\x2\x727\x728\f\x3\x2\x2\x728\x729\a\x12"+
		"\x2\x2\x729\x72B\x5\x136\x9C\x2\x72A\x727\x3\x2\x2\x2\x72B\x72E\x3\x2"+
		"\x2\x2\x72C\x72A\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D\x141\x3\x2\x2"+
		"\x2\x72E\x72C\x3\x2\x2\x2\x72F\x730\b\xA2\x1\x2\x730\x731\x5\x14A\xA6"+
		"\x2\x731\x732\a,\x2\x2\x732\x733\x5\x136\x9C\x2\x733\x73C\x3\x2\x2\x2"+
		"\x734\x735\f\x3\x2\x2\x735\x736\a\x12\x2\x2\x736\x737\x5\x14A\xA6\x2\x737"+
		"\x738\a,\x2\x2\x738\x739\x5\x136\x9C\x2\x739\x73B\x3\x2\x2\x2\x73A\x734"+
		"\x3\x2\x2\x2\x73B\x73E\x3\x2\x2\x2\x73C\x73A\x3\x2\x2\x2\x73C\x73D\x3"+
		"\x2\x2\x2\x73D\x143\x3\x2\x2\x2\x73E\x73C\x3\x2\x2\x2\x73F\x740\a\x15"+
		"\x2\x2\x740\x741\x5\x136\x9C\x2\x741\x742\a\x16\x2\x2\x742\x145\x3\x2"+
		"\x2\x2\x743\x744\b\xA4\x1\x2\x744\x747\a\x92\x2\x2\x745\x747\x5\x14A\xA6"+
		"\x2\x746\x743\x3\x2\x2\x2\x746\x745\x3\x2\x2\x2\x747\x74D\x3\x2\x2\x2"+
		"\x748\x749\f\x3\x2\x2\x749\x74A\a\x14\x2\x2\x74A\x74C\x5\x14A\xA6\x2\x74B"+
		"\x748\x3\x2\x2\x2\x74C\x74F\x3\x2\x2\x2\x74D\x74B\x3\x2\x2\x2\x74D\x74E"+
		"\x3\x2\x2\x2\x74E\x147\x3\x2\x2\x2\x74F\x74D\x3\x2\x2\x2\x750\x756\a\x94"+
		"\x2\x2\x751\x756\a\x96\x2\x2\x752\x756\a\x93\x2\x2\x753\x756\a\x8A\x2"+
		"\x2\x754\x756\a\x8B\x2\x2\x755\x750\x3\x2\x2\x2\x755\x751\x3\x2\x2\x2"+
		"\x755\x752\x3\x2\x2\x2\x755\x753\x3\x2\x2\x2\x755\x754\x3\x2\x2\x2\x756"+
		"\x149\x3\x2\x2\x2\x757\x758\t\a\x2\x2\x758\x14B\x3\x2\x2\x2\x759\x75A"+
		"\ay\x2\x2\x75A\x75B\x5\x14E\xA8\x2\x75B\x75C\a\x11\x2\x2\x75C\x761\x3"+
		"\x2\x2\x2\x75D\x75E\x5\x14E\xA8\x2\x75E\x75F\a\x11\x2\x2\x75F\x761\x3"+
		"\x2\x2\x2\x760\x759\x3\x2\x2\x2\x760\x75D\x3\x2\x2\x2\x761\x14D\x3\x2"+
		"\x2\x2\x762\x763\b\xA8\x1\x2\x763\x764\x5\x150\xA9\x2\x764\x769\x3\x2"+
		"\x2\x2\x765\x766\f\x3\x2\x2\x766\x768\x5\x154\xAB\x2\x767\x765\x3\x2\x2"+
		"\x2\x768\x76B\x3\x2\x2\x2\x769\x767\x3\x2\x2\x2\x769\x76A\x3\x2\x2\x2"+
		"\x76A\x14F\x3\x2\x2\x2\x76B\x769\x3\x2\x2\x2\x76C\x771\x5\x152\xAA\x2"+
		"\x76D\x771\x5\x15C\xAF\x2\x76E\x771\x5\x15E\xB0\x2\x76F\x771\x5\x162\xB2"+
		"\x2\x770\x76C\x3\x2\x2\x2\x770\x76D\x3\x2\x2\x2\x770\x76E\x3\x2\x2\x2"+
		"\x770\x76F\x3\x2\x2\x2\x771\x151\x3\x2\x2\x2\x772\x773\x5\xEEx\x2\x773"+
		"\x153\x3\x2\x2\x2\x774\x775\a\x14\x2\x2\x775\x778\x5\x156\xAC\x2\x776"+
		"\x778\x5\x15A\xAE\x2\x777\x774\x3\x2\x2\x2\x777\x776\x3\x2\x2\x2\x778"+
		"\x155\x3\x2\x2\x2\x779\x77A\x5\x164\xB3\x2\x77A\x77C\a\x15\x2\x2\x77B"+
		"\x77D\x5\x158\xAD\x2\x77C\x77B\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D"+
		"\x77E\x3\x2\x2\x2\x77E\x77F\a\x16\x2\x2\x77F\x157\x3\x2\x2\x2\x780\x781"+
		"\b\xAD\x1\x2\x781\x782\x5\x14E\xA8\x2\x782\x788\x3\x2\x2\x2\x783\x784"+
		"\f\x3\x2\x2\x784\x785\a\x12\x2\x2\x785\x787\x5\x14E\xA8\x2\x786\x783\x3"+
		"\x2\x2\x2\x787\x78A\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x788\x789\x3\x2"+
		"\x2\x2\x789\x159\x3\x2\x2\x2\x78A\x788\x3\x2\x2\x2\x78B\x78C\a\x17\x2"+
		"\x2\x78C\x78D\x5\x14E\xA8\x2\x78D\x78E\a\x18\x2\x2\x78E\x15B\x3\x2\x2"+
		"\x2\x78F\x790\a\x15\x2\x2\x790\x791\x5\x14E\xA8\x2\x791\x792\a\x16\x2"+
		"\x2\x792\x15D\x3\x2\x2\x2\x793\x794\b\xB0\x1\x2\x794\x795\x5\x164\xB3"+
		"\x2\x795\x79B\x3\x2\x2\x2\x796\x797\f\x3\x2\x2\x797\x798\a\x14\x2\x2\x798"+
		"\x79A\x5\x164\xB3\x2\x799\x796\x3\x2\x2\x2\x79A\x79D\x3\x2\x2\x2\x79B"+
		"\x799\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x15F\x3\x2\x2\x2\x79D\x79B"+
		"\x3\x2\x2\x2\x79E\x79F\b\xB1\x1\x2\x79F\x7A0\x5\x15E\xB0\x2\x7A0\x7A5"+
		"\x3\x2\x2\x2\x7A1\x7A2\f\x3\x2\x2\x7A2\x7A4\a\x92\x2\x2\x7A3\x7A1\x3\x2"+
		"\x2\x2\x7A4\x7A7\x3\x2\x2\x2\x7A5\x7A3\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2"+
		"\x2\x7A6\x161\x3\x2\x2\x2\x7A7\x7A5\x3\x2\x2\x2\x7A8\x7AE\a\x94\x2\x2"+
		"\x7A9\x7AE\a\x96\x2\x2\x7AA\x7AE\a\x93\x2\x2\x7AB\x7AE\a\x8A\x2\x2\x7AC"+
		"\x7AE\a\x8B\x2\x2\x7AD\x7A8\x3\x2\x2\x2\x7AD\x7A9\x3\x2\x2\x2\x7AD\x7AA"+
		"\x3\x2\x2\x2\x7AD\x7AB\x3\x2\x2\x2\x7AD\x7AC\x3\x2\x2\x2\x7AE\x163\x3"+
		"\x2\x2\x2\x7AF\x7B0\t\b\x2\x2\x7B0\x165\x3\x2\x2\x2\x7B1\x7B2\ay\x2\x2"+
		"\x7B2\x7B3\x5\x168\xB5\x2\x7B3\x7B4\a\x11\x2\x2\x7B4\x7B9\x3\x2\x2\x2"+
		"\x7B5\x7B6\x5\x168\xB5\x2\x7B6\x7B7\a\x11\x2\x2\x7B7\x7B9\x3\x2\x2\x2"+
		"\x7B8\x7B1\x3\x2\x2\x2\x7B8\x7B5\x3\x2\x2\x2\x7B9\x167\x3\x2\x2\x2\x7BA"+
		"\x7BB\b\xB5\x1\x2\x7BB\x7BC\x5\x16A\xB6\x2\x7BC\x7C1\x3\x2\x2\x2\x7BD"+
		"\x7BE\f\x3\x2\x2\x7BE\x7C0\x5\x16E\xB8\x2\x7BF\x7BD\x3\x2\x2\x2\x7C0\x7C3"+
		"\x3\x2\x2\x2\x7C1\x7BF\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2\x2\x7C2\x169\x3"+
		"\x2\x2\x2\x7C3\x7C1\x3\x2\x2\x2\x7C4\x7C9\x5\x16C\xB7\x2\x7C5\x7C9\x5"+
		"\x176\xBC\x2\x7C6\x7C9\x5\x178\xBD\x2\x7C7\x7C9\x5\x17A\xBE\x2\x7C8\x7C4"+
		"\x3\x2\x2\x2\x7C8\x7C5\x3\x2\x2\x2\x7C8\x7C6\x3\x2\x2\x2\x7C8\x7C7\x3"+
		"\x2\x2\x2\x7C9\x16B\x3\x2\x2\x2\x7CA\x7CB\x5\xEEx\x2\x7CB\x16D\x3\x2\x2"+
		"\x2\x7CC\x7CD\a\x14\x2\x2\x7CD\x7D0\x5\x170\xB9\x2\x7CE\x7D0\x5\x174\xBB"+
		"\x2\x7CF\x7CC\x3\x2\x2\x2\x7CF\x7CE\x3\x2\x2\x2\x7D0\x16F\x3\x2\x2\x2"+
		"\x7D1\x7D2\x5\x17C\xBF\x2\x7D2\x7D4\a\x15\x2\x2\x7D3\x7D5\x5\x172\xBA"+
		"\x2\x7D4\x7D3\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5\x7D6\x3\x2\x2\x2"+
		"\x7D6\x7D7\a\x16\x2\x2\x7D7\x171\x3\x2\x2\x2\x7D8\x7D9\b\xBA\x1\x2\x7D9"+
		"\x7DA\x5\x168\xB5\x2\x7DA\x7E0\x3\x2\x2\x2\x7DB\x7DC\f\x3\x2\x2\x7DC\x7DD"+
		"\a\x12\x2\x2\x7DD\x7DF\x5\x168\xB5\x2\x7DE\x7DB\x3\x2\x2\x2\x7DF\x7E2"+
		"\x3\x2\x2\x2\x7E0\x7DE\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x173\x3"+
		"\x2\x2\x2\x7E2\x7E0\x3\x2\x2\x2\x7E3\x7E4\a\x17\x2\x2\x7E4\x7E5\x5\x168"+
		"\xB5\x2\x7E5\x7E6\a\x18\x2\x2\x7E6\x175\x3\x2\x2\x2\x7E7\x7E8\a\x15\x2"+
		"\x2\x7E8\x7E9\x5\x168\xB5\x2\x7E9\x7EA\a\x16\x2\x2\x7EA\x177\x3\x2\x2"+
		"\x2\x7EB\x7EC\b\xBD\x1\x2\x7EC\x7EF\a\x92\x2\x2\x7ED\x7EF\x5\x17C\xBF"+
		"\x2\x7EE\x7EB\x3\x2\x2\x2\x7EE\x7ED\x3\x2\x2\x2\x7EF\x7F5\x3\x2\x2\x2"+
		"\x7F0\x7F1\f\x3\x2\x2\x7F1\x7F2\a\x14\x2\x2\x7F2\x7F4\x5\x17C\xBF\x2\x7F3"+
		"\x7F0\x3\x2\x2\x2\x7F4\x7F7\x3\x2\x2\x2\x7F5\x7F3\x3\x2\x2\x2\x7F5\x7F6"+
		"\x3\x2\x2\x2\x7F6\x179\x3\x2\x2\x2\x7F7\x7F5\x3\x2\x2\x2\x7F8\x7FE\a\x94"+
		"\x2\x2\x7F9\x7FE\a\x96\x2\x2\x7FA\x7FE\a\x93\x2\x2\x7FB\x7FE\a\x8A\x2"+
		"\x2\x7FC\x7FE\a\x8B\x2\x2\x7FD\x7F8\x3\x2\x2\x2\x7FD\x7F9\x3\x2\x2\x2"+
		"\x7FD\x7FA\x3\x2\x2\x2\x7FD\x7FB\x3\x2\x2\x2\x7FD\x7FC\x3\x2\x2\x2\x7FE"+
		"\x17B\x3\x2\x2\x2\x7FF\x800\t\t\x2\x2\x800\x17D\x3\x2\x2\x2\x9D\x184\x187"+
		"\x1A0\x1AD\x1BA\x1C1\x1CE\x1DC\x1FC\x205\x20E\x217\x22C\x236\x23B\x241"+
		"\x246\x252\x257\x26F\x27A\x27E\x28F\x294\x29D\x2A6\x2AF\x2CC\x2DF\x2E5"+
		"\x307\x310\x327\x335\x33E\x347\x35E\x362\x376\x3D6\x3D8\x3E4\x3ED\x3FC"+
		"\x401\x406\x40F\x416\x435\x445\x44E\x454\x459\x460\x468\x476\x47E\x484"+
		"\x48F\x49B\x4A6\x4B3\x4B7\x4BD\x4C9\x4DD\x4DF\x4E4\x4F0\x4FB\x505\x50A"+
		"\x50F\x51F\x524\x527\x52B\x530\x537\x542\x544\x550\x558\x563\x568\x574"+
		"\x578\x582\x58A\x590\x597\x59C\x5A6\x5AD\x5B8\x5C5\x5C9\x5CC\x5D0\x5D3"+
		"\x5DE\x5EA\x5F6\x602\x613\x622\x62C\x633\x63D\x644\x648\x64E\x65A\x665"+
		"\x675\x682\x689\x691\x6AD\x6B6\x6BE\x6C6\x6CD\x6D9\x6EC\x6F4\x6FB\x704"+
		"\x70B\x713\x718\x722\x72C\x73C\x746\x74D\x755\x760\x769\x770\x777\x77C"+
		"\x788\x79B\x7A5\x7AD\x7B8\x7C1\x7C8\x7CF\x7D4\x7E0\x7EE\x7F5\x7FD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace presto.parser
