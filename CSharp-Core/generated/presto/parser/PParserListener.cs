//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace presto.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public interface IPParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_category_declaration([NotNull] PParser.Enum_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_category_declaration([NotNull] PParser.Enum_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_native_declaration([NotNull] PParser.Enum_native_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_native_declaration([NotNull] PParser.Enum_native_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol([NotNull] PParser.Native_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol([NotNull] PParser.Native_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol([NotNull] PParser.Category_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol([NotNull] PParser.Category_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_declaration([NotNull] PParser.Attribute_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_declaration([NotNull] PParser.Attribute_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_category_declaration([NotNull] PParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_category_declaration([NotNull] PParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleton_category_declaration([NotNull] PParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleton_category_declaration([NotNull] PParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerived_list([NotNull] PParser.Derived_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerived_list([NotNull] PParser.Derived_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_method_declaration([NotNull] PParser.Member_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_method_declaration([NotNull] PParser.Member_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_method_declaration([NotNull] PParser.Operator_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_method_declaration([NotNull] PParser.Operator_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter_method_declaration([NotNull] PParser.Setter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter_method_declaration([NotNull] PParser.Setter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter_method_declaration([NotNull] PParser.Getter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter_method_declaration([NotNull] PParser.Getter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_declaration([NotNull] PParser.Native_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_declaration([NotNull] PParser.Native_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_resource_declaration([NotNull] PParser.Native_resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_resource_declaration([NotNull] PParser.Native_resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.native_category_mappings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_mappings([NotNull] PParser.Native_category_mappingsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.native_category_mappings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_mappings([NotNull] PParser.Native_category_mappingsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMappingList</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMappingList([NotNull] PParser.NativeCategoryMappingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMappingList</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMappingList([NotNull] PParser.NativeCategoryMappingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMappingListItem</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMappingListItem([NotNull] PParser.NativeCategoryMappingListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMappingListItem</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMappingListItem([NotNull] PParser.NativeCategoryMappingListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_list([NotNull] PParser.Attribute_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_list([NotNull] PParser.Attribute_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method_declaration([NotNull] PParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method_declaration([NotNull] PParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_method_declaration([NotNull] PParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_method_declaration([NotNull] PParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_method_declaration([NotNull] PParser.Native_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_method_declaration([NotNull] PParser.Native_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTest_method_declaration([NotNull] PParser.Test_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTest_method_declaration([NotNull] PParser.Test_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] PParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] PParser.AssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyped_argument([NotNull] PParser.Typed_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyped_argument([NotNull] PParser.Typed_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallStatement([NotNull] PParser.MethodCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallStatement([NotNull] PParser.MethodCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignInstanceStatement([NotNull] PParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignInstanceStatement([NotNull] PParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignTupleStatement([NotNull] PParser.AssignTupleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignTupleStatement([NotNull] PParser.AssignTupleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] PParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] PParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] PParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] PParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] PParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] PParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] PParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] PParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] PParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] PParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] PParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] PParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseStatement([NotNull] PParser.RaiseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseStatement([NotNull] PParser.RaiseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] PParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] PParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] PParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] PParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithResourceStatement([NotNull] PParser.WithResourceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithResourceStatement([NotNull] PParser.WithResourceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithSingletonStatement([NotNull] PParser.WithSingletonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithSingletonStatement([NotNull] PParser.WithSingletonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureStatement([NotNull] PParser.ClosureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="PParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureStatement([NotNull] PParser.ClosureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call([NotNull] PParser.Method_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call([NotNull] PParser.Method_callContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="PParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodName([NotNull] PParser.MethodNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="PParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodName([NotNull] PParser.MethodNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="PParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodParent([NotNull] PParser.MethodParentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="PParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodParent([NotNull] PParser.MethodParentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="PParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableRoot([NotNull] PParser.CallableRootContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="PParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableRoot([NotNull] PParser.CallableRootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="PParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableSelector([NotNull] PParser.CallableSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="PParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableSelector([NotNull] PParser.CallableSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="PParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableMemberSelector([NotNull] PParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="PParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableMemberSelector([NotNull] PParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="PParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableItemSelector([NotNull] PParser.CallableItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="PParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableItemSelector([NotNull] PParser.CallableItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_resource_statement([NotNull] PParser.With_resource_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_resource_statement([NotNull] PParser.With_resource_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_singleton_statement([NotNull] PParser.With_singleton_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_singleton_statement([NotNull] PParser.With_singleton_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] PParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] PParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicSwitchCase([NotNull] PParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicSwitchCase([NotNull] PParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionSwitchCase([NotNull] PParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionSwitchCase([NotNull] PParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_each_statement([NotNull] PParser.For_each_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_each_statement([NotNull] PParser.For_each_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] PParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] PParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] PParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] PParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] PParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] PParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="PParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementList([NotNull] PParser.ElseIfStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="PParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementList([NotNull] PParser.ElseIfStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="PParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementListItem([NotNull] PParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="PParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementListItem([NotNull] PParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaise_statement([NotNull] PParser.Raise_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaise_statement([NotNull] PParser.Raise_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] PParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] PParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="PParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchAtomicStatement([NotNull] PParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="PParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchAtomicStatement([NotNull] PParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="PParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchCollectionStatement([NotNull] PParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="PParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchCollectionStatement([NotNull] PParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] PParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] PParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] PParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] PParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] PParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] PParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAnyExpression([NotNull] PParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAnyExpression([NotNull] PParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivideExpression([NotNull] PParser.IntDivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivideExpression([NotNull] PParser.IntDivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsExpression([NotNull] PParser.EqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsExpression([NotNull] PParser.EqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] PParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] PParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoughlyEqualsExpression([NotNull] PParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoughlyEqualsExpression([NotNull] PParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsExpression([NotNull] PParser.ContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsExpression([NotNull] PParser.ContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeExpression([NotNull] PParser.CodeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeExpression([NotNull] PParser.CodeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsExpression([NotNull] PParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsExpression([NotNull] PParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] PParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] PParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] PParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] PParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] PParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] PParser.InstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] PParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] PParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodExpression([NotNull] PParser.MethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodExpression([NotNull] PParser.MethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpression([NotNull] PParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpression([NotNull] PParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] PParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] PParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] PParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] PParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpression([NotNull] PParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpression([NotNull] PParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAllExpression([NotNull] PParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAllExpression([NotNull] PParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpression([NotNull] PParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpression([NotNull] PParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] PParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] PParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] PParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] PParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] PParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] PParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAllExpression([NotNull] PParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAllExpression([NotNull] PParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecuteExpression([NotNull] PParser.ExecuteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecuteExpression([NotNull] PParser.ExecuteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsExpression([NotNull] PParser.NotContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsExpression([NotNull] PParser.NotContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotInExpression([NotNull] PParser.NotInExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotInExpression([NotNull] PParser.NotInExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpression([NotNull] PParser.LessThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpression([NotNull] PParser.LessThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAnyExpression([NotNull] PParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAnyExpression([NotNull] PParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsExpression([NotNull] PParser.IsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsExpression([NotNull] PParser.IsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] PParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] PParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotExpression([NotNull] PParser.IsNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="PParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotExpression([NotNull] PParser.IsNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosure_expression([NotNull] PParser.Closure_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosure_expression([NotNull] PParser.Closure_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="PParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectableExpression([NotNull] PParser.SelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="PParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectableExpression([NotNull] PParser.SelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="PParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorExpression([NotNull] PParser.SelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="PParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorExpression([NotNull] PParser.SelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentExpression([NotNull] PParser.DocumentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentExpression([NotNull] PParser.DocumentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchExpression([NotNull] PParser.FetchExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchExpression([NotNull] PParser.FetchExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadExpression([NotNull] PParser.ReadExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadExpression([NotNull] PParser.ReadExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSortedExpression([NotNull] PParser.SortedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSortedExpression([NotNull] PParser.SortedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallExpression([NotNull] PParser.MethodCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallExpression([NotNull] PParser.MethodCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorExpression([NotNull] PParser.ConstructorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="PParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorExpression([NotNull] PParser.ConstructorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberSelector([NotNull] PParser.MemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberSelector([NotNull] PParser.MemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceSelector([NotNull] PParser.SliceSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceSelector([NotNull] PParser.SliceSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemSelector([NotNull] PParser.ItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="PParser.instance_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemSelector([NotNull] PParser.ItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_expression([NotNull] PParser.Document_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_expression([NotNull] PParser.Document_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor_expression([NotNull] PParser.Constructor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor_expression([NotNull] PParser.Constructor_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentList([NotNull] PParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentList([NotNull] PParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAssignmentList([NotNull] PParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAssignmentList([NotNull] PParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListItem([NotNull] PParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="PParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListItem([NotNull] PParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_assignment([NotNull] PParser.Argument_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_assignment([NotNull] PParser.Argument_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_expression([NotNull] PParser.Read_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_expression([NotNull] PParser.Read_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite_statement([NotNull] PParser.Write_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite_statement([NotNull] PParser.Write_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetch_expression([NotNull] PParser.Fetch_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetch_expression([NotNull] PParser.Fetch_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_expression([NotNull] PParser.Sorted_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_expression([NotNull] PParser.Sorted_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_instance_statement([NotNull] PParser.Assign_instance_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_instance_statement([NotNull] PParser.Assign_instance_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="PParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInstance([NotNull] PParser.MemberInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="PParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInstance([NotNull] PParser.MemberInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="PParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemInstance([NotNull] PParser.ItemInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="PParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemInstance([NotNull] PParser.ItemInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_tuple_statement([NotNull] PParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_tuple_statement([NotNull] PParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfs([NotNull] PParser.LfsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfs([NotNull] PParser.LfsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfp([NotNull] PParser.LfpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfp([NotNull] PParser.LfpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndent([NotNull] PParser.IndentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.indent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndent([NotNull] PParser.IndentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDedent([NotNull] PParser.DedentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.dedent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDedent([NotNull] PParser.DedentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_literal([NotNull] PParser.Null_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_literal([NotNull] PParser.Null_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="PParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullDeclarationList([NotNull] PParser.FullDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="PParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullDeclarationList([NotNull] PParser.FullDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="PParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationListItem([NotNull] PParser.DeclarationListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="PParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationListItem([NotNull] PParser.DeclarationListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="PParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationList([NotNull] PParser.DeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="PParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationList([NotNull] PParser.DeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeDeclaration([NotNull] PParser.AttributeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeDeclaration([NotNull] PParser.AttributeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryDeclaration([NotNull] PParser.CategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryDeclaration([NotNull] PParser.CategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ResourceDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResourceDeclaration([NotNull] PParser.ResourceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ResourceDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResourceDeclaration([NotNull] PParser.ResourceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDeclaration([NotNull] PParser.EnumDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDeclaration([NotNull] PParser.EnumDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] PParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="PParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] PParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_declaration([NotNull] PParser.Resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_declaration([NotNull] PParser.Resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumCategoryDeclaration([NotNull] PParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumCategoryDeclaration([NotNull] PParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="PParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumNativeDeclaration([NotNull] PParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="PParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumNativeDeclaration([NotNull] PParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="PParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolList([NotNull] PParser.NativeSymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="PParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolList([NotNull] PParser.NativeSymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="PParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolListItem([NotNull] PParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="PParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolListItem([NotNull] PParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="PParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolListItem([NotNull] PParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="PParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolListItem([NotNull] PParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="PParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolList([NotNull] PParser.CategorySymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="PParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolList([NotNull] PParser.CategorySymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="PParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolList([NotNull] PParser.SymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="PParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolList([NotNull] PParser.SymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="PParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolListItem([NotNull] PParser.SymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="PParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolListItem([NotNull] PParser.SymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingList([NotNull] PParser.MatchingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingList([NotNull] PParser.MatchingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingSet([NotNull] PParser.MatchingSetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingSet([NotNull] PParser.MatchingSetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingRange([NotNull] PParser.MatchingRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingRange([NotNull] PParser.MatchingRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingPattern([NotNull] PParser.MatchingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingPattern([NotNull] PParser.MatchingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingExpression([NotNull] PParser.MatchingExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="PParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingExpression([NotNull] PParser.MatchingExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_literal([NotNull] PParser.List_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_literal([NotNull] PParser.List_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_literal([NotNull] PParser.Set_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_literal([NotNull] PParser.Set_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="PParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueListItem([NotNull] PParser.ValueListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="PParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueListItem([NotNull] PParser.ValueListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="PParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueList([NotNull] PParser.ValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="PParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueList([NotNull] PParser.ValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_literal([NotNull] PParser.Range_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_literal([NotNull] PParser.Range_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] PParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] PParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryType([NotNull] PParser.PrimaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryType([NotNull] PParser.PrimaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictType([NotNull] PParser.DictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictType([NotNull] PParser.DictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] PParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="PParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] PParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="PParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] PParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="PParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] PParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="PParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryType([NotNull] PParser.CategoryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="PParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryType([NotNull] PParser.CategoryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] PParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] PParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterType([NotNull] PParser.CharacterTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterType([NotNull] PParser.CharacterTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextType([NotNull] PParser.TextTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextType([NotNull] PParser.TextTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] PParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] PParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalType([NotNull] PParser.DecimalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalType([NotNull] PParser.DecimalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateType([NotNull] PParser.DateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateType([NotNull] PParser.DateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeType([NotNull] PParser.DateTimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeType([NotNull] PParser.DateTimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeType([NotNull] PParser.TimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeType([NotNull] PParser.TimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodType([NotNull] PParser.PeriodTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodType([NotNull] PParser.PeriodTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeType([NotNull] PParser.CodeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="PParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeType([NotNull] PParser.CodeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_type([NotNull] PParser.Category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_type([NotNull] PParser.Category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_type([NotNull] PParser.Code_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_type([NotNull] PParser.Code_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.document_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_type([NotNull] PParser.Document_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.document_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_type([NotNull] PParser.Document_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteCategoryDeclaration([NotNull] PParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteCategoryDeclaration([NotNull] PParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryDeclaration([NotNull] PParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryDeclaration([NotNull] PParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingletonCategoryDeclaration([NotNull] PParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="PParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingletonCategoryDeclaration([NotNull] PParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="PParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierListItem([NotNull] PParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="PParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierListItem([NotNull] PParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="PParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierList([NotNull] PParser.TypeIdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="PParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierList([NotNull] PParser.TypeIdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="PParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodVariableIdentifier([NotNull] PParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="PParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodVariableIdentifier([NotNull] PParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="PParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodTypeIdentifier([NotNull] PParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="PParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodTypeIdentifier([NotNull] PParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableIdentifier([NotNull] PParser.VariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableIdentifier([NotNull] PParser.VariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] PParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] PParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolIdentifier([NotNull] PParser.SymbolIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="PParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolIdentifier([NotNull] PParser.SymbolIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier([NotNull] PParser.Variable_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier([NotNull] PParser.Variable_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier([NotNull] PParser.Type_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier([NotNull] PParser.Type_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_identifier([NotNull] PParser.Symbol_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_identifier([NotNull] PParser.Symbol_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentListItem([NotNull] PParser.ArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentListItem([NotNull] PParser.ArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="PParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] PParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="PParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] PParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="PParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeArgument([NotNull] PParser.CodeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="PParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeArgument([NotNull] PParser.CodeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="PParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorArgument([NotNull] PParser.OperatorArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="PParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorArgument([NotNull] PParser.OperatorArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="PParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedArgument([NotNull] PParser.NamedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="PParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedArgument([NotNull] PParser.NamedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="PParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedArgument([NotNull] PParser.TypedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="PParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedArgument([NotNull] PParser.TypedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_argument([NotNull] PParser.Named_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_argument([NotNull] PParser.Named_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_argument([NotNull] PParser.Code_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_argument([NotNull] PParser.Code_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="PParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryArgumentType([NotNull] PParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="PParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryArgumentType([NotNull] PParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="PParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyArgumentType([NotNull] PParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="PParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyArgumentType([NotNull] PParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyType([NotNull] PParser.AnyTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyType([NotNull] PParser.AnyTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyListType([NotNull] PParser.AnyListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyListType([NotNull] PParser.AnyListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyDictType([NotNull] PParser.AnyDictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="PParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyDictType([NotNull] PParser.AnyDictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodListItem([NotNull] PParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodListItem([NotNull] PParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodList([NotNull] PParser.CategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodList([NotNull] PParser.CategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetterMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetterMethod([NotNull] PParser.SetterMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetterMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetterMethod([NotNull] PParser.SetterMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GetterMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetterMethod([NotNull] PParser.GetterMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GetterMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetterMethod([NotNull] PParser.GetterMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberMethod([NotNull] PParser.MemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberMethod([NotNull] PParser.MemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMethod([NotNull] PParser.OperatorMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMethod</c>
	/// labeled alternative in <see cref="PParser.category_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMethod([NotNull] PParser.OperatorMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCategoryMapping([NotNull] PParser.JavaCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCategoryMapping([NotNull] PParser.JavaCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCategoryMapping([NotNull] PParser.CSharpCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCategoryMapping([NotNull] PParser.CSharpCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2CategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2CategoryMapping([NotNull] PParser.Python2CategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2CategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2CategoryMapping([NotNull] PParser.Python2CategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3CategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3CategoryMapping([NotNull] PParser.Python3CategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3CategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3CategoryMapping([NotNull] PParser.Python3CategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptCategoryMapping([NotNull] PParser.JavaScriptCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptCategoryMapping</c>
	/// labeled alternative in <see cref="PParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptCategoryMapping([NotNull] PParser.JavaScriptCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_category_mapping([NotNull] PParser.Python_category_mappingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_category_mapping([NotNull] PParser.Python_category_mappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_module([NotNull] PParser.Python_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_module([NotNull] PParser.Python_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule_token([NotNull] PParser.Module_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule_token([NotNull] PParser.Module_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_category_mapping([NotNull] PParser.Javascript_category_mappingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_category_mapping([NotNull] PParser.Javascript_category_mappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_module([NotNull] PParser.Javascript_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_module([NotNull] PParser.Javascript_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="PParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableList([NotNull] PParser.VariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="PParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableList([NotNull] PParser.VariableListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="PParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableListItem([NotNull] PParser.VariableListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="PParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableListItem([NotNull] PParser.VariableListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractMethod([NotNull] PParser.AbstractMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractMethod([NotNull] PParser.AbstractMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteMethod([NotNull] PParser.ConcreteMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteMethod([NotNull] PParser.ConcreteMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeMethod([NotNull] PParser.NativeMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeMethod([NotNull] PParser.NativeMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTestMethod([NotNull] PParser.TestMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="PParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTestMethod([NotNull] PParser.TestMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="PParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementList([NotNull] PParser.NativeStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="PParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementList([NotNull] PParser.NativeStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="PParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementListItem([NotNull] PParser.NativeStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="PParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementListItem([NotNull] PParser.NativeStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaNativeStatement([NotNull] PParser.JavaNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaNativeStatement([NotNull] PParser.JavaNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpNativeStatement([NotNull] PParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpNativeStatement([NotNull] PParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2NativeStatement([NotNull] PParser.Python2NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2NativeStatement([NotNull] PParser.Python2NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3NativeStatement([NotNull] PParser.Python3NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3NativeStatement([NotNull] PParser.Python3NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptNativeStatement([NotNull] PParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="PParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptNativeStatement([NotNull] PParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_native_statement([NotNull] PParser.Python_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_native_statement([NotNull] PParser.Python_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_native_statement([NotNull] PParser.Javascript_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_native_statement([NotNull] PParser.Javascript_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="PParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementListItem([NotNull] PParser.StatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="PParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementListItem([NotNull] PParser.StatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="PParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] PParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="PParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] PParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="PParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionListItem([NotNull] PParser.AssertionListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="PParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionListItem([NotNull] PParser.AssertionListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="PParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionList([NotNull] PParser.AssertionListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="PParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionList([NotNull] PParser.AssertionListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementListItem([NotNull] PParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementListItem([NotNull] PParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementList([NotNull] PParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="PParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementList([NotNull] PParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="PParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementListItem([NotNull] PParser.CatchStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="PParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementListItem([NotNull] PParser.CatchStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="PParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementList([NotNull] PParser.CatchStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="PParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementList([NotNull] PParser.CatchStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralRangeLiteral([NotNull] PParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralRangeLiteral([NotNull] PParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListLiteral([NotNull] PParser.LiteralListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListLiteral([NotNull] PParser.LiteralListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralSetLiteral([NotNull] PParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralSetLiteral([NotNull] PParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinIntegerLiteral([NotNull] PParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinIntegerLiteral([NotNull] PParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxIntegerLiteral([NotNull] PParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxIntegerLiteral([NotNull] PParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] PParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] PParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimalLiteral([NotNull] PParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimalLiteral([NotNull] PParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterLiteral([NotNull] PParser.CharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterLiteral([NotNull] PParser.CharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] PParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] PParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] PParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] PParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextLiteral([NotNull] PParser.TextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextLiteral([NotNull] PParser.TextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] PParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] PParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] PParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] PParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] PParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] PParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodLiteral([NotNull] PParser.PeriodLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodLiteral([NotNull] PParser.PeriodLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] PParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="PParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] PParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="PParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralList([NotNull] PParser.LiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="PParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralList([NotNull] PParser.LiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="PParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListItem([NotNull] PParser.LiteralListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="PParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListItem([NotNull] PParser.LiteralListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] PParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] PParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] PParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] PParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] PParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] PParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] PParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="PParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] PParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThis_expression([NotNull] PParser.This_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThis_expression([NotNull] PParser.This_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] PParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] PParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicLiteral([NotNull] PParser.AtomicLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicLiteral([NotNull] PParser.AtomicLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionLiteral([NotNull] PParser.CollectionLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="PParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionLiteral([NotNull] PParser.CollectionLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeLiteral([NotNull] PParser.RangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeLiteral([NotNull] PParser.RangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListLiteral([NotNull] PParser.ListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListLiteral([NotNull] PParser.ListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetLiteral([NotNull] PParser.SetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetLiteral([NotNull] PParser.SetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictLiteral([NotNull] PParser.DictLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictLiteral([NotNull] PParser.DictLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleLiteral([NotNull] PParser.TupleLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="PParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleLiteral([NotNull] PParser.TupleLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_literal([NotNull] PParser.Tuple_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_literal([NotNull] PParser.Tuple_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_literal([NotNull] PParser.Dict_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_literal([NotNull] PParser.Dict_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="PParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTupleItem([NotNull] PParser.ValueTupleItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="PParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTupleItem([NotNull] PParser.ValueTupleItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="PParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTuple([NotNull] PParser.ValueTupleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="PParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTuple([NotNull] PParser.ValueTupleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="PParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryList([NotNull] PParser.DictEntryListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="PParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryList([NotNull] PParser.DictEntryListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="PParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryListItem([NotNull] PParser.DictEntryListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="PParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryListItem([NotNull] PParser.DictEntryListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry([NotNull] PParser.Dict_entryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry([NotNull] PParser.Dict_entryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstAndLast([NotNull] PParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstAndLast([NotNull] PParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstOnly([NotNull] PParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstOnly([NotNull] PParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLastOnly([NotNull] PParser.SliceLastOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="PParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLastOnly([NotNull] PParser.SliceLastOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_variable_statement([NotNull] PParser.Assign_variable_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_variable_statement([NotNull] PParser.Assign_variable_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="PParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRootInstance([NotNull] PParser.RootInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="PParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRootInstance([NotNull] PParser.RootInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="PParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChildInstance([NotNull] PParser.ChildInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="PParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChildInstance([NotNull] PParser.ChildInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="PParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsATypeExpression([NotNull] PParser.IsATypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="PParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsATypeExpression([NotNull] PParser.IsATypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="PParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsOtherExpression([NotNull] PParser.IsOtherExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="PParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsOtherExpression([NotNull] PParser.IsOtherExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorPlus([NotNull] PParser.OperatorPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorPlus([NotNull] PParser.OperatorPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMinus([NotNull] PParser.OperatorMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMinus([NotNull] PParser.OperatorMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMultiply([NotNull] PParser.OperatorMultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMultiply([NotNull] PParser.OperatorMultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorDivide([NotNull] PParser.OperatorDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorDivide([NotNull] PParser.OperatorDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIDivide([NotNull] PParser.OperatorIDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIDivide([NotNull] PParser.OperatorIDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorModulo([NotNull] PParser.OperatorModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="PParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorModulo([NotNull] PParser.OperatorModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey_token([NotNull] PParser.Key_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey_token([NotNull] PParser.Key_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_token([NotNull] PParser.Value_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_token([NotNull] PParser.Value_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbols_token([NotNull] PParser.Symbols_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbols_token([NotNull] PParser.Symbols_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] PParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] PParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] PParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] PParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivide([NotNull] PParser.DivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivide([NotNull] PParser.DivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdivide([NotNull] PParser.IdivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdivide([NotNull] PParser.IdivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulo([NotNull] PParser.ModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulo([NotNull] PParser.ModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="PParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptReturnStatement([NotNull] PParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="PParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptReturnStatement([NotNull] PParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="PParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptStatement([NotNull] PParser.JavascriptStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="PParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptStatement([NotNull] PParser.JavascriptStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptPrimaryExpression([NotNull] PParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptPrimaryExpression([NotNull] PParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptSelectorExpression([NotNull] PParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptSelectorExpression([NotNull] PParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptParenthesisExpression([NotNull] PParser.JavascriptParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptParenthesisExpression([NotNull] PParser.JavascriptParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIdentifierExpression([NotNull] PParser.JavascriptIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIdentifierExpression([NotNull] PParser.JavascriptIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptLiteralExpression([NotNull] PParser.JavascriptLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptLiteralExpression([NotNull] PParser.JavascriptLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptMethodExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptMethodExpression([NotNull] PParser.JavascriptMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptMethodExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptMethodExpression([NotNull] PParser.JavascriptMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptItemExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptItemExpression([NotNull] PParser.JavascriptItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptItemExpression</c>
	/// labeled alternative in <see cref="PParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptItemExpression([NotNull] PParser.JavascriptItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_method_expression([NotNull] PParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_method_expression([NotNull] PParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentListItem([NotNull] PParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentListItem([NotNull] PParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="PParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentList([NotNull] PParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="PParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentList([NotNull] PParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_item_expression([NotNull] PParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_item_expression([NotNull] PParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_parenthesis_expression([NotNull] PParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_parenthesis_expression([NotNull] PParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptChildIdentifier([NotNull] PParser.JavascriptChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptChildIdentifier([NotNull] PParser.JavascriptChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIdentifier</c>
	/// labeled alternative in <see cref="PParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIdentifier([NotNull] PParser.JavascriptIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIdentifier</c>
	/// labeled alternative in <see cref="PParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIdentifier([NotNull] PParser.JavascriptIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIntegerLiteral([NotNull] PParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIntegerLiteral([NotNull] PParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptDecimalLiteral([NotNull] PParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptDecimalLiteral([NotNull] PParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptTextLiteral([NotNull] PParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptTextLiteral([NotNull] PParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptBooleanLiteral([NotNull] PParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptBooleanLiteral([NotNull] PParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptCharacterLiteral([NotNull] PParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptCharacterLiteral([NotNull] PParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier([NotNull] PParser.Javascript_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier([NotNull] PParser.Javascript_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="PParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonReturnStatement([NotNull] PParser.PythonReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="PParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonReturnStatement([NotNull] PParser.PythonReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="PParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonStatement([NotNull] PParser.PythonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="PParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonStatement([NotNull] PParser.PythonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPrimaryExpression([NotNull] PParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPrimaryExpression([NotNull] PParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelectorExpression([NotNull] PParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelectorExpression([NotNull] PParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonParenthesisExpression([NotNull] PParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonParenthesisExpression([NotNull] PParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifierExpression([NotNull] PParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifierExpression([NotNull] PParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonLiteralExpression([NotNull] PParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonLiteralExpression([NotNull] PParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonGlobalMethodExpression([NotNull] PParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="PParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonGlobalMethodExpression([NotNull] PParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="PParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonMethodExpression([NotNull] PParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="PParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonMethodExpression([NotNull] PParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="PParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonItemExpression([NotNull] PParser.PythonItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="PParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonItemExpression([NotNull] PParser.PythonItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_method_expression([NotNull] PParser.Python_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_method_expression([NotNull] PParser.Python_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalOnlyArgumentList([NotNull] PParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalOnlyArgumentList([NotNull] PParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedOnlyArgumentList([NotNull] PParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedOnlyArgumentList([NotNull] PParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonArgumentList([NotNull] PParser.PythonArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonArgumentList([NotNull] PParser.PythonArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentListItem([NotNull] PParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentListItem([NotNull] PParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentList([NotNull] PParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentList([NotNull] PParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentListItem([NotNull] PParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentListItem([NotNull] PParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentList([NotNull] PParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="PParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentList([NotNull] PParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_parenthesis_expression([NotNull] PParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_parenthesis_expression([NotNull] PParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonChildIdentifier([NotNull] PParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonChildIdentifier([NotNull] PParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="PParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifier([NotNull] PParser.PythonIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="PParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifier([NotNull] PParser.PythonIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIntegerLiteral([NotNull] PParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIntegerLiteral([NotNull] PParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonDecimalLiteral([NotNull] PParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonDecimalLiteral([NotNull] PParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonTextLiteral([NotNull] PParser.PythonTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonTextLiteral([NotNull] PParser.PythonTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonBooleanLiteral([NotNull] PParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonBooleanLiteral([NotNull] PParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonCharacterLiteral([NotNull] PParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonCharacterLiteral([NotNull] PParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_identifier([NotNull] PParser.Python_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_identifier([NotNull] PParser.Python_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="PParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaReturnStatement([NotNull] PParser.JavaReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="PParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaReturnStatement([NotNull] PParser.JavaReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="PParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaStatement([NotNull] PParser.JavaStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="PParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaStatement([NotNull] PParser.JavaStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaPrimaryExpression([NotNull] PParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaPrimaryExpression([NotNull] PParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaSelectorExpression([NotNull] PParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaSelectorExpression([NotNull] PParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaParenthesisExpression([NotNull] PParser.JavaParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaParenthesisExpression([NotNull] PParser.JavaParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifierExpression([NotNull] PParser.JavaIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifierExpression([NotNull] PParser.JavaIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaLiteralExpression([NotNull] PParser.JavaLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaLiteralExpression([NotNull] PParser.JavaLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="PParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaMethodExpression([NotNull] PParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="PParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaMethodExpression([NotNull] PParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="PParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaItemExpression([NotNull] PParser.JavaItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="PParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaItemExpression([NotNull] PParser.JavaItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_method_expression([NotNull] PParser.Java_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_method_expression([NotNull] PParser.Java_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="PParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentList([NotNull] PParser.JavaArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="PParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentList([NotNull] PParser.JavaArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentListItem([NotNull] PParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentListItem([NotNull] PParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_item_expression([NotNull] PParser.Java_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_item_expression([NotNull] PParser.Java_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_parenthesis_expression([NotNull] PParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_parenthesis_expression([NotNull] PParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifier([NotNull] PParser.JavaIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifier([NotNull] PParser.JavaIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildIdentifier([NotNull] PParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildIdentifier([NotNull] PParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildClassIdentifier([NotNull] PParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildClassIdentifier([NotNull] PParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaClassIdentifier([NotNull] PParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="PParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaClassIdentifier([NotNull] PParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIntegerLiteral([NotNull] PParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIntegerLiteral([NotNull] PParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaDecimalLiteral([NotNull] PParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaDecimalLiteral([NotNull] PParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaTextLiteral([NotNull] PParser.JavaTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaTextLiteral([NotNull] PParser.JavaTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaBooleanLiteral([NotNull] PParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaBooleanLiteral([NotNull] PParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCharacterLiteral([NotNull] PParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCharacterLiteral([NotNull] PParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_identifier([NotNull] PParser.Java_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_identifier([NotNull] PParser.Java_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="PParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpReturnStatement([NotNull] PParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="PParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpReturnStatement([NotNull] PParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="PParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpStatement([NotNull] PParser.CSharpStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="PParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpStatement([NotNull] PParser.CSharpStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPrimaryExpression([NotNull] PParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPrimaryExpression([NotNull] PParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpSelectorExpression([NotNull] PParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpSelectorExpression([NotNull] PParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpParenthesisExpression([NotNull] PParser.CSharpParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpParenthesisExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpParenthesisExpression([NotNull] PParser.CSharpParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifierExpression([NotNull] PParser.CSharpIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifierExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifierExpression([NotNull] PParser.CSharpIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpLiteralExpression([NotNull] PParser.CSharpLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpLiteralExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpLiteralExpression([NotNull] PParser.CSharpLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpMethodExpression([NotNull] PParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpMethodExpression([NotNull] PParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpItemExpression([NotNull] PParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="PParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpItemExpression([NotNull] PParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_method_expression([NotNull] PParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_method_expression([NotNull] PParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="PParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentList([NotNull] PParser.CSharpArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="PParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentList([NotNull] PParser.CSharpArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentListItem([NotNull] PParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="PParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentListItem([NotNull] PParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_item_expression([NotNull] PParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_item_expression([NotNull] PParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_parenthesis_expression([NotNull] PParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_parenthesis_expression([NotNull] PParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="PParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifier([NotNull] PParser.CSharpIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="PParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifier([NotNull] PParser.CSharpIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpChildIdentifier([NotNull] PParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="PParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpChildIdentifier([NotNull] PParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIntegerLiteral([NotNull] PParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIntegerLiteral([NotNull] PParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpDecimalLiteral([NotNull] PParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpDecimalLiteral([NotNull] PParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpTextLiteral([NotNull] PParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpTextLiteral([NotNull] PParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpBooleanLiteral([NotNull] PParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpBooleanLiteral([NotNull] PParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCharacterLiteral([NotNull] PParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="PParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCharacterLiteral([NotNull] PParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_identifier([NotNull] PParser.Csharp_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_identifier([NotNull] PParser.Csharp_identifierContext context);
}
} // namespace presto.parser
