//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace presto.parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class OParser : AbstractParser {
	public const int
		SPACE=1, WS=2, LF=3, JAVA=4, CSHARP=5, PYTHON2=6, PYTHON3=7, JAVASCRIPT=8, 
		SWIFT=9, COLON=10, SEMI=11, COMMA=12, RANGE=13, DOT=14, LPAR=15, RPAR=16, 
		LBRAK=17, RBRAK=18, LCURL=19, RCURL=20, QMARK=21, XMARK=22, DOLLAR=23, 
		AMP=24, AMP2=25, PIPE=26, PIPE2=27, PLUS=28, MINUS=29, STAR=30, SLASH=31, 
		BSLASH=32, PERCENT=33, GT=34, GTE=35, LT=36, LTE=37, LTGT=38, EQ=39, XEQ=40, 
		EQ2=41, TEQ=42, TILDE=43, LARROW=44, RARROW=45, BOOLEAN=46, CHARACTER=47, 
		TEXT=48, INTEGER=49, DECIMAL=50, DATE=51, TIME=52, DATETIME=53, PERIOD=54, 
		METHOD_T=55, CODE=56, DOCUMENT=57, ABSTRACT=58, ALL=59, ALWAYS=60, AND=61, 
		ANY=62, AS=63, ATTR=64, ATTRIBUTE=65, ATTRIBUTES=66, CASE=67, CATCH=68, 
		CATEGORY=69, CLASS=70, CLOSE=71, CONTAINS=72, DEF=73, DEFAULT=74, DEFINE=75, 
		DO=76, DOING=77, EACH=78, ELSE=79, ENUM=80, ENUMERATED=81, EXCEPT=82, 
		EXECUTE=83, EXPECTING=84, EXTENDS=85, FETCH=86, FINALLY=87, FOR=88, FROM=89, 
		GETTER=90, IF=91, IN=92, INVOKE=93, IS=94, MAPPINGS=95, MATCHING=96, METHOD=97, 
		METHODS=98, MODULO=99, NATIVE=100, NONE=101, NOT=102, NOTHING=103, NULL=104, 
		ON=105, OPEN=106, OPERATOR=107, OR=108, OTHERWISE=109, PASS=110, RAISE=111, 
		READ=112, RECEIVING=113, RESOURCE=114, RETURN=115, RETURNING=116, SELF=117, 
		SETTER=118, SINGLETON=119, SORTED=120, SWITCH=121, TEST=122, THIS=123, 
		THROW=124, TO=125, TRY=126, WITH=127, WHEN=128, WHERE=129, WHILE=130, 
		WRITE=131, BOOLEAN_LITERAL=132, CHAR_LITERAL=133, MIN_INTEGER=134, MAX_INTEGER=135, 
		SYMBOL_IDENTIFIER=136, TYPE_IDENTIFIER=137, VARIABLE_IDENTIFIER=138, TEXT_LITERAL=139, 
		INTEGER_LITERAL=140, HEXA_LITERAL=141, DECIMAL_LITERAL=142, DATETIME_LITERAL=143, 
		TIME_LITERAL=144, DATE_LITERAL=145, PERIOD_LITERAL=146, COMMENT=147;
	public const int
		RULE_enum_category_declaration = 0, RULE_enum_native_declaration = 1, 
		RULE_category_symbol = 2, RULE_native_symbol = 3, RULE_attribute_declaration = 4, 
		RULE_concrete_category_declaration = 5, RULE_singleton_category_declaration = 6, 
		RULE_derived_list = 7, RULE_category_method_list = 8, RULE_member_method_declaration = 9, 
		RULE_operator_method_declaration = 10, RULE_setter_method_declaration = 11, 
		RULE_getter_method_declaration = 12, RULE_native_resource_declaration = 13, 
		RULE_native_category_declaration = 14, RULE_native_category_mappings = 15, 
		RULE_native_category_mapping_list = 16, RULE_attribute_list = 17, RULE_abstract_method_declaration = 18, 
		RULE_concrete_method_declaration = 19, RULE_native_method_declaration = 20, 
		RULE_test_method_declaration = 21, RULE_assertion = 22, RULE_typed_argument = 23, 
		RULE_statement_or_list = 24, RULE_statement = 25, RULE_with_resource_statement = 26, 
		RULE_with_singleton_statement = 27, RULE_switch_statement = 28, RULE_switch_case_statement = 29, 
		RULE_for_each_statement = 30, RULE_do_while_statement = 31, RULE_while_statement = 32, 
		RULE_if_statement = 33, RULE_else_if_statement_list = 34, RULE_raise_statement = 35, 
		RULE_try_statement = 36, RULE_catch_statement = 37, RULE_return_statement = 38, 
		RULE_method_call = 39, RULE_method_selector = 40, RULE_callable_parent = 41, 
		RULE_callable_selector = 42, RULE_expression = 43, RULE_closure_expression = 44, 
		RULE_instance_expression = 45, RULE_method_expression = 46, RULE_document_expression = 47, 
		RULE_read_expression = 48, RULE_write_statement = 49, RULE_fetch_expression = 50, 
		RULE_sorted_expression = 51, RULE_selector_expression = 52, RULE_constructor_expression = 53, 
		RULE_argument_assignment_list = 54, RULE_argument_assignment = 55, RULE_assign_instance_statement = 56, 
		RULE_child_instance = 57, RULE_assign_tuple_statement = 58, RULE_null_literal = 59, 
		RULE_declaration_list = 60, RULE_declarations = 61, RULE_declaration = 62, 
		RULE_resource_declaration = 63, RULE_enum_declaration = 64, RULE_native_symbol_list = 65, 
		RULE_category_symbol_list = 66, RULE_symbol_list = 67, RULE_attribute_constraint = 68, 
		RULE_list_literal = 69, RULE_set_literal = 70, RULE_expression_list = 71, 
		RULE_range_literal = 72, RULE_typedef = 73, RULE_primary_type = 74, RULE_native_type = 75, 
		RULE_category_type = 76, RULE_code_type = 77, RULE_document_type = 78, 
		RULE_category_declaration = 79, RULE_type_identifier_list = 80, RULE_method_identifier = 81, 
		RULE_identifier = 82, RULE_variable_identifier = 83, RULE_type_identifier = 84, 
		RULE_symbol_identifier = 85, RULE_argument_list = 86, RULE_argument = 87, 
		RULE_operator_argument = 88, RULE_named_argument = 89, RULE_code_argument = 90, 
		RULE_category_or_any_type = 91, RULE_any_type = 92, RULE_category_method_declaration_list = 93, 
		RULE_category_method_declaration = 94, RULE_native_category_mapping = 95, 
		RULE_python_category_mapping = 96, RULE_python_module = 97, RULE_module_token = 98, 
		RULE_javascript_category_mapping = 99, RULE_javascript_module = 100, RULE_variable_identifier_list = 101, 
		RULE_method_declaration = 102, RULE_native_statement_list = 103, RULE_native_statement = 104, 
		RULE_python_native_statement = 105, RULE_javascript_native_statement = 106, 
		RULE_statement_list = 107, RULE_assertion_list = 108, RULE_switch_case_statement_list = 109, 
		RULE_catch_statement_list = 110, RULE_literal_collection = 111, RULE_atomic_literal = 112, 
		RULE_literal_list_literal = 113, RULE_selectable_expression = 114, RULE_this_expression = 115, 
		RULE_parenthesis_expression = 116, RULE_literal_expression = 117, RULE_collection_literal = 118, 
		RULE_tuple_literal = 119, RULE_dict_literal = 120, RULE_expression_tuple = 121, 
		RULE_dict_entry_list = 122, RULE_dict_entry = 123, RULE_slice_arguments = 124, 
		RULE_assign_variable_statement = 125, RULE_assignable_instance = 126, 
		RULE_is_expression = 127, RULE_operator = 128, RULE_key_token = 129, RULE_value_token = 130, 
		RULE_symbols_token = 131, RULE_assign = 132, RULE_multiply = 133, RULE_divide = 134, 
		RULE_idivide = 135, RULE_modulo = 136, RULE_lfs = 137, RULE_lfp = 138, 
		RULE_javascript_statement = 139, RULE_javascript_expression = 140, RULE_javascript_primary_expression = 141, 
		RULE_javascript_selector_expression = 142, RULE_javascript_method_expression = 143, 
		RULE_javascript_arguments = 144, RULE_javascript_item_expression = 145, 
		RULE_javascript_parenthesis_expression = 146, RULE_javascript_identifier_expression = 147, 
		RULE_javascript_literal_expression = 148, RULE_javascript_identifier = 149, 
		RULE_python_statement = 150, RULE_python_expression = 151, RULE_python_primary_expression = 152, 
		RULE_python_selector_expression = 153, RULE_python_method_expression = 154, 
		RULE_python_argument_list = 155, RULE_python_ordinal_argument_list = 156, 
		RULE_python_named_argument_list = 157, RULE_python_parenthesis_expression = 158, 
		RULE_python_identifier_expression = 159, RULE_python_literal_expression = 160, 
		RULE_python_identifier = 161, RULE_java_statement = 162, RULE_java_expression = 163, 
		RULE_java_primary_expression = 164, RULE_java_selector_expression = 165, 
		RULE_java_method_expression = 166, RULE_java_arguments = 167, RULE_java_item_expression = 168, 
		RULE_java_parenthesis_expression = 169, RULE_java_identifier_expression = 170, 
		RULE_java_class_identifier_expression = 171, RULE_java_literal_expression = 172, 
		RULE_java_identifier = 173, RULE_csharp_statement = 174, RULE_csharp_expression = 175, 
		RULE_csharp_primary_expression = 176, RULE_csharp_selector_expression = 177, 
		RULE_csharp_method_expression = 178, RULE_csharp_arguments = 179, RULE_csharp_item_expression = 180, 
		RULE_csharp_parenthesis_expression = 181, RULE_csharp_identifier_expression = 182, 
		RULE_csharp_literal_expression = 183, RULE_csharp_identifier = 184;
	public static readonly string[] ruleNames = {
		"enum_category_declaration", "enum_native_declaration", "category_symbol", 
		"native_symbol", "attribute_declaration", "concrete_category_declaration", 
		"singleton_category_declaration", "derived_list", "category_method_list", 
		"member_method_declaration", "operator_method_declaration", "setter_method_declaration", 
		"getter_method_declaration", "native_resource_declaration", "native_category_declaration", 
		"native_category_mappings", "native_category_mapping_list", "attribute_list", 
		"abstract_method_declaration", "concrete_method_declaration", "native_method_declaration", 
		"test_method_declaration", "assertion", "typed_argument", "statement_or_list", 
		"statement", "with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "return_statement", "method_call", "method_selector", 
		"callable_parent", "callable_selector", "expression", "closure_expression", 
		"instance_expression", "method_expression", "document_expression", "read_expression", 
		"write_statement", "fetch_expression", "sorted_expression", "selector_expression", 
		"constructor_expression", "argument_assignment_list", "argument_assignment", 
		"assign_instance_statement", "child_instance", "assign_tuple_statement", 
		"null_literal", "declaration_list", "declarations", "declaration", "resource_declaration", 
		"enum_declaration", "native_symbol_list", "category_symbol_list", "symbol_list", 
		"attribute_constraint", "list_literal", "set_literal", "expression_list", 
		"range_literal", "typedef", "primary_type", "native_type", "category_type", 
		"code_type", "document_type", "category_declaration", "type_identifier_list", 
		"method_identifier", "identifier", "variable_identifier", "type_identifier", 
		"symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"category_method_declaration_list", "category_method_declaration", "native_category_mapping", 
		"python_category_mapping", "python_module", "module_token", "javascript_category_mapping", 
		"javascript_module", "variable_identifier_list", "method_declaration", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"selectable_expression", "this_expression", "parenthesis_expression", 
		"literal_expression", "collection_literal", "tuple_literal", "dict_literal", 
		"expression_tuple", "dict_entry_list", "dict_entry", "slice_arguments", 
		"assign_variable_statement", "assignable_instance", "is_expression", "operator", 
		"key_token", "value_token", "symbols_token", "assign", "multiply", "divide", 
		"idivide", "modulo", "lfs", "lfp", "javascript_statement", "javascript_expression", 
		"javascript_primary_expression", "javascript_selector_expression", "javascript_method_expression", 
		"javascript_arguments", "javascript_item_expression", "javascript_parenthesis_expression", 
		"javascript_identifier_expression", "javascript_literal_expression", "javascript_identifier", 
		"python_statement", "python_expression", "python_primary_expression", 
		"python_selector_expression", "python_method_expression", "python_argument_list", 
		"python_ordinal_argument_list", "python_named_argument_list", "python_parenthesis_expression", 
		"python_identifier_expression", "python_literal_expression", "python_identifier", 
		"java_statement", "java_expression", "java_primary_expression", "java_selector_expression", 
		"java_method_expression", "java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_selector_expression", "csharp_method_expression", "csharp_arguments", 
		"csharp_item_expression", "csharp_parenthesis_expression", "csharp_identifier_expression", 
		"csharp_literal_expression", "csharp_identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", null, null, "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", 
		"'JavaScript:'", "'Swift:'", "':'", "';'", "','", "'..'", "'.'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'?'", "'!'", "'$'", "'&'", "'&&'", 
		"'|'", "'||'", "'+'", "'-'", "'*'", "'/'", "'\\'", "'%'", "'>'", "'>='", 
		"'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", "'~'", "'<-'", "'->'", 
		"'Boolean'", "'Character'", "'Text'", "'Integer'", "'Decimal'", "'Date'", 
		"'Time'", "'DateTime'", "'Period'", "'Method'", "'Code'", "'Document'", 
		"'abstract'", "'all'", "'always'", "'and'", "'any'", "'as'", "'attr'", 
		"'attribute'", "'attributes'", "'case'", "'catch'", "'category'", "'class'", 
		"'close'", "'contains'", "'def'", "'default'", "'define'", "'do'", "'doing'", 
		"'each'", "'else'", "'enum'", "'enumerated'", "'except'", "'execute'", 
		"'expecting'", "'extends'", "'fetch'", "'finally'", "'for'", "'from'", 
		"'getter'", "'if'", "'in'", "'invoke'", "'is'", "'mappings'", "'matching'", 
		"'method'", "'methods'", "'modulo'", "'native'", "'None'", "'not'", null, 
		"'null'", "'on'", "'open'", "'operator'", "'or'", "'otherwise'", "'pass'", 
		"'raise'", "'read'", "'receiving'", "'resource'", "'return'", "'returning'", 
		"'self'", "'setter'", "'singleton'", "'sorted'", "'switch'", "'test'", 
		"'this'", "'throw'", "'to'", "'try'", "'with'", "'when'", "'where'", "'while'", 
		"'write'", null, null, "'MIN_INTEGER'", "'MAX_INTEGER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "WS", "LF", "JAVA", "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", 
		"SWIFT", "COLON", "SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
		"RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "DOLLAR", "AMP", "AMP2", 
		"PIPE", "PIPE2", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", "PERCENT", 
		"GT", "GTE", "LT", "LTE", "LTGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", 
		"LARROW", "RARROW", "BOOLEAN", "CHARACTER", "TEXT", "INTEGER", "DECIMAL", 
		"DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", "CODE", "DOCUMENT", 
		"ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", "AS", "ATTR", "ATTRIBUTE", 
		"ATTRIBUTES", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", 
		"DEF", "DEFAULT", "DEFINE", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
		"EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", "FINALLY", "FOR", 
		"FROM", "GETTER", "IF", "IN", "INVOKE", "IS", "MAPPINGS", "MATCHING", 
		"METHOD", "METHODS", "MODULO", "NATIVE", "NONE", "NOT", "NOTHING", "NULL", 
		"ON", "OPEN", "OPERATOR", "OR", "OTHERWISE", "PASS", "RAISE", "READ", 
		"RECEIVING", "RESOURCE", "RETURN", "RETURNING", "SELF", "SETTER", "SINGLETON", 
		"SORTED", "SWITCH", "TEST", "THIS", "THROW", "TO", "TRY", "WITH", "WHEN", 
		"WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
		"MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", 
		"TEXT_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", 
		"DATETIME_LITERAL", "TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public OParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Enum_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Type_identifierContext derived;
		public Category_symbol_listContext symbols;
		public ITerminalNode ENUMERATED() { return GetToken(OParser.ENUMERATED, 0); }
		public ITerminalNode CATEGORY() { return GetToken(OParser.CATEGORY, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode EXTENDS() { return GetToken(OParser.EXTENDS, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Enum_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEnum_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEnum_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_category_declarationContext enum_category_declaration() {
		Enum_category_declarationContext _localctx = new Enum_category_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_enum_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(ENUMERATED);
			State = 371; Match(CATEGORY);
			State = 372; _localctx.name = type_identifier();
			State = 377;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 373; Match(LPAR);
				State = 374; _localctx.attrs = attribute_list(0);
				State = 375; Match(RPAR);
				}
			}

			State = 381;
			_la = TokenStream.La(1);
			if (_la==EXTENDS) {
				{
				State = 379; Match(EXTENDS);
				State = 380; _localctx.derived = type_identifier();
				}
			}

			State = 383; Match(LCURL);
			State = 384; _localctx.symbols = category_symbol_list(0);
			State = 385; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_native_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Native_typeContext typ;
		public Native_symbol_listContext symbols;
		public ITerminalNode ENUMERATED() { return GetToken(OParser.ENUMERATED, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Enum_native_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_native_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEnum_native_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEnum_native_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_native_declarationContext enum_native_declaration() {
		Enum_native_declarationContext _localctx = new Enum_native_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_enum_native_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(ENUMERATED);
			State = 388; _localctx.name = type_identifier();
			State = 389; Match(LPAR);
			State = 390; _localctx.typ = native_type();
			State = 391; Match(RPAR);
			State = 392; Match(LCURL);
			State = 393; _localctx.symbols = native_symbol_list(0);
			State = 394; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Category_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategory_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategory_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbolContext category_symbol() {
		Category_symbolContext _localctx = new Category_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_category_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; _localctx.name = symbol_identifier();
			State = 397; Match(LPAR);
			State = 398; _localctx.args = argument_assignment_list(0);
			State = 399; Match(RPAR);
			State = 400; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbolContext : ParserRuleContext {
		public Symbol_identifierContext name;
		public ExpressionContext exp;
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Native_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNative_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNative_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbolContext native_symbol() {
		Native_symbolContext _localctx = new Native_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_native_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; _localctx.name = symbol_identifier();
			State = 403; Match(EQ);
			State = 404; _localctx.exp = expression(0);
			State = 405; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public TypedefContext typ;
		public Attribute_constraintContext match;
		public ITerminalNode ATTRIBUTE() { return GetToken(OParser.ATTRIBUTE, 0); }
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Attribute_constraintContext attribute_constraint() {
			return GetRuleContext<Attribute_constraintContext>(0);
		}
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(ATTRIBUTE);
			State = 408; _localctx.name = variable_identifier();
			State = 409; Match(COLON);
			State = 410; _localctx.typ = typedef(0);
			State = 412;
			_la = TokenStream.La(1);
			if (_la==IN || _la==MATCHING) {
				{
				State = 411; _localctx.match = attribute_constraint();
				}
			}

			State = 414; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Derived_listContext derived;
		public Category_method_listContext methods;
		public ITerminalNode CATEGORY() { return GetToken(OParser.CATEGORY, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Category_method_listContext category_method_list() {
			return GetRuleContext<Category_method_listContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode EXTENDS() { return GetToken(OParser.EXTENDS, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public Concrete_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConcrete_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConcrete_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_category_declarationContext concrete_category_declaration() {
		Concrete_category_declarationContext _localctx = new Concrete_category_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_concrete_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(CATEGORY);
			State = 417; _localctx.name = type_identifier();
			State = 422;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 418; Match(LPAR);
				State = 419; _localctx.attrs = attribute_list(0);
				State = 420; Match(RPAR);
				}
			}

			State = 426;
			_la = TokenStream.La(1);
			if (_la==EXTENDS) {
				{
				State = 424; Match(EXTENDS);
				State = 425; _localctx.derived = derived_list(0);
				}
			}

			State = 428; _localctx.methods = category_method_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleton_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Category_method_listContext methods;
		public ITerminalNode SINGLETON() { return GetToken(OParser.SINGLETON, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Category_method_listContext category_method_list() {
			return GetRuleContext<Category_method_listContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Singleton_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleton_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSingleton_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSingleton_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Singleton_category_declarationContext singleton_category_declaration() {
		Singleton_category_declarationContext _localctx = new Singleton_category_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleton_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(SINGLETON);
			State = 431; _localctx.name = type_identifier();
			State = 436;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 432; Match(LPAR);
				State = 433; _localctx.attrs = attribute_list(0);
				State = 434; Match(RPAR);
				}
			}

			State = 438; _localctx.methods = category_method_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_listContext : ParserRuleContext {
		public Derived_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_list; } }
	 
		public Derived_listContext() { }
		public virtual void CopyFrom(Derived_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DerivedListContext : Derived_listContext {
		public Type_identifierContext item;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public DerivedListContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDerivedList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDerivedList(this);
		}
	}
	public partial class DerivedListItemContext : Derived_listContext {
		public Derived_listContext items;
		public Type_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Derived_listContext derived_list() {
			return GetRuleContext<Derived_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public DerivedListItemContext(Derived_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDerivedListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDerivedListItem(this);
		}
	}

	[RuleVersion(0)]
	public Derived_listContext derived_list() {
		return derived_list(0);
	}

	private Derived_listContext derived_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Derived_listContext _localctx = new Derived_listContext(Context, _parentState);
		Derived_listContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_derived_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DerivedListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 441; ((DerivedListContext)_localctx).item = type_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DerivedListItemContext(new Derived_listContext(_parentctx, _parentState));
					((DerivedListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_derived_list);
					State = 443;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 444; Match(COMMA);
					State = 445; ((DerivedListItemContext)_localctx).item = type_identifier();
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_method_listContext : ParserRuleContext {
		public Category_method_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_method_list; } }
	 
		public Category_method_listContext() { }
		public virtual void CopyFrom(Category_method_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyCategoryMethodListContext : Category_method_listContext {
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public EmptyCategoryMethodListContext(Category_method_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEmptyCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEmptyCategoryMethodList(this);
		}
	}
	public partial class CurlyCategoryMethodListContext : Category_method_listContext {
		public Category_method_declaration_listContext items;
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Category_method_declaration_listContext category_method_declaration_list() {
			return GetRuleContext<Category_method_declaration_listContext>(0);
		}
		public CurlyCategoryMethodListContext(Category_method_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCurlyCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCurlyCategoryMethodList(this);
		}
	}

	[RuleVersion(0)]
	public Category_method_listContext category_method_list() {
		Category_method_listContext _localctx = new Category_method_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_category_method_list);
		int _la;
		try {
			State = 457;
			switch (TokenStream.La(1)) {
			case SEMI:
				_localctx = new EmptyCategoryMethodListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 451; Match(SEMI);
				}
				break;
			case LCURL:
				_localctx = new CurlyCategoryMethodListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; Match(LCURL);
				State = 454;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (GETTER - 90)) | (1L << (METHOD - 90)) | (1L << (OPERATOR - 90)) | (1L << (SETTER - 90)) | (1L << (TYPE_IDENTIFIER - 90)))) != 0)) {
					{
					State = 453; ((CurlyCategoryMethodListContext)_localctx).items = category_method_declaration_list(0);
					}
				}

				State = 456; Match(RCURL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_method_declarationContext : ParserRuleContext {
		public TypedefContext typ;
		public Method_identifierContext name;
		public Argument_listContext args;
		public Statement_listContext stmts;
		public ITerminalNode METHOD() { return GetToken(OParser.METHOD, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Member_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMember_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMember_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Member_method_declarationContext member_method_declaration() {
		Member_method_declarationContext _localctx = new Member_method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_member_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || _la==TYPE_IDENTIFIER) {
				{
				State = 459; _localctx.typ = typedef(0);
				}
			}

			State = 462; Match(METHOD);
			State = 463; _localctx.name = method_identifier();
			State = 464; Match(LPAR);
			State = 466;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE) | (1L << ANY))) != 0) || _la==TYPE_IDENTIFIER || _la==VARIABLE_IDENTIFIER) {
				{
				State = 465; _localctx.args = argument_list(0);
				}
			}

			State = 468; Match(RPAR);
			State = 469; Match(LCURL);
			State = 471;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 470; _localctx.stmts = statement_list(0);
				}
			}

			State = 473; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_method_declarationContext : ParserRuleContext {
		public TypedefContext typ;
		public OperatorContext op;
		public Operator_argumentContext arg;
		public Statement_listContext stmts;
		public ITerminalNode OPERATOR() { return GetToken(OParser.OPERATOR, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Operator_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperator_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperator_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_method_declarationContext operator_method_declaration() {
		Operator_method_declarationContext _localctx = new Operator_method_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_operator_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || _la==TYPE_IDENTIFIER) {
				{
				State = 475; _localctx.typ = typedef(0);
				}
			}

			State = 478; Match(OPERATOR);
			State = 479; _localctx.op = @operator();
			State = 480; Match(LPAR);
			State = 481; _localctx.arg = operator_argument();
			State = 482; Match(RPAR);
			State = 483; Match(LCURL);
			State = 485;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 484; _localctx.stmts = statement_list(0);
				}
			}

			State = 487; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode SETTER() { return GetToken(OParser.SETTER, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Setter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Setter_method_declarationContext setter_method_declaration() {
		Setter_method_declarationContext _localctx = new Setter_method_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_setter_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(SETTER);
			State = 490; _localctx.name = variable_identifier();
			State = 491; Match(LCURL);
			State = 493;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 492; _localctx.stmts = statement_list(0);
				}
			}

			State = 495; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_method_declarationContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode GETTER() { return GetToken(OParser.GETTER, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Getter_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterGetter_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitGetter_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Getter_method_declarationContext getter_method_declaration() {
		Getter_method_declarationContext _localctx = new Getter_method_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_getter_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(GETTER);
			State = 498; _localctx.name = variable_identifier();
			State = 499; Match(LCURL);
			State = 501;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 500; _localctx.stmts = statement_list(0);
				}
			}

			State = 503; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_resource_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_mappingsContext mappings;
		public ITerminalNode NATIVE() { return GetToken(OParser.NATIVE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(OParser.RESOURCE, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_mappingsContext native_category_mappings() {
			return GetRuleContext<Native_category_mappingsContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNative_resource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNative_resource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_resource_declarationContext native_resource_declaration() {
		Native_resource_declarationContext _localctx = new Native_resource_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_native_resource_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(NATIVE);
			State = 506; Match(RESOURCE);
			State = 507; _localctx.name = type_identifier();
			State = 512;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 508; Match(LPAR);
				State = 509; _localctx.attrs = attribute_list(0);
				State = 510; Match(RPAR);
				}
			}

			State = 514; Match(LCURL);
			State = 515; _localctx.mappings = native_category_mappings();
			State = 516; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_declarationContext : ParserRuleContext {
		public Type_identifierContext name;
		public Attribute_listContext attrs;
		public Native_category_mappingsContext mappings;
		public ITerminalNode NATIVE() { return GetToken(OParser.NATIVE, 0); }
		public ITerminalNode CATEGORY() { return GetToken(OParser.CATEGORY, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Native_category_mappingsContext native_category_mappings() {
			return GetRuleContext<Native_category_mappingsContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Native_category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNative_category_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNative_category_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_declarationContext native_category_declaration() {
		Native_category_declarationContext _localctx = new Native_category_declarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_native_category_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(NATIVE);
			State = 519; Match(CATEGORY);
			State = 520; _localctx.name = type_identifier();
			State = 525;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 521; Match(LPAR);
				State = 522; _localctx.attrs = attribute_list(0);
				State = 523; Match(RPAR);
				}
			}

			State = 527; Match(LCURL);
			State = 528; _localctx.mappings = native_category_mappings();
			State = 529; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_mappingsContext : ParserRuleContext {
		public Native_category_mapping_listContext items;
		public ITerminalNode CATEGORY() { return GetToken(OParser.CATEGORY, 0); }
		public ITerminalNode MAPPINGS() { return GetToken(OParser.MAPPINGS, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Native_category_mapping_listContext native_category_mapping_list() {
			return GetRuleContext<Native_category_mapping_listContext>(0);
		}
		public Native_category_mappingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_mappings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNative_category_mappings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNative_category_mappings(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_mappingsContext native_category_mappings() {
		Native_category_mappingsContext _localctx = new Native_category_mappingsContext(Context, State);
		EnterRule(_localctx, 30, RULE_native_category_mappings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(CATEGORY);
			State = 532; Match(MAPPINGS);
			State = 533; Match(LCURL);
			State = 534; _localctx.items = native_category_mapping_list(0);
			State = 535; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_mapping_listContext : ParserRuleContext {
		public Native_category_mapping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_mapping_list; } }
	 
		public Native_category_mapping_listContext() { }
		public virtual void CopyFrom(Native_category_mapping_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeCategoryMappingListContext : Native_category_mapping_listContext {
		public Native_category_mappingContext item;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Native_category_mappingContext native_category_mapping() {
			return GetRuleContext<Native_category_mappingContext>(0);
		}
		public NativeCategoryMappingListContext(Native_category_mapping_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMappingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMappingList(this);
		}
	}
	public partial class NativeCategoryMappingListItemContext : Native_category_mapping_listContext {
		public Native_category_mapping_listContext items;
		public Native_category_mappingContext item;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Native_category_mapping_listContext native_category_mapping_list() {
			return GetRuleContext<Native_category_mapping_listContext>(0);
		}
		public Native_category_mappingContext native_category_mapping() {
			return GetRuleContext<Native_category_mappingContext>(0);
		}
		public NativeCategoryMappingListItemContext(Native_category_mapping_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryMappingListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryMappingListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_mapping_listContext native_category_mapping_list() {
		return native_category_mapping_list(0);
	}

	private Native_category_mapping_listContext native_category_mapping_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_category_mapping_listContext _localctx = new Native_category_mapping_listContext(Context, _parentState);
		Native_category_mapping_listContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_native_category_mapping_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeCategoryMappingListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 538; ((NativeCategoryMappingListContext)_localctx).item = native_category_mapping();
			State = 539; Match(SEMI);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeCategoryMappingListItemContext(new Native_category_mapping_listContext(_parentctx, _parentState));
					((NativeCategoryMappingListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_category_mapping_list);
					State = 541;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 542; ((NativeCategoryMappingListItemContext)_localctx).item = native_category_mapping();
					State = 543; Match(SEMI);
					}
					} 
				}
				State = 549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
	 
		public Attribute_listContext() { }
		public virtual void CopyFrom(Attribute_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttributeListItemContext : Attribute_listContext {
		public Attribute_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AttributeListItemContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAttributeListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAttributeListItem(this);
		}
	}
	public partial class AttributeListContext : Attribute_listContext {
		public Variable_identifierContext item;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public AttributeListContext(Attribute_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		return attribute_list(0);
	}

	private Attribute_listContext attribute_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Attribute_listContext _localctx = new Attribute_listContext(Context, _parentState);
		Attribute_listContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_attribute_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AttributeListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 551; ((AttributeListContext)_localctx).item = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributeListItemContext(new Attribute_listContext(_parentctx, _parentState));
					((AttributeListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_attribute_list);
					State = 553;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 554; Match(COMMA);
					State = 555; ((AttributeListItemContext)_localctx).item = variable_identifier();
					}
					} 
				}
				State = 560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Abstract_method_declarationContext : ParserRuleContext {
		public TypedefContext typ;
		public Method_identifierContext name;
		public Argument_listContext args;
		public ITerminalNode ABSTRACT() { return GetToken(OParser.ABSTRACT, 0); }
		public ITerminalNode METHOD() { return GetToken(OParser.METHOD, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Abstract_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAbstract_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAbstract_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_method_declarationContext abstract_method_declaration() {
		Abstract_method_declarationContext _localctx = new Abstract_method_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_abstract_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(ABSTRACT);
			State = 563;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || _la==TYPE_IDENTIFIER) {
				{
				State = 562; _localctx.typ = typedef(0);
				}
			}

			State = 565; Match(METHOD);
			State = 566; _localctx.name = method_identifier();
			State = 567; Match(LPAR);
			State = 569;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE) | (1L << ANY))) != 0) || _la==TYPE_IDENTIFIER || _la==VARIABLE_IDENTIFIER) {
				{
				State = 568; _localctx.args = argument_list(0);
				}
			}

			State = 571; Match(RPAR);
			State = 572; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concrete_method_declarationContext : ParserRuleContext {
		public TypedefContext typ;
		public Method_identifierContext name;
		public Argument_listContext args;
		public Statement_listContext stmts;
		public ITerminalNode METHOD() { return GetToken(OParser.METHOD, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Concrete_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concrete_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConcrete_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConcrete_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Concrete_method_declarationContext concrete_method_declaration() {
		Concrete_method_declarationContext _localctx = new Concrete_method_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_concrete_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || _la==TYPE_IDENTIFIER) {
				{
				State = 574; _localctx.typ = typedef(0);
				}
			}

			State = 577; Match(METHOD);
			State = 578; _localctx.name = method_identifier();
			State = 579; Match(LPAR);
			State = 581;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE) | (1L << ANY))) != 0) || _la==TYPE_IDENTIFIER || _la==VARIABLE_IDENTIFIER) {
				{
				State = 580; _localctx.args = argument_list(0);
				}
			}

			State = 583; Match(RPAR);
			State = 584; Match(LCURL);
			State = 586;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 585; _localctx.stmts = statement_list(0);
				}
			}

			State = 588; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_method_declarationContext : ParserRuleContext {
		public TypedefContext typ;
		public Method_identifierContext name;
		public Argument_listContext args;
		public Native_statement_listContext stmts;
		public ITerminalNode NATIVE() { return GetToken(OParser.NATIVE, 0); }
		public ITerminalNode METHOD() { return GetToken(OParser.METHOD, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Native_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNative_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNative_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Native_method_declarationContext native_method_declaration() {
		Native_method_declarationContext _localctx = new Native_method_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_native_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || _la==TYPE_IDENTIFIER) {
				{
				State = 590; _localctx.typ = typedef(0);
				}
			}

			State = 593; Match(NATIVE);
			State = 594; Match(METHOD);
			State = 595; _localctx.name = method_identifier();
			State = 596; Match(LPAR);
			State = 598;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE) | (1L << ANY))) != 0) || _la==TYPE_IDENTIFIER || _la==VARIABLE_IDENTIFIER) {
				{
				State = 597; _localctx.args = argument_list(0);
				}
			}

			State = 600; Match(RPAR);
			State = 601; Match(LCURL);
			State = 602; _localctx.stmts = native_statement_list(0);
			State = 603; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_method_declarationContext : ParserRuleContext {
		public IToken name;
		public Statement_listContext stmts;
		public Assertion_listContext exps;
		public Symbol_identifierContext error;
		public ITerminalNode TEST() { return GetToken(OParser.TEST, 0); }
		public ITerminalNode METHOD() { return GetToken(OParser.METHOD, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode[] LCURL() { return GetTokens(OParser.LCURL); }
		public ITerminalNode LCURL(int i) {
			return GetToken(OParser.LCURL, i);
		}
		public ITerminalNode[] RCURL() { return GetTokens(OParser.RCURL); }
		public ITerminalNode RCURL(int i) {
			return GetToken(OParser.RCURL, i);
		}
		public ITerminalNode EXPECTING() { return GetToken(OParser.EXPECTING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Test_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTest_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTest_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Test_method_declarationContext test_method_declaration() {
		Test_method_declarationContext _localctx = new Test_method_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_test_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(TEST);
			State = 606; Match(METHOD);
			State = 607; _localctx.name = Match(TEXT_LITERAL);
			State = 608; Match(LPAR);
			State = 609; Match(RPAR);
			State = 610; Match(LCURL);
			State = 611; _localctx.stmts = statement_list(0);
			State = 612; Match(RCURL);
			State = 613; Match(EXPECTING);
			State = 621;
			switch (TokenStream.La(1)) {
			case LCURL:
				{
				{
				State = 614; Match(LCURL);
				State = 615; _localctx.exps = assertion_list(0);
				State = 616; Match(RCURL);
				}
				}
				break;
			case SYMBOL_IDENTIFIER:
				{
				{
				State = 618; _localctx.error = symbol_identifier();
				State = 619; Match(SEMI);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; _localctx.exp = expression(0);
			State = 624; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_argumentContext : ParserRuleContext {
		public Category_or_any_typeContext typ;
		public Attribute_listContext attrs;
		public Variable_identifierContext name;
		public Literal_expressionContext value;
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Typed_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTyped_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTyped_argument(this);
		}
	}

	[RuleVersion(0)]
	public Typed_argumentContext typed_argument() {
		Typed_argumentContext _localctx = new Typed_argumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_typed_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; _localctx.typ = category_or_any_type();
			State = 631;
			_la = TokenStream.La(1);
			if (_la==LPAR) {
				{
				State = 627; Match(LPAR);
				State = 628; _localctx.attrs = attribute_list(0);
				State = 629; Match(RPAR);
				}
			}

			State = 633; _localctx.name = variable_identifier();
			State = 636;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 634; Match(EQ);
				State = 635; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_or_listContext : ParserRuleContext {
		public Statement_or_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_or_list; } }
	 
		public Statement_or_listContext() { }
		public virtual void CopyFrom(Statement_or_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CurlyStatementListContext : Statement_or_listContext {
		public Statement_listContext items;
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CurlyStatementListContext(Statement_or_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCurlyStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCurlyStatementList(this);
		}
	}
	public partial class SingleStatementContext : Statement_or_listContext {
		public StatementContext stmt;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SingleStatementContext(Statement_or_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
	}

	[RuleVersion(0)]
	public Statement_or_listContext statement_or_list() {
		Statement_or_listContext _localctx = new Statement_or_listContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement_or_list);
		try {
			State = 645;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case DO:
			case FOR:
			case IF:
			case METHOD:
			case RETURN:
			case SWITCH:
			case THROW:
			case TRY:
			case WITH:
			case WHILE:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new SingleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 638; ((SingleStatementContext)_localctx).stmt = statement();
				}
				break;
			case LCURL:
				_localctx = new CurlyStatementListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 639; Match(LCURL);
				State = 643;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 640; ((CurlyStatementListContext)_localctx).items = statement_list(0);
					State = 641; Match(RCURL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignInstanceStatementContext : StatementContext {
		public Assign_instance_statementContext stmt;
		public Assign_instance_statementContext assign_instance_statement() {
			return GetRuleContext<Assign_instance_statementContext>(0);
		}
		public AssignInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssignInstanceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssignInstanceStatement(this);
		}
	}
	public partial class WithResourceStatementContext : StatementContext {
		public With_resource_statementContext stmt;
		public With_resource_statementContext with_resource_statement() {
			return GetRuleContext<With_resource_statementContext>(0);
		}
		public WithResourceStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWithResourceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWithResourceStatement(this);
		}
	}
	public partial class AssignTupleStatementContext : StatementContext {
		public Assign_tuple_statementContext stmt;
		public Assign_tuple_statementContext assign_tuple_statement() {
			return GetRuleContext<Assign_tuple_statementContext>(0);
		}
		public AssignTupleStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssignTupleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssignTupleStatement(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		public Write_statementContext stmt;
		public Write_statementContext write_statement() {
			return GetRuleContext<Write_statementContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public While_statementContext stmt;
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ClosureStatementContext : StatementContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ClosureStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterClosureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitClosureStatement(this);
		}
	}
	public partial class MethodCallStatementContext : StatementContext {
		public Method_callContext stmt;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodCallStatement(this);
		}
	}
	public partial class WithSingletonStatementContext : StatementContext {
		public With_singleton_statementContext stmt;
		public With_singleton_statementContext with_singleton_statement() {
			return GetRuleContext<With_singleton_statementContext>(0);
		}
		public WithSingletonStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWithSingletonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWithSingletonStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public Return_statementContext stmt;
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class DoWhileStatementContext : StatementContext {
		public Do_while_statementContext stmt;
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public DoWhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public If_statementContext stmt;
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		public Switch_statementContext stmt;
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class RaiseStatementContext : StatementContext {
		public Raise_statementContext stmt;
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public RaiseStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRaiseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRaiseStatement(this);
		}
	}
	public partial class ForEachStatementContext : StatementContext {
		public For_each_statementContext stmt;
		public For_each_statementContext for_each_statement() {
			return GetRuleContext<For_each_statementContext>(0);
		}
		public ForEachStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
	}
	public partial class TryStatementContext : StatementContext {
		public Try_statementContext stmt;
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public TryStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		try {
			State = 664;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new MethodCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 647; ((MethodCallStatementContext)_localctx).stmt = method_call();
				State = 648; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AssignInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 650; ((AssignInstanceStatementContext)_localctx).stmt = assign_instance_statement();
				}
				break;
			case 3:
				_localctx = new AssignTupleStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; ((AssignTupleStatementContext)_localctx).stmt = assign_tuple_statement();
				}
				break;
			case 4:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 652; ((ReturnStatementContext)_localctx).stmt = return_statement();
				}
				break;
			case 5:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 653; ((IfStatementContext)_localctx).stmt = if_statement();
				}
				break;
			case 6:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 654; ((SwitchStatementContext)_localctx).stmt = switch_statement();
				}
				break;
			case 7:
				_localctx = new ForEachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 655; ((ForEachStatementContext)_localctx).stmt = for_each_statement();
				}
				break;
			case 8:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 656; ((WhileStatementContext)_localctx).stmt = while_statement();
				}
				break;
			case 9:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 657; ((DoWhileStatementContext)_localctx).stmt = do_while_statement();
				}
				break;
			case 10:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 658; ((TryStatementContext)_localctx).stmt = try_statement();
				}
				break;
			case 11:
				_localctx = new RaiseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 659; ((RaiseStatementContext)_localctx).stmt = raise_statement();
				}
				break;
			case 12:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 660; ((WriteStatementContext)_localctx).stmt = write_statement();
				}
				break;
			case 13:
				_localctx = new WithResourceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 661; ((WithResourceStatementContext)_localctx).stmt = with_resource_statement();
				}
				break;
			case 14:
				_localctx = new WithSingletonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 662; ((WithSingletonStatementContext)_localctx).stmt = with_singleton_statement();
				}
				break;
			case 15:
				_localctx = new ClosureStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 663; ((ClosureStatementContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_resource_statementContext : ParserRuleContext {
		public Assign_variable_statementContext stmt;
		public Statement_or_listContext stmts;
		public ITerminalNode WITH() { return GetToken(OParser.WITH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Assign_variable_statementContext assign_variable_statement() {
			return GetRuleContext<Assign_variable_statementContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public With_resource_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_resource_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWith_resource_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWith_resource_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_resource_statementContext with_resource_statement() {
		With_resource_statementContext _localctx = new With_resource_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_with_resource_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(WITH);
			State = 667; Match(LPAR);
			State = 668; _localctx.stmt = assign_variable_statement();
			State = 669; Match(RPAR);
			State = 670; _localctx.stmts = statement_or_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_singleton_statementContext : ParserRuleContext {
		public Type_identifierContext typ;
		public Statement_or_listContext stmts;
		public ITerminalNode WITH() { return GetToken(OParser.WITH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public With_singleton_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_singleton_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWith_singleton_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWith_singleton_statement(this);
		}
	}

	[RuleVersion(0)]
	public With_singleton_statementContext with_singleton_statement() {
		With_singleton_statementContext _localctx = new With_singleton_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_with_singleton_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; Match(WITH);
			State = 673; Match(LPAR);
			State = 674; _localctx.typ = type_identifier();
			State = 675; Match(RPAR);
			State = 676; _localctx.stmts = statement_or_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Switch_case_statement_listContext cases;
		public Statement_listContext stmts;
		public ITerminalNode SWITCH() { return GetToken(OParser.SWITCH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(OParser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_switch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(SWITCH);
			State = 679; Match(LPAR);
			State = 680; _localctx.exp = expression(0);
			State = 681; Match(RPAR);
			State = 682; Match(LCURL);
			State = 683; _localctx.cases = switch_case_statement_list(0);
			State = 689;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 684; Match(DEFAULT);
				State = 685; Match(COLON);
				State = 687;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
					{
					State = 686; _localctx.stmts = statement_list(0);
					}
				}

				}
			}

			State = 691; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_case_statementContext : ParserRuleContext {
		public Switch_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement; } }
	 
		public Switch_case_statementContext() { }
		public virtual void CopyFrom(Switch_case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomicSwitchCaseContext : Switch_case_statementContext {
		public Atomic_literalContext exp;
		public Statement_listContext stmts;
		public ITerminalNode CASE() { return GetToken(OParser.CASE, 0); }
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public AtomicSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAtomicSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAtomicSwitchCase(this);
		}
	}
	public partial class CollectionSwitchCaseContext : Switch_case_statementContext {
		public Literal_collectionContext exp;
		public Statement_listContext stmts;
		public ITerminalNode CASE() { return GetToken(OParser.CASE, 0); }
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public Literal_collectionContext literal_collection() {
			return GetRuleContext<Literal_collectionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CollectionSwitchCaseContext(Switch_case_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCollectionSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCollectionSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statementContext switch_case_statement() {
		Switch_case_statementContext _localctx = new Switch_case_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_switch_case_statement);
		try {
			State = 706;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new AtomicSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 693; Match(CASE);
				State = 694; ((AtomicSwitchCaseContext)_localctx).exp = atomic_literal();
				State = 695; Match(COLON);
				State = 697;
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 696; ((AtomicSwitchCaseContext)_localctx).stmts = statement_list(0);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new CollectionSwitchCaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 699; Match(CASE);
				State = 700; Match(IN);
				State = 701; ((CollectionSwitchCaseContext)_localctx).exp = literal_collection();
				State = 702; Match(COLON);
				State = 704;
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 703; ((CollectionSwitchCaseContext)_localctx).stmts = statement_list(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_statementContext : ParserRuleContext {
		public Variable_identifierContext name1;
		public Variable_identifierContext name2;
		public ExpressionContext source;
		public Statement_or_listContext stmts;
		public ITerminalNode FOR() { return GetToken(OParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(OParser.EACH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Variable_identifierContext[] variable_identifier() {
			return GetRuleContexts<Variable_identifierContext>();
		}
		public Variable_identifierContext variable_identifier(int i) {
			return GetRuleContext<Variable_identifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public For_each_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterFor_each_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitFor_each_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_each_statementContext for_each_statement() {
		For_each_statementContext _localctx = new For_each_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_for_each_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; Match(FOR);
			State = 709; Match(EACH);
			State = 710; Match(LPAR);
			State = 711; _localctx.name1 = variable_identifier();
			State = 714;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 712; Match(COMMA);
				State = 713; _localctx.name2 = variable_identifier();
				}
			}

			State = 716; Match(IN);
			State = 717; _localctx.source = expression(0);
			State = 718; Match(RPAR);
			State = 719; _localctx.stmts = statement_or_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Statement_listContext stmts;
		public ExpressionContext exp;
		public ITerminalNode DO() { return GetToken(OParser.DO, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public ITerminalNode WHILE() { return GetToken(OParser.WHILE, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_do_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; Match(DO);
			State = 722; Match(LCURL);
			State = 724;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 723; _localctx.stmts = statement_list(0);
				}
			}

			State = 726; Match(RCURL);
			State = 727; Match(WHILE);
			State = 728; Match(LPAR);
			State = 729; _localctx.exp = expression(0);
			State = 730; Match(RPAR);
			State = 731; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_or_listContext stmts;
		public ITerminalNode WHILE() { return GetToken(OParser.WHILE, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(WHILE);
			State = 734; Match(LPAR);
			State = 735; _localctx.exp = expression(0);
			State = 736; Match(RPAR);
			State = 737; _localctx.stmts = statement_or_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public Statement_or_listContext stmts;
		public Else_if_statement_listContext elseIfs;
		public Statement_or_listContext elseStmts;
		public ITerminalNode IF() { return GetToken(OParser.IF, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_or_listContext[] statement_or_list() {
			return GetRuleContexts<Statement_or_listContext>();
		}
		public Statement_or_listContext statement_or_list(int i) {
			return GetRuleContext<Statement_or_listContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(OParser.ELSE, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(IF);
			State = 740; Match(LPAR);
			State = 741; _localctx.exp = expression(0);
			State = 742; Match(RPAR);
			State = 743; _localctx.stmts = statement_or_list();
			State = 745;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 744; _localctx.elseIfs = else_if_statement_list(0);
				}
				break;
			}
			State = 749;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 747; Match(ELSE);
				State = 748; _localctx.elseStmts = statement_or_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statement_listContext : ParserRuleContext {
		public Else_if_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement_list; } }
	 
		public Else_if_statement_listContext() { }
		public virtual void CopyFrom(Else_if_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfStatementListContext : Else_if_statement_listContext {
		public ExpressionContext exp;
		public Statement_or_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(OParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(OParser.IF, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public ElseIfStatementListContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementList(this);
		}
	}
	public partial class ElseIfStatementListItemContext : Else_if_statement_listContext {
		public Else_if_statement_listContext items;
		public ExpressionContext exp;
		public Statement_or_listContext stmts;
		public ITerminalNode ELSE() { return GetToken(OParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(OParser.IF, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Else_if_statement_listContext else_if_statement_list() {
			return GetRuleContext<Else_if_statement_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_or_listContext statement_or_list() {
			return GetRuleContext<Statement_or_listContext>(0);
		}
		public ElseIfStatementListItemContext(Else_if_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statement_listContext else_if_statement_list() {
		return else_if_statement_list(0);
	}

	private Else_if_statement_listContext else_if_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Else_if_statement_listContext _localctx = new Else_if_statement_listContext(Context, _parentState);
		Else_if_statement_listContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_else_if_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ElseIfStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 752; Match(ELSE);
			State = 753; Match(IF);
			State = 754; Match(LPAR);
			State = 755; ((ElseIfStatementListContext)_localctx).exp = expression(0);
			State = 756; Match(RPAR);
			State = 757; ((ElseIfStatementListContext)_localctx).stmts = statement_or_list();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 769;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseIfStatementListItemContext(new Else_if_statement_listContext(_parentctx, _parentState));
					((ElseIfStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_else_if_statement_list);
					State = 759;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 760; Match(ELSE);
					State = 761; Match(IF);
					State = 762; Match(LPAR);
					State = 763; ((ElseIfStatementListItemContext)_localctx).exp = expression(0);
					State = 764; Match(RPAR);
					State = 765; ((ElseIfStatementListItemContext)_localctx).stmts = statement_or_list();
					}
					} 
				}
				State = 771;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode THROW() { return GetToken(OParser.THROW, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRaise_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRaise_statement(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_raise_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; Match(THROW);
			State = 773; _localctx.exp = expression(0);
			State = 774; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Statement_listContext stmts;
		public Catch_statement_listContext handlers;
		public Statement_listContext anyStmts;
		public Statement_listContext finalStmts;
		public ITerminalNode TRY() { return GetToken(OParser.TRY, 0); }
		public ITerminalNode[] LPAR() { return GetTokens(OParser.LPAR); }
		public ITerminalNode LPAR(int i) {
			return GetToken(OParser.LPAR, i);
		}
		public ITerminalNode[] RPAR() { return GetTokens(OParser.RPAR); }
		public ITerminalNode RPAR(int i) {
			return GetToken(OParser.RPAR, i);
		}
		public ITerminalNode[] LCURL() { return GetTokens(OParser.LCURL); }
		public ITerminalNode LCURL(int i) {
			return GetToken(OParser.LCURL, i);
		}
		public ITerminalNode[] RCURL() { return GetTokens(OParser.RCURL); }
		public ITerminalNode RCURL(int i) {
			return GetToken(OParser.RCURL, i);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode CATCH() { return GetToken(OParser.CATCH, 0); }
		public ITerminalNode ANY() { return GetToken(OParser.ANY, 0); }
		public ITerminalNode FINALLY() { return GetToken(OParser.FINALLY, 0); }
		public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(TRY);
			State = 777; Match(LPAR);
			State = 778; _localctx.name = variable_identifier();
			State = 779; Match(RPAR);
			State = 780; Match(LCURL);
			State = 782;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
				{
				State = 781; _localctx.stmts = statement_list(0);
				}
			}

			State = 784; Match(RCURL);
			State = 786;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 785; _localctx.handlers = catch_statement_list(0);
				}
				break;
			}
			State = 797;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 788; Match(CATCH);
				State = 789; Match(LPAR);
				State = 790; Match(ANY);
				State = 791; Match(RPAR);
				State = 792; Match(LCURL);
				State = 794;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
					{
					State = 793; _localctx.anyStmts = statement_list(0);
					}
				}

				State = 796; Match(RCURL);
				}
				break;
			}
			State = 805;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 799; Match(FINALLY);
				State = 800; Match(LCURL);
				State = 802;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
					{
					State = 801; _localctx.finalStmts = statement_list(0);
					}
				}

				State = 804; Match(RCURL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
	 
		public Catch_statementContext() { }
		public virtual void CopyFrom(Catch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchAtomicStatementContext : Catch_statementContext {
		public Symbol_identifierContext name;
		public Statement_listContext stmts;
		public ITerminalNode CATCH() { return GetToken(OParser.CATCH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchAtomicStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCatchAtomicStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCatchAtomicStatement(this);
		}
	}
	public partial class CatchCollectionStatementContext : Catch_statementContext {
		public Symbol_listContext exp;
		public Statement_listContext stmts;
		public ITerminalNode CATCH() { return GetToken(OParser.CATCH, 0); }
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public CatchCollectionStatementContext(Catch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCatchCollectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCatchCollectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_catch_statement);
		int _la;
		try {
			State = 828;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new CatchAtomicStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 807; Match(CATCH);
				State = 808; Match(LPAR);
				State = 809; ((CatchAtomicStatementContext)_localctx).name = symbol_identifier();
				State = 810; Match(RPAR);
				State = 811; Match(LCURL);
				State = 813;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
					{
					State = 812; ((CatchAtomicStatementContext)_localctx).stmts = statement_list(0);
					}
				}

				State = 815; Match(RCURL);
				}
				break;
			case 2:
				_localctx = new CatchCollectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 817; Match(CATCH);
				State = 818; Match(IN);
				State = 819; Match(LPAR);
				State = 820; ((CatchCollectionStatementContext)_localctx).exp = symbol_list(0);
				State = 821; Match(RPAR);
				State = 822; Match(LCURL);
				State = 824;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD) | (1L << CODE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (DO - 76)) | (1L << (FOR - 76)) | (1L << (IF - 76)) | (1L << (METHOD - 76)) | (1L << (RETURN - 76)) | (1L << (SWITCH - 76)) | (1L << (THROW - 76)) | (1L << (TRY - 76)) | (1L << (WITH - 76)) | (1L << (WHILE - 76)) | (1L << (WRITE - 76)) | (1L << (SYMBOL_IDENTIFIER - 76)) | (1L << (TYPE_IDENTIFIER - 76)) | (1L << (VARIABLE_IDENTIFIER - 76)))) != 0)) {
					{
					State = 823; ((CatchCollectionStatementContext)_localctx).stmts = statement_list(0);
					}
				}

				State = 826; Match(RCURL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode RETURN() { return GetToken(OParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; Match(RETURN);
			State = 832;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 831; _localctx.exp = expression(0);
				}
			}

			State = 834; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		public Method_selectorContext method;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 78, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; _localctx.method = method_selector();
			State = 837; Match(LPAR);
			State = 839;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 838; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 841; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_selectorContext : ParserRuleContext {
		public Method_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_selector; } }
	 
		public Method_selectorContext() { }
		public virtual void CopyFrom(Method_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodNameContext : Method_selectorContext {
		public Method_identifierContext name;
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodNameContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}
	public partial class MethodParentContext : Method_selectorContext {
		public Callable_parentContext parent;
		public Method_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Method_identifierContext method_identifier() {
			return GetRuleContext<Method_identifierContext>(0);
		}
		public MethodParentContext(Method_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodParent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodParent(this);
		}
	}

	[RuleVersion(0)]
	public Method_selectorContext method_selector() {
		Method_selectorContext _localctx = new Method_selectorContext(Context, State);
		EnterRule(_localctx, 80, RULE_method_selector);
		try {
			State = 848;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new MethodNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 843; ((MethodNameContext)_localctx).name = method_identifier();
				}
				break;
			case 2:
				_localctx = new MethodParentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 844; ((MethodParentContext)_localctx).parent = callable_parent(0);
				State = 845; Match(DOT);
				State = 846; ((MethodParentContext)_localctx).name = method_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_parentContext : ParserRuleContext {
		public Callable_parentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_parent; } }
	 
		public Callable_parentContext() { }
		public virtual void CopyFrom(Callable_parentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableRootContext : Callable_parentContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CallableRootContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCallableRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCallableRoot(this);
		}
	}
	public partial class CallableSelectorContext : Callable_parentContext {
		public Callable_parentContext parent;
		public Callable_selectorContext select;
		public Callable_parentContext callable_parent() {
			return GetRuleContext<Callable_parentContext>(0);
		}
		public Callable_selectorContext callable_selector() {
			return GetRuleContext<Callable_selectorContext>(0);
		}
		public CallableSelectorContext(Callable_parentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCallableSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCallableSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_parentContext callable_parent() {
		return callable_parent(0);
	}

	private Callable_parentContext callable_parent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Callable_parentContext _localctx = new Callable_parentContext(Context, _parentState);
		Callable_parentContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_callable_parent, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallableRootContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 851; ((CallableRootContext)_localctx).name = identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 857;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallableSelectorContext(new Callable_parentContext(_parentctx, _parentState));
					((CallableSelectorContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_callable_parent);
					State = 853;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 854; ((CallableSelectorContext)_localctx).select = callable_selector();
					}
					} 
				}
				State = 859;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Callable_selectorContext : ParserRuleContext {
		public Callable_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_selector; } }
	 
		public Callable_selectorContext() { }
		public virtual void CopyFrom(Callable_selectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallableItemSelectorContext : Callable_selectorContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallableItemSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCallableItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCallableItemSelector(this);
		}
	}
	public partial class CallableMemberSelectorContext : Callable_selectorContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public CallableMemberSelectorContext(Callable_selectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCallableMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCallableMemberSelector(this);
		}
	}

	[RuleVersion(0)]
	public Callable_selectorContext callable_selector() {
		Callable_selectorContext _localctx = new Callable_selectorContext(Context, State);
		EnterRule(_localctx, 84, RULE_callable_selector);
		try {
			State = 866;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CallableMemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 860; Match(DOT);
				State = 861; ((CallableMemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case LBRAK:
				_localctx = new CallableItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 862; Match(LBRAK);
				State = 863; ((CallableItemSelectorContext)_localctx).exp = expression(0);
				State = 864; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ITerminalNode QMARK() { return GetToken(OParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class ClosureExpressionContext : ExpressionContext {
		public Closure_expressionContext exp;
		public Closure_expressionContext closure_expression() {
			return GetRuleContext<Closure_expressionContext>(0);
		}
		public ClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode PIPE2() { return GetToken(OParser.PIPE2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EQ2() { return GetToken(OParser.EQ2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
	}
	public partial class IntDivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIntDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIntDivideExpression(this);
		}
	}
	public partial class NotContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(OParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(OParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAnyExpression(this);
		}
	}
	public partial class RoughlyEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TEQ() { return GetToken(OParser.TEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoughlyEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRoughlyEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRoughlyEqualsExpression(this);
		}
	}
	public partial class ContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitContainsExpression(this);
		}
	}
	public partial class CodeExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode CODE() { return GetToken(OParser.CODE, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CodeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCodeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCodeExpression(this);
		}
	}
	public partial class NotEqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode XEQ() { return GetToken(OParser.XEQ, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotEqualsExpression(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public Category_or_any_typeContext right;
		public ExpressionContext left;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class InstanceExpressionContext : ExpressionContext {
		public Instance_expressionContext exp;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public InstanceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterInstanceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitInstanceExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode XMARK() { return GetToken(OParser.XMARK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class MethodExpressionContext : ExpressionContext {
		public Method_expressionContext exp;
		public Method_expressionContext method_expression() {
			return GetRuleContext<Method_expressionContext>(0);
		}
		public MethodExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodExpression(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GT() { return GetToken(OParser.GT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(OParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(OParser.MINUS, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
	}
	public partial class GreaterThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GTE() { return GetToken(OParser.GTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualExpression(this);
		}
	}
	public partial class NotContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(OParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(OParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotContainsAllExpression(this);
		}
	}
	public partial class LessThanOrEqualExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LTE() { return GetToken(OParser.LTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualExpression(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AMP2() { return GetToken(OParser.AMP2, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
	}
	public partial class ExecuteExpressionContext : ExpressionContext {
		public Variable_identifierContext name;
		public ITerminalNode EXECUTE() { return GetToken(OParser.EXECUTE, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExecuteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterExecuteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitExecuteExpression(this);
		}
	}
	public partial class ContainsAllExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ITerminalNode ALL() { return GetToken(OParser.ALL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAllExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterContainsAllExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitContainsAllExpression(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LT() { return GetToken(OParser.LT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
	}
	public partial class NotInExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(OParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotInExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotInExpression(this);
		}
	}
	public partial class NotContainsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode NOT() { return GetToken(OParser.NOT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotContainsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNotContainsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNotContainsExpression(this);
		}
	}
	public partial class ContainsAnyExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode CONTAINS() { return GetToken(OParser.CONTAINS, 0); }
		public ITerminalNode ANY() { return GetToken(OParser.ANY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ContainsAnyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterContainsAnyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitContainsAnyExpression(this);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(OParser.IS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		public ExpressionContext exp;
		public ITerminalNode MINUS() { return GetToken(OParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
	}
	public partial class IsNotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public Is_expressionContext right;
		public ITerminalNode IS() { return GetToken(OParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(OParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Is_expressionContext is_expression() {
			return GetRuleContext<Is_expressionContext>(0);
		}
		public IsNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIsNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIsNotExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 869; Match(MINUS);
				State = 870; ((MinusExpressionContext)_localctx).exp = expression(31);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 871; Match(XMARK);
				State = 872; ((NotExpressionContext)_localctx).exp = expression(30);
				}
				break;
			case 3:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 873; Match(LPAR);
				State = 874; ((CastExpressionContext)_localctx).right = category_or_any_type();
				State = 875; Match(RPAR);
				State = 876; ((CastExpressionContext)_localctx).left = expression(12);
				}
				break;
			case 4:
				{
				_localctx = new InstanceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 878; ((InstanceExpressionContext)_localctx).exp = instance_expression(0);
				}
				break;
			case 5:
				{
				_localctx = new MethodExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 879; ((MethodExpressionContext)_localctx).exp = method_expression();
				}
				break;
			case 6:
				{
				_localctx = new CodeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 880; Match(CODE);
				State = 881; Match(LPAR);
				State = 882; ((CodeExpressionContext)_localctx).exp = expression(0);
				State = 883; Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new ExecuteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 885; Match(EXECUTE);
				State = 886; Match(LPAR);
				State = 887; ((ExecuteExpressionContext)_localctx).name = variable_identifier();
				State = 888; Match(RPAR);
				}
				break;
			case 8:
				{
				_localctx = new ClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 890; ((ClosureExpressionContext)_localctx).exp = closure_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 986;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 984;
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 893;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 894; multiply();
						State = 895; ((MultiplyExpressionContext)_localctx).right = expression(30);
						}
						break;
					case 2:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 897;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 898; divide();
						State = 899; ((DivideExpressionContext)_localctx).right = expression(29);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ModuloExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 901;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 902; modulo();
						State = 903; ((ModuloExpressionContext)_localctx).right = expression(28);
						}
						break;
					case 4:
						{
						_localctx = new IntDivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IntDivideExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 905;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 906; idivide();
						State = 907; ((IntDivideExpressionContext)_localctx).right = expression(27);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 909;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 910;
						((AddExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 911; ((AddExpressionContext)_localctx).right = expression(26);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 912;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 913; Match(LT);
						State = 914; ((LessThanExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 7:
						{
						_localctx = new LessThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LessThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 915;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 916; Match(LTE);
						State = 917; ((LessThanOrEqualExpressionContext)_localctx).right = expression(24);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 918;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 919; Match(GT);
						State = 920; ((GreaterThanExpressionContext)_localctx).right = expression(23);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanOrEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterThanOrEqualExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 921;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 922; Match(GTE);
						State = 923; ((GreaterThanOrEqualExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 10:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 924;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 925; Match(EQ2);
						State = 926; ((EqualsExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 11:
						{
						_localctx = new NotEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 927;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 928; Match(XEQ);
						State = 929; ((NotEqualsExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 12:
						{
						_localctx = new RoughlyEqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RoughlyEqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 930;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 931; Match(TEQ);
						State = 932; ((RoughlyEqualsExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 933;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 934; Match(PIPE2);
						State = 935; ((OrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 14:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 936;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 937; Match(AMP2);
						State = 938; ((AndExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 939;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 940; Match(QMARK);
						State = 941; ((TernaryExpressionContext)_localctx).ifTrue = expression(0);
						State = 942; Match(COLON);
						State = 943; ((TernaryExpressionContext)_localctx).ifFalse = expression(14);
						}
						break;
					case 16:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 945;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 946; Match(IN);
						State = 947; ((InExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 17:
						{
						_localctx = new ContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 948;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 949; Match(CONTAINS);
						State = 950; ((ContainsExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 18:
						{
						_localctx = new ContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 951;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 952; Match(CONTAINS);
						State = 953; Match(ALL);
						State = 954; ((ContainsAllExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 19:
						{
						_localctx = new ContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 955;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 956; Match(CONTAINS);
						State = 957; Match(ANY);
						State = 958; ((ContainsAnyExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 20:
						{
						_localctx = new NotInExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotInExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 959;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 960; Match(NOT);
						State = 961; Match(IN);
						State = 962; ((NotInExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 21:
						{
						_localctx = new NotContainsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 963;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 964; Match(NOT);
						State = 965; Match(CONTAINS);
						State = 966; ((NotContainsExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 22:
						{
						_localctx = new NotContainsAllExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAllExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 967;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 968; Match(NOT);
						State = 969; Match(CONTAINS);
						State = 970; Match(ALL);
						State = 971; ((NotContainsAllExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 23:
						{
						_localctx = new NotContainsAnyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NotContainsAnyExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 972;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 973; Match(NOT);
						State = 974; Match(CONTAINS);
						State = 975; Match(ANY);
						State = 976; ((NotContainsAnyExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 24:
						{
						_localctx = new IsNotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsNotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 977;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 978; Match(IS);
						State = 979; Match(NOT);
						State = 980; ((IsNotExpressionContext)_localctx).right = is_expression();
						}
						break;
					case 25:
						{
						_localctx = new IsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 981;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 982; Match(IS);
						State = 983; ((IsExpressionContext)_localctx).right = is_expression();
						}
						break;
					}
					} 
				}
				State = 988;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Closure_expressionContext : ParserRuleContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Closure_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closure_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterClosure_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitClosure_expression(this);
		}
	}

	[RuleVersion(0)]
	public Closure_expressionContext closure_expression() {
		Closure_expressionContext _localctx = new Closure_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_closure_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; _localctx.name = type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_expressionContext : ParserRuleContext {
		public Instance_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_expression; } }
	 
		public Instance_expressionContext() { }
		public virtual void CopyFrom(Instance_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectableExpressionContext : Instance_expressionContext {
		public Selectable_expressionContext parent;
		public Selectable_expressionContext selectable_expression() {
			return GetRuleContext<Selectable_expressionContext>(0);
		}
		public SelectableExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSelectableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSelectableExpression(this);
		}
	}
	public partial class SelectorExpressionContext : Instance_expressionContext {
		public Instance_expressionContext parent;
		public Selector_expressionContext selector;
		public Instance_expressionContext instance_expression() {
			return GetRuleContext<Instance_expressionContext>(0);
		}
		public Selector_expressionContext selector_expression() {
			return GetRuleContext<Selector_expressionContext>(0);
		}
		public SelectorExpressionContext(Instance_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Instance_expressionContext instance_expression() {
		return instance_expression(0);
	}

	private Instance_expressionContext instance_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Instance_expressionContext _localctx = new Instance_expressionContext(Context, _parentState);
		Instance_expressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_instance_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectableExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 992; ((SelectableExpressionContext)_localctx).parent = selectable_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 998;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorExpressionContext(new Instance_expressionContext(_parentctx, _parentState));
					((SelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_instance_expression);
					State = 994;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 995; ((SelectorExpressionContext)_localctx).selector = selector_expression();
					}
					} 
				}
				State = 1000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_expressionContext : ParserRuleContext {
		public Method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_expression; } }
	 
		public Method_expressionContext() { }
		public virtual void CopyFrom(Method_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodCallExpressionContext : Method_expressionContext {
		public Method_callContext exp;
		public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public MethodCallExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
	}
	public partial class SortedExpressionContext : Method_expressionContext {
		public Sorted_expressionContext exp;
		public Sorted_expressionContext sorted_expression() {
			return GetRuleContext<Sorted_expressionContext>(0);
		}
		public SortedExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSortedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSortedExpression(this);
		}
	}
	public partial class ReadExpressionContext : Method_expressionContext {
		public Read_expressionContext exp;
		public Read_expressionContext read_expression() {
			return GetRuleContext<Read_expressionContext>(0);
		}
		public ReadExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterReadExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitReadExpression(this);
		}
	}
	public partial class FetchExpressionContext : Method_expressionContext {
		public Fetch_expressionContext exp;
		public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public FetchExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterFetchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitFetchExpression(this);
		}
	}
	public partial class ConstructorExpressionContext : Method_expressionContext {
		public Constructor_expressionContext exp;
		public Constructor_expressionContext constructor_expression() {
			return GetRuleContext<Constructor_expressionContext>(0);
		}
		public ConstructorExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConstructorExpression(this);
		}
	}
	public partial class DocumentExpressionContext : Method_expressionContext {
		public Document_expressionContext exp;
		public Document_expressionContext document_expression() {
			return GetRuleContext<Document_expressionContext>(0);
		}
		public DocumentExpressionContext(Method_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDocumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDocumentExpression(this);
		}
	}

	[RuleVersion(0)]
	public Method_expressionContext method_expression() {
		Method_expressionContext _localctx = new Method_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_method_expression);
		try {
			State = 1007;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new DocumentExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1001; ((DocumentExpressionContext)_localctx).exp = document_expression();
				}
				break;
			case 2:
				_localctx = new ConstructorExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; ((ConstructorExpressionContext)_localctx).exp = constructor_expression();
				}
				break;
			case 3:
				_localctx = new FetchExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1003; ((FetchExpressionContext)_localctx).exp = fetch_expression();
				}
				break;
			case 4:
				_localctx = new ReadExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1004; ((ReadExpressionContext)_localctx).exp = read_expression();
				}
				break;
			case 5:
				_localctx = new SortedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1005; ((SortedExpressionContext)_localctx).exp = sorted_expression();
				}
				break;
			case 6:
				_localctx = new MethodCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1006; ((MethodCallExpressionContext)_localctx).exp = method_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_expressionContext : ParserRuleContext {
		public Document_typeContext document_type() {
			return GetRuleContext<Document_typeContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Document_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDocument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDocument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Document_expressionContext document_expression() {
		Document_expressionContext _localctx = new Document_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_document_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; document_type();
			State = 1010; Match(LPAR);
			State = 1011; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_expressionContext : ParserRuleContext {
		public ExpressionContext source;
		public ITerminalNode READ() { return GetToken(OParser.READ, 0); }
		public ITerminalNode FROM() { return GetToken(OParser.FROM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Read_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRead_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRead_expression(this);
		}
	}

	[RuleVersion(0)]
	public Read_expressionContext read_expression() {
		Read_expressionContext _localctx = new Read_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_read_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013; Match(READ);
			State = 1014; Match(FROM);
			State = 1015; _localctx.source = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_statementContext : ParserRuleContext {
		public ExpressionContext what;
		public ExpressionContext target;
		public ITerminalNode WRITE() { return GetToken(OParser.WRITE, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode TO() { return GetToken(OParser.TO, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Write_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterWrite_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitWrite_statement(this);
		}
	}

	[RuleVersion(0)]
	public Write_statementContext write_statement() {
		Write_statementContext _localctx = new Write_statementContext(Context, State);
		EnterRule(_localctx, 98, RULE_write_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017; Match(WRITE);
			State = 1018; Match(LPAR);
			State = 1019; _localctx.what = expression(0);
			State = 1020; Match(RPAR);
			State = 1021; Match(TO);
			State = 1022; _localctx.target = expression(0);
			State = 1023; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext source;
		public ExpressionContext xfilter;
		public ITerminalNode FETCH() { return GetToken(OParser.FETCH, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ITerminalNode FROM() { return GetToken(OParser.FROM, 0); }
		public ITerminalNode WHERE() { return GetToken(OParser.WHERE, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterFetch_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitFetch_expression(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_fetch_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025; Match(FETCH);
			State = 1026; Match(LPAR);
			State = 1027; _localctx.name = variable_identifier();
			State = 1028; Match(RPAR);
			State = 1029; Match(FROM);
			State = 1030; _localctx.source = expression(0);
			State = 1031; Match(WHERE);
			State = 1032; _localctx.xfilter = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_expressionContext : ParserRuleContext {
		public Instance_expressionContext source;
		public Instance_expressionContext key;
		public ITerminalNode SORTED() { return GetToken(OParser.SORTED, 0); }
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Instance_expressionContext[] instance_expression() {
			return GetRuleContexts<Instance_expressionContext>();
		}
		public Instance_expressionContext instance_expression(int i) {
			return GetRuleContext<Instance_expressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Key_tokenContext key_token() {
			return GetRuleContext<Key_tokenContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public Sorted_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSorted_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSorted_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_expressionContext sorted_expression() {
		Sorted_expressionContext _localctx = new Sorted_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_sorted_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; Match(SORTED);
			State = 1035; Match(LPAR);
			State = 1036; _localctx.source = instance_expression(0);
			State = 1042;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1037; Match(COMMA);
				State = 1038; key_token();
				State = 1039; Match(EQ);
				State = 1040; _localctx.key = instance_expression(0);
				}
			}

			State = 1044; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_expressionContext : ParserRuleContext {
		public Selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_expression; } }
	 
		public Selector_expressionContext() { }
		public virtual void CopyFrom(Selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceSelectorContext : Selector_expressionContext {
		public Slice_argumentsContext xslice;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Slice_argumentsContext slice_arguments() {
			return GetRuleContext<Slice_argumentsContext>(0);
		}
		public SliceSelectorContext(Selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSliceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSliceSelector(this);
		}
	}
	public partial class MemberSelectorContext : Selector_expressionContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberSelectorContext(Selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
	}
	public partial class ItemSelectorContext : Selector_expressionContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemSelectorContext(Selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterItemSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitItemSelector(this);
		}
	}

	[RuleVersion(0)]
	public Selector_expressionContext selector_expression() {
		Selector_expressionContext _localctx = new Selector_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_selector_expression);
		try {
			State = 1056;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				_localctx = new MemberSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1046; Match(DOT);
				State = 1047; ((MemberSelectorContext)_localctx).name = variable_identifier();
				}
				break;
			case 2:
				_localctx = new ItemSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048; Match(LBRAK);
				State = 1049; ((ItemSelectorContext)_localctx).exp = expression(0);
				State = 1050; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new SliceSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1052; Match(LBRAK);
				State = 1053; ((SliceSelectorContext)_localctx).xslice = slice_arguments();
				State = 1054; Match(RBRAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_expressionContext : ParserRuleContext {
		public Category_typeContext typ;
		public Argument_assignment_listContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Constructor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConstructor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConstructor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_expressionContext constructor_expression() {
		Constructor_expressionContext _localctx = new Constructor_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_constructor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058; _localctx.typ = category_type();
			State = 1059; Match(LPAR);
			State = 1061;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 1060; _localctx.args = argument_assignment_list(0);
				}
			}

			State = 1063; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_assignment_listContext : ParserRuleContext {
		public Argument_assignment_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment_list; } }
	 
		public Argument_assignment_listContext() { }
		public virtual void CopyFrom(Argument_assignment_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAssignmentListContext : Argument_assignment_listContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterExpressionAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitExpressionAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListContext : Argument_assignment_listContext {
		public Argument_assignmentContext item;
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentList(this);
		}
	}
	public partial class ArgumentAssignmentListItemContext : Argument_assignment_listContext {
		public Argument_assignment_listContext items;
		public Argument_assignmentContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Argument_assignment_listContext argument_assignment_list() {
			return GetRuleContext<Argument_assignment_listContext>(0);
		}
		public Argument_assignmentContext argument_assignment() {
			return GetRuleContext<Argument_assignmentContext>(0);
		}
		public ArgumentAssignmentListItemContext(Argument_assignment_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterArgumentAssignmentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitArgumentAssignmentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignment_listContext argument_assignment_list() {
		return argument_assignment_list(0);
	}

	private Argument_assignment_listContext argument_assignment_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_assignment_listContext _localctx = new Argument_assignment_listContext(Context, _parentState);
		Argument_assignment_listContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_argument_assignment_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				_localctx = new ExpressionAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1066; ((ExpressionAssignmentListContext)_localctx).exp = expression(0);
				State = 1067;
				if (!(this.willNotBe(this.equalToken()))) throw new FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
				}
				break;
			case 2:
				{
				_localctx = new ArgumentAssignmentListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1069; ((ArgumentAssignmentListContext)_localctx).item = argument_assignment();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1077;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentAssignmentListItemContext(new Argument_assignment_listContext(_parentctx, _parentState));
					((ArgumentAssignmentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_assignment_list);
					State = 1072;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1073; Match(COMMA);
					State = 1074; ((ArgumentAssignmentListItemContext)_localctx).item = argument_assignment();
					}
					} 
				}
				State = 1079;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_assignmentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterArgument_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitArgument_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Argument_assignmentContext argument_assignment() {
		Argument_assignmentContext _localctx = new Argument_assignmentContext(Context, State);
		EnterRule(_localctx, 110, RULE_argument_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080; _localctx.name = variable_identifier();
			State = 1081; assign();
			State = 1082; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_instance_statementContext : ParserRuleContext {
		public Assignable_instanceContext inst;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_instance_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_instance_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssign_instance_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssign_instance_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_instance_statementContext assign_instance_statement() {
		Assign_instance_statementContext _localctx = new Assign_instance_statementContext(Context, State);
		EnterRule(_localctx, 112, RULE_assign_instance_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084; _localctx.inst = assignable_instance(0);
			State = 1085; assign();
			State = 1086; _localctx.exp = expression(0);
			State = 1087; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Child_instanceContext : ParserRuleContext {
		public Child_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child_instance; } }
	 
		public Child_instanceContext() { }
		public virtual void CopyFrom(Child_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberInstanceContext : Child_instanceContext {
		public Variable_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MemberInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMemberInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMemberInstance(this);
		}
	}
	public partial class ItemInstanceContext : Child_instanceContext {
		public ExpressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ItemInstanceContext(Child_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterItemInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitItemInstance(this);
		}
	}

	[RuleVersion(0)]
	public Child_instanceContext child_instance() {
		Child_instanceContext _localctx = new Child_instanceContext(Context, State);
		EnterRule(_localctx, 114, RULE_child_instance);
		try {
			State = 1095;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new MemberInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1089; Match(DOT);
				State = 1090; ((MemberInstanceContext)_localctx).name = variable_identifier();
				}
				break;
			case LBRAK:
				_localctx = new ItemInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1091; Match(LBRAK);
				State = 1092; ((ItemInstanceContext)_localctx).exp = expression(0);
				State = 1093; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_tuple_statementContext : ParserRuleContext {
		public Variable_identifier_listContext items;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_tuple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_tuple_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssign_tuple_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssign_tuple_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_tuple_statementContext assign_tuple_statement() {
		Assign_tuple_statementContext _localctx = new Assign_tuple_statementContext(Context, State);
		EnterRule(_localctx, 116, RULE_assign_tuple_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097; _localctx.items = variable_identifier_list(0);
			State = 1098; assign();
			State = 1099; _localctx.exp = expression(0);
			State = 1100; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_literalContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(OParser.NULL, 0); }
		public Null_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNull_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNull_literal(this);
		}
	}

	[RuleVersion(0)]
	public Null_literalContext null_literal() {
		Null_literalContext _localctx = new Null_literalContext(Context, State);
		EnterRule(_localctx, 118, RULE_null_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_listContext : ParserRuleContext {
		public Declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_list; } }
	 
		public Declaration_listContext() { }
		public virtual void CopyFrom(Declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullDeclarationListContext : Declaration_listContext {
		public DeclarationsContext items;
		public LfsContext lfs() {
			return GetRuleContext<LfsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(OParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public FullDeclarationListContext(Declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterFullDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitFullDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_listContext declaration_list() {
		Declaration_listContext _localctx = new Declaration_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_declaration_list);
		int _la;
		try {
			_localctx = new FullDeclarationListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			_la = TokenStream.La(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (BOOLEAN - 46)) | (1L << (CHARACTER - 46)) | (1L << (TEXT - 46)) | (1L << (INTEGER - 46)) | (1L << (DECIMAL - 46)) | (1L << (DATE - 46)) | (1L << (TIME - 46)) | (1L << (DATETIME - 46)) | (1L << (PERIOD - 46)) | (1L << (CODE - 46)) | (1L << (ABSTRACT - 46)) | (1L << (ATTRIBUTE - 46)) | (1L << (CATEGORY - 46)) | (1L << (ENUMERATED - 46)) | (1L << (METHOD - 46)) | (1L << (NATIVE - 46)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (SINGLETON - 119)) | (1L << (TEST - 119)) | (1L << (TYPE_IDENTIFIER - 119)))) != 0)) {
				{
				State = 1104; ((FullDeclarationListContext)_localctx).items = declarations(0);
				}
			}

			State = 1107; lfs();
			State = 1108; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationListContext : DeclarationsContext {
		public DeclarationContext item;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
	}
	public partial class DeclarationListItemContext : DeclarationsContext {
		public DeclarationsContext items;
		public DeclarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListItemContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDeclarationListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDeclarationListItem(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(Context, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 122;
		EnterRecursionRule(_localctx, 122, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DeclarationListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1111; ((DeclarationListContext)_localctx).item = declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListItemContext(new DeclarationsContext(_parentctx, _parentState));
					((DeclarationListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_declarations);
					State = 1113;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1114; lfp();
					State = 1115; ((DeclarationListItemContext)_localctx).item = declaration();
					}
					} 
				}
				State = 1121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryDeclarationContext : DeclarationContext {
		public Category_declarationContext decl;
		public Category_declarationContext category_declaration() {
			return GetRuleContext<Category_declarationContext>(0);
		}
		public CategoryDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategoryDeclaration(this);
		}
	}
	public partial class ResourceDeclarationContext : DeclarationContext {
		public Resource_declarationContext decl;
		public Resource_declarationContext resource_declaration() {
			return GetRuleContext<Resource_declarationContext>(0);
		}
		public ResourceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterResourceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitResourceDeclaration(this);
		}
	}
	public partial class AttributeDeclarationContext : DeclarationContext {
		public Attribute_declarationContext decl;
		public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		public AttributeDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
	}
	public partial class MethodDeclarationContext : DeclarationContext {
		public Method_declarationContext decl;
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public MethodDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}
	public partial class EnumDeclarationContext : DeclarationContext {
		public Enum_declarationContext decl;
		public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		public EnumDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_declaration);
		try {
			State = 1127;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				_localctx = new AttributeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1122; ((AttributeDeclarationContext)_localctx).decl = attribute_declaration();
				}
				break;
			case 2:
				_localctx = new CategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1123; ((CategoryDeclarationContext)_localctx).decl = category_declaration();
				}
				break;
			case 3:
				_localctx = new ResourceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1124; ((ResourceDeclarationContext)_localctx).decl = resource_declaration();
				}
				break;
			case 4:
				_localctx = new EnumDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1125; ((EnumDeclarationContext)_localctx).decl = enum_declaration();
				}
				break;
			case 5:
				_localctx = new MethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1126; ((MethodDeclarationContext)_localctx).decl = method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declarationContext : ParserRuleContext {
		public Native_resource_declarationContext decl;
		public Native_resource_declarationContext native_resource_declaration() {
			return GetRuleContext<Native_resource_declarationContext>(0);
		}
		public Resource_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterResource_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitResource_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declarationContext resource_declaration() {
		Resource_declarationContext _localctx = new Resource_declarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_resource_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; _localctx.decl = native_resource_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
	 
		public Enum_declarationContext() { }
		public virtual void CopyFrom(Enum_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumNativeDeclarationContext : Enum_declarationContext {
		public Enum_native_declarationContext decl;
		public Enum_native_declarationContext enum_native_declaration() {
			return GetRuleContext<Enum_native_declarationContext>(0);
		}
		public EnumNativeDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEnumNativeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEnumNativeDeclaration(this);
		}
	}
	public partial class EnumCategoryDeclarationContext : Enum_declarationContext {
		public Enum_category_declarationContext decl;
		public Enum_category_declarationContext enum_category_declaration() {
			return GetRuleContext<Enum_category_declarationContext>(0);
		}
		public EnumCategoryDeclarationContext(Enum_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterEnumCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitEnumCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_enum_declaration);
		try {
			State = 1133;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				_localctx = new EnumCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1131; ((EnumCategoryDeclarationContext)_localctx).decl = enum_category_declaration();
				}
				break;
			case 2:
				_localctx = new EnumNativeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1132; ((EnumNativeDeclarationContext)_localctx).decl = enum_native_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_symbol_listContext : ParserRuleContext {
		public Native_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_symbol_list; } }
	 
		public Native_symbol_listContext() { }
		public virtual void CopyFrom(Native_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeSymbolListContext : Native_symbol_listContext {
		public Native_symbolContext item;
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolList(this);
		}
	}
	public partial class NativeSymbolListItemContext : Native_symbol_listContext {
		public Native_symbol_listContext items;
		public Native_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_symbol_listContext native_symbol_list() {
			return GetRuleContext<Native_symbol_listContext>(0);
		}
		public Native_symbolContext native_symbol() {
			return GetRuleContext<Native_symbolContext>(0);
		}
		public NativeSymbolListItemContext(Native_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_symbol_listContext native_symbol_list() {
		return native_symbol_list(0);
	}

	private Native_symbol_listContext native_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_symbol_listContext _localctx = new Native_symbol_listContext(Context, _parentState);
		Native_symbol_listContext _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_native_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeSymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1136; ((NativeSymbolListContext)_localctx).item = native_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeSymbolListItemContext(new Native_symbol_listContext(_parentctx, _parentState));
					((NativeSymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_symbol_list);
					State = 1138;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1139; lfp();
					State = 1140; ((NativeSymbolListItemContext)_localctx).item = native_symbol();
					}
					} 
				}
				State = 1146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_symbol_listContext : ParserRuleContext {
		public Category_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_symbol_list; } }
	 
		public Category_symbol_listContext() { }
		public virtual void CopyFrom(Category_symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategorySymbolListItemContext : Category_symbol_listContext {
		public Category_symbol_listContext items;
		public Category_symbolContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Category_symbol_listContext category_symbol_list() {
			return GetRuleContext<Category_symbol_listContext>(0);
		}
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListItemContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolListItem(this);
		}
	}
	public partial class CategorySymbolListContext : Category_symbol_listContext {
		public Category_symbolContext item;
		public Category_symbolContext category_symbol() {
			return GetRuleContext<Category_symbolContext>(0);
		}
		public CategorySymbolListContext(Category_symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategorySymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategorySymbolList(this);
		}
	}

	[RuleVersion(0)]
	public Category_symbol_listContext category_symbol_list() {
		return category_symbol_list(0);
	}

	private Category_symbol_listContext category_symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Category_symbol_listContext _localctx = new Category_symbol_listContext(Context, _parentState);
		Category_symbol_listContext _prevctx = _localctx;
		int _startState = 132;
		EnterRecursionRule(_localctx, 132, RULE_category_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategorySymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1148; ((CategorySymbolListContext)_localctx).item = category_symbol();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategorySymbolListItemContext(new Category_symbol_listContext(_parentctx, _parentState));
					((CategorySymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_category_symbol_list);
					State = 1150;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1151; lfp();
					State = 1152; ((CategorySymbolListItemContext)_localctx).item = category_symbol();
					}
					} 
				}
				State = 1158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Symbol_listContext : ParserRuleContext {
		public Symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_list; } }
	 
		public Symbol_listContext() { }
		public virtual void CopyFrom(Symbol_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolListContext : Symbol_listContext {
		public Symbol_identifierContext item;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSymbolList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSymbolList(this);
		}
	}
	public partial class SymbolListItemContext : Symbol_listContext {
		public Symbol_listContext items;
		public Symbol_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Symbol_listContext symbol_list() {
			return GetRuleContext<Symbol_listContext>(0);
		}
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolListItemContext(Symbol_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSymbolListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSymbolListItem(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_listContext symbol_list() {
		return symbol_list(0);
	}

	private Symbol_listContext symbol_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Symbol_listContext _localctx = new Symbol_listContext(Context, _parentState);
		Symbol_listContext _prevctx = _localctx;
		int _startState = 134;
		EnterRecursionRule(_localctx, 134, RULE_symbol_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SymbolListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1160; ((SymbolListContext)_localctx).item = symbol_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SymbolListItemContext(new Symbol_listContext(_parentctx, _parentState));
					((SymbolListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_symbol_list);
					State = 1162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1163; Match(COMMA);
					State = 1164; ((SymbolListItemContext)_localctx).item = symbol_identifier();
					}
					} 
				}
				State = 1169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_constraintContext : ParserRuleContext {
		public Attribute_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_constraint; } }
	 
		public Attribute_constraintContext() { }
		public virtual void CopyFrom(Attribute_constraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchingExpressionContext : Attribute_constraintContext {
		public ExpressionContext exp;
		public ITerminalNode MATCHING() { return GetToken(OParser.MATCHING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchingExpressionContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMatchingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMatchingExpression(this);
		}
	}
	public partial class MatchingListContext : Attribute_constraintContext {
		public List_literalContext source;
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public MatchingListContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMatchingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMatchingList(this);
		}
	}
	public partial class MatchingRangeContext : Attribute_constraintContext {
		public Range_literalContext source;
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public MatchingRangeContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMatchingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMatchingRange(this);
		}
	}
	public partial class MatchingSetContext : Attribute_constraintContext {
		public Set_literalContext source;
		public ITerminalNode IN() { return GetToken(OParser.IN, 0); }
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public MatchingSetContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMatchingSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMatchingSet(this);
		}
	}
	public partial class MatchingPatternContext : Attribute_constraintContext {
		public IToken text;
		public ITerminalNode MATCHING() { return GetToken(OParser.MATCHING, 0); }
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public MatchingPatternContext(Attribute_constraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMatchingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMatchingPattern(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_constraintContext attribute_constraint() {
		Attribute_constraintContext _localctx = new Attribute_constraintContext(Context, State);
		EnterRule(_localctx, 136, RULE_attribute_constraint);
		try {
			State = 1180;
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new MatchingListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1170; Match(IN);
				State = 1171; ((MatchingListContext)_localctx).source = list_literal();
				}
				break;
			case 2:
				_localctx = new MatchingSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172; Match(IN);
				State = 1173; ((MatchingSetContext)_localctx).source = set_literal();
				}
				break;
			case 3:
				_localctx = new MatchingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1174; Match(IN);
				State = 1175; ((MatchingRangeContext)_localctx).source = range_literal();
				}
				break;
			case 4:
				_localctx = new MatchingPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1176; Match(MATCHING);
				State = 1177; ((MatchingPatternContext)_localctx).text = Match(TEXT_LITERAL);
				}
				break;
			case 5:
				_localctx = new MatchingExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1178; Match(MATCHING);
				State = 1179; ((MatchingExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 138, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182; Match(LBRAK);
			State = 1184;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 1183; _localctx.items = expression_list(0);
				}
			}

			State = 1186; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_literalContext : ParserRuleContext {
		public Expression_listContext items;
		public ITerminalNode LT() { return GetToken(OParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(OParser.GT, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Set_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSet_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSet_literal(this);
		}
	}

	[RuleVersion(0)]
	public Set_literalContext set_literal() {
		Set_literalContext _localctx = new Set_literalContext(Context, State);
		EnterRule(_localctx, 140, RULE_set_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188; Match(LT);
			State = 1190;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 1189; _localctx.items = expression_list(0);
				}
			}

			State = 1192; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	 
		public Expression_listContext() { }
		public virtual void CopyFrom(Expression_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueListItemContext : Expression_listContext {
		public Expression_listContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListItemContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterValueListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitValueListItem(this);
		}
	}
	public partial class ValueListContext : Expression_listContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueListContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1195; ((ValueListContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueListItemContext(new Expression_listContext(_parentctx, _parentState));
					((ValueListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 1197;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1198; Match(COMMA);
					State = 1199; ((ValueListItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		public ExpressionContext low;
		public ExpressionContext high;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(OParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 144, RULE_range_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(LBRAK);
			State = 1206; _localctx.low = expression(0);
			State = 1207; Match(RANGE);
			State = 1208; _localctx.high = expression(0);
			State = 1209; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
	 
		public TypedefContext() { }
		public virtual void CopyFrom(TypedefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListTypeContext : TypedefContext {
		public TypedefContext l;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ListTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}
	public partial class PrimaryTypeContext : TypedefContext {
		public Primary_typeContext p;
		public Primary_typeContext primary_type() {
			return GetRuleContext<Primary_typeContext>(0);
		}
		public PrimaryTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPrimaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPrimaryType(this);
		}
	}
	public partial class DictTypeContext : TypedefContext {
		public TypedefContext d;
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public DictTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDictType(this);
		}
	}
	public partial class SetTypeContext : TypedefContext {
		public TypedefContext s;
		public ITerminalNode LTGT() { return GetToken(OParser.LTGT, 0); }
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public SetTypeContext(TypedefContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		return typedef(0);
	}

	private TypedefContext typedef(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypedefContext _localctx = new TypedefContext(Context, _parentState);
		TypedefContext _prevctx = _localctx;
		int _startState = 146;
		EnterRecursionRule(_localctx, 146, RULE_typedef, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1212; ((PrimaryTypeContext)_localctx).p = primary_type();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1222;
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						_localctx = new SetTypeContext(new TypedefContext(_parentctx, _parentState));
						((SetTypeContext)_localctx).s = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1214;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1215; Match(LTGT);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypedefContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1216;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1217; Match(LBRAK);
						State = 1218; Match(RBRAK);
						}
						break;
					case 3:
						{
						_localctx = new DictTypeContext(new TypedefContext(_parentctx, _parentState));
						((DictTypeContext)_localctx).d = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_typedef);
						State = 1219;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1220; Match(LCURL);
						State = 1221; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_typeContext : ParserRuleContext {
		public Primary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_type; } }
	 
		public Primary_typeContext() { }
		public virtual void CopyFrom(Primary_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryTypeContext : Primary_typeContext {
		public Category_typeContext c;
		public Category_typeContext category_type() {
			return GetRuleContext<Category_typeContext>(0);
		}
		public CategoryTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategoryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategoryType(this);
		}
	}
	public partial class NativeTypeContext : Primary_typeContext {
		public Native_typeContext n;
		public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		public NativeTypeContext(Primary_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public Primary_typeContext primary_type() {
		Primary_typeContext _localctx = new Primary_typeContext(Context, State);
		EnterRule(_localctx, 148, RULE_primary_type);
		try {
			State = 1229;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
				_localctx = new NativeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1227; ((NativeTypeContext)_localctx).n = native_type();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new CategoryTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1228; ((CategoryTypeContext)_localctx).c = category_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
	 
		public Native_typeContext() { }
		public virtual void CopyFrom(Native_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateTimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATETIME() { return GetToken(OParser.DATETIME, 0); }
		public DateTimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDateTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDateTimeType(this);
		}
	}
	public partial class TimeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TIME() { return GetToken(OParser.TIME, 0); }
		public TimeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTimeType(this);
		}
	}
	public partial class TextTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode TEXT() { return GetToken(OParser.TEXT, 0); }
		public TextTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTextType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTextType(this);
		}
	}
	public partial class CodeTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(OParser.CODE, 0); }
		public CodeTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCodeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCodeType(this);
		}
	}
	public partial class IntegerTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode INTEGER() { return GetToken(OParser.INTEGER, 0); }
		public IntegerTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}
	public partial class DecimalTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DECIMAL() { return GetToken(OParser.DECIMAL, 0); }
		public DecimalTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDecimalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDecimalType(this);
		}
	}
	public partial class PeriodTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode PERIOD() { return GetToken(OParser.PERIOD, 0); }
		public PeriodTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPeriodType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPeriodType(this);
		}
	}
	public partial class DateTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode DATE() { return GetToken(OParser.DATE, 0); }
		public DateTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDateType(this);
		}
	}
	public partial class CharacterTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode CHARACTER() { return GetToken(OParser.CHARACTER, 0); }
		public CharacterTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCharacterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCharacterType(this);
		}
	}
	public partial class BooleanTypeContext : Native_typeContext {
		public IToken t1;
		public ITerminalNode BOOLEAN() { return GetToken(OParser.BOOLEAN, 0); }
		public BooleanTypeContext(Native_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterBooleanType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitBooleanType(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 150, RULE_native_type);
		try {
			State = 1241;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1231; ((BooleanTypeContext)_localctx).t1 = Match(BOOLEAN);
				}
				break;
			case CHARACTER:
				_localctx = new CharacterTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1232; ((CharacterTypeContext)_localctx).t1 = Match(CHARACTER);
				}
				break;
			case TEXT:
				_localctx = new TextTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1233; ((TextTypeContext)_localctx).t1 = Match(TEXT);
				}
				break;
			case INTEGER:
				_localctx = new IntegerTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1234; ((IntegerTypeContext)_localctx).t1 = Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1235; ((DecimalTypeContext)_localctx).t1 = Match(DECIMAL);
				}
				break;
			case DATE:
				_localctx = new DateTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1236; ((DateTypeContext)_localctx).t1 = Match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DateTimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1237; ((DateTimeTypeContext)_localctx).t1 = Match(DATETIME);
				}
				break;
			case TIME:
				_localctx = new TimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1238; ((TimeTypeContext)_localctx).t1 = Match(TIME);
				}
				break;
			case PERIOD:
				_localctx = new PeriodTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1239; ((PeriodTypeContext)_localctx).t1 = Match(PERIOD);
				}
				break;
			case CODE:
				_localctx = new CodeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1240; ((CodeTypeContext)_localctx).t1 = Match(CODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public Category_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategory_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategory_type(this);
		}
	}

	[RuleVersion(0)]
	public Category_typeContext category_type() {
		Category_typeContext _localctx = new Category_typeContext(Context, State);
		EnterRule(_localctx, 152, RULE_category_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; _localctx.t1 = Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode CODE() { return GetToken(OParser.CODE, 0); }
		public Code_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCode_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCode_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_typeContext code_type() {
		Code_typeContext _localctx = new Code_typeContext(Context, State);
		EnterRule(_localctx, 154, RULE_code_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; _localctx.t1 = Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_typeContext : ParserRuleContext {
		public IToken t1;
		public ITerminalNode DOCUMENT() { return GetToken(OParser.DOCUMENT, 0); }
		public Document_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDocument_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDocument_type(this);
		}
	}

	[RuleVersion(0)]
	public Document_typeContext document_type() {
		Document_typeContext _localctx = new Document_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_document_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247; _localctx.t1 = Match(DOCUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_declarationContext : ParserRuleContext {
		public Category_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_declaration; } }
	 
		public Category_declarationContext() { }
		public virtual void CopyFrom(Category_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteCategoryDeclarationContext : Category_declarationContext {
		public Concrete_category_declarationContext decl;
		public Concrete_category_declarationContext concrete_category_declaration() {
			return GetRuleContext<Concrete_category_declarationContext>(0);
		}
		public ConcreteCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConcreteCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConcreteCategoryDeclaration(this);
		}
	}
	public partial class NativeCategoryDeclarationContext : Category_declarationContext {
		public Native_category_declarationContext decl;
		public Native_category_declarationContext native_category_declaration() {
			return GetRuleContext<Native_category_declarationContext>(0);
		}
		public NativeCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeCategoryDeclaration(this);
		}
	}
	public partial class SingletonCategoryDeclarationContext : Category_declarationContext {
		public Singleton_category_declarationContext decl;
		public Singleton_category_declarationContext singleton_category_declaration() {
			return GetRuleContext<Singleton_category_declarationContext>(0);
		}
		public SingletonCategoryDeclarationContext(Category_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSingletonCategoryDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSingletonCategoryDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Category_declarationContext category_declaration() {
		Category_declarationContext _localctx = new Category_declarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_category_declaration);
		try {
			State = 1252;
			switch (TokenStream.La(1)) {
			case CATEGORY:
				_localctx = new ConcreteCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1249; ((ConcreteCategoryDeclarationContext)_localctx).decl = concrete_category_declaration();
				}
				break;
			case NATIVE:
				_localctx = new NativeCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1250; ((NativeCategoryDeclarationContext)_localctx).decl = native_category_declaration();
				}
				break;
			case SINGLETON:
				_localctx = new SingletonCategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1251; ((SingletonCategoryDeclarationContext)_localctx).decl = singleton_category_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifier_listContext : ParserRuleContext {
		public Type_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier_list; } }
	 
		public Type_identifier_listContext() { }
		public virtual void CopyFrom(Type_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentifierListItemContext : Type_identifier_listContext {
		public Type_identifier_listContext items;
		public Type_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Type_identifier_listContext type_identifier_list() {
			return GetRuleContext<Type_identifier_listContext>(0);
		}
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListItemContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierListItem(this);
		}
	}
	public partial class TypeIdentifierListContext : Type_identifier_listContext {
		public Type_identifierContext item;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierListContext(Type_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifier_listContext type_identifier_list() {
		return type_identifier_list(0);
	}

	private Type_identifier_listContext type_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_identifier_listContext _localctx = new Type_identifier_listContext(Context, _parentState);
		Type_identifier_listContext _prevctx = _localctx;
		int _startState = 160;
		EnterRecursionRule(_localctx, 160, RULE_type_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TypeIdentifierListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1255; ((TypeIdentifierListContext)_localctx).item = type_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdentifierListItemContext(new Type_identifier_listContext(_parentctx, _parentState));
					((TypeIdentifierListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type_identifier_list);
					State = 1257;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1258; Match(COMMA);
					State = 1259; ((TypeIdentifierListItemContext)_localctx).item = type_identifier();
					}
					} 
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_identifierContext : ParserRuleContext {
		public Method_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_identifier; } }
	 
		public Method_identifierContext() { }
		public virtual void CopyFrom(Method_identifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodVariableIdentifierContext : Method_identifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public MethodVariableIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodVariableIdentifier(this);
		}
	}
	public partial class MethodTypeIdentifierContext : Method_identifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public MethodTypeIdentifierContext(Method_identifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMethodTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMethodTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_identifierContext method_identifier() {
		Method_identifierContext _localctx = new Method_identifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_method_identifier);
		try {
			State = 1267;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new MethodVariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265; ((MethodVariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new MethodTypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266; ((MethodTypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SymbolIdentifierContext : IdentifierContext {
		public Symbol_identifierContext name;
		public Symbol_identifierContext symbol_identifier() {
			return GetRuleContext<Symbol_identifierContext>(0);
		}
		public SymbolIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSymbolIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSymbolIdentifier(this);
		}
	}
	public partial class VariableIdentifierContext : IdentifierContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
	}
	public partial class TypeIdentifierContext : IdentifierContext {
		public Type_identifierContext name;
		public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public TypeIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_identifier);
		try {
			State = 1272;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new VariableIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269; ((VariableIdentifierContext)_localctx).name = variable_identifier();
				}
				break;
			case TYPE_IDENTIFIER:
				_localctx = new TypeIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1270; ((TypeIdentifierContext)_localctx).name = type_identifier();
				}
				break;
			case SYMBOL_IDENTIFIER:
				_localctx = new SymbolIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1271; ((SymbolIdentifierContext)_localctx).name = symbol_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 166, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; Match(VARIABLE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276; Match(TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_identifierContext : ParserRuleContext {
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(OParser.SYMBOL_IDENTIFIER, 0); }
		public Symbol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSymbol_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSymbol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_identifierContext symbol_identifier() {
		Symbol_identifierContext _localctx = new Symbol_identifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_symbol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278; Match(SYMBOL_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	 
		public Argument_listContext() { }
		public virtual void CopyFrom(Argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentListItemContext : Argument_listContext {
		public Argument_listContext items;
		public ArgumentContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListItemContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitArgumentListItem(this);
		}
	}
	public partial class ArgumentListContext : Argument_listContext {
		public ArgumentContext item;
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentListContext(Argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		return argument_list(0);
	}

	private Argument_listContext argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Argument_listContext _localctx = new Argument_listContext(Context, _parentState);
		Argument_listContext _prevctx = _localctx;
		int _startState = 172;
		EnterRecursionRule(_localctx, 172, RULE_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1281; ((ArgumentListContext)_localctx).item = argument();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListItemContext(new Argument_listContext(_parentctx, _parentState));
					((ArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_argument_list);
					State = 1283;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1284; Match(COMMA);
					State = 1285; ((ArgumentListItemContext)_localctx).item = argument();
					}
					} 
				}
				State = 1290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorArgumentContext : ArgumentContext {
		public Operator_argumentContext arg;
		public Operator_argumentContext operator_argument() {
			return GetRuleContext<Operator_argumentContext>(0);
		}
		public OperatorArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorArgument(this);
		}
	}
	public partial class CodeArgumentContext : ArgumentContext {
		public Code_argumentContext arg;
		public Code_argumentContext code_argument() {
			return GetRuleContext<Code_argumentContext>(0);
		}
		public CodeArgumentContext(ArgumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCodeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCodeArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 174, RULE_argument);
		try {
			State = 1293;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				_localctx = new CodeArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1291; ((CodeArgumentContext)_localctx).arg = code_argument();
				}
				break;
			case 2:
				_localctx = new OperatorArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1292; ((OperatorArgumentContext)_localctx).arg = operator_argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_argumentContext : ParserRuleContext {
		public Operator_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_argument; } }
	 
		public Operator_argumentContext() { }
		public virtual void CopyFrom(Operator_argumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedArgumentContext : Operator_argumentContext {
		public Named_argumentContext arg;
		public Named_argumentContext named_argument() {
			return GetRuleContext<Named_argumentContext>(0);
		}
		public NamedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}
	public partial class TypedArgumentContext : Operator_argumentContext {
		public Typed_argumentContext arg;
		public Typed_argumentContext typed_argument() {
			return GetRuleContext<Typed_argumentContext>(0);
		}
		public TypedArgumentContext(Operator_argumentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTypedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTypedArgument(this);
		}
	}

	[RuleVersion(0)]
	public Operator_argumentContext operator_argument() {
		Operator_argumentContext _localctx = new Operator_argumentContext(Context, State);
		EnterRule(_localctx, 176, RULE_operator_argument);
		try {
			State = 1297;
			switch (TokenStream.La(1)) {
			case VARIABLE_IDENTIFIER:
				_localctx = new NamedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1295; ((NamedArgumentContext)_localctx).arg = named_argument();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case ANY:
			case TYPE_IDENTIFIER:
				_localctx = new TypedArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1296; ((TypedArgumentContext)_localctx).arg = typed_argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Literal_expressionContext value;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 178, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; _localctx.name = variable_identifier();
			State = 1302;
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1300; Match(EQ);
				State = 1301; _localctx.value = literal_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_argumentContext : ParserRuleContext {
		public Variable_identifierContext name;
		public Code_typeContext code_type() {
			return GetRuleContext<Code_typeContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public Code_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCode_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCode_argument(this);
		}
	}

	[RuleVersion(0)]
	public Code_argumentContext code_argument() {
		Code_argumentContext _localctx = new Code_argumentContext(Context, State);
		EnterRule(_localctx, 180, RULE_code_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304; code_type();
			State = 1305; _localctx.name = variable_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_or_any_typeContext : ParserRuleContext {
		public Category_or_any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_or_any_type; } }
	 
		public Category_or_any_typeContext() { }
		public virtual void CopyFrom(Category_or_any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyArgumentTypeContext : Category_or_any_typeContext {
		public Any_typeContext typ;
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAnyArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAnyArgumentType(this);
		}
	}
	public partial class CategoryArgumentTypeContext : Category_or_any_typeContext {
		public TypedefContext typ;
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public CategoryArgumentTypeContext(Category_or_any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategoryArgumentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategoryArgumentType(this);
		}
	}

	[RuleVersion(0)]
	public Category_or_any_typeContext category_or_any_type() {
		Category_or_any_typeContext _localctx = new Category_or_any_typeContext(Context, State);
		EnterRule(_localctx, 182, RULE_category_or_any_type);
		try {
			State = 1309;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case CODE:
			case TYPE_IDENTIFIER:
				_localctx = new CategoryArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1307; ((CategoryArgumentTypeContext)_localctx).typ = typedef(0);
				}
				break;
			case ANY:
				_localctx = new AnyArgumentTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1308; ((AnyArgumentTypeContext)_localctx).typ = any_type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
	 
		public Any_typeContext() { }
		public virtual void CopyFrom(Any_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnyTypeContext : Any_typeContext {
		public ITerminalNode ANY() { return GetToken(OParser.ANY, 0); }
		public AnyTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
	}
	public partial class AnyListTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyListTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAnyListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAnyListType(this);
		}
	}
	public partial class AnyDictTypeContext : Any_typeContext {
		public Any_typeContext typ;
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public AnyDictTypeContext(Any_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAnyDictType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAnyDictType(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		return any_type(0);
	}

	private Any_typeContext any_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Any_typeContext _localctx = new Any_typeContext(Context, _parentState);
		Any_typeContext _prevctx = _localctx;
		int _startState = 184;
		EnterRecursionRule(_localctx, 184, RULE_any_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AnyTypeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1312; Match(ANY);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1320;
					switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
					case 1:
						{
						_localctx = new AnyListTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyListTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1314;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1315; Match(LBRAK);
						State = 1316; Match(RBRAK);
						}
						break;
					case 2:
						{
						_localctx = new AnyDictTypeContext(new Any_typeContext(_parentctx, _parentState));
						((AnyDictTypeContext)_localctx).typ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_any_type);
						State = 1317;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1318; Match(LCURL);
						State = 1319; Match(RCURL);
						}
						break;
					}
					} 
				}
				State = 1324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_method_declaration_listContext : ParserRuleContext {
		public Category_method_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_method_declaration_list; } }
	 
		public Category_method_declaration_listContext() { }
		public virtual void CopyFrom(Category_method_declaration_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CategoryMethodListContext : Category_method_declaration_listContext {
		public Category_method_declarationContext item;
		public Category_method_declarationContext category_method_declaration() {
			return GetRuleContext<Category_method_declarationContext>(0);
		}
		public CategoryMethodListContext(Category_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodList(this);
		}
	}
	public partial class CategoryMethodListItemContext : Category_method_declaration_listContext {
		public Category_method_declaration_listContext items;
		public Category_method_declarationContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Category_method_declaration_listContext category_method_declaration_list() {
			return GetRuleContext<Category_method_declaration_listContext>(0);
		}
		public Category_method_declarationContext category_method_declaration() {
			return GetRuleContext<Category_method_declarationContext>(0);
		}
		public CategoryMethodListItemContext(Category_method_declaration_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCategoryMethodListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCategoryMethodListItem(this);
		}
	}

	[RuleVersion(0)]
	public Category_method_declaration_listContext category_method_declaration_list() {
		return category_method_declaration_list(0);
	}

	private Category_method_declaration_listContext category_method_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Category_method_declaration_listContext _localctx = new Category_method_declaration_listContext(Context, _parentState);
		Category_method_declaration_listContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_category_method_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CategoryMethodListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1326; ((CategoryMethodListContext)_localctx).item = category_method_declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CategoryMethodListItemContext(new Category_method_declaration_listContext(_parentctx, _parentState));
					((CategoryMethodListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_category_method_declaration_list);
					State = 1328;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1329; lfp();
					State = 1330; ((CategoryMethodListItemContext)_localctx).item = category_method_declaration();
					}
					} 
				}
				State = 1336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Category_method_declarationContext : ParserRuleContext {
		public Category_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_method_declaration; } }
	 
		public Category_method_declarationContext() { }
		public virtual void CopyFrom(Category_method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GetterMethodContext : Category_method_declarationContext {
		public Getter_method_declarationContext decl;
		public Getter_method_declarationContext getter_method_declaration() {
			return GetRuleContext<Getter_method_declarationContext>(0);
		}
		public GetterMethodContext(Category_method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterGetterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitGetterMethod(this);
		}
	}
	public partial class MemberMethodContext : Category_method_declarationContext {
		public Member_method_declarationContext decl;
		public Member_method_declarationContext member_method_declaration() {
			return GetRuleContext<Member_method_declarationContext>(0);
		}
		public MemberMethodContext(Category_method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMemberMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMemberMethod(this);
		}
	}
	public partial class SetterMethodContext : Category_method_declarationContext {
		public Setter_method_declarationContext decl;
		public Setter_method_declarationContext setter_method_declaration() {
			return GetRuleContext<Setter_method_declarationContext>(0);
		}
		public SetterMethodContext(Category_method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSetterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSetterMethod(this);
		}
	}
	public partial class OperatorMethodContext : Category_method_declarationContext {
		public Operator_method_declarationContext decl;
		public Operator_method_declarationContext operator_method_declaration() {
			return GetRuleContext<Operator_method_declarationContext>(0);
		}
		public OperatorMethodContext(Category_method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorMethod(this);
		}
	}

	[RuleVersion(0)]
	public Category_method_declarationContext category_method_declaration() {
		Category_method_declarationContext _localctx = new Category_method_declarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_category_method_declaration);
		try {
			State = 1341;
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				_localctx = new SetterMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1337; ((SetterMethodContext)_localctx).decl = setter_method_declaration();
				}
				break;
			case 2:
				_localctx = new GetterMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1338; ((GetterMethodContext)_localctx).decl = getter_method_declaration();
				}
				break;
			case 3:
				_localctx = new MemberMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1339; ((MemberMethodContext)_localctx).decl = member_method_declaration();
				}
				break;
			case 4:
				_localctx = new OperatorMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1340; ((OperatorMethodContext)_localctx).decl = operator_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_category_mappingContext : ParserRuleContext {
		public Native_category_mappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_category_mapping; } }
	 
		public Native_category_mappingContext() { }
		public virtual void CopyFrom(Native_category_mappingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpCategoryMappingContext : Native_category_mappingContext {
		public Csharp_identifier_expressionContext mapping;
		public ITerminalNode CSHARP() { return GetToken(OParser.CSHARP, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpCategoryMappingContext(Native_category_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpCategoryMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpCategoryMapping(this);
		}
	}
	public partial class JavaCategoryMappingContext : Native_category_mappingContext {
		public Java_class_identifier_expressionContext mapping;
		public ITerminalNode JAVA() { return GetToken(OParser.JAVA, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public JavaCategoryMappingContext(Native_category_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaCategoryMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaCategoryMapping(this);
		}
	}
	public partial class JavaScriptCategoryMappingContext : Native_category_mappingContext {
		public Javascript_category_mappingContext mapping;
		public ITerminalNode JAVASCRIPT() { return GetToken(OParser.JAVASCRIPT, 0); }
		public Javascript_category_mappingContext javascript_category_mapping() {
			return GetRuleContext<Javascript_category_mappingContext>(0);
		}
		public JavaScriptCategoryMappingContext(Native_category_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptCategoryMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptCategoryMapping(this);
		}
	}
	public partial class Python3CategoryMappingContext : Native_category_mappingContext {
		public Python_category_mappingContext mapping;
		public ITerminalNode PYTHON3() { return GetToken(OParser.PYTHON3, 0); }
		public Python_category_mappingContext python_category_mapping() {
			return GetRuleContext<Python_category_mappingContext>(0);
		}
		public Python3CategoryMappingContext(Native_category_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython3CategoryMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython3CategoryMapping(this);
		}
	}
	public partial class Python2CategoryMappingContext : Native_category_mappingContext {
		public Python_category_mappingContext mapping;
		public ITerminalNode PYTHON2() { return GetToken(OParser.PYTHON2, 0); }
		public Python_category_mappingContext python_category_mapping() {
			return GetRuleContext<Python_category_mappingContext>(0);
		}
		public Python2CategoryMappingContext(Native_category_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython2CategoryMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython2CategoryMapping(this);
		}
	}

	[RuleVersion(0)]
	public Native_category_mappingContext native_category_mapping() {
		Native_category_mappingContext _localctx = new Native_category_mappingContext(Context, State);
		EnterRule(_localctx, 190, RULE_native_category_mapping);
		try {
			State = 1353;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaCategoryMappingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1343; Match(JAVA);
				State = 1344; ((JavaCategoryMappingContext)_localctx).mapping = java_class_identifier_expression(0);
				}
				break;
			case CSHARP:
				_localctx = new CSharpCategoryMappingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1345; Match(CSHARP);
				State = 1346; ((CSharpCategoryMappingContext)_localctx).mapping = csharp_identifier_expression(0);
				}
				break;
			case PYTHON2:
				_localctx = new Python2CategoryMappingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1347; Match(PYTHON2);
				State = 1348; ((Python2CategoryMappingContext)_localctx).mapping = python_category_mapping();
				}
				break;
			case PYTHON3:
				_localctx = new Python3CategoryMappingContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1349; Match(PYTHON3);
				State = 1350; ((Python3CategoryMappingContext)_localctx).mapping = python_category_mapping();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptCategoryMappingContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1351; Match(JAVASCRIPT);
				State = 1352; ((JavaScriptCategoryMappingContext)_localctx).mapping = javascript_category_mapping();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_category_mappingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Python_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_category_mappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_category_mapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_category_mapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_category_mapping(this);
		}
	}

	[RuleVersion(0)]
	public Python_category_mappingContext python_category_mapping() {
		Python_category_mappingContext _localctx = new Python_category_mappingContext(Context, State);
		EnterRule(_localctx, 192, RULE_python_category_mapping);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355; _localctx.id_ = identifier();
			State = 1357;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1356; _localctx.module = python_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(OParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(OParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(OParser.DOT, i);
		}
		public Python_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_module(this);
		}
	}

	[RuleVersion(0)]
	public Python_moduleContext python_module() {
		Python_moduleContext _localctx = new Python_moduleContext(Context, State);
		EnterRule(_localctx, 194, RULE_python_module);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359; Match(FROM);
			State = 1360; module_token();
			State = 1361; Match(COLON);
			State = 1362; identifier();
			State = 1367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1363; Match(DOT);
					State = 1364; identifier();
					}
					} 
				}
				State = 1369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Module_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterModule_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitModule_token(this);
		}
	}

	[RuleVersion(0)]
	public Module_tokenContext module_token() {
		Module_tokenContext _localctx = new Module_tokenContext(Context, State);
		EnterRule(_localctx, 196, RULE_module_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1371;
			if (!(this.isText(_localctx.i1,"module"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"module\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_category_mappingContext : ParserRuleContext {
		public IdentifierContext id_;
		public Javascript_moduleContext module;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_category_mappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_category_mapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_category_mapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_category_mapping(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_category_mappingContext javascript_category_mapping() {
		Javascript_category_mappingContext _localctx = new Javascript_category_mappingContext(Context, State);
		EnterRule(_localctx, 198, RULE_javascript_category_mapping);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373; _localctx.id_ = identifier();
			State = 1375;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 1374; _localctx.module = javascript_module();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_moduleContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(OParser.FROM, 0); }
		public Module_tokenContext module_token() {
			return GetRuleContext<Module_tokenContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public Javascript_identifierContext[] javascript_identifier() {
			return GetRuleContexts<Javascript_identifierContext>();
		}
		public Javascript_identifierContext javascript_identifier(int i) {
			return GetRuleContext<Javascript_identifierContext>(i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(OParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(OParser.SLASH, i);
		}
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Javascript_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_module(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_module(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_moduleContext javascript_module() {
		Javascript_moduleContext _localctx = new Javascript_moduleContext(Context, State);
		EnterRule(_localctx, 200, RULE_javascript_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377; Match(FROM);
			State = 1378; module_token();
			State = 1379; Match(COLON);
			State = 1381;
			_la = TokenStream.La(1);
			if (_la==SLASH) {
				{
				State = 1380; Match(SLASH);
				}
			}

			State = 1383; javascript_identifier();
			State = 1388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1384; Match(SLASH);
					State = 1385; javascript_identifier();
					}
					} 
				}
				State = 1390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			State = 1393;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1391; Match(DOT);
				State = 1392; javascript_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifier_listContext : ParserRuleContext {
		public Variable_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier_list; } }
	 
		public Variable_identifier_listContext() { }
		public virtual void CopyFrom(Variable_identifier_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableListContext : Variable_identifier_listContext {
		public Variable_identifierContext item;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
	}
	public partial class VariableListItemContext : Variable_identifier_listContext {
		public Variable_identifier_listContext items;
		public Variable_identifierContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Variable_identifier_listContext variable_identifier_list() {
			return GetRuleContext<Variable_identifier_listContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public VariableListItemContext(Variable_identifier_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterVariableListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitVariableListItem(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifier_listContext variable_identifier_list() {
		return variable_identifier_list(0);
	}

	private Variable_identifier_listContext variable_identifier_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_identifier_listContext _localctx = new Variable_identifier_listContext(Context, _parentState);
		Variable_identifier_listContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_variable_identifier_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new VariableListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1396; ((VariableListContext)_localctx).item = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1403;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableListItemContext(new Variable_identifier_listContext(_parentctx, _parentState));
					((VariableListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_variable_identifier_list);
					State = 1398;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1399; Match(COMMA);
					State = 1400; ((VariableListItemContext)_localctx).item = variable_identifier();
					}
					} 
				}
				State = 1405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
	 
		public Method_declarationContext() { }
		public virtual void CopyFrom(Method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConcreteMethodContext : Method_declarationContext {
		public Concrete_method_declarationContext decl;
		public Concrete_method_declarationContext concrete_method_declaration() {
			return GetRuleContext<Concrete_method_declarationContext>(0);
		}
		public ConcreteMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterConcreteMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitConcreteMethod(this);
		}
	}
	public partial class TestMethodContext : Method_declarationContext {
		public Test_method_declarationContext decl;
		public Test_method_declarationContext test_method_declaration() {
			return GetRuleContext<Test_method_declarationContext>(0);
		}
		public TestMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTestMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTestMethod(this);
		}
	}
	public partial class AbstractMethodContext : Method_declarationContext {
		public Abstract_method_declarationContext decl;
		public Abstract_method_declarationContext abstract_method_declaration() {
			return GetRuleContext<Abstract_method_declarationContext>(0);
		}
		public AbstractMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAbstractMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAbstractMethod(this);
		}
	}
	public partial class NativeMethodContext : Method_declarationContext {
		public Native_method_declarationContext decl;
		public Native_method_declarationContext native_method_declaration() {
			return GetRuleContext<Native_method_declarationContext>(0);
		}
		public NativeMethodContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeMethod(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_method_declaration);
		try {
			State = 1410;
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				_localctx = new AbstractMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1406; ((AbstractMethodContext)_localctx).decl = abstract_method_declaration();
				}
				break;
			case 2:
				_localctx = new ConcreteMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1407; ((ConcreteMethodContext)_localctx).decl = concrete_method_declaration();
				}
				break;
			case 3:
				_localctx = new NativeMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1408; ((NativeMethodContext)_localctx).decl = native_method_declaration();
				}
				break;
			case 4:
				_localctx = new TestMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1409; ((TestMethodContext)_localctx).decl = test_method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_statement_listContext : ParserRuleContext {
		public Native_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement_list; } }
	 
		public Native_statement_listContext() { }
		public virtual void CopyFrom(Native_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeStatementListContext : Native_statement_listContext {
		public Native_statementContext item;
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementList(this);
		}
	}
	public partial class NativeStatementListItemContext : Native_statement_listContext {
		public Native_statement_listContext items;
		public Native_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Native_statement_listContext native_statement_list() {
			return GetRuleContext<Native_statement_listContext>(0);
		}
		public Native_statementContext native_statement() {
			return GetRuleContext<Native_statementContext>(0);
		}
		public NativeStatementListItemContext(Native_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNativeStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNativeStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Native_statement_listContext native_statement_list() {
		return native_statement_list(0);
	}

	private Native_statement_listContext native_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Native_statement_listContext _localctx = new Native_statement_listContext(Context, _parentState);
		Native_statement_listContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_native_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NativeStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1413; ((NativeStatementListContext)_localctx).item = native_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1421;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NativeStatementListItemContext(new Native_statement_listContext(_parentctx, _parentState));
					((NativeStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_native_statement_list);
					State = 1415;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1416; lfp();
					State = 1417; ((NativeStatementListItemContext)_localctx).item = native_statement();
					}
					} 
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Native_statementContext : ParserRuleContext {
		public Native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_statement; } }
	 
		public Native_statementContext() { }
		public virtual void CopyFrom(Native_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Python2NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON2() { return GetToken(OParser.PYTHON2, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python2NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython2NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython2NativeStatement(this);
		}
	}
	public partial class CSharpNativeStatementContext : Native_statementContext {
		public Csharp_statementContext stmt;
		public ITerminalNode CSHARP() { return GetToken(OParser.CSHARP, 0); }
		public Csharp_statementContext csharp_statement() {
			return GetRuleContext<Csharp_statementContext>(0);
		}
		public CSharpNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpNativeStatement(this);
		}
	}
	public partial class JavaNativeStatementContext : Native_statementContext {
		public Java_statementContext stmt;
		public ITerminalNode JAVA() { return GetToken(OParser.JAVA, 0); }
		public Java_statementContext java_statement() {
			return GetRuleContext<Java_statementContext>(0);
		}
		public JavaNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaNativeStatement(this);
		}
	}
	public partial class JavaScriptNativeStatementContext : Native_statementContext {
		public Javascript_native_statementContext stmt;
		public ITerminalNode JAVASCRIPT() { return GetToken(OParser.JAVASCRIPT, 0); }
		public Javascript_native_statementContext javascript_native_statement() {
			return GetRuleContext<Javascript_native_statementContext>(0);
		}
		public JavaScriptNativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaScriptNativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaScriptNativeStatement(this);
		}
	}
	public partial class Python3NativeStatementContext : Native_statementContext {
		public Python_native_statementContext stmt;
		public ITerminalNode PYTHON3() { return GetToken(OParser.PYTHON3, 0); }
		public Python_native_statementContext python_native_statement() {
			return GetRuleContext<Python_native_statementContext>(0);
		}
		public Python3NativeStatementContext(Native_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython3NativeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython3NativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public Native_statementContext native_statement() {
		Native_statementContext _localctx = new Native_statementContext(Context, State);
		EnterRule(_localctx, 208, RULE_native_statement);
		try {
			State = 1434;
			switch (TokenStream.La(1)) {
			case JAVA:
				_localctx = new JavaNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1424; Match(JAVA);
				State = 1425; ((JavaNativeStatementContext)_localctx).stmt = java_statement();
				}
				break;
			case CSHARP:
				_localctx = new CSharpNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1426; Match(CSHARP);
				State = 1427; ((CSharpNativeStatementContext)_localctx).stmt = csharp_statement();
				}
				break;
			case PYTHON2:
				_localctx = new Python2NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1428; Match(PYTHON2);
				State = 1429; ((Python2NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case PYTHON3:
				_localctx = new Python3NativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1430; Match(PYTHON3);
				State = 1431; ((Python3NativeStatementContext)_localctx).stmt = python_native_statement();
				}
				break;
			case JAVASCRIPT:
				_localctx = new JavaScriptNativeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1432; Match(JAVASCRIPT);
				State = 1433; ((JavaScriptNativeStatementContext)_localctx).stmt = javascript_native_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_native_statementContext : ParserRuleContext {
		public Python_statementContext stmt;
		public Python_moduleContext module;
		public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Python_moduleContext python_module() {
			return GetRuleContext<Python_moduleContext>(0);
		}
		public Python_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Python_native_statementContext python_native_statement() {
		Python_native_statementContext _localctx = new Python_native_statementContext(Context, State);
		EnterRule(_localctx, 210, RULE_python_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; _localctx.stmt = python_statement();
			State = 1438;
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 1437; Match(SEMI);
				}
				break;
			}
			State = 1441;
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1440; _localctx.module = python_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_native_statementContext : ParserRuleContext {
		public Javascript_statementContext stmt;
		public Javascript_moduleContext module;
		public Javascript_statementContext javascript_statement() {
			return GetRuleContext<Javascript_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Javascript_moduleContext javascript_module() {
			return GetRuleContext<Javascript_moduleContext>(0);
		}
		public Javascript_native_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_native_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_native_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_native_statement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_native_statementContext javascript_native_statement() {
		Javascript_native_statementContext _localctx = new Javascript_native_statementContext(Context, State);
		EnterRule(_localctx, 212, RULE_javascript_native_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443; _localctx.stmt = javascript_statement();
			State = 1445;
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1444; Match(SEMI);
				}
				break;
			}
			State = 1448;
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 1447; _localctx.module = javascript_module();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
	 
		public Statement_listContext() { }
		public virtual void CopyFrom(Statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementListItemContext : Statement_listContext {
		public Statement_listContext items;
		public StatementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListItemContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitStatementListItem(this);
		}
	}
	public partial class StatementListContext : Statement_listContext {
		public StatementContext item;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementListContext(Statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 214;
		EnterRecursionRule(_localctx, 214, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new StatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1451; ((StatementListContext)_localctx).item = statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementListItemContext(new Statement_listContext(_parentctx, _parentState));
					((StatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 1453;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1454; lfp();
					State = 1455; ((StatementListItemContext)_localctx).item = statement();
					}
					} 
				}
				State = 1461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assertion_listContext : ParserRuleContext {
		public Assertion_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_list; } }
	 
		public Assertion_listContext() { }
		public virtual void CopyFrom(Assertion_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssertionListItemContext : Assertion_listContext {
		public Assertion_listContext items;
		public AssertionContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Assertion_listContext assertion_list() {
			return GetRuleContext<Assertion_listContext>(0);
		}
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListItemContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssertionListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssertionListItem(this);
		}
	}
	public partial class AssertionListContext : Assertion_listContext {
		public AssertionContext item;
		public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		public AssertionListContext(Assertion_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssertionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssertionList(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_listContext assertion_list() {
		return assertion_list(0);
	}

	private Assertion_listContext assertion_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assertion_listContext _localctx = new Assertion_listContext(Context, _parentState);
		Assertion_listContext _prevctx = _localctx;
		int _startState = 216;
		EnterRecursionRule(_localctx, 216, RULE_assertion_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AssertionListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1463; ((AssertionListContext)_localctx).item = assertion();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssertionListItemContext(new Assertion_listContext(_parentctx, _parentState));
					((AssertionListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assertion_list);
					State = 1465;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1466; lfp();
					State = 1467; ((AssertionListItemContext)_localctx).item = assertion();
					}
					} 
				}
				State = 1473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_case_statement_listContext : ParserRuleContext {
		public Switch_case_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case_statement_list; } }
	 
		public Switch_case_statement_listContext() { }
		public virtual void CopyFrom(Switch_case_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseStatementListItemContext : Switch_case_statement_listContext {
		public Switch_case_statement_listContext items;
		public Switch_case_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Switch_case_statement_listContext switch_case_statement_list() {
			return GetRuleContext<Switch_case_statement_listContext>(0);
		}
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListItemContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementListItem(this);
		}
	}
	public partial class SwitchCaseStatementListContext : Switch_case_statement_listContext {
		public Switch_case_statementContext item;
		public Switch_case_statementContext switch_case_statement() {
			return GetRuleContext<Switch_case_statementContext>(0);
		}
		public SwitchCaseStatementListContext(Switch_case_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatementList(this);
		}
	}

	[RuleVersion(0)]
	public Switch_case_statement_listContext switch_case_statement_list() {
		return switch_case_statement_list(0);
	}

	private Switch_case_statement_listContext switch_case_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Switch_case_statement_listContext _localctx = new Switch_case_statement_listContext(Context, _parentState);
		Switch_case_statement_listContext _prevctx = _localctx;
		int _startState = 218;
		EnterRecursionRule(_localctx, 218, RULE_switch_case_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SwitchCaseStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1475; ((SwitchCaseStatementListContext)_localctx).item = switch_case_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SwitchCaseStatementListItemContext(new Switch_case_statement_listContext(_parentctx, _parentState));
					((SwitchCaseStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_switch_case_statement_list);
					State = 1477;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1478; lfp();
					State = 1479; ((SwitchCaseStatementListItemContext)_localctx).item = switch_case_statement();
					}
					} 
				}
				State = 1485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Catch_statement_listContext : ParserRuleContext {
		public Catch_statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement_list; } }
	 
		public Catch_statement_listContext() { }
		public virtual void CopyFrom(Catch_statement_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CatchStatementListContext : Catch_statement_listContext {
		public Catch_statementContext item;
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementList(this);
		}
	}
	public partial class CatchStatementListItemContext : Catch_statement_listContext {
		public Catch_statement_listContext items;
		public Catch_statementContext item;
		public LfpContext lfp() {
			return GetRuleContext<LfpContext>(0);
		}
		public Catch_statement_listContext catch_statement_list() {
			return GetRuleContext<Catch_statement_listContext>(0);
		}
		public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		public CatchStatementListItemContext(Catch_statement_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCatchStatementListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCatchStatementListItem(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statement_listContext catch_statement_list() {
		return catch_statement_list(0);
	}

	private Catch_statement_listContext catch_statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Catch_statement_listContext _localctx = new Catch_statement_listContext(Context, _parentState);
		Catch_statement_listContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_catch_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CatchStatementListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1487; ((CatchStatementListContext)_localctx).item = catch_statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1495;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CatchStatementListItemContext(new Catch_statement_listContext(_parentctx, _parentState));
					((CatchStatementListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_catch_statement_list);
					State = 1489;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1490; lfp();
					State = 1491; ((CatchStatementListItemContext)_localctx).item = catch_statement();
					}
					} 
				}
				State = 1497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_collectionContext : ParserRuleContext {
		public Literal_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_collection; } }
	 
		public Literal_collectionContext() { }
		public virtual void CopyFrom(Literal_collectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralSetLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LT() { return GetToken(OParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(OParser.GT, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralSetLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralSetLiteral(this);
		}
	}
	public partial class LiteralListLiteralContext : Literal_collectionContext {
		public Literal_list_literalContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public LiteralListLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralListLiteral(this);
		}
	}
	public partial class LiteralRangeLiteralContext : Literal_collectionContext {
		public Atomic_literalContext low;
		public Atomic_literalContext high;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RANGE() { return GetToken(OParser.RANGE, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Atomic_literalContext[] atomic_literal() {
			return GetRuleContexts<Atomic_literalContext>();
		}
		public Atomic_literalContext atomic_literal(int i) {
			return GetRuleContext<Atomic_literalContext>(i);
		}
		public LiteralRangeLiteralContext(Literal_collectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralRangeLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_collectionContext literal_collection() {
		Literal_collectionContext _localctx = new Literal_collectionContext(Context, State);
		EnterRule(_localctx, 222, RULE_literal_collection);
		try {
			State = 1512;
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				_localctx = new LiteralRangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1498; Match(LBRAK);
				State = 1499; ((LiteralRangeLiteralContext)_localctx).low = atomic_literal();
				State = 1500; Match(RANGE);
				State = 1501; ((LiteralRangeLiteralContext)_localctx).high = atomic_literal();
				State = 1502; Match(RBRAK);
				}
				break;
			case 2:
				_localctx = new LiteralListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1504; Match(LBRAK);
				State = 1505; ((LiteralListLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1506; Match(RBRAK);
				}
				break;
			case 3:
				_localctx = new LiteralSetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1508; Match(LT);
				State = 1509; ((LiteralSetLiteralContext)_localctx).exp = literal_list_literal(0);
				State = 1510; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_literalContext : ParserRuleContext {
		public Atomic_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_literal; } }
	 
		public Atomic_literalContext() { }
		public virtual void CopyFrom(Atomic_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode PERIOD_LITERAL() { return GetToken(OParser.PERIOD_LITERAL, 0); }
		public PeriodLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPeriodLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPeriodLiteral(this);
		}
	}
	public partial class NullLiteralContext : Atomic_literalContext {
		public Null_literalContext n;
		public Null_literalContext null_literal() {
			return GetRuleContext<Null_literalContext>(0);
		}
		public NullLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class TextLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public TextLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode HEXA_LITERAL() { return GetToken(OParser.HEXA_LITERAL, 0); }
		public HexadecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}
	public partial class CharacterLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(OParser.CHAR_LITERAL, 0); }
		public CharacterLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCharacterLiteral(this);
		}
	}
	public partial class DateLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATE_LITERAL() { return GetToken(OParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
	}
	public partial class TimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode TIME_LITERAL() { return GetToken(OParser.TIME_LITERAL, 0); }
		public TimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class MaxIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MAX_INTEGER() { return GetToken(OParser.MAX_INTEGER, 0); }
		public MaxIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMaxIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMaxIntegerLiteral(this);
		}
	}
	public partial class IntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(OParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(OParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class MinIntegerLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode MIN_INTEGER() { return GetToken(OParser.MIN_INTEGER, 0); }
		public MinIntegerLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMinIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMinIntegerLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode DATETIME_LITERAL() { return GetToken(OParser.DATETIME_LITERAL, 0); }
		public DateTimeLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : Atomic_literalContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(OParser.BOOLEAN_LITERAL, 0); }
		public BooleanLiteralContext(Atomic_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_literalContext atomic_literal() {
		Atomic_literalContext _localctx = new Atomic_literalContext(Context, State);
		EnterRule(_localctx, 224, RULE_atomic_literal);
		try {
			State = 1527;
			switch (TokenStream.La(1)) {
			case MIN_INTEGER:
				_localctx = new MinIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1514; ((MinIntegerLiteralContext)_localctx).t = Match(MIN_INTEGER);
				}
				break;
			case MAX_INTEGER:
				_localctx = new MaxIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1515; ((MaxIntegerLiteralContext)_localctx).t = Match(MAX_INTEGER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1516; ((IntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case HEXA_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1517; ((HexadecimalLiteralContext)_localctx).t = Match(HEXA_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1518; ((CharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1519; ((DateLiteralContext)_localctx).t = Match(DATE_LITERAL);
				}
				break;
			case TIME_LITERAL:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1520; ((TimeLiteralContext)_localctx).t = Match(TIME_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1521; ((TextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1522; ((DecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case DATETIME_LITERAL:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1523; ((DateTimeLiteralContext)_localctx).t = Match(DATETIME_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1524; ((BooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case PERIOD_LITERAL:
				_localctx = new PeriodLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1525; ((PeriodLiteralContext)_localctx).t = Match(PERIOD_LITERAL);
				}
				break;
			case NULL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1526; ((NullLiteralContext)_localctx).n = null_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_list_literalContext : ParserRuleContext {
		public Literal_list_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_list_literal; } }
	 
		public Literal_list_literalContext() { }
		public virtual void CopyFrom(Literal_list_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralListContext : Literal_list_literalContext {
		public Atomic_literalContext item;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
	}
	public partial class LiteralListItemContext : Literal_list_literalContext {
		public Literal_list_literalContext items;
		public Atomic_literalContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Literal_list_literalContext literal_list_literal() {
			return GetRuleContext<Literal_list_literalContext>(0);
		}
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public LiteralListItemContext(Literal_list_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralListItem(this);
		}
	}

	[RuleVersion(0)]
	public Literal_list_literalContext literal_list_literal() {
		return literal_list_literal(0);
	}

	private Literal_list_literalContext literal_list_literal(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Literal_list_literalContext _localctx = new Literal_list_literalContext(Context, _parentState);
		Literal_list_literalContext _prevctx = _localctx;
		int _startState = 226;
		EnterRecursionRule(_localctx, 226, RULE_literal_list_literal, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LiteralListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1530; ((LiteralListContext)_localctx).item = atomic_literal();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LiteralListItemContext(new Literal_list_literalContext(_parentctx, _parentState));
					((LiteralListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_literal_list_literal);
					State = 1532;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1533; Match(COMMA);
					State = 1534; ((LiteralListItemContext)_localctx).item = atomic_literal();
					}
					} 
				}
				State = 1539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selectable_expressionContext : ParserRuleContext {
		public Selectable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectable_expression; } }
	 
		public Selectable_expressionContext() { }
		public virtual void CopyFrom(Selectable_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : Selectable_expressionContext {
		public IdentifierContext exp;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : Selectable_expressionContext {
		public Parenthesis_expressionContext exp;
		public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public ParenthesisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class LiteralExpressionContext : Selectable_expressionContext {
		public Literal_expressionContext exp;
		public Literal_expressionContext literal_expression() {
			return GetRuleContext<Literal_expressionContext>(0);
		}
		public LiteralExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ThisExpressionContext : Selectable_expressionContext {
		public This_expressionContext exp;
		public This_expressionContext this_expression() {
			return GetRuleContext<This_expressionContext>(0);
		}
		public ThisExpressionContext(Selectable_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}

	[RuleVersion(0)]
	public Selectable_expressionContext selectable_expression() {
		Selectable_expressionContext _localctx = new Selectable_expressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_selectable_expression);
		try {
			State = 1544;
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1540; ((ParenthesisExpressionContext)_localctx).exp = parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1541; ((LiteralExpressionContext)_localctx).exp = literal_expression();
				}
				break;
			case 3:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1542; ((IdentifierExpressionContext)_localctx).exp = identifier();
				}
				break;
			case 4:
				_localctx = new ThisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1543; ((ThisExpressionContext)_localctx).exp = this_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_expressionContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(OParser.SELF, 0); }
		public ITerminalNode THIS() { return GetToken(OParser.THIS, 0); }
		public This_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterThis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitThis_expression(this);
		}
	}

	[RuleVersion(0)]
	public This_expressionContext this_expression() {
		This_expressionContext _localctx = new This_expressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_this_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			_la = TokenStream.La(1);
			if ( !(_la==SELF || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 232, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548; Match(LPAR);
			State = 1549; _localctx.exp = expression(0);
			State = 1550; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_expressionContext : ParserRuleContext {
		public Literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expression; } }
	 
		public Literal_expressionContext() { }
		public virtual void CopyFrom(Literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CollectionLiteralContext : Literal_expressionContext {
		public Collection_literalContext exp;
		public Collection_literalContext collection_literal() {
			return GetRuleContext<Collection_literalContext>(0);
		}
		public CollectionLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCollectionLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCollectionLiteral(this);
		}
	}
	public partial class AtomicLiteralContext : Literal_expressionContext {
		public Atomic_literalContext exp;
		public Atomic_literalContext atomic_literal() {
			return GetRuleContext<Atomic_literalContext>(0);
		}
		public AtomicLiteralContext(Literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAtomicLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAtomicLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Literal_expressionContext literal_expression() {
		Literal_expressionContext _localctx = new Literal_expressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_literal_expression);
		try {
			State = 1554;
			switch (TokenStream.La(1)) {
			case NULL:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case MIN_INTEGER:
			case MAX_INTEGER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case HEXA_LITERAL:
			case DECIMAL_LITERAL:
			case DATETIME_LITERAL:
			case TIME_LITERAL:
			case DATE_LITERAL:
			case PERIOD_LITERAL:
				_localctx = new AtomicLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552; ((AtomicLiteralContext)_localctx).exp = atomic_literal();
				}
				break;
			case LPAR:
			case LBRAK:
			case LCURL:
			case LT:
				_localctx = new CollectionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1553; ((CollectionLiteralContext)_localctx).exp = collection_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_literalContext : ParserRuleContext {
		public Collection_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_literal; } }
	 
		public Collection_literalContext() { }
		public virtual void CopyFrom(Collection_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TupleLiteralContext : Collection_literalContext {
		public Tuple_literalContext exp;
		public Tuple_literalContext tuple_literal() {
			return GetRuleContext<Tuple_literalContext>(0);
		}
		public TupleLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTupleLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTupleLiteral(this);
		}
	}
	public partial class ListLiteralContext : Collection_literalContext {
		public List_literalContext exp;
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public ListLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
	}
	public partial class DictLiteralContext : Collection_literalContext {
		public Dict_literalContext exp;
		public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		public DictLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
	}
	public partial class RangeLiteralContext : Collection_literalContext {
		public Range_literalContext exp;
		public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRangeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRangeLiteral(this);
		}
	}
	public partial class SetLiteralContext : Collection_literalContext {
		public Set_literalContext exp;
		public Set_literalContext set_literal() {
			return GetRuleContext<Set_literalContext>(0);
		}
		public SetLiteralContext(Collection_literalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSetLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Collection_literalContext collection_literal() {
		Collection_literalContext _localctx = new Collection_literalContext(Context, State);
		EnterRule(_localctx, 236, RULE_collection_literal);
		try {
			State = 1561;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				_localctx = new RangeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1556; ((RangeLiteralContext)_localctx).exp = range_literal();
				}
				break;
			case 2:
				_localctx = new ListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1557; ((ListLiteralContext)_localctx).exp = list_literal();
				}
				break;
			case 3:
				_localctx = new SetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1558; ((SetLiteralContext)_localctx).exp = set_literal();
				}
				break;
			case 4:
				_localctx = new DictLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1559; ((DictLiteralContext)_localctx).exp = dict_literal();
				}
				break;
			case 5:
				_localctx = new TupleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1560; ((TupleLiteralContext)_localctx).exp = tuple_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_literalContext : ParserRuleContext {
		public Expression_tupleContext items;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public Tuple_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterTuple_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitTuple_literal(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_literalContext tuple_literal() {
		Tuple_literalContext _localctx = new Tuple_literalContext(Context, State);
		EnterRule(_localctx, 238, RULE_tuple_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; Match(LPAR);
			State = 1565;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 1564; _localctx.items = expression_tuple(0);
				}
			}

			State = 1567; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		public Dict_entry_listContext items;
		public ITerminalNode LCURL() { return GetToken(OParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(OParser.RCURL, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 240, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(LCURL);
			State = 1571;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LBRAK) | (1L << LCURL) | (1L << XMARK) | (1L << MINUS) | (1L << LT) | (1L << CODE) | (1L << DOCUMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (EXECUTE - 83)) | (1L << (FETCH - 83)) | (1L << (NULL - 83)) | (1L << (READ - 83)) | (1L << (SELF - 83)) | (1L << (SORTED - 83)) | (1L << (THIS - 83)) | (1L << (BOOLEAN_LITERAL - 83)) | (1L << (CHAR_LITERAL - 83)) | (1L << (MIN_INTEGER - 83)) | (1L << (MAX_INTEGER - 83)) | (1L << (SYMBOL_IDENTIFIER - 83)) | (1L << (TYPE_IDENTIFIER - 83)) | (1L << (VARIABLE_IDENTIFIER - 83)) | (1L << (TEXT_LITERAL - 83)) | (1L << (INTEGER_LITERAL - 83)) | (1L << (HEXA_LITERAL - 83)) | (1L << (DECIMAL_LITERAL - 83)) | (1L << (DATETIME_LITERAL - 83)) | (1L << (TIME_LITERAL - 83)) | (1L << (DATE_LITERAL - 83)) | (1L << (PERIOD_LITERAL - 83)))) != 0)) {
				{
				State = 1570; _localctx.items = dict_entry_list(0);
				}
			}

			State = 1573; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_tupleContext : ParserRuleContext {
		public Expression_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_tuple; } }
	 
		public Expression_tupleContext() { }
		public virtual void CopyFrom(Expression_tupleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTupleItemContext : Expression_tupleContext {
		public Expression_tupleContext items;
		public ExpressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Expression_tupleContext expression_tuple() {
			return GetRuleContext<Expression_tupleContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleItemContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterValueTupleItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitValueTupleItem(this);
		}
	}
	public partial class ValueTupleContext : Expression_tupleContext {
		public ExpressionContext item;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTupleContext(Expression_tupleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterValueTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitValueTuple(this);
		}
	}

	[RuleVersion(0)]
	public Expression_tupleContext expression_tuple() {
		return expression_tuple(0);
	}

	private Expression_tupleContext expression_tuple(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_tupleContext _localctx = new Expression_tupleContext(Context, _parentState);
		Expression_tupleContext _prevctx = _localctx;
		int _startState = 242;
		EnterRecursionRule(_localctx, 242, RULE_expression_tuple, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ValueTupleContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1576; ((ValueTupleContext)_localctx).item = expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueTupleItemContext(new Expression_tupleContext(_parentctx, _parentState));
					((ValueTupleItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression_tuple);
					State = 1578;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1579; Match(COMMA);
					State = 1580; ((ValueTupleItemContext)_localctx).item = expression(0);
					}
					} 
				}
				State = 1585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entry_listContext : ParserRuleContext {
		public Dict_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry_list; } }
	 
		public Dict_entry_listContext() { }
		public virtual void CopyFrom(Dict_entry_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DictEntryListContext : Dict_entry_listContext {
		public Dict_entryContext item;
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDictEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDictEntryList(this);
		}
	}
	public partial class DictEntryListItemContext : Dict_entry_listContext {
		public Dict_entry_listContext items;
		public Dict_entryContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Dict_entry_listContext dict_entry_list() {
			return GetRuleContext<Dict_entry_listContext>(0);
		}
		public Dict_entryContext dict_entry() {
			return GetRuleContext<Dict_entryContext>(0);
		}
		public DictEntryListItemContext(Dict_entry_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDictEntryListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDictEntryListItem(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entry_listContext dict_entry_list() {
		return dict_entry_list(0);
	}

	private Dict_entry_listContext dict_entry_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dict_entry_listContext _localctx = new Dict_entry_listContext(Context, _parentState);
		Dict_entry_listContext _prevctx = _localctx;
		int _startState = 244;
		EnterRecursionRule(_localctx, 244, RULE_dict_entry_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new DictEntryListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1587; ((DictEntryListContext)_localctx).item = dict_entry();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1594;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DictEntryListItemContext(new Dict_entry_listContext(_parentctx, _parentState));
					((DictEntryListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_dict_entry_list);
					State = 1589;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1590; Match(COMMA);
					State = 1591; ((DictEntryListItemContext)_localctx).item = dict_entry();
					}
					} 
				}
				State = 1596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dict_entryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dict_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDict_entry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDict_entry(this);
		}
	}

	[RuleVersion(0)]
	public Dict_entryContext dict_entry() {
		Dict_entryContext _localctx = new Dict_entryContext(Context, State);
		EnterRule(_localctx, 246, RULE_dict_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; _localctx.key = expression(0);
			State = 1598; Match(COLON);
			State = 1599; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_argumentsContext : ParserRuleContext {
		public Slice_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_arguments; } }
	 
		public Slice_argumentsContext() { }
		public virtual void CopyFrom(Slice_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceFirstAndLastContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SliceFirstAndLastContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstAndLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstAndLast(this);
		}
	}
	public partial class SliceFirstOnlyContext : Slice_argumentsContext {
		public ExpressionContext first;
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceFirstOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSliceFirstOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSliceFirstOnly(this);
		}
	}
	public partial class SliceLastOnlyContext : Slice_argumentsContext {
		public ExpressionContext last;
		public ITerminalNode COLON() { return GetToken(OParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SliceLastOnlyContext(Slice_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSliceLastOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSliceLastOnly(this);
		}
	}

	[RuleVersion(0)]
	public Slice_argumentsContext slice_arguments() {
		Slice_argumentsContext _localctx = new Slice_argumentsContext(Context, State);
		EnterRule(_localctx, 248, RULE_slice_arguments);
		try {
			State = 1610;
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				_localctx = new SliceFirstAndLastContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1601; ((SliceFirstAndLastContext)_localctx).first = expression(0);
				State = 1602; Match(COLON);
				State = 1603; ((SliceFirstAndLastContext)_localctx).last = expression(0);
				}
				break;
			case 2:
				_localctx = new SliceFirstOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605; ((SliceFirstOnlyContext)_localctx).first = expression(0);
				State = 1606; Match(COLON);
				}
				break;
			case 3:
				_localctx = new SliceLastOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1608; Match(COLON);
				State = 1609; ((SliceLastOnlyContext)_localctx).last = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variable_statementContext : ParserRuleContext {
		public Variable_identifierContext name;
		public ExpressionContext exp;
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssign_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssign_variable_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_variable_statementContext assign_variable_statement() {
		Assign_variable_statementContext _localctx = new Assign_variable_statementContext(Context, State);
		EnterRule(_localctx, 250, RULE_assign_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612; _localctx.name = variable_identifier();
			State = 1613; assign();
			State = 1614; _localctx.exp = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignable_instanceContext : ParserRuleContext {
		public Assignable_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable_instance; } }
	 
		public Assignable_instanceContext() { }
		public virtual void CopyFrom(Assignable_instanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RootInstanceContext : Assignable_instanceContext {
		public Variable_identifierContext name;
		public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		public RootInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterRootInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitRootInstance(this);
		}
	}
	public partial class ChildInstanceContext : Assignable_instanceContext {
		public Assignable_instanceContext parent;
		public Child_instanceContext child;
		public Assignable_instanceContext assignable_instance() {
			return GetRuleContext<Assignable_instanceContext>(0);
		}
		public Child_instanceContext child_instance() {
			return GetRuleContext<Child_instanceContext>(0);
		}
		public ChildInstanceContext(Assignable_instanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterChildInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitChildInstance(this);
		}
	}

	[RuleVersion(0)]
	public Assignable_instanceContext assignable_instance() {
		return assignable_instance(0);
	}

	private Assignable_instanceContext assignable_instance(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assignable_instanceContext _localctx = new Assignable_instanceContext(Context, _parentState);
		Assignable_instanceContext _prevctx = _localctx;
		int _startState = 252;
		EnterRecursionRule(_localctx, 252, RULE_assignable_instance, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RootInstanceContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1617; ((RootInstanceContext)_localctx).name = variable_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1623;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChildInstanceContext(new Assignable_instanceContext(_parentctx, _parentState));
					((ChildInstanceContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assignable_instance);
					State = 1619;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1620; ((ChildInstanceContext)_localctx).child = child_instance();
					}
					} 
				}
				State = 1625;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Is_expressionContext : ParserRuleContext {
		public Is_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_expression; } }
	 
		public Is_expressionContext() { }
		public virtual void CopyFrom(Is_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsATypeExpressionContext : Is_expressionContext {
		public Category_or_any_typeContext typ;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Category_or_any_typeContext category_or_any_type() {
			return GetRuleContext<Category_or_any_typeContext>(0);
		}
		public IsATypeExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIsATypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIsATypeExpression(this);
		}
	}
	public partial class IsOtherExpressionContext : Is_expressionContext {
		public ExpressionContext exp;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsOtherExpressionContext(Is_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIsOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIsOtherExpression(this);
		}
	}

	[RuleVersion(0)]
	public Is_expressionContext is_expression() {
		Is_expressionContext _localctx = new Is_expressionContext(Context, State);
		EnterRule(_localctx, 254, RULE_is_expression);
		try {
			State = 1630;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				_localctx = new IsATypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				if (!(this.willBeAOrAn())) throw new FailedPredicateException(this, "$parser.willBeAOrAn()");
				State = 1627; Match(VARIABLE_IDENTIFIER);
				State = 1628; ((IsATypeExpressionContext)_localctx).typ = category_or_any_type();
				}
				break;
			case 2:
				_localctx = new IsOtherExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629; ((IsOtherExpressionContext)_localctx).exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorPlusContext : OperatorContext {
		public ITerminalNode PLUS() { return GetToken(OParser.PLUS, 0); }
		public OperatorPlusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorPlus(this);
		}
	}
	public partial class OperatorModuloContext : OperatorContext {
		public ModuloContext modulo() {
			return GetRuleContext<ModuloContext>(0);
		}
		public OperatorModuloContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorModulo(this);
		}
	}
	public partial class OperatorIDivideContext : OperatorContext {
		public IdivideContext idivide() {
			return GetRuleContext<IdivideContext>(0);
		}
		public OperatorIDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorIDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorIDivide(this);
		}
	}
	public partial class OperatorMultiplyContext : OperatorContext {
		public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		public OperatorMultiplyContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorMultiply(this);
		}
	}
	public partial class OperatorDivideContext : OperatorContext {
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public OperatorDivideContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorDivide(this);
		}
	}
	public partial class OperatorMinusContext : OperatorContext {
		public ITerminalNode MINUS() { return GetToken(OParser.MINUS, 0); }
		public OperatorMinusContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitOperatorMinus(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 256, RULE_operator);
		try {
			State = 1638;
			switch (TokenStream.La(1)) {
			case PLUS:
				_localctx = new OperatorPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1632; Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new OperatorMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1633; Match(MINUS);
				}
				break;
			case STAR:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1634; multiply();
				}
				break;
			case SLASH:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1635; divide();
				}
				break;
			case BSLASH:
				_localctx = new OperatorIDivideContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1636; idivide();
				}
				break;
			case PERCENT:
			case MODULO:
				_localctx = new OperatorModuloContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1637; modulo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Key_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterKey_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitKey_token(this);
		}
	}

	[RuleVersion(0)]
	public Key_tokenContext key_token() {
		Key_tokenContext _localctx = new Key_tokenContext(Context, State);
		EnterRule(_localctx, 258, RULE_key_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1641;
			if (!(this.isText(_localctx.i1,"key"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"key\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Value_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterValue_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitValue_token(this);
		}
	}

	[RuleVersion(0)]
	public Value_tokenContext value_token() {
		Value_tokenContext _localctx = new Value_tokenContext(Context, State);
		EnterRule(_localctx, 260, RULE_value_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1644;
			if (!(this.isText(_localctx.i1,"value"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"value\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbols_tokenContext : ParserRuleContext {
		public IToken i1;
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public Symbols_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbols_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterSymbols_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitSymbols_token(this);
		}
	}

	[RuleVersion(0)]
	public Symbols_tokenContext symbols_token() {
		Symbols_tokenContext _localctx = new Symbols_tokenContext(Context, State);
		EnterRule(_localctx, 262, RULE_symbols_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; _localctx.i1 = Match(VARIABLE_IDENTIFIER);
			State = 1647;
			if (!(this.isText(_localctx.i1,"symbols"))) throw new FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 264, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(OParser.STAR, 0); }
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 266, RULE_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode SLASH() { return GetToken(OParser.SLASH, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 268, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdivideContext : ParserRuleContext {
		public ITerminalNode BSLASH() { return GetToken(OParser.BSLASH, 0); }
		public IdivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idivide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterIdivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitIdivide(this);
		}
	}

	[RuleVersion(0)]
	public IdivideContext idivide() {
		IdivideContext _localctx = new IdivideContext(Context, State);
		EnterRule(_localctx, 270, RULE_idivide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; Match(BSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuloContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(OParser.PERCENT, 0); }
		public ITerminalNode MODULO() { return GetToken(OParser.MODULO, 0); }
		public ModuloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
	}

	[RuleVersion(0)]
	public ModuloContext modulo() {
		ModuloContext _localctx = new ModuloContext(Context, State);
		EnterRule(_localctx, 272, RULE_modulo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			_la = TokenStream.La(1);
			if ( !(_la==PERCENT || _la==MODULO) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfsContext : ParserRuleContext {
		public LfsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLfs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLfs(this);
		}
	}

	[RuleVersion(0)]
	public LfsContext lfs() {
		LfsContext _localctx = new LfsContext(Context, State);
		EnterRule(_localctx, 274, RULE_lfs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LfpContext : ParserRuleContext {
		public LfpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lfp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterLfp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitLfp(this);
		}
	}

	[RuleVersion(0)]
	public LfpContext lfp() {
		LfpContext _localctx = new LfpContext(Context, State);
		EnterRule(_localctx, 276, RULE_lfp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_statementContext : ParserRuleContext {
		public Javascript_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_statement; } }
	 
		public Javascript_statementContext() { }
		public virtual void CopyFrom(Javascript_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptReturnStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(OParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptReturnStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptReturnStatement(this);
		}
	}
	public partial class JavascriptStatementContext : Javascript_statementContext {
		public Javascript_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptStatementContext(Javascript_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptStatement(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_statementContext javascript_statement() {
		Javascript_statementContext _localctx = new Javascript_statementContext(Context, State);
		EnterRule(_localctx, 278, RULE_javascript_statement);
		try {
			State = 1670;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavascriptReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1663; Match(RETURN);
				State = 1664; ((JavascriptReturnStatementContext)_localctx).exp = javascript_expression(0);
				State = 1665; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667; ((JavascriptStatementContext)_localctx).exp = javascript_expression(0);
				State = 1668; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_expressionContext : ParserRuleContext {
		public Javascript_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_expression; } }
	 
		public Javascript_expressionContext() { }
		public virtual void CopyFrom(Javascript_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptPrimaryExpressionContext : Javascript_expressionContext {
		public Javascript_primary_expressionContext exp;
		public Javascript_primary_expressionContext javascript_primary_expression() {
			return GetRuleContext<Javascript_primary_expressionContext>(0);
		}
		public JavascriptPrimaryExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptPrimaryExpression(this);
		}
	}
	public partial class JavascriptSelectorExpressionContext : Javascript_expressionContext {
		public Javascript_expressionContext parent;
		public Javascript_selector_expressionContext child;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_selector_expressionContext javascript_selector_expression() {
			return GetRuleContext<Javascript_selector_expressionContext>(0);
		}
		public JavascriptSelectorExpressionContext(Javascript_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_expressionContext javascript_expression() {
		return javascript_expression(0);
	}

	private Javascript_expressionContext javascript_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_expressionContext _localctx = new Javascript_expressionContext(Context, _parentState);
		Javascript_expressionContext _prevctx = _localctx;
		int _startState = 280;
		EnterRecursionRule(_localctx, 280, RULE_javascript_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1673; ((JavascriptPrimaryExpressionContext)_localctx).exp = javascript_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptSelectorExpressionContext(new Javascript_expressionContext(_parentctx, _parentState));
					((JavascriptSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_expression);
					State = 1675;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1676; ((JavascriptSelectorExpressionContext)_localctx).child = javascript_selector_expression();
					}
					} 
				}
				State = 1681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_primary_expressionContext : ParserRuleContext {
		public Javascript_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_primary_expression; } }
	 
		public Javascript_primary_expressionContext() { }
		public virtual void CopyFrom(Javascript_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptParenthesisExpressionContext : Javascript_primary_expressionContext {
		public Javascript_parenthesis_expressionContext exp;
		public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
			return GetRuleContext<Javascript_parenthesis_expressionContext>(0);
		}
		public JavascriptParenthesisExpressionContext(Javascript_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptParenthesisExpression(this);
		}
	}
	public partial class JavascriptLiteralExpressionContext : Javascript_primary_expressionContext {
		public Javascript_literal_expressionContext exp;
		public Javascript_literal_expressionContext javascript_literal_expression() {
			return GetRuleContext<Javascript_literal_expressionContext>(0);
		}
		public JavascriptLiteralExpressionContext(Javascript_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptLiteralExpression(this);
		}
	}
	public partial class JavascriptIdentifierExpressionContext : Javascript_primary_expressionContext {
		public Javascript_identifier_expressionContext exp;
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public JavascriptIdentifierExpressionContext(Javascript_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_primary_expressionContext javascript_primary_expression() {
		Javascript_primary_expressionContext _localctx = new Javascript_primary_expressionContext(Context, State);
		EnterRule(_localctx, 282, RULE_javascript_primary_expression);
		try {
			State = 1685;
			switch (TokenStream.La(1)) {
			case LPAR:
				_localctx = new JavascriptParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1682; ((JavascriptParenthesisExpressionContext)_localctx).exp = javascript_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new JavascriptIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1683; ((JavascriptIdentifierExpressionContext)_localctx).exp = javascript_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavascriptLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1684; ((JavascriptLiteralExpressionContext)_localctx).exp = javascript_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_selector_expressionContext : ParserRuleContext {
		public Javascript_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_selector_expression; } }
	 
		public Javascript_selector_expressionContext() { }
		public virtual void CopyFrom(Javascript_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptMethodExpressionContext : Javascript_selector_expressionContext {
		public Javascript_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Javascript_method_expressionContext javascript_method_expression() {
			return GetRuleContext<Javascript_method_expressionContext>(0);
		}
		public JavascriptMethodExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptMethodExpression(this);
		}
	}
	public partial class JavascriptItemExpressionContext : Javascript_selector_expressionContext {
		public Javascript_item_expressionContext exp;
		public Javascript_item_expressionContext javascript_item_expression() {
			return GetRuleContext<Javascript_item_expressionContext>(0);
		}
		public JavascriptItemExpressionContext(Javascript_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptItemExpression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_selector_expressionContext javascript_selector_expression() {
		Javascript_selector_expressionContext _localctx = new Javascript_selector_expressionContext(Context, State);
		EnterRule(_localctx, 284, RULE_javascript_selector_expression);
		try {
			State = 1690;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavascriptMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1687; Match(DOT);
				State = 1688; ((JavascriptMethodExpressionContext)_localctx).exp = javascript_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavascriptItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1689; ((JavascriptItemExpressionContext)_localctx).exp = javascript_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_method_expressionContext : ParserRuleContext {
		public Javascript_identifierContext name;
		public Javascript_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_method_expressionContext javascript_method_expression() {
		Javascript_method_expressionContext _localctx = new Javascript_method_expressionContext(Context, State);
		EnterRule(_localctx, 286, RULE_javascript_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; _localctx.name = javascript_identifier();
			State = 1693; Match(LPAR);
			State = 1695;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (BOOLEAN_LITERAL - 112)) | (1L << (CHAR_LITERAL - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)) | (1L << (TEXT_LITERAL - 112)) | (1L << (INTEGER_LITERAL - 112)) | (1L << (DECIMAL_LITERAL - 112)))) != 0)) {
				{
				State = 1694; _localctx.args = javascript_arguments(0);
				}
			}

			State = 1697; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_argumentsContext : ParserRuleContext {
		public Javascript_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_arguments; } }
	 
		public Javascript_argumentsContext() { }
		public virtual void CopyFrom(Javascript_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptArgumentListItemContext : Javascript_argumentsContext {
		public Javascript_argumentsContext items;
		public Javascript_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Javascript_argumentsContext javascript_arguments() {
			return GetRuleContext<Javascript_argumentsContext>(0);
		}
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListItemContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentListItem(this);
		}
	}
	public partial class JavascriptArgumentListContext : Javascript_argumentsContext {
		public Javascript_expressionContext item;
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public JavascriptArgumentListContext(Javascript_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_argumentsContext javascript_arguments() {
		return javascript_arguments(0);
	}

	private Javascript_argumentsContext javascript_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_argumentsContext _localctx = new Javascript_argumentsContext(Context, _parentState);
		Javascript_argumentsContext _prevctx = _localctx;
		int _startState = 288;
		EnterRecursionRule(_localctx, 288, RULE_javascript_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1700; ((JavascriptArgumentListContext)_localctx).item = javascript_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1707;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptArgumentListItemContext(new Javascript_argumentsContext(_parentctx, _parentState));
					((JavascriptArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_arguments);
					State = 1702;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1703; Match(COMMA);
					State = 1704; ((JavascriptArgumentListItemContext)_localctx).item = javascript_expression(0);
					}
					} 
				}
				State = 1709;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_item_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_item_expressionContext javascript_item_expression() {
		Javascript_item_expressionContext _localctx = new Javascript_item_expressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_javascript_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710; Match(LBRAK);
			State = 1711; _localctx.exp = javascript_expression(0);
			State = 1712; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_parenthesis_expressionContext : ParserRuleContext {
		public Javascript_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Javascript_expressionContext javascript_expression() {
			return GetRuleContext<Javascript_expressionContext>(0);
		}
		public Javascript_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_parenthesis_expressionContext javascript_parenthesis_expression() {
		Javascript_parenthesis_expressionContext _localctx = new Javascript_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 292, RULE_javascript_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; Match(LPAR);
			State = 1715; _localctx.exp = javascript_expression(0);
			State = 1716; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifier_expressionContext : ParserRuleContext {
		public Javascript_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier_expression; } }
	 
		public Javascript_identifier_expressionContext() { }
		public virtual void CopyFrom(Javascript_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptIdentifierContext : Javascript_identifier_expressionContext {
		public Javascript_identifierContext name;
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavascriptIdentifierContext(Javascript_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIdentifier(this);
		}
	}
	public partial class JavascriptChildIdentifierContext : Javascript_identifier_expressionContext {
		public Javascript_identifier_expressionContext parent;
		public Javascript_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Javascript_identifier_expressionContext javascript_identifier_expression() {
			return GetRuleContext<Javascript_identifier_expressionContext>(0);
		}
		public Javascript_identifierContext javascript_identifier() {
			return GetRuleContext<Javascript_identifierContext>(0);
		}
		public JavascriptChildIdentifierContext(Javascript_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifier_expressionContext javascript_identifier_expression() {
		return javascript_identifier_expression(0);
	}

	private Javascript_identifier_expressionContext javascript_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Javascript_identifier_expressionContext _localctx = new Javascript_identifier_expressionContext(Context, _parentState);
		Javascript_identifier_expressionContext _prevctx = _localctx;
		int _startState = 294;
		EnterRecursionRule(_localctx, 294, RULE_javascript_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavascriptIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1719; ((JavascriptIdentifierContext)_localctx).name = javascript_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1726;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavascriptChildIdentifierContext(new Javascript_identifier_expressionContext(_parentctx, _parentState));
					((JavascriptChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_javascript_identifier_expression);
					State = 1721;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1722; Match(DOT);
					State = 1723; ((JavascriptChildIdentifierContext)_localctx).name = javascript_identifier();
					}
					} 
				}
				State = 1728;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Javascript_literal_expressionContext : ParserRuleContext {
		public Javascript_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_literal_expression; } }
	 
		public Javascript_literal_expressionContext() { }
		public virtual void CopyFrom(Javascript_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavascriptDecimalLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(OParser.DECIMAL_LITERAL, 0); }
		public JavascriptDecimalLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptDecimalLiteral(this);
		}
	}
	public partial class JavascriptCharacterLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(OParser.CHAR_LITERAL, 0); }
		public JavascriptCharacterLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptCharacterLiteral(this);
		}
	}
	public partial class JavascriptBooleanLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(OParser.BOOLEAN_LITERAL, 0); }
		public JavascriptBooleanLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptBooleanLiteral(this);
		}
	}
	public partial class JavascriptIntegerLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(OParser.INTEGER_LITERAL, 0); }
		public JavascriptIntegerLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptIntegerLiteral(this);
		}
	}
	public partial class JavascriptTextLiteralContext : Javascript_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public JavascriptTextLiteralContext(Javascript_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascriptTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascriptTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_literal_expressionContext javascript_literal_expression() {
		Javascript_literal_expressionContext _localctx = new Javascript_literal_expressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_javascript_literal_expression);
		try {
			State = 1734;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavascriptIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1729; ((JavascriptIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavascriptDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1730; ((JavascriptDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavascriptTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1731; ((JavascriptTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavascriptBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1732; ((JavascriptBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavascriptCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1733; ((JavascriptCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javascript_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(OParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(OParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(OParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(OParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(OParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(OParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(OParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(OParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(OParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(OParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(OParser.TEST, 0); }
		public Javascript_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javascript_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavascript_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavascript_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Javascript_identifierContext javascript_identifier() {
		Javascript_identifierContext _localctx = new Javascript_identifierContext(Context, State);
		EnterRule(_localctx, 298, RULE_javascript_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
	 
		public Python_statementContext() { }
		public virtual void CopyFrom(Python_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonReturnStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(OParser.RETURN, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonReturnStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonReturnStatement(this);
		}
	}
	public partial class PythonStatementContext : Python_statementContext {
		public Python_expressionContext exp;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonStatementContext(Python_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonStatement(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 300, RULE_python_statement);
		try {
			State = 1741;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new PythonReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1738; Match(RETURN);
				State = 1739; ((PythonReturnStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new PythonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1740; ((PythonStatementContext)_localctx).exp = python_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_expressionContext : ParserRuleContext {
		public Python_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_expression; } }
	 
		public Python_expressionContext() { }
		public virtual void CopyFrom(Python_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonPrimaryExpressionContext : Python_expressionContext {
		public Python_primary_expressionContext exp;
		public Python_primary_expressionContext python_primary_expression() {
			return GetRuleContext<Python_primary_expressionContext>(0);
		}
		public PythonPrimaryExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonPrimaryExpression(this);
		}
	}
	public partial class PythonSelectorExpressionContext : Python_expressionContext {
		public Python_expressionContext parent;
		public Python_selector_expressionContext child;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_selector_expressionContext python_selector_expression() {
			return GetRuleContext<Python_selector_expressionContext>(0);
		}
		public PythonSelectorExpressionContext(Python_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_expressionContext python_expression() {
		return python_expression(0);
	}

	private Python_expressionContext python_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_expressionContext _localctx = new Python_expressionContext(Context, _parentState);
		Python_expressionContext _prevctx = _localctx;
		int _startState = 302;
		EnterRecursionRule(_localctx, 302, RULE_python_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1744; ((PythonPrimaryExpressionContext)_localctx).exp = python_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonSelectorExpressionContext(new Python_expressionContext(_parentctx, _parentState));
					((PythonSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_expression);
					State = 1746;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1747; ((PythonSelectorExpressionContext)_localctx).child = python_selector_expression();
					}
					} 
				}
				State = 1752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_primary_expressionContext : ParserRuleContext {
		public Python_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_primary_expression; } }
	 
		public Python_primary_expressionContext() { }
		public virtual void CopyFrom(Python_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonIdentifierExpressionContext : Python_primary_expressionContext {
		public Python_identifier_expressionContext exp;
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public PythonIdentifierExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifierExpression(this);
		}
	}
	public partial class PythonGlobalMethodExpressionContext : Python_primary_expressionContext {
		public Python_method_expressionContext exp;
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonGlobalMethodExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonGlobalMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonGlobalMethodExpression(this);
		}
	}
	public partial class PythonParenthesisExpressionContext : Python_primary_expressionContext {
		public Python_parenthesis_expressionContext exp;
		public Python_parenthesis_expressionContext python_parenthesis_expression() {
			return GetRuleContext<Python_parenthesis_expressionContext>(0);
		}
		public PythonParenthesisExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonParenthesisExpression(this);
		}
	}
	public partial class PythonLiteralExpressionContext : Python_primary_expressionContext {
		public Python_literal_expressionContext exp;
		public Python_literal_expressionContext python_literal_expression() {
			return GetRuleContext<Python_literal_expressionContext>(0);
		}
		public PythonLiteralExpressionContext(Python_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonLiteralExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_primary_expressionContext python_primary_expression() {
		Python_primary_expressionContext _localctx = new Python_primary_expressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_python_primary_expression);
		try {
			State = 1757;
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new PythonParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1753; ((PythonParenthesisExpressionContext)_localctx).exp = python_parenthesis_expression();
				}
				break;
			case 2:
				_localctx = new PythonIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1754; ((PythonIdentifierExpressionContext)_localctx).exp = python_identifier_expression(0);
				}
				break;
			case 3:
				_localctx = new PythonLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1755; ((PythonLiteralExpressionContext)_localctx).exp = python_literal_expression();
				}
				break;
			case 4:
				_localctx = new PythonGlobalMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1756; ((PythonGlobalMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_selector_expressionContext : ParserRuleContext {
		public Python_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_selector_expression; } }
	 
		public Python_selector_expressionContext() { }
		public virtual void CopyFrom(Python_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonItemExpressionContext : Python_selector_expressionContext {
		public Python_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonItemExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonItemExpression(this);
		}
	}
	public partial class PythonMethodExpressionContext : Python_selector_expressionContext {
		public Python_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Python_method_expressionContext python_method_expression() {
			return GetRuleContext<Python_method_expressionContext>(0);
		}
		public PythonMethodExpressionContext(Python_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Python_selector_expressionContext python_selector_expression() {
		Python_selector_expressionContext _localctx = new Python_selector_expressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_python_selector_expression);
		try {
			State = 1765;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new PythonMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1759; Match(DOT);
				State = 1760; ((PythonMethodExpressionContext)_localctx).exp = python_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new PythonItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1761; Match(LBRAK);
				State = 1762; ((PythonItemExpressionContext)_localctx).exp = python_expression(0);
				State = 1763; Match(RBRAK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_method_expressionContext : ParserRuleContext {
		public Python_identifierContext name;
		public Python_argument_listContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_argument_listContext python_argument_list() {
			return GetRuleContext<Python_argument_listContext>(0);
		}
		public Python_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_method_expressionContext python_method_expression() {
		Python_method_expressionContext _localctx = new Python_method_expressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_python_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767; _localctx.name = python_identifier();
			State = 1768; Match(LPAR);
			State = 1770;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (BOOLEAN_LITERAL - 112)) | (1L << (CHAR_LITERAL - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)) | (1L << (TEXT_LITERAL - 112)) | (1L << (INTEGER_LITERAL - 112)) | (1L << (DECIMAL_LITERAL - 112)))) != 0)) {
				{
				State = 1769; _localctx.args = python_argument_list();
				}
			}

			State = 1772; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_argument_listContext : ParserRuleContext {
		public Python_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_argument_list; } }
	 
		public Python_argument_listContext() { }
		public virtual void CopyFrom(Python_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedOnlyArgumentListContext : Python_argument_listContext {
		public Python_named_argument_listContext named;
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonNamedOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedOnlyArgumentList(this);
		}
	}
	public partial class PythonArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_named_argument_listContext named;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public PythonArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonArgumentList(this);
		}
	}
	public partial class PythonOrdinalOnlyArgumentListContext : Python_argument_listContext {
		public Python_ordinal_argument_listContext ordinal;
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public PythonOrdinalOnlyArgumentListContext(Python_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalOnlyArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalOnlyArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_argument_listContext python_argument_list() {
		Python_argument_listContext _localctx = new Python_argument_listContext(Context, State);
		EnterRule(_localctx, 310, RULE_python_argument_list);
		try {
			State = 1780;
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				_localctx = new PythonOrdinalOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1774; ((PythonOrdinalOnlyArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				}
				break;
			case 2:
				_localctx = new PythonNamedOnlyArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1775; ((PythonNamedOnlyArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			case 3:
				_localctx = new PythonArgumentListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1776; ((PythonArgumentListContext)_localctx).ordinal = python_ordinal_argument_list(0);
				State = 1777; Match(COMMA);
				State = 1778; ((PythonArgumentListContext)_localctx).named = python_named_argument_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_ordinal_argument_listContext : ParserRuleContext {
		public Python_ordinal_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_ordinal_argument_list; } }
	 
		public Python_ordinal_argument_listContext() { }
		public virtual void CopyFrom(Python_ordinal_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonOrdinalArgumentListItemContext : Python_ordinal_argument_listContext {
		public Python_ordinal_argument_listContext items;
		public Python_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Python_ordinal_argument_listContext python_ordinal_argument_list() {
			return GetRuleContext<Python_ordinal_argument_listContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentListItem(this);
		}
	}
	public partial class PythonOrdinalArgumentListContext : Python_ordinal_argument_listContext {
		public Python_expressionContext item;
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonOrdinalArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonOrdinalArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_ordinal_argument_listContext python_ordinal_argument_list() {
		return python_ordinal_argument_list(0);
	}

	private Python_ordinal_argument_listContext python_ordinal_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_ordinal_argument_listContext _localctx = new Python_ordinal_argument_listContext(Context, _parentState);
		Python_ordinal_argument_listContext _prevctx = _localctx;
		int _startState = 312;
		EnterRecursionRule(_localctx, 312, RULE_python_ordinal_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonOrdinalArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1783; ((PythonOrdinalArgumentListContext)_localctx).item = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1790;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonOrdinalArgumentListItemContext(new Python_ordinal_argument_listContext(_parentctx, _parentState));
					((PythonOrdinalArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_ordinal_argument_list);
					State = 1785;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1786; Match(COMMA);
					State = 1787; ((PythonOrdinalArgumentListItemContext)_localctx).item = python_expression(0);
					}
					} 
				}
				State = 1792;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_named_argument_listContext : ParserRuleContext {
		public Python_named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_named_argument_list; } }
	 
		public Python_named_argument_listContext() { }
		public virtual void CopyFrom(Python_named_argument_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonNamedArgumentListItemContext : Python_named_argument_listContext {
		public Python_named_argument_listContext items;
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public Python_named_argument_listContext python_named_argument_list() {
			return GetRuleContext<Python_named_argument_listContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListItemContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentListItem(this);
		}
	}
	public partial class PythonNamedArgumentListContext : Python_named_argument_listContext {
		public Python_identifierContext name;
		public Python_expressionContext exp;
		public ITerminalNode EQ() { return GetToken(OParser.EQ, 0); }
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public PythonNamedArgumentListContext(Python_named_argument_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonNamedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonNamedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public Python_named_argument_listContext python_named_argument_list() {
		return python_named_argument_list(0);
	}

	private Python_named_argument_listContext python_named_argument_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_named_argument_listContext _localctx = new Python_named_argument_listContext(Context, _parentState);
		Python_named_argument_listContext _prevctx = _localctx;
		int _startState = 314;
		EnterRecursionRule(_localctx, 314, RULE_python_named_argument_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonNamedArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1794; ((PythonNamedArgumentListContext)_localctx).name = python_identifier();
			State = 1795; Match(EQ);
			State = 1796; ((PythonNamedArgumentListContext)_localctx).exp = python_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1806;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonNamedArgumentListItemContext(new Python_named_argument_listContext(_parentctx, _parentState));
					((PythonNamedArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_named_argument_list);
					State = 1798;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1799; Match(COMMA);
					State = 1800; ((PythonNamedArgumentListItemContext)_localctx).name = python_identifier();
					State = 1801; Match(EQ);
					State = 1802; ((PythonNamedArgumentListItemContext)_localctx).exp = python_expression(0);
					}
					} 
				}
				State = 1808;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_parenthesis_expressionContext : ParserRuleContext {
		public Python_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Python_expressionContext python_expression() {
			return GetRuleContext<Python_expressionContext>(0);
		}
		public Python_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Python_parenthesis_expressionContext python_parenthesis_expression() {
		Python_parenthesis_expressionContext _localctx = new Python_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_python_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809; Match(LPAR);
			State = 1810; _localctx.exp = python_expression(0);
			State = 1811; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifier_expressionContext : ParserRuleContext {
		public Python_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier_expression; } }
	 
		public Python_identifier_expressionContext() { }
		public virtual void CopyFrom(Python_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonChildIdentifierContext : Python_identifier_expressionContext {
		public Python_identifier_expressionContext parent;
		public Python_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Python_identifier_expressionContext python_identifier_expression() {
			return GetRuleContext<Python_identifier_expressionContext>(0);
		}
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonChildIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonChildIdentifier(this);
		}
	}
	public partial class PythonIdentifierContext : Python_identifier_expressionContext {
		public Python_identifierContext name;
		public Python_identifierContext python_identifier() {
			return GetRuleContext<Python_identifierContext>(0);
		}
		public PythonIdentifierContext(Python_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifier_expressionContext python_identifier_expression() {
		return python_identifier_expression(0);
	}

	private Python_identifier_expressionContext python_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Python_identifier_expressionContext _localctx = new Python_identifier_expressionContext(Context, _parentState);
		Python_identifier_expressionContext _prevctx = _localctx;
		int _startState = 318;
		EnterRecursionRule(_localctx, 318, RULE_python_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PythonIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1814; ((PythonIdentifierContext)_localctx).name = python_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1821;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PythonChildIdentifierContext(new Python_identifier_expressionContext(_parentctx, _parentState));
					((PythonChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_python_identifier_expression);
					State = 1816;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1817; Match(DOT);
					State = 1818; ((PythonChildIdentifierContext)_localctx).name = python_identifier();
					}
					} 
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Python_literal_expressionContext : ParserRuleContext {
		public Python_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_literal_expression; } }
	 
		public Python_literal_expressionContext() { }
		public virtual void CopyFrom(Python_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PythonCharacterLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(OParser.CHAR_LITERAL, 0); }
		public PythonCharacterLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonCharacterLiteral(this);
		}
	}
	public partial class PythonTextLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public PythonTextLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonTextLiteral(this);
		}
	}
	public partial class PythonIntegerLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(OParser.INTEGER_LITERAL, 0); }
		public PythonIntegerLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonIntegerLiteral(this);
		}
	}
	public partial class PythonDecimalLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(OParser.DECIMAL_LITERAL, 0); }
		public PythonDecimalLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonDecimalLiteral(this);
		}
	}
	public partial class PythonBooleanLiteralContext : Python_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(OParser.BOOLEAN_LITERAL, 0); }
		public PythonBooleanLiteralContext(Python_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPythonBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPythonBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Python_literal_expressionContext python_literal_expression() {
		Python_literal_expressionContext _localctx = new Python_literal_expressionContext(Context, State);
		EnterRule(_localctx, 320, RULE_python_literal_expression);
		try {
			State = 1829;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new PythonIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1824; ((PythonIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new PythonDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1825; ((PythonDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new PythonTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1826; ((PythonTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new PythonBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1827; ((PythonBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new PythonCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1828; ((PythonCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(OParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(OParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(OParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(OParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(OParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(OParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(OParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(OParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(OParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(OParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(OParser.TEST, 0); }
		public Python_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterPython_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitPython_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Python_identifierContext python_identifier() {
		Python_identifierContext _localctx = new Python_identifierContext(Context, State);
		EnterRule(_localctx, 322, RULE_python_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_statementContext : ParserRuleContext {
		public Java_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_statement; } }
	 
		public Java_statementContext() { }
		public virtual void CopyFrom(Java_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaStatement(this);
		}
	}
	public partial class JavaReturnStatementContext : Java_statementContext {
		public Java_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(OParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaReturnStatementContext(Java_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Java_statementContext java_statement() {
		Java_statementContext _localctx = new Java_statementContext(Context, State);
		EnterRule(_localctx, 324, RULE_java_statement);
		try {
			State = 1840;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new JavaReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833; Match(RETURN);
				State = 1834; ((JavaReturnStatementContext)_localctx).exp = java_expression(0);
				State = 1835; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1837; ((JavaStatementContext)_localctx).exp = java_expression(0);
				State = 1838; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_expressionContext : ParserRuleContext {
		public Java_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_expression; } }
	 
		public Java_expressionContext() { }
		public virtual void CopyFrom(Java_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaPrimaryExpressionContext : Java_expressionContext {
		public Java_primary_expressionContext exp;
		public Java_primary_expressionContext java_primary_expression() {
			return GetRuleContext<Java_primary_expressionContext>(0);
		}
		public JavaPrimaryExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaPrimaryExpression(this);
		}
	}
	public partial class JavaSelectorExpressionContext : Java_expressionContext {
		public Java_expressionContext parent;
		public Java_selector_expressionContext child;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_selector_expressionContext java_selector_expression() {
			return GetRuleContext<Java_selector_expressionContext>(0);
		}
		public JavaSelectorExpressionContext(Java_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_expressionContext java_expression() {
		return java_expression(0);
	}

	private Java_expressionContext java_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_expressionContext _localctx = new Java_expressionContext(Context, _parentState);
		Java_expressionContext _prevctx = _localctx;
		int _startState = 326;
		EnterRecursionRule(_localctx, 326, RULE_java_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1843; ((JavaPrimaryExpressionContext)_localctx).exp = java_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1849;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaSelectorExpressionContext(new Java_expressionContext(_parentctx, _parentState));
					((JavaSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_expression);
					State = 1845;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1846; ((JavaSelectorExpressionContext)_localctx).child = java_selector_expression();
					}
					} 
				}
				State = 1851;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_primary_expressionContext : ParserRuleContext {
		public Java_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_primary_expression; } }
	 
		public Java_primary_expressionContext() { }
		public virtual void CopyFrom(Java_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierExpressionContext : Java_primary_expressionContext {
		public Java_identifier_expressionContext exp;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaIdentifierExpressionContext(Java_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifierExpression(this);
		}
	}
	public partial class JavaLiteralExpressionContext : Java_primary_expressionContext {
		public Java_literal_expressionContext exp;
		public Java_literal_expressionContext java_literal_expression() {
			return GetRuleContext<Java_literal_expressionContext>(0);
		}
		public JavaLiteralExpressionContext(Java_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaLiteralExpression(this);
		}
	}
	public partial class JavaParenthesisExpressionContext : Java_primary_expressionContext {
		public Java_parenthesis_expressionContext exp;
		public Java_parenthesis_expressionContext java_parenthesis_expression() {
			return GetRuleContext<Java_parenthesis_expressionContext>(0);
		}
		public JavaParenthesisExpressionContext(Java_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaParenthesisExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_primary_expressionContext java_primary_expression() {
		Java_primary_expressionContext _localctx = new Java_primary_expressionContext(Context, State);
		EnterRule(_localctx, 328, RULE_java_primary_expression);
		try {
			State = 1855;
			switch (TokenStream.La(1)) {
			case LPAR:
				_localctx = new JavaParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852; ((JavaParenthesisExpressionContext)_localctx).exp = java_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new JavaIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853; ((JavaIdentifierExpressionContext)_localctx).exp = java_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new JavaLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1854; ((JavaLiteralExpressionContext)_localctx).exp = java_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_selector_expressionContext : ParserRuleContext {
		public Java_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_selector_expression; } }
	 
		public Java_selector_expressionContext() { }
		public virtual void CopyFrom(Java_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaItemExpressionContext : Java_selector_expressionContext {
		public Java_item_expressionContext exp;
		public Java_item_expressionContext java_item_expression() {
			return GetRuleContext<Java_item_expressionContext>(0);
		}
		public JavaItemExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaItemExpression(this);
		}
	}
	public partial class JavaMethodExpressionContext : Java_selector_expressionContext {
		public Java_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Java_method_expressionContext java_method_expression() {
			return GetRuleContext<Java_method_expressionContext>(0);
		}
		public JavaMethodExpressionContext(Java_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Java_selector_expressionContext java_selector_expression() {
		Java_selector_expressionContext _localctx = new Java_selector_expressionContext(Context, State);
		EnterRule(_localctx, 330, RULE_java_selector_expression);
		try {
			State = 1860;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new JavaMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1857; Match(DOT);
				State = 1858; ((JavaMethodExpressionContext)_localctx).exp = java_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new JavaItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1859; ((JavaItemExpressionContext)_localctx).exp = java_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_method_expressionContext : ParserRuleContext {
		public Java_identifierContext name;
		public Java_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJava_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJava_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_method_expressionContext java_method_expression() {
		Java_method_expressionContext _localctx = new Java_method_expressionContext(Context, State);
		EnterRule(_localctx, 332, RULE_java_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862; _localctx.name = java_identifier();
			State = 1863; Match(LPAR);
			State = 1865;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (BOOLEAN_LITERAL - 112)) | (1L << (CHAR_LITERAL - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)) | (1L << (TEXT_LITERAL - 112)) | (1L << (INTEGER_LITERAL - 112)) | (1L << (DECIMAL_LITERAL - 112)))) != 0)) {
				{
				State = 1864; _localctx.args = java_arguments(0);
				}
			}

			State = 1867; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_argumentsContext : ParserRuleContext {
		public Java_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_arguments; } }
	 
		public Java_argumentsContext() { }
		public virtual void CopyFrom(Java_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaArgumentListContext : Java_argumentsContext {
		public Java_expressionContext item;
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentList(this);
		}
	}
	public partial class JavaArgumentListItemContext : Java_argumentsContext {
		public Java_argumentsContext items;
		public Java_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Java_argumentsContext java_arguments() {
			return GetRuleContext<Java_argumentsContext>(0);
		}
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public JavaArgumentListItemContext(Java_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Java_argumentsContext java_arguments() {
		return java_arguments(0);
	}

	private Java_argumentsContext java_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_argumentsContext _localctx = new Java_argumentsContext(Context, _parentState);
		Java_argumentsContext _prevctx = _localctx;
		int _startState = 334;
		EnterRecursionRule(_localctx, 334, RULE_java_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1870; ((JavaArgumentListContext)_localctx).item = java_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1877;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaArgumentListItemContext(new Java_argumentsContext(_parentctx, _parentState));
					((JavaArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_arguments);
					State = 1872;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1873; Match(COMMA);
					State = 1874; ((JavaArgumentListItemContext)_localctx).item = java_expression(0);
					}
					} 
				}
				State = 1879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_item_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJava_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJava_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_item_expressionContext java_item_expression() {
		Java_item_expressionContext _localctx = new Java_item_expressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_java_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880; Match(LBRAK);
			State = 1881; _localctx.exp = java_expression(0);
			State = 1882; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_parenthesis_expressionContext : ParserRuleContext {
		public Java_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Java_expressionContext java_expression() {
			return GetRuleContext<Java_expressionContext>(0);
		}
		public Java_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJava_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJava_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Java_parenthesis_expressionContext java_parenthesis_expression() {
		Java_parenthesis_expressionContext _localctx = new Java_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_java_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884; Match(LPAR);
			State = 1885; _localctx.exp = java_expression(0);
			State = 1886; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifier_expressionContext : ParserRuleContext {
		public Java_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier_expression; } }
	 
		public Java_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaIdentifierContext : Java_identifier_expressionContext {
		public Java_identifierContext name;
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
	}
	public partial class JavaChildIdentifierContext : Java_identifier_expressionContext {
		public Java_identifier_expressionContext parent;
		public Java_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public Java_identifierContext java_identifier() {
			return GetRuleContext<Java_identifierContext>(0);
		}
		public JavaChildIdentifierContext(Java_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifier_expressionContext java_identifier_expression() {
		return java_identifier_expression(0);
	}

	private Java_identifier_expressionContext java_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_identifier_expressionContext _localctx = new Java_identifier_expressionContext(Context, _parentState);
		Java_identifier_expressionContext _prevctx = _localctx;
		int _startState = 340;
		EnterRecursionRule(_localctx, 340, RULE_java_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1889; ((JavaIdentifierContext)_localctx).name = java_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1896;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildIdentifierContext(new Java_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_identifier_expression);
					State = 1891;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1892; Match(DOT);
					State = 1893; ((JavaChildIdentifierContext)_localctx).name = java_identifier();
					}
					} 
				}
				State = 1898;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_class_identifier_expressionContext : ParserRuleContext {
		public Java_class_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_class_identifier_expression; } }
	 
		public Java_class_identifier_expressionContext() { }
		public virtual void CopyFrom(Java_class_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaChildClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_class_identifier_expressionContext parent;
		public IToken name;
		public ITerminalNode DOLLAR() { return GetToken(OParser.DOLLAR, 0); }
		public Java_class_identifier_expressionContext java_class_identifier_expression() {
			return GetRuleContext<Java_class_identifier_expressionContext>(0);
		}
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public JavaChildClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaChildClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaChildClassIdentifier(this);
		}
	}
	public partial class JavaClassIdentifierContext : Java_class_identifier_expressionContext {
		public Java_identifier_expressionContext klass;
		public Java_identifier_expressionContext java_identifier_expression() {
			return GetRuleContext<Java_identifier_expressionContext>(0);
		}
		public JavaClassIdentifierContext(Java_class_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaClassIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaClassIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_class_identifier_expressionContext java_class_identifier_expression() {
		return java_class_identifier_expression(0);
	}

	private Java_class_identifier_expressionContext java_class_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Java_class_identifier_expressionContext _localctx = new Java_class_identifier_expressionContext(Context, _parentState);
		Java_class_identifier_expressionContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_java_class_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new JavaClassIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1900; ((JavaClassIdentifierContext)_localctx).klass = java_identifier_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1907;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JavaChildClassIdentifierContext(new Java_class_identifier_expressionContext(_parentctx, _parentState));
					((JavaChildClassIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_java_class_identifier_expression);
					State = 1902;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1903; Match(DOLLAR);
					State = 1904; ((JavaChildClassIdentifierContext)_localctx).name = Match(TYPE_IDENTIFIER);
					}
					} 
				}
				State = 1909;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Java_literal_expressionContext : ParserRuleContext {
		public Java_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_literal_expression; } }
	 
		public Java_literal_expressionContext() { }
		public virtual void CopyFrom(Java_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JavaCharacterLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode CHAR_LITERAL() { return GetToken(OParser.CHAR_LITERAL, 0); }
		public JavaCharacterLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaCharacterLiteral(this);
		}
	}
	public partial class JavaIntegerLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(OParser.INTEGER_LITERAL, 0); }
		public JavaIntegerLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaIntegerLiteral(this);
		}
	}
	public partial class JavaBooleanLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(OParser.BOOLEAN_LITERAL, 0); }
		public JavaBooleanLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaBooleanLiteral(this);
		}
	}
	public partial class JavaDecimalLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(OParser.DECIMAL_LITERAL, 0); }
		public JavaDecimalLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaDecimalLiteral(this);
		}
	}
	public partial class JavaTextLiteralContext : Java_literal_expressionContext {
		public IToken t;
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public JavaTextLiteralContext(Java_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJavaTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJavaTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Java_literal_expressionContext java_literal_expression() {
		Java_literal_expressionContext _localctx = new Java_literal_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_java_literal_expression);
		try {
			State = 1915;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new JavaIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1910; ((JavaIntegerLiteralContext)_localctx).t = Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new JavaDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1911; ((JavaDecimalLiteralContext)_localctx).t = Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new JavaTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1912; ((JavaTextLiteralContext)_localctx).t = Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new JavaBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1913; ((JavaBooleanLiteralContext)_localctx).t = Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new JavaCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1914; ((JavaCharacterLiteralContext)_localctx).t = Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(OParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(OParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(OParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(OParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(OParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(OParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(OParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(OParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(OParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(OParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(OParser.TEST, 0); }
		public Java_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterJava_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitJava_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Java_identifierContext java_identifier() {
		Java_identifierContext _localctx = new Java_identifierContext(Context, State);
		EnterRule(_localctx, 346, RULE_java_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_statementContext : ParserRuleContext {
		public Csharp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_statement; } }
	 
		public Csharp_statementContext() { }
		public virtual void CopyFrom(Csharp_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpStatement(this);
		}
	}
	public partial class CSharpReturnStatementContext : Csharp_statementContext {
		public Csharp_expressionContext exp;
		public ITerminalNode RETURN() { return GetToken(OParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(OParser.SEMI, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpReturnStatementContext(Csharp_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_statementContext csharp_statement() {
		Csharp_statementContext _localctx = new Csharp_statementContext(Context, State);
		EnterRule(_localctx, 348, RULE_csharp_statement);
		try {
			State = 1926;
			switch (TokenStream.La(1)) {
			case RETURN:
				_localctx = new CSharpReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1919; Match(RETURN);
				State = 1920; ((CSharpReturnStatementContext)_localctx).exp = csharp_expression(0);
				State = 1921; Match(SEMI);
				}
				break;
			case LPAR:
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1923; ((CSharpStatementContext)_localctx).exp = csharp_expression(0);
				State = 1924; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_expressionContext : ParserRuleContext {
		public Csharp_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_expression; } }
	 
		public Csharp_expressionContext() { }
		public virtual void CopyFrom(Csharp_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpPrimaryExpressionContext : Csharp_expressionContext {
		public Csharp_primary_expressionContext exp;
		public Csharp_primary_expressionContext csharp_primary_expression() {
			return GetRuleContext<Csharp_primary_expressionContext>(0);
		}
		public CSharpPrimaryExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpPrimaryExpression(this);
		}
	}
	public partial class CSharpSelectorExpressionContext : Csharp_expressionContext {
		public Csharp_expressionContext parent;
		public Csharp_selector_expressionContext child;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_selector_expressionContext csharp_selector_expression() {
			return GetRuleContext<Csharp_selector_expressionContext>(0);
		}
		public CSharpSelectorExpressionContext(Csharp_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpSelectorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpSelectorExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_expressionContext csharp_expression() {
		return csharp_expression(0);
	}

	private Csharp_expressionContext csharp_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_expressionContext _localctx = new Csharp_expressionContext(Context, _parentState);
		Csharp_expressionContext _prevctx = _localctx;
		int _startState = 350;
		EnterRecursionRule(_localctx, 350, RULE_csharp_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpPrimaryExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1929; ((CSharpPrimaryExpressionContext)_localctx).exp = csharp_primary_expression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1935;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpSelectorExpressionContext(new Csharp_expressionContext(_parentctx, _parentState));
					((CSharpSelectorExpressionContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_expression);
					State = 1931;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1932; ((CSharpSelectorExpressionContext)_localctx).child = csharp_selector_expression();
					}
					} 
				}
				State = 1937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_primary_expressionContext : ParserRuleContext {
		public Csharp_primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_primary_expression; } }
	 
		public Csharp_primary_expressionContext() { }
		public virtual void CopyFrom(Csharp_primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpLiteralExpressionContext : Csharp_primary_expressionContext {
		public Csharp_literal_expressionContext exp;
		public Csharp_literal_expressionContext csharp_literal_expression() {
			return GetRuleContext<Csharp_literal_expressionContext>(0);
		}
		public CSharpLiteralExpressionContext(Csharp_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpLiteralExpression(this);
		}
	}
	public partial class CSharpParenthesisExpressionContext : Csharp_primary_expressionContext {
		public Csharp_parenthesis_expressionContext exp;
		public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
			return GetRuleContext<Csharp_parenthesis_expressionContext>(0);
		}
		public CSharpParenthesisExpressionContext(Csharp_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpParenthesisExpression(this);
		}
	}
	public partial class CSharpIdentifierExpressionContext : Csharp_primary_expressionContext {
		public Csharp_identifier_expressionContext exp;
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public CSharpIdentifierExpressionContext(Csharp_primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifierExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_primary_expressionContext csharp_primary_expression() {
		Csharp_primary_expressionContext _localctx = new Csharp_primary_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_csharp_primary_expression);
		try {
			State = 1941;
			switch (TokenStream.La(1)) {
			case LPAR:
				_localctx = new CSharpParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1938; ((CSharpParenthesisExpressionContext)_localctx).exp = csharp_parenthesis_expression();
				}
				break;
			case BOOLEAN:
			case CHARACTER:
			case TEXT:
			case INTEGER:
			case DECIMAL:
			case DATE:
			case TIME:
			case DATETIME:
			case PERIOD:
			case READ:
			case TEST:
			case WRITE:
			case SYMBOL_IDENTIFIER:
			case TYPE_IDENTIFIER:
			case VARIABLE_IDENTIFIER:
				_localctx = new CSharpIdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1939; ((CSharpIdentifierExpressionContext)_localctx).exp = csharp_identifier_expression(0);
				}
				break;
			case BOOLEAN_LITERAL:
			case CHAR_LITERAL:
			case TEXT_LITERAL:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
				_localctx = new CSharpLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1940; ((CSharpLiteralExpressionContext)_localctx).exp = csharp_literal_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_selector_expressionContext : ParserRuleContext {
		public Csharp_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_selector_expression; } }
	 
		public Csharp_selector_expressionContext() { }
		public virtual void CopyFrom(Csharp_selector_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpItemExpressionContext : Csharp_selector_expressionContext {
		public Csharp_item_expressionContext exp;
		public Csharp_item_expressionContext csharp_item_expression() {
			return GetRuleContext<Csharp_item_expressionContext>(0);
		}
		public CSharpItemExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpItemExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpItemExpression(this);
		}
	}
	public partial class CSharpMethodExpressionContext : Csharp_selector_expressionContext {
		public Csharp_method_expressionContext exp;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Csharp_method_expressionContext csharp_method_expression() {
			return GetRuleContext<Csharp_method_expressionContext>(0);
		}
		public CSharpMethodExpressionContext(Csharp_selector_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_selector_expressionContext csharp_selector_expression() {
		Csharp_selector_expressionContext _localctx = new Csharp_selector_expressionContext(Context, State);
		EnterRule(_localctx, 354, RULE_csharp_selector_expression);
		try {
			State = 1946;
			switch (TokenStream.La(1)) {
			case DOT:
				_localctx = new CSharpMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1943; Match(DOT);
				State = 1944; ((CSharpMethodExpressionContext)_localctx).exp = csharp_method_expression();
				}
				break;
			case LBRAK:
				_localctx = new CSharpItemExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1945; ((CSharpItemExpressionContext)_localctx).exp = csharp_item_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_method_expressionContext : ParserRuleContext {
		public Csharp_identifierContext name;
		public Csharp_argumentsContext args;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCsharp_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCsharp_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_method_expressionContext csharp_method_expression() {
		Csharp_method_expressionContext _localctx = new Csharp_method_expressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_csharp_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948; _localctx.name = csharp_identifier();
			State = 1949; Match(LPAR);
			State = 1951;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (BOOLEAN_LITERAL - 112)) | (1L << (CHAR_LITERAL - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)) | (1L << (TEXT_LITERAL - 112)) | (1L << (INTEGER_LITERAL - 112)) | (1L << (DECIMAL_LITERAL - 112)))) != 0)) {
				{
				State = 1950; _localctx.args = csharp_arguments(0);
				}
			}

			State = 1953; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_argumentsContext : ParserRuleContext {
		public Csharp_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_arguments; } }
	 
		public Csharp_argumentsContext() { }
		public virtual void CopyFrom(Csharp_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpArgumentListContext : Csharp_argumentsContext {
		public Csharp_expressionContext item;
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentList(this);
		}
	}
	public partial class CSharpArgumentListItemContext : Csharp_argumentsContext {
		public Csharp_argumentsContext items;
		public Csharp_expressionContext item;
		public ITerminalNode COMMA() { return GetToken(OParser.COMMA, 0); }
		public Csharp_argumentsContext csharp_arguments() {
			return GetRuleContext<Csharp_argumentsContext>(0);
		}
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public CSharpArgumentListItemContext(Csharp_argumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpArgumentListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpArgumentListItem(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_argumentsContext csharp_arguments() {
		return csharp_arguments(0);
	}

	private Csharp_argumentsContext csharp_arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_argumentsContext _localctx = new Csharp_argumentsContext(Context, _parentState);
		Csharp_argumentsContext _prevctx = _localctx;
		int _startState = 358;
		EnterRecursionRule(_localctx, 358, RULE_csharp_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpArgumentListContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1956; ((CSharpArgumentListContext)_localctx).item = csharp_expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1963;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpArgumentListItemContext(new Csharp_argumentsContext(_parentctx, _parentState));
					((CSharpArgumentListItemContext)_localctx).items = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_arguments);
					State = 1958;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1959; Match(COMMA);
					State = 1960; ((CSharpArgumentListItemContext)_localctx).item = csharp_expression(0);
					}
					} 
				}
				State = 1965;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_item_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LBRAK() { return GetToken(OParser.LBRAK, 0); }
		public ITerminalNode RBRAK() { return GetToken(OParser.RBRAK, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_item_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_item_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCsharp_item_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCsharp_item_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_item_expressionContext csharp_item_expression() {
		Csharp_item_expressionContext _localctx = new Csharp_item_expressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_csharp_item_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966; Match(LBRAK);
			State = 1967; _localctx.exp = csharp_expression(0);
			State = 1968; Match(RBRAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_parenthesis_expressionContext : ParserRuleContext {
		public Csharp_expressionContext exp;
		public ITerminalNode LPAR() { return GetToken(OParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(OParser.RPAR, 0); }
		public Csharp_expressionContext csharp_expression() {
			return GetRuleContext<Csharp_expressionContext>(0);
		}
		public Csharp_parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_parenthesis_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCsharp_parenthesis_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCsharp_parenthesis_expression(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_parenthesis_expressionContext csharp_parenthesis_expression() {
		Csharp_parenthesis_expressionContext _localctx = new Csharp_parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_csharp_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970; Match(LPAR);
			State = 1971; _localctx.exp = csharp_expression(0);
			State = 1972; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifier_expressionContext : ParserRuleContext {
		public Csharp_identifier_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier_expression; } }
	 
		public Csharp_identifier_expressionContext() { }
		public virtual void CopyFrom(Csharp_identifier_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifierContext name;
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpIdentifier(this);
		}
	}
	public partial class CSharpChildIdentifierContext : Csharp_identifier_expressionContext {
		public Csharp_identifier_expressionContext parent;
		public Csharp_identifierContext name;
		public ITerminalNode DOT() { return GetToken(OParser.DOT, 0); }
		public Csharp_identifier_expressionContext csharp_identifier_expression() {
			return GetRuleContext<Csharp_identifier_expressionContext>(0);
		}
		public Csharp_identifierContext csharp_identifier() {
			return GetRuleContext<Csharp_identifierContext>(0);
		}
		public CSharpChildIdentifierContext(Csharp_identifier_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpChildIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpChildIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifier_expressionContext csharp_identifier_expression() {
		return csharp_identifier_expression(0);
	}

	private Csharp_identifier_expressionContext csharp_identifier_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Csharp_identifier_expressionContext _localctx = new Csharp_identifier_expressionContext(Context, _parentState);
		Csharp_identifier_expressionContext _prevctx = _localctx;
		int _startState = 364;
		EnterRecursionRule(_localctx, 364, RULE_csharp_identifier_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CSharpIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1975; ((CSharpIdentifierContext)_localctx).name = csharp_identifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1982;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CSharpChildIdentifierContext(new Csharp_identifier_expressionContext(_parentctx, _parentState));
					((CSharpChildIdentifierContext)_localctx).parent = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_csharp_identifier_expression);
					State = 1977;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1978; Match(DOT);
					State = 1979; ((CSharpChildIdentifierContext)_localctx).name = csharp_identifier();
					}
					} 
				}
				State = 1984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Csharp_literal_expressionContext : ParserRuleContext {
		public Csharp_literal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_literal_expression; } }
	 
		public Csharp_literal_expressionContext() { }
		public virtual void CopyFrom(Csharp_literal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CSharpCharacterLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(OParser.CHAR_LITERAL, 0); }
		public CSharpCharacterLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpCharacterLiteral(this);
		}
	}
	public partial class CSharpDecimalLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(OParser.DECIMAL_LITERAL, 0); }
		public CSharpDecimalLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpDecimalLiteral(this);
		}
	}
	public partial class CSharpBooleanLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(OParser.BOOLEAN_LITERAL, 0); }
		public CSharpBooleanLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpBooleanLiteral(this);
		}
	}
	public partial class CSharpIntegerLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(OParser.INTEGER_LITERAL, 0); }
		public CSharpIntegerLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpIntegerLiteral(this);
		}
	}
	public partial class CSharpTextLiteralContext : Csharp_literal_expressionContext {
		public ITerminalNode TEXT_LITERAL() { return GetToken(OParser.TEXT_LITERAL, 0); }
		public CSharpTextLiteralContext(Csharp_literal_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCSharpTextLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCSharpTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_literal_expressionContext csharp_literal_expression() {
		Csharp_literal_expressionContext _localctx = new Csharp_literal_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_csharp_literal_expression);
		try {
			State = 1990;
			switch (TokenStream.La(1)) {
			case INTEGER_LITERAL:
				_localctx = new CSharpIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1985; Match(INTEGER_LITERAL);
				}
				break;
			case DECIMAL_LITERAL:
				_localctx = new CSharpDecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1986; Match(DECIMAL_LITERAL);
				}
				break;
			case TEXT_LITERAL:
				_localctx = new CSharpTextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1987; Match(TEXT_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new CSharpBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1988; Match(BOOLEAN_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CSharpCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1989; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Csharp_identifierContext : ParserRuleContext {
		public ITerminalNode VARIABLE_IDENTIFIER() { return GetToken(OParser.VARIABLE_IDENTIFIER, 0); }
		public ITerminalNode SYMBOL_IDENTIFIER() { return GetToken(OParser.SYMBOL_IDENTIFIER, 0); }
		public ITerminalNode TYPE_IDENTIFIER() { return GetToken(OParser.TYPE_IDENTIFIER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(OParser.BOOLEAN, 0); }
		public ITerminalNode CHARACTER() { return GetToken(OParser.CHARACTER, 0); }
		public ITerminalNode TEXT() { return GetToken(OParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(OParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(OParser.DECIMAL, 0); }
		public ITerminalNode DATE() { return GetToken(OParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(OParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(OParser.DATETIME, 0); }
		public ITerminalNode PERIOD() { return GetToken(OParser.PERIOD, 0); }
		public ITerminalNode READ() { return GetToken(OParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(OParser.WRITE, 0); }
		public ITerminalNode TEST() { return GetToken(OParser.TEST, 0); }
		public Csharp_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharp_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.EnterCsharp_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOParserListener typedListener = listener as IOParserListener;
			if (typedListener != null) typedListener.ExitCsharp_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Csharp_identifierContext csharp_identifier() {
		Csharp_identifierContext _localctx = new Csharp_identifierContext(Context, State);
		EnterRule(_localctx, 368, RULE_csharp_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHARACTER) | (1L << TEXT) | (1L << INTEGER) | (1L << DECIMAL) | (1L << DATE) | (1L << TIME) | (1L << DATETIME) | (1L << PERIOD))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (READ - 112)) | (1L << (TEST - 112)) | (1L << (WRITE - 112)) | (1L << (SYMBOL_IDENTIFIER - 112)) | (1L << (TYPE_IDENTIFIER - 112)) | (1L << (VARIABLE_IDENTIFIER - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return derived_list_sempred((Derived_listContext)_localctx, predIndex);
		case 16: return native_category_mapping_list_sempred((Native_category_mapping_listContext)_localctx, predIndex);
		case 17: return attribute_list_sempred((Attribute_listContext)_localctx, predIndex);
		case 34: return else_if_statement_list_sempred((Else_if_statement_listContext)_localctx, predIndex);
		case 41: return callable_parent_sempred((Callable_parentContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 45: return instance_expression_sempred((Instance_expressionContext)_localctx, predIndex);
		case 54: return argument_assignment_list_sempred((Argument_assignment_listContext)_localctx, predIndex);
		case 61: return declarations_sempred((DeclarationsContext)_localctx, predIndex);
		case 65: return native_symbol_list_sempred((Native_symbol_listContext)_localctx, predIndex);
		case 66: return category_symbol_list_sempred((Category_symbol_listContext)_localctx, predIndex);
		case 67: return symbol_list_sempred((Symbol_listContext)_localctx, predIndex);
		case 71: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 73: return typedef_sempred((TypedefContext)_localctx, predIndex);
		case 80: return type_identifier_list_sempred((Type_identifier_listContext)_localctx, predIndex);
		case 86: return argument_list_sempred((Argument_listContext)_localctx, predIndex);
		case 92: return any_type_sempred((Any_typeContext)_localctx, predIndex);
		case 93: return category_method_declaration_list_sempred((Category_method_declaration_listContext)_localctx, predIndex);
		case 98: return module_token_sempred((Module_tokenContext)_localctx, predIndex);
		case 101: return variable_identifier_list_sempred((Variable_identifier_listContext)_localctx, predIndex);
		case 103: return native_statement_list_sempred((Native_statement_listContext)_localctx, predIndex);
		case 107: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 108: return assertion_list_sempred((Assertion_listContext)_localctx, predIndex);
		case 109: return switch_case_statement_list_sempred((Switch_case_statement_listContext)_localctx, predIndex);
		case 110: return catch_statement_list_sempred((Catch_statement_listContext)_localctx, predIndex);
		case 113: return literal_list_literal_sempred((Literal_list_literalContext)_localctx, predIndex);
		case 121: return expression_tuple_sempred((Expression_tupleContext)_localctx, predIndex);
		case 122: return dict_entry_list_sempred((Dict_entry_listContext)_localctx, predIndex);
		case 126: return assignable_instance_sempred((Assignable_instanceContext)_localctx, predIndex);
		case 127: return is_expression_sempred((Is_expressionContext)_localctx, predIndex);
		case 129: return key_token_sempred((Key_tokenContext)_localctx, predIndex);
		case 130: return value_token_sempred((Value_tokenContext)_localctx, predIndex);
		case 131: return symbols_token_sempred((Symbols_tokenContext)_localctx, predIndex);
		case 140: return javascript_expression_sempred((Javascript_expressionContext)_localctx, predIndex);
		case 144: return javascript_arguments_sempred((Javascript_argumentsContext)_localctx, predIndex);
		case 147: return javascript_identifier_expression_sempred((Javascript_identifier_expressionContext)_localctx, predIndex);
		case 151: return python_expression_sempred((Python_expressionContext)_localctx, predIndex);
		case 156: return python_ordinal_argument_list_sempred((Python_ordinal_argument_listContext)_localctx, predIndex);
		case 157: return python_named_argument_list_sempred((Python_named_argument_listContext)_localctx, predIndex);
		case 159: return python_identifier_expression_sempred((Python_identifier_expressionContext)_localctx, predIndex);
		case 163: return java_expression_sempred((Java_expressionContext)_localctx, predIndex);
		case 167: return java_arguments_sempred((Java_argumentsContext)_localctx, predIndex);
		case 170: return java_identifier_expression_sempred((Java_identifier_expressionContext)_localctx, predIndex);
		case 171: return java_class_identifier_expression_sempred((Java_class_identifier_expressionContext)_localctx, predIndex);
		case 175: return csharp_expression_sempred((Csharp_expressionContext)_localctx, predIndex);
		case 179: return csharp_arguments_sempred((Csharp_argumentsContext)_localctx, predIndex);
		case 182: return csharp_identifier_expression_sempred((Csharp_identifier_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool derived_list_sempred(Derived_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_category_mapping_list_sempred(Native_category_mapping_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attribute_list_sempred(Attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool else_if_statement_list_sempred(Else_if_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool callable_parent_sempred(Callable_parentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 29);
		case 6: return Precpred(Context, 28);
		case 7: return Precpred(Context, 27);
		case 8: return Precpred(Context, 26);
		case 9: return Precpred(Context, 25);
		case 10: return Precpred(Context, 24);
		case 11: return Precpred(Context, 23);
		case 12: return Precpred(Context, 22);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		case 20: return Precpred(Context, 11);
		case 21: return Precpred(Context, 10);
		case 22: return Precpred(Context, 9);
		case 23: return Precpred(Context, 8);
		case 24: return Precpred(Context, 7);
		case 25: return Precpred(Context, 6);
		case 26: return Precpred(Context, 5);
		case 27: return Precpred(Context, 4);
		case 28: return Precpred(Context, 20);
		case 29: return Precpred(Context, 19);
		}
		return true;
	}
	private bool instance_expression_sempred(Instance_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_assignment_list_sempred(Argument_assignment_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.willNotBe(this.equalToken());
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_symbol_list_sempred(Native_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool category_symbol_list_sempred(Category_symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool symbol_list_sempred(Symbol_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typedef_sempred(TypedefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 3);
		case 39: return Precpred(Context, 2);
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_identifier_list_sempred(Type_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argument_list_sempred(Argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool any_type_sempred(Any_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 2);
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool category_method_declaration_list_sempred(Category_method_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}
	private bool module_token_sempred(Module_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return this.isText(_localctx.i1,"module");
		}
		return true;
	}
	private bool variable_identifier_list_sempred(Variable_identifier_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 1);
		}
		return true;
	}
	private bool native_statement_list_sempred(Native_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assertion_list_sempred(Assertion_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool switch_case_statement_list_sempred(Switch_case_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool catch_statement_list_sempred(Catch_statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool literal_list_literal_sempred(Literal_list_literalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_tuple_sempred(Expression_tupleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool dict_entry_list_sempred(Dict_entry_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignable_instance_sempred(Assignable_instanceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool is_expression_sempred(Is_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return this.willBeAOrAn();
		}
		return true;
	}
	private bool key_token_sempred(Key_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return this.isText(_localctx.i1,"key");
		}
		return true;
	}
	private bool value_token_sempred(Value_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return this.isText(_localctx.i1,"value");
		}
		return true;
	}
	private bool symbols_token_sempred(Symbols_tokenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return this.isText(_localctx.i1,"symbols");
		}
		return true;
	}
	private bool javascript_expression_sempred(Javascript_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_arguments_sempred(Javascript_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(Context, 1);
		}
		return true;
	}
	private bool javascript_identifier_expression_sempred(Javascript_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_expression_sempred(Python_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_ordinal_argument_list_sempred(Python_ordinal_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_named_argument_list_sempred(Python_named_argument_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return Precpred(Context, 1);
		}
		return true;
	}
	private bool python_identifier_expression_sempred(Python_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_expression_sempred(Java_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_arguments_sempred(Java_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_identifier_expression_sempred(Java_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return Precpred(Context, 1);
		}
		return true;
	}
	private bool java_class_identifier_expression_sempred(Java_class_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_expression_sempred(Csharp_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_arguments_sempred(Csharp_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73: return Precpred(Context, 1);
		}
		return true;
	}
	private bool csharp_identifier_expression_sempred(Csharp_identifier_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x95\x7CD\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x17C"+
		"\n\x2\x3\x2\x3\x2\x5\x2\x180\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x19F\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1A9\n"+
		"\a\x3\a\x3\a\x5\a\x1AD\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b\x1B7\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x1C1\n\t\f\t\xE"+
		"\t\x1C4\v\t\x3\n\x3\n\x3\n\x5\n\x1C9\n\n\x3\n\x5\n\x1CC\n\n\x3\v\x5\v"+
		"\x1CF\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x1D5\n\v\x3\v\x3\v\x3\v\x5\v\x1DA\n"+
		"\v\x3\v\x3\v\x3\f\x5\f\x1DF\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5"+
		"\f\x1E8\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x1F0\n\r\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x1F8\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\x203\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x210\n\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x224\n\x12\f\x12\xE\x12"+
		"\x227\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x22F\n\x13"+
		"\f\x13\xE\x13\x232\v\x13\x3\x14\x3\x14\x5\x14\x236\n\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x23C\n\x14\x3\x14\x3\x14\x3\x14\x3\x15\x5\x15\x242"+
		"\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x248\n\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x24D\n\x15\x3\x15\x3\x15\x3\x16\x5\x16\x252\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\x259\n\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x270\n\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x27A\n\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x27F\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x286\n\x1A\x5\x1A\x288\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x29B\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2B2\n\x1E\x5\x1E\x2B4"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2BC\n\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2C3\n\x1F\x5\x1F\x2C5\n\x1F\x3"+
		" \x3 \x3 \x3 \x3 \x3 \x5 \x2CD\n \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!"+
		"\x2D7\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x5#\x2EC\n#\x3#\x3#\x5#\x2F0\n#\x3$\x3$\x3$\x3$"+
		"\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\a$\x302\n$\f$\xE$\x305"+
		"\v$\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x311\n&\x3&\x3&\x5&\x315"+
		"\n&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x31D\n&\x3&\x5&\x320\n&\x3&\x3&\x3&\x5"+
		"&\x325\n&\x3&\x5&\x328\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x330\n\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x33B\n\'\x3\'\x3\'"+
		"\x5\'\x33F\n\'\x3(\x3(\x5(\x343\n(\x3(\x3(\x3)\x3)\x3)\x5)\x34A\n)\x3"+
		")\x3)\x3*\x3*\x3*\x3*\x3*\x5*\x353\n*\x3+\x3+\x3+\x3+\x3+\a+\x35A\n+\f"+
		"+\xE+\x35D\v+\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x365\n,\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x5-\x37E\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x3DB\n-\f-\xE-\x3DE\v-\x3.\x3.\x3/\x3"+
		"/\x3/\x3/\x3/\a/\x3E7\n/\f/\xE/\x3EA\v/\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x5\x30\x3F2\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x415\n\x35\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x423\n\x36\x3\x37\x3\x37\x3\x37\x5\x37\x428\n\x37\x3"+
		"\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x431\n\x38\x3\x38"+
		"\x3\x38\x3\x38\a\x38\x436\n\x38\f\x38\xE\x38\x439\v\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x44A\n"+
		";\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3>\x5>\x454\n>\x3>\x3>\x3>\x3?\x3?\x3?"+
		"\x3?\x3?\x3?\x3?\a?\x460\n?\f?\xE?\x463\v?\x3@\x3@\x3@\x3@\x3@\x5@\x46A"+
		"\n@\x3\x41\x3\x41\x3\x42\x3\x42\x5\x42\x470\n\x42\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x479\n\x43\f\x43\xE\x43\x47C\v\x43"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\a\x44\x485\n\x44\f\x44"+
		"\xE\x44\x488\v\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\a\x45\x490"+
		"\n\x45\f\x45\xE\x45\x493\v\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x49F\n\x46\x3G\x3G\x5G\x4A3\nG\x3"+
		"G\x3G\x3H\x3H\x5H\x4A9\nH\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3I\aI\x4B3\nI\f"+
		"I\xEI\x4B6\vI\x3J\x3J\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K"+
		"\x3K\x3K\x3K\aK\x4C9\nK\fK\xEK\x4CC\vK\x3L\x3L\x5L\x4D0\nL\x3M\x3M\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x4DC\nM\x3N\x3N\x3O\x3O\x3P\x3P\x3Q"+
		"\x3Q\x3Q\x5Q\x4E7\nQ\x3R\x3R\x3R\x3R\x3R\x3R\aR\x4EF\nR\fR\xER\x4F2\v"+
		"R\x3S\x3S\x5S\x4F6\nS\x3T\x3T\x3T\x5T\x4FB\nT\x3U\x3U\x3V\x3V\x3W\x3W"+
		"\x3X\x3X\x3X\x3X\x3X\x3X\aX\x509\nX\fX\xEX\x50C\vX\x3Y\x3Y\x5Y\x510\n"+
		"Y\x3Z\x3Z\x5Z\x514\nZ\x3[\x3[\x3[\x5[\x519\n[\x3\\\x3\\\x3\\\x3]\x3]\x5"+
		"]\x520\n]\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x52B\n^\f^\xE^\x52E\v"+
		"^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\a_\x537\n_\f_\xE_\x53A\v_\x3`\x3`\x3`\x3"+
		"`\x5`\x540\n`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61"+
		"\x3\x61\x3\x61\x5\x61\x54C\n\x61\x3\x62\x3\x62\x5\x62\x550\n\x62\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x558\n\x63\f\x63\xE\x63\x55B"+
		"\v\x63\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65\x562\n\x65\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x5\x66\x568\n\x66\x3\x66\x3\x66\x3\x66\a\x66\x56D\n"+
		"\x66\f\x66\xE\x66\x570\v\x66\x3\x66\x3\x66\x5\x66\x574\n\x66\x3g\x3g\x3"+
		"g\x3g\x3g\x3g\ag\x57C\ng\fg\xEg\x57F\vg\x3h\x3h\x3h\x3h\x5h\x585\nh\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\ai\x58E\ni\fi\xEi\x591\vi\x3j\x3j\x3j\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x5j\x59D\nj\x3k\x3k\x5k\x5A1\nk\x3k\x5k\x5A4\nk"+
		"\x3l\x3l\x5l\x5A8\nl\x3l\x5l\x5AB\nl\x3m\x3m\x3m\x3m\x3m\x3m\x3m\am\x5B4"+
		"\nm\fm\xEm\x5B7\vm\x3n\x3n\x3n\x3n\x3n\x3n\x3n\an\x5C0\nn\fn\xEn\x5C3"+
		"\vn\x3o\x3o\x3o\x3o\x3o\x3o\x3o\ao\x5CC\no\fo\xEo\x5CF\vo\x3p\x3p\x3p"+
		"\x3p\x3p\x3p\x3p\ap\x5D8\np\fp\xEp\x5DB\vp\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x5EB\nq\x3r\x3r\x3r\x3r\x3r\x3r\x3r"+
		"\x3r\x3r\x3r\x3r\x3r\x3r\x5r\x5FA\nr\x3s\x3s\x3s\x3s\x3s\x3s\as\x602\n"+
		"s\fs\xEs\x605\vs\x3t\x3t\x3t\x3t\x5t\x60B\nt\x3u\x3u\x3v\x3v\x3v\x3v\x3"+
		"w\x3w\x5w\x615\nw\x3x\x3x\x3x\x3x\x3x\x5x\x61C\nx\x3y\x3y\x5y\x620\ny"+
		"\x3y\x3y\x3z\x3z\x5z\x626\nz\x3z\x3z\x3{\x3{\x3{\x3{\x3{\x3{\a{\x630\n"+
		"{\f{\xE{\x633\v{\x3|\x3|\x3|\x3|\x3|\x3|\a|\x63B\n|\f|\xE|\x63E\v|\x3"+
		"}\x3}\x3}\x3}\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x3~\x5~\x64D\n~\x3\x7F\x3"+
		"\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\a\x80\x658\n\x80"+
		"\f\x80\xE\x80\x65B\v\x80\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x661\n\x81"+
		"\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x5\x82\x669\n\x82\x3\x83\x3"+
		"\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3"+
		"\x87\x3\x87\x3\x88\x3\x88\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3"+
		"\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x689"+
		"\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\a\x8E\x690\n\x8E\f\x8E\xE\x8E"+
		"\x693\v\x8E\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x698\n\x8F\x3\x90\x3\x90\x3\x90"+
		"\x5\x90\x69D\n\x90\x3\x91\x3\x91\x3\x91\x5\x91\x6A2\n\x91\x3\x91\x3\x91"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\a\x92\x6AC\n\x92\f\x92\xE\x92"+
		"\x6AF\v\x92\x3\x93\x3\x93\x3\x93\x3\x93\x3\x94\x3\x94\x3\x94\x3\x94\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\a\x95\x6BF\n\x95\f\x95\xE\x95"+
		"\x6C2\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x5\x96\x6C9\n\x96\x3\x97"+
		"\x3\x97\x3\x98\x3\x98\x3\x98\x5\x98\x6D0\n\x98\x3\x99\x3\x99\x3\x99\x3"+
		"\x99\x3\x99\a\x99\x6D7\n\x99\f\x99\xE\x99\x6DA\v\x99\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x5\x9A\x6E0\n\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B"+
		"\x5\x9B\x6E8\n\x9B\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x6ED\n\x9C\x3\x9C\x3\x9C"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x6F7\n\x9D\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\a\x9E\x6FF\n\x9E\f\x9E\xE\x9E\x702\v"+
		"\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3"+
		"\x9F\x3\x9F\a\x9F\x70F\n\x9F\f\x9F\xE\x9F\x712\v\x9F\x3\xA0\x3\xA0\x3"+
		"\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\a\xA1\x71E\n\xA1"+
		"\f\xA1\xE\xA1\x721\v\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x5\xA2\x728"+
		"\n\xA2\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4"+
		"\x5\xA4\x733\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\a\xA5\x73A\n\xA5"+
		"\f\xA5\xE\xA5\x73D\v\xA5\x3\xA6\x3\xA6\x3\xA6\x5\xA6\x742\n\xA6\x3\xA7"+
		"\x3\xA7\x3\xA7\x5\xA7\x747\n\xA7\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x74C\n\xA8"+
		"\x3\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\a\xA9\x756\n"+
		"\xA9\f\xA9\xE\xA9\x759\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAB\x3\xAB"+
		"\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\a\xAC\x769\n"+
		"\xAC\f\xAC\xE\xAC\x76C\v\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\a\xAD\x774\n\xAD\f\xAD\xE\xAD\x777\v\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAE\x5\xAE\x77E\n\xAE\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3"+
		"\xB0\x3\xB0\x3\xB0\x5\xB0\x789\n\xB0\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1"+
		"\a\xB1\x790\n\xB1\f\xB1\xE\xB1\x793\v\xB1\x3\xB2\x3\xB2\x3\xB2\x5\xB2"+
		"\x798\n\xB2\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x79D\n\xB3\x3\xB4\x3\xB4\x3\xB4"+
		"\x5\xB4\x7A2\n\xB4\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\a\xB5\x7AC\n\xB5\f\xB5\xE\xB5\x7AF\v\xB5\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3"+
		"\xB8\a\xB8\x7BF\n\xB8\f\xB8\xE\xB8\x7C2\v\xB8\x3\xB9\x3\xB9\x3\xB9\x3"+
		"\xB9\x3\xB9\x5\xB9\x7C9\n\xB9\x3\xBA\x3\xBA\x3\xBA\x2,\x10\"$\x46TX\\"+
		"n|\x84\x86\x88\x90\x94\xA2\xAE\xBA\xBC\xCC\xD0\xD8\xDA\xDC\xDE\xE4\xF4"+
		"\xF6\xFE\x11A\x122\x128\x130\x13A\x13C\x140\x148\x150\x156\x158\x160\x168"+
		"\x16E\xBB\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30"+
		"\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|"+
		"~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0"+
		"\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4"+
		"\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8"+
		"\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108"+
		"\x10A\x10C\x10E\x110\x112\x114\x116\x118\x11A\x11C\x11E\x120\x122\x124"+
		"\x126\x128\x12A\x12C\x12E\x130\x132\x134\x136\x138\x13A\x13C\x13E\x140"+
		"\x142\x144\x146\x148\x14A\x14C\x14E\x150\x152\x154\x156\x158\x15A\x15C"+
		"\x15E\x160\x162\x164\x166\x168\x16A\x16C\x16E\x170\x172\x2\x6\x3\x2\x1E"+
		"\x1F\x4\x2ww}}\x4\x2##\x65\x65\a\x2\x30\x38rr||\x85\x85\x8A\x8C\x829\x2"+
		"\x174\x3\x2\x2\x2\x4\x185\x3\x2\x2\x2\x6\x18E\x3\x2\x2\x2\b\x194\x3\x2"+
		"\x2\x2\n\x199\x3\x2\x2\x2\f\x1A2\x3\x2\x2\x2\xE\x1B0\x3\x2\x2\x2\x10\x1BA"+
		"\x3\x2\x2\x2\x12\x1CB\x3\x2\x2\x2\x14\x1CE\x3\x2\x2\x2\x16\x1DE\x3\x2"+
		"\x2\x2\x18\x1EB\x3\x2\x2\x2\x1A\x1F3\x3\x2\x2\x2\x1C\x1FB\x3\x2\x2\x2"+
		"\x1E\x208\x3\x2\x2\x2 \x215\x3\x2\x2\x2\"\x21B\x3\x2\x2\x2$\x228\x3\x2"+
		"\x2\x2&\x233\x3\x2\x2\x2(\x241\x3\x2\x2\x2*\x251\x3\x2\x2\x2,\x25F\x3"+
		"\x2\x2\x2.\x271\x3\x2\x2\x2\x30\x274\x3\x2\x2\x2\x32\x287\x3\x2\x2\x2"+
		"\x34\x29A\x3\x2\x2\x2\x36\x29C\x3\x2\x2\x2\x38\x2A2\x3\x2\x2\x2:\x2A8"+
		"\x3\x2\x2\x2<\x2C4\x3\x2\x2\x2>\x2C6\x3\x2\x2\x2@\x2D3\x3\x2\x2\x2\x42"+
		"\x2DF\x3\x2\x2\x2\x44\x2E5\x3\x2\x2\x2\x46\x2F1\x3\x2\x2\x2H\x306\x3\x2"+
		"\x2\x2J\x30A\x3\x2\x2\x2L\x33E\x3\x2\x2\x2N\x340\x3\x2\x2\x2P\x346\x3"+
		"\x2\x2\x2R\x352\x3\x2\x2\x2T\x354\x3\x2\x2\x2V\x364\x3\x2\x2\x2X\x37D"+
		"\x3\x2\x2\x2Z\x3DF\x3\x2\x2\x2\\\x3E1\x3\x2\x2\x2^\x3F1\x3\x2\x2\x2`\x3F3"+
		"\x3\x2\x2\x2\x62\x3F7\x3\x2\x2\x2\x64\x3FB\x3\x2\x2\x2\x66\x403\x3\x2"+
		"\x2\x2h\x40C\x3\x2\x2\x2j\x422\x3\x2\x2\x2l\x424\x3\x2\x2\x2n\x430\x3"+
		"\x2\x2\x2p\x43A\x3\x2\x2\x2r\x43E\x3\x2\x2\x2t\x449\x3\x2\x2\x2v\x44B"+
		"\x3\x2\x2\x2x\x450\x3\x2\x2\x2z\x453\x3\x2\x2\x2|\x458\x3\x2\x2\x2~\x469"+
		"\x3\x2\x2\x2\x80\x46B\x3\x2\x2\x2\x82\x46F\x3\x2\x2\x2\x84\x471\x3\x2"+
		"\x2\x2\x86\x47D\x3\x2\x2\x2\x88\x489\x3\x2\x2\x2\x8A\x49E\x3\x2\x2\x2"+
		"\x8C\x4A0\x3\x2\x2\x2\x8E\x4A6\x3\x2\x2\x2\x90\x4AC\x3\x2\x2\x2\x92\x4B7"+
		"\x3\x2\x2\x2\x94\x4BD\x3\x2\x2\x2\x96\x4CF\x3\x2\x2\x2\x98\x4DB\x3\x2"+
		"\x2\x2\x9A\x4DD\x3\x2\x2\x2\x9C\x4DF\x3\x2\x2\x2\x9E\x4E1\x3\x2\x2\x2"+
		"\xA0\x4E6\x3\x2\x2\x2\xA2\x4E8\x3\x2\x2\x2\xA4\x4F5\x3\x2\x2\x2\xA6\x4FA"+
		"\x3\x2\x2\x2\xA8\x4FC\x3\x2\x2\x2\xAA\x4FE\x3\x2\x2\x2\xAC\x500\x3\x2"+
		"\x2\x2\xAE\x502\x3\x2\x2\x2\xB0\x50F\x3\x2\x2\x2\xB2\x513\x3\x2\x2\x2"+
		"\xB4\x515\x3\x2\x2\x2\xB6\x51A\x3\x2\x2\x2\xB8\x51F\x3\x2\x2\x2\xBA\x521"+
		"\x3\x2\x2\x2\xBC\x52F\x3\x2\x2\x2\xBE\x53F\x3\x2\x2\x2\xC0\x54B\x3\x2"+
		"\x2\x2\xC2\x54D\x3\x2\x2\x2\xC4\x551\x3\x2\x2\x2\xC6\x55C\x3\x2\x2\x2"+
		"\xC8\x55F\x3\x2\x2\x2\xCA\x563\x3\x2\x2\x2\xCC\x575\x3\x2\x2\x2\xCE\x584"+
		"\x3\x2\x2\x2\xD0\x586\x3\x2\x2\x2\xD2\x59C\x3\x2\x2\x2\xD4\x59E\x3\x2"+
		"\x2\x2\xD6\x5A5\x3\x2\x2\x2\xD8\x5AC\x3\x2\x2\x2\xDA\x5B8\x3\x2\x2\x2"+
		"\xDC\x5C4\x3\x2\x2\x2\xDE\x5D0\x3\x2\x2\x2\xE0\x5EA\x3\x2\x2\x2\xE2\x5F9"+
		"\x3\x2\x2\x2\xE4\x5FB\x3\x2\x2\x2\xE6\x60A\x3\x2\x2\x2\xE8\x60C\x3\x2"+
		"\x2\x2\xEA\x60E\x3\x2\x2\x2\xEC\x614\x3\x2\x2\x2\xEE\x61B\x3\x2\x2\x2"+
		"\xF0\x61D\x3\x2\x2\x2\xF2\x623\x3\x2\x2\x2\xF4\x629\x3\x2\x2\x2\xF6\x634"+
		"\x3\x2\x2\x2\xF8\x63F\x3\x2\x2\x2\xFA\x64C\x3\x2\x2\x2\xFC\x64E\x3\x2"+
		"\x2\x2\xFE\x652\x3\x2\x2\x2\x100\x660\x3\x2\x2\x2\x102\x668\x3\x2\x2\x2"+
		"\x104\x66A\x3\x2\x2\x2\x106\x66D\x3\x2\x2\x2\x108\x670\x3\x2\x2\x2\x10A"+
		"\x673\x3\x2\x2\x2\x10C\x675\x3\x2\x2\x2\x10E\x677\x3\x2\x2\x2\x110\x679"+
		"\x3\x2\x2\x2\x112\x67B\x3\x2\x2\x2\x114\x67D\x3\x2\x2\x2\x116\x67F\x3"+
		"\x2\x2\x2\x118\x688\x3\x2\x2\x2\x11A\x68A\x3\x2\x2\x2\x11C\x697\x3\x2"+
		"\x2\x2\x11E\x69C\x3\x2\x2\x2\x120\x69E\x3\x2\x2\x2\x122\x6A5\x3\x2\x2"+
		"\x2\x124\x6B0\x3\x2\x2\x2\x126\x6B4\x3\x2\x2\x2\x128\x6B8\x3\x2\x2\x2"+
		"\x12A\x6C8\x3\x2\x2\x2\x12C\x6CA\x3\x2\x2\x2\x12E\x6CF\x3\x2\x2\x2\x130"+
		"\x6D1\x3\x2\x2\x2\x132\x6DF\x3\x2\x2\x2\x134\x6E7\x3\x2\x2\x2\x136\x6E9"+
		"\x3\x2\x2\x2\x138\x6F6\x3\x2\x2\x2\x13A\x6F8\x3\x2\x2\x2\x13C\x703\x3"+
		"\x2\x2\x2\x13E\x713\x3\x2\x2\x2\x140\x717\x3\x2\x2\x2\x142\x727\x3\x2"+
		"\x2\x2\x144\x729\x3\x2\x2\x2\x146\x732\x3\x2\x2\x2\x148\x734\x3\x2\x2"+
		"\x2\x14A\x741\x3\x2\x2\x2\x14C\x746\x3\x2\x2\x2\x14E\x748\x3\x2\x2\x2"+
		"\x150\x74F\x3\x2\x2\x2\x152\x75A\x3\x2\x2\x2\x154\x75E\x3\x2\x2\x2\x156"+
		"\x762\x3\x2\x2\x2\x158\x76D\x3\x2\x2\x2\x15A\x77D\x3\x2\x2\x2\x15C\x77F"+
		"\x3\x2\x2\x2\x15E\x788\x3\x2\x2\x2\x160\x78A\x3\x2\x2\x2\x162\x797\x3"+
		"\x2\x2\x2\x164\x79C\x3\x2\x2\x2\x166\x79E\x3\x2\x2\x2\x168\x7A5\x3\x2"+
		"\x2\x2\x16A\x7B0\x3\x2\x2\x2\x16C\x7B4\x3\x2\x2\x2\x16E\x7B8\x3\x2\x2"+
		"\x2\x170\x7C8\x3\x2\x2\x2\x172\x7CA\x3\x2\x2\x2\x174\x175\aS\x2\x2\x175"+
		"\x176\aG\x2\x2\x176\x17B\x5\xAAV\x2\x177\x178\a\x11\x2\x2\x178\x179\x5"+
		"$\x13\x2\x179\x17A\a\x12\x2\x2\x17A\x17C\x3\x2\x2\x2\x17B\x177\x3\x2\x2"+
		"\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17F\x3\x2\x2\x2\x17D\x17E\aW\x2\x2\x17E"+
		"\x180\x5\xAAV\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x181"+
		"\x3\x2\x2\x2\x181\x182\a\x15\x2\x2\x182\x183\x5\x86\x44\x2\x183\x184\a"+
		"\x16\x2\x2\x184\x3\x3\x2\x2\x2\x185\x186\aS\x2\x2\x186\x187\x5\xAAV\x2"+
		"\x187\x188\a\x11\x2\x2\x188\x189\x5\x98M\x2\x189\x18A\a\x12\x2\x2\x18A"+
		"\x18B\a\x15\x2\x2\x18B\x18C\x5\x84\x43\x2\x18C\x18D\a\x16\x2\x2\x18D\x5"+
		"\x3\x2\x2\x2\x18E\x18F\x5\xACW\x2\x18F\x190\a\x11\x2\x2\x190\x191\x5n"+
		"\x38\x2\x191\x192\a\x12\x2\x2\x192\x193\a\r\x2\x2\x193\a\x3\x2\x2\x2\x194"+
		"\x195\x5\xACW\x2\x195\x196\a)\x2\x2\x196\x197\x5X-\x2\x197\x198\a\r\x2"+
		"\x2\x198\t\x3\x2\x2\x2\x199\x19A\a\x43\x2\x2\x19A\x19B\x5\xA8U\x2\x19B"+
		"\x19C\a\f\x2\x2\x19C\x19E\x5\x94K\x2\x19D\x19F\x5\x8A\x46\x2\x19E\x19D"+
		"\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\a\r"+
		"\x2\x2\x1A1\v\x3\x2\x2\x2\x1A2\x1A3\aG\x2\x2\x1A3\x1A8\x5\xAAV\x2\x1A4"+
		"\x1A5\a\x11\x2\x2\x1A5\x1A6\x5$\x13\x2\x1A6\x1A7\a\x12\x2\x2\x1A7\x1A9"+
		"\x3\x2\x2\x2\x1A8\x1A4\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AC\x3"+
		"\x2\x2\x2\x1AA\x1AB\aW\x2\x2\x1AB\x1AD\x5\x10\t\x2\x1AC\x1AA\x3\x2\x2"+
		"\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1AF\x5\x12\n\x2"+
		"\x1AF\r\x3\x2\x2\x2\x1B0\x1B1\ay\x2\x2\x1B1\x1B6\x5\xAAV\x2\x1B2\x1B3"+
		"\a\x11\x2\x2\x1B3\x1B4\x5$\x13\x2\x1B4\x1B5\a\x12\x2\x2\x1B5\x1B7\x3\x2"+
		"\x2\x2\x1B6\x1B2\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2"+
		"\x2\x1B8\x1B9\x5\x12\n\x2\x1B9\xF\x3\x2\x2\x2\x1BA\x1BB\b\t\x1\x2\x1BB"+
		"\x1BC\x5\xAAV\x2\x1BC\x1C2\x3\x2\x2\x2\x1BD\x1BE\f\x3\x2\x2\x1BE\x1BF"+
		"\a\xE\x2\x2\x1BF\x1C1\x5\xAAV\x2\x1C0\x1BD\x3\x2\x2\x2\x1C1\x1C4\x3\x2"+
		"\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x11\x3\x2\x2\x2"+
		"\x1C4\x1C2\x3\x2\x2\x2\x1C5\x1CC\a\r\x2\x2\x1C6\x1C8\a\x15\x2\x2\x1C7"+
		"\x1C9\x5\xBC_\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA"+
		"\x3\x2\x2\x2\x1CA\x1CC\a\x16\x2\x2\x1CB\x1C5\x3\x2\x2\x2\x1CB\x1C6\x3"+
		"\x2\x2\x2\x1CC\x13\x3\x2\x2\x2\x1CD\x1CF\x5\x94K\x2\x1CE\x1CD\x3\x2\x2"+
		"\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\a\x63\x2\x2"+
		"\x1D1\x1D2\x5\xA4S\x2\x1D2\x1D4\a\x11\x2\x2\x1D3\x1D5\x5\xAEX\x2\x1D4"+
		"\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7"+
		"\a\x12\x2\x2\x1D7\x1D9\a\x15\x2\x2\x1D8\x1DA\x5\xD8m\x2\x1D9\x1D8\x3\x2"+
		"\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\a\x16\x2"+
		"\x2\x1DC\x15\x3\x2\x2\x2\x1DD\x1DF\x5\x94K\x2\x1DE\x1DD\x3\x2\x2\x2\x1DE"+
		"\x1DF\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\am\x2\x2\x1E1\x1E2\x5"+
		"\x102\x82\x2\x1E2\x1E3\a\x11\x2\x2\x1E3\x1E4\x5\xB2Z\x2\x1E4\x1E5\a\x12"+
		"\x2\x2\x1E5\x1E7\a\x15\x2\x2\x1E6\x1E8\x5\xD8m\x2\x1E7\x1E6\x3\x2\x2\x2"+
		"\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EA\a\x16\x2\x2\x1EA"+
		"\x17\x3\x2\x2\x2\x1EB\x1EC\ax\x2\x2\x1EC\x1ED\x5\xA8U\x2\x1ED\x1EF\a\x15"+
		"\x2\x2\x1EE\x1F0\x5\xD8m\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2"+
		"\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\a\x16\x2\x2\x1F2\x19\x3\x2\x2\x2\x1F3"+
		"\x1F4\a\\\x2\x2\x1F4\x1F5\x5\xA8U\x2\x1F5\x1F7\a\x15\x2\x2\x1F6\x1F8\x5"+
		"\xD8m\x2\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2"+
		"\x2\x1F9\x1FA\a\x16\x2\x2\x1FA\x1B\x3\x2\x2\x2\x1FB\x1FC\a\x66\x2\x2\x1FC"+
		"\x1FD\at\x2\x2\x1FD\x202\x5\xAAV\x2\x1FE\x1FF\a\x11\x2\x2\x1FF\x200\x5"+
		"$\x13\x2\x200\x201\a\x12\x2\x2\x201\x203\x3\x2\x2\x2\x202\x1FE\x3\x2\x2"+
		"\x2\x202\x203\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\a\x15\x2\x2"+
		"\x205\x206\x5 \x11\x2\x206\x207\a\x16\x2\x2\x207\x1D\x3\x2\x2\x2\x208"+
		"\x209\a\x66\x2\x2\x209\x20A\aG\x2\x2\x20A\x20F\x5\xAAV\x2\x20B\x20C\a"+
		"\x11\x2\x2\x20C\x20D\x5$\x13\x2\x20D\x20E\a\x12\x2\x2\x20E\x210\x3\x2"+
		"\x2\x2\x20F\x20B\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x211\x3\x2\x2"+
		"\x2\x211\x212\a\x15\x2\x2\x212\x213\x5 \x11\x2\x213\x214\a\x16\x2\x2\x214"+
		"\x1F\x3\x2\x2\x2\x215\x216\aG\x2\x2\x216\x217\a\x61\x2\x2\x217\x218\a"+
		"\x15\x2\x2\x218\x219\x5\"\x12\x2\x219\x21A\a\x16\x2\x2\x21A!\x3\x2\x2"+
		"\x2\x21B\x21C\b\x12\x1\x2\x21C\x21D\x5\xC0\x61\x2\x21D\x21E\a\r\x2\x2"+
		"\x21E\x225\x3\x2\x2\x2\x21F\x220\f\x3\x2\x2\x220\x221\x5\xC0\x61\x2\x221"+
		"\x222\a\r\x2\x2\x222\x224\x3\x2\x2\x2\x223\x21F\x3\x2\x2\x2\x224\x227"+
		"\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226#\x3\x2\x2"+
		"\x2\x227\x225\x3\x2\x2\x2\x228\x229\b\x13\x1\x2\x229\x22A\x5\xA8U\x2\x22A"+
		"\x230\x3\x2\x2\x2\x22B\x22C\f\x3\x2\x2\x22C\x22D\a\xE\x2\x2\x22D\x22F"+
		"\x5\xA8U\x2\x22E\x22B\x3\x2\x2\x2\x22F\x232\x3\x2\x2\x2\x230\x22E\x3\x2"+
		"\x2\x2\x230\x231\x3\x2\x2\x2\x231%\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x233"+
		"\x235\a<\x2\x2\x234\x236\x5\x94K\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3"+
		"\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x238\a\x63\x2\x2\x238\x239\x5\xA4"+
		"S\x2\x239\x23B\a\x11\x2\x2\x23A\x23C\x5\xAEX\x2\x23B\x23A\x3\x2\x2\x2"+
		"\x23B\x23C\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23E\a\x12\x2\x2\x23E"+
		"\x23F\a\r\x2\x2\x23F\'\x3\x2\x2\x2\x240\x242\x5\x94K\x2\x241\x240\x3\x2"+
		"\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x244\a\x63\x2"+
		"\x2\x244\x245\x5\xA4S\x2\x245\x247\a\x11\x2\x2\x246\x248\x5\xAEX\x2\x247"+
		"\x246\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A"+
		"\a\x12\x2\x2\x24A\x24C\a\x15\x2\x2\x24B\x24D\x5\xD8m\x2\x24C\x24B\x3\x2"+
		"\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x24F\a\x16\x2"+
		"\x2\x24F)\x3\x2\x2\x2\x250\x252\x5\x94K\x2\x251\x250\x3\x2\x2\x2\x251"+
		"\x252\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x254\a\x66\x2\x2\x254\x255"+
		"\a\x63\x2\x2\x255\x256\x5\xA4S\x2\x256\x258\a\x11\x2\x2\x257\x259\x5\xAE"+
		"X\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2"+
		"\x25A\x25B\a\x12\x2\x2\x25B\x25C\a\x15\x2\x2\x25C\x25D\x5\xD0i\x2\x25D"+
		"\x25E\a\x16\x2\x2\x25E+\x3\x2\x2\x2\x25F\x260\a|\x2\x2\x260\x261\a\x63"+
		"\x2\x2\x261\x262\a\x8D\x2\x2\x262\x263\a\x11\x2\x2\x263\x264\a\x12\x2"+
		"\x2\x264\x265\a\x15\x2\x2\x265\x266\x5\xD8m\x2\x266\x267\a\x16\x2\x2\x267"+
		"\x26F\aV\x2\x2\x268\x269\a\x15\x2\x2\x269\x26A\x5\xDAn\x2\x26A\x26B\a"+
		"\x16\x2\x2\x26B\x270\x3\x2\x2\x2\x26C\x26D\x5\xACW\x2\x26D\x26E\a\r\x2"+
		"\x2\x26E\x270\x3\x2\x2\x2\x26F\x268\x3\x2\x2\x2\x26F\x26C\x3\x2\x2\x2"+
		"\x270-\x3\x2\x2\x2\x271\x272\x5X-\x2\x272\x273\a\r\x2\x2\x273/\x3\x2\x2"+
		"\x2\x274\x279\x5\xB8]\x2\x275\x276\a\x11\x2\x2\x276\x277\x5$\x13\x2\x277"+
		"\x278\a\x12\x2\x2\x278\x27A\x3\x2\x2\x2\x279\x275\x3\x2\x2\x2\x279\x27A"+
		"\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27E\x5\xA8U\x2\x27C\x27D\a)\x2"+
		"\x2\x27D\x27F\x5\xECw\x2\x27E\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F"+
		"\x31\x3\x2\x2\x2\x280\x288\x5\x34\x1B\x2\x281\x285\a\x15\x2\x2\x282\x283"+
		"\x5\xD8m\x2\x283\x284\a\x16\x2\x2\x284\x286\x3\x2\x2\x2\x285\x282\x3\x2"+
		"\x2\x2\x285\x286\x3\x2\x2\x2\x286\x288\x3\x2\x2\x2\x287\x280\x3\x2\x2"+
		"\x2\x287\x281\x3\x2\x2\x2\x288\x33\x3\x2\x2\x2\x289\x28A\x5P)\x2\x28A"+
		"\x28B\a\r\x2\x2\x28B\x29B\x3\x2\x2\x2\x28C\x29B\x5r:\x2\x28D\x29B\x5v"+
		"<\x2\x28E\x29B\x5N(\x2\x28F\x29B\x5\x44#\x2\x290\x29B\x5:\x1E\x2\x291"+
		"\x29B\x5> \x2\x292\x29B\x5\x42\"\x2\x293\x29B\x5@!\x2\x294\x29B\x5J&\x2"+
		"\x295\x29B\x5H%\x2\x296\x29B\x5\x64\x33\x2\x297\x29B\x5\x36\x1C\x2\x298"+
		"\x29B\x5\x38\x1D\x2\x299\x29B\x5(\x15\x2\x29A\x289\x3\x2\x2\x2\x29A\x28C"+
		"\x3\x2\x2\x2\x29A\x28D\x3\x2\x2\x2\x29A\x28E\x3\x2\x2\x2\x29A\x28F\x3"+
		"\x2\x2\x2\x29A\x290\x3\x2\x2\x2\x29A\x291\x3\x2\x2\x2\x29A\x292\x3\x2"+
		"\x2\x2\x29A\x293\x3\x2\x2\x2\x29A\x294\x3\x2\x2\x2\x29A\x295\x3\x2\x2"+
		"\x2\x29A\x296\x3\x2\x2\x2\x29A\x297\x3\x2\x2\x2\x29A\x298\x3\x2\x2\x2"+
		"\x29A\x299\x3\x2\x2\x2\x29B\x35\x3\x2\x2\x2\x29C\x29D\a\x81\x2\x2\x29D"+
		"\x29E\a\x11\x2\x2\x29E\x29F\x5\xFC\x7F\x2\x29F\x2A0\a\x12\x2\x2\x2A0\x2A1"+
		"\x5\x32\x1A\x2\x2A1\x37\x3\x2\x2\x2\x2A2\x2A3\a\x81\x2\x2\x2A3\x2A4\a"+
		"\x11\x2\x2\x2A4\x2A5\x5\xAAV\x2\x2A5\x2A6\a\x12\x2\x2\x2A6\x2A7\x5\x32"+
		"\x1A\x2\x2A7\x39\x3\x2\x2\x2\x2A8\x2A9\a{\x2\x2\x2A9\x2AA\a\x11\x2\x2"+
		"\x2AA\x2AB\x5X-\x2\x2AB\x2AC\a\x12\x2\x2\x2AC\x2AD\a\x15\x2\x2\x2AD\x2B3"+
		"\x5\xDCo\x2\x2AE\x2AF\aL\x2\x2\x2AF\x2B1\a\f\x2\x2\x2B0\x2B2\x5\xD8m\x2"+
		"\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B4\x3\x2\x2\x2\x2B3"+
		"\x2AE\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6"+
		"\a\x16\x2\x2\x2B6;\x3\x2\x2\x2\x2B7\x2B8\a\x45\x2\x2\x2B8\x2B9\x5\xE2"+
		"r\x2\x2B9\x2BB\a\f\x2\x2\x2BA\x2BC\x5\xD8m\x2\x2BB\x2BA\x3\x2\x2\x2\x2BB"+
		"\x2BC\x3\x2\x2\x2\x2BC\x2C5\x3\x2\x2\x2\x2BD\x2BE\a\x45\x2\x2\x2BE\x2BF"+
		"\a^\x2\x2\x2BF\x2C0\x5\xE0q\x2\x2C0\x2C2\a\f\x2\x2\x2C1\x2C3\x5\xD8m\x2"+
		"\x2C2\x2C1\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C5\x3\x2\x2\x2\x2C4"+
		"\x2B7\x3\x2\x2\x2\x2C4\x2BD\x3\x2\x2\x2\x2C5=\x3\x2\x2\x2\x2C6\x2C7\a"+
		"Z\x2\x2\x2C7\x2C8\aP\x2\x2\x2C8\x2C9\a\x11\x2\x2\x2C9\x2CC\x5\xA8U\x2"+
		"\x2CA\x2CB\a\xE\x2\x2\x2CB\x2CD\x5\xA8U\x2\x2CC\x2CA\x3\x2\x2\x2\x2CC"+
		"\x2CD\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\a^\x2\x2\x2CF\x2D0\x5"+
		"X-\x2\x2D0\x2D1\a\x12\x2\x2\x2D1\x2D2\x5\x32\x1A\x2\x2D2?\x3\x2\x2\x2"+
		"\x2D3\x2D4\aN\x2\x2\x2D4\x2D6\a\x15\x2\x2\x2D5\x2D7\x5\xD8m\x2\x2D6\x2D5"+
		"\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2D9\a\x16"+
		"\x2\x2\x2D9\x2DA\a\x84\x2\x2\x2DA\x2DB\a\x11\x2\x2\x2DB\x2DC\x5X-\x2\x2DC"+
		"\x2DD\a\x12\x2\x2\x2DD\x2DE\a\r\x2\x2\x2DE\x41\x3\x2\x2\x2\x2DF\x2E0\a"+
		"\x84\x2\x2\x2E0\x2E1\a\x11\x2\x2\x2E1\x2E2\x5X-\x2\x2E2\x2E3\a\x12\x2"+
		"\x2\x2E3\x2E4\x5\x32\x1A\x2\x2E4\x43\x3\x2\x2\x2\x2E5\x2E6\a]\x2\x2\x2E6"+
		"\x2E7\a\x11\x2\x2\x2E7\x2E8\x5X-\x2\x2E8\x2E9\a\x12\x2\x2\x2E9\x2EB\x5"+
		"\x32\x1A\x2\x2EA\x2EC\x5\x46$\x2\x2EB\x2EA\x3\x2\x2\x2\x2EB\x2EC\x3\x2"+
		"\x2\x2\x2EC\x2EF\x3\x2\x2\x2\x2ED\x2EE\aQ\x2\x2\x2EE\x2F0\x5\x32\x1A\x2"+
		"\x2EF\x2ED\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x45\x3\x2\x2\x2\x2F1"+
		"\x2F2\b$\x1\x2\x2F2\x2F3\aQ\x2\x2\x2F3\x2F4\a]\x2\x2\x2F4\x2F5\a\x11\x2"+
		"\x2\x2F5\x2F6\x5X-\x2\x2F6\x2F7\a\x12\x2\x2\x2F7\x2F8\x5\x32\x1A\x2\x2F8"+
		"\x303\x3\x2\x2\x2\x2F9\x2FA\f\x3\x2\x2\x2FA\x2FB\aQ\x2\x2\x2FB\x2FC\a"+
		"]\x2\x2\x2FC\x2FD\a\x11\x2\x2\x2FD\x2FE\x5X-\x2\x2FE\x2FF\a\x12\x2\x2"+
		"\x2FF\x300\x5\x32\x1A\x2\x300\x302\x3\x2\x2\x2\x301\x2F9\x3\x2\x2\x2\x302"+
		"\x305\x3\x2\x2\x2\x303\x301\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304G\x3"+
		"\x2\x2\x2\x305\x303\x3\x2\x2\x2\x306\x307\a~\x2\x2\x307\x308\x5X-\x2\x308"+
		"\x309\a\r\x2\x2\x309I\x3\x2\x2\x2\x30A\x30B\a\x80\x2\x2\x30B\x30C\a\x11"+
		"\x2\x2\x30C\x30D\x5\xA8U\x2\x30D\x30E\a\x12\x2\x2\x30E\x310\a\x15\x2\x2"+
		"\x30F\x311\x5\xD8m\x2\x310\x30F\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311"+
		"\x312\x3\x2\x2\x2\x312\x314\a\x16\x2\x2\x313\x315\x5\xDEp\x2\x314\x313"+
		"\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x31F\x3\x2\x2\x2\x316\x317\a\x46"+
		"\x2\x2\x317\x318\a\x11\x2\x2\x318\x319\a@\x2\x2\x319\x31A\a\x12\x2\x2"+
		"\x31A\x31C\a\x15\x2\x2\x31B\x31D\x5\xD8m\x2\x31C\x31B\x3\x2\x2\x2\x31C"+
		"\x31D\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x320\a\x16\x2\x2\x31F\x316"+
		"\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x327\x3\x2\x2\x2\x321\x322\aY"+
		"\x2\x2\x322\x324\a\x15\x2\x2\x323\x325\x5\xD8m\x2\x324\x323\x3\x2\x2\x2"+
		"\x324\x325\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x328\a\x16\x2\x2\x327"+
		"\x321\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328K\x3\x2\x2\x2\x329\x32A\a"+
		"\x46\x2\x2\x32A\x32B\a\x11\x2\x2\x32B\x32C\x5\xACW\x2\x32C\x32D\a\x12"+
		"\x2\x2\x32D\x32F\a\x15\x2\x2\x32E\x330\x5\xD8m\x2\x32F\x32E\x3\x2\x2\x2"+
		"\x32F\x330\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\a\x16\x2\x2\x332"+
		"\x33F\x3\x2\x2\x2\x333\x334\a\x46\x2\x2\x334\x335\a^\x2\x2\x335\x336\a"+
		"\x11\x2\x2\x336\x337\x5\x88\x45\x2\x337\x338\a\x12\x2\x2\x338\x33A\a\x15"+
		"\x2\x2\x339\x33B\x5\xD8m\x2\x33A\x339\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2"+
		"\x33B\x33C\x3\x2\x2\x2\x33C\x33D\a\x16\x2\x2\x33D\x33F\x3\x2\x2\x2\x33E"+
		"\x329\x3\x2\x2\x2\x33E\x333\x3\x2\x2\x2\x33FM\x3\x2\x2\x2\x340\x342\a"+
		"u\x2\x2\x341\x343\x5X-\x2\x342\x341\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2"+
		"\x343\x344\x3\x2\x2\x2\x344\x345\a\r\x2\x2\x345O\x3\x2\x2\x2\x346\x347"+
		"\x5R*\x2\x347\x349\a\x11\x2\x2\x348\x34A\x5n\x38\x2\x349\x348\x3\x2\x2"+
		"\x2\x349\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34C\a\x12\x2\x2"+
		"\x34CQ\x3\x2\x2\x2\x34D\x353\x5\xA4S\x2\x34E\x34F\x5T+\x2\x34F\x350\a"+
		"\x10\x2\x2\x350\x351\x5\xA4S\x2\x351\x353\x3\x2\x2\x2\x352\x34D\x3\x2"+
		"\x2\x2\x352\x34E\x3\x2\x2\x2\x353S\x3\x2\x2\x2\x354\x355\b+\x1\x2\x355"+
		"\x356\x5\xA6T\x2\x356\x35B\x3\x2\x2\x2\x357\x358\f\x3\x2\x2\x358\x35A"+
		"\x5V,\x2\x359\x357\x3\x2\x2\x2\x35A\x35D\x3\x2\x2\x2\x35B\x359\x3\x2\x2"+
		"\x2\x35B\x35C\x3\x2\x2\x2\x35CU\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35E"+
		"\x35F\a\x10\x2\x2\x35F\x365\x5\xA8U\x2\x360\x361\a\x13\x2\x2\x361\x362"+
		"\x5X-\x2\x362\x363\a\x14\x2\x2\x363\x365\x3\x2\x2\x2\x364\x35E\x3\x2\x2"+
		"\x2\x364\x360\x3\x2\x2\x2\x365W\x3\x2\x2\x2\x366\x367\b-\x1\x2\x367\x368"+
		"\a\x1F\x2\x2\x368\x37E\x5X-!\x369\x36A\a\x18\x2\x2\x36A\x37E\x5X- \x36B"+
		"\x36C\a\x11\x2\x2\x36C\x36D\x5\xB8]\x2\x36D\x36E\a\x12\x2\x2\x36E\x36F"+
		"\x5X-\xE\x36F\x37E\x3\x2\x2\x2\x370\x37E\x5\\/\x2\x371\x37E\x5^\x30\x2"+
		"\x372\x373\a:\x2\x2\x373\x374\a\x11\x2\x2\x374\x375\x5X-\x2\x375\x376"+
		"\a\x12\x2\x2\x376\x37E\x3\x2\x2\x2\x377\x378\aU\x2\x2\x378\x379\a\x11"+
		"\x2\x2\x379\x37A\x5\xA8U\x2\x37A\x37B\a\x12\x2\x2\x37B\x37E\x3\x2\x2\x2"+
		"\x37C\x37E\x5Z.\x2\x37D\x366\x3\x2\x2\x2\x37D\x369\x3\x2\x2\x2\x37D\x36B"+
		"\x3\x2\x2\x2\x37D\x370\x3\x2\x2\x2\x37D\x371\x3\x2\x2\x2\x37D\x372\x3"+
		"\x2\x2\x2\x37D\x377\x3\x2\x2\x2\x37D\x37C\x3\x2\x2\x2\x37E\x3DC\x3\x2"+
		"\x2\x2\x37F\x380\f\x1F\x2\x2\x380\x381\x5\x10C\x87\x2\x381\x382\x5X- "+
		"\x382\x3DB\x3\x2\x2\x2\x383\x384\f\x1E\x2\x2\x384\x385\x5\x10E\x88\x2"+
		"\x385\x386\x5X-\x1F\x386\x3DB\x3\x2\x2\x2\x387\x388\f\x1D\x2\x2\x388\x389"+
		"\x5\x112\x8A\x2\x389\x38A\x5X-\x1E\x38A\x3DB\x3\x2\x2\x2\x38B\x38C\f\x1C"+
		"\x2\x2\x38C\x38D\x5\x110\x89\x2\x38D\x38E\x5X-\x1D\x38E\x3DB\x3\x2\x2"+
		"\x2\x38F\x390\f\x1B\x2\x2\x390\x391\t\x2\x2\x2\x391\x3DB\x5X-\x1C\x392"+
		"\x393\f\x1A\x2\x2\x393\x394\a&\x2\x2\x394\x3DB\x5X-\x1B\x395\x396\f\x19"+
		"\x2\x2\x396\x397\a\'\x2\x2\x397\x3DB\x5X-\x1A\x398\x399\f\x18\x2\x2\x399"+
		"\x39A\a$\x2\x2\x39A\x3DB\x5X-\x19\x39B\x39C\f\x17\x2\x2\x39C\x39D\a%\x2"+
		"\x2\x39D\x3DB\x5X-\x18\x39E\x39F\f\x14\x2\x2\x39F\x3A0\a+\x2\x2\x3A0\x3DB"+
		"\x5X-\x15\x3A1\x3A2\f\x13\x2\x2\x3A2\x3A3\a*\x2\x2\x3A3\x3DB\x5X-\x14"+
		"\x3A4\x3A5\f\x12\x2\x2\x3A5\x3A6\a,\x2\x2\x3A6\x3DB\x5X-\x13\x3A7\x3A8"+
		"\f\x11\x2\x2\x3A8\x3A9\a\x1D\x2\x2\x3A9\x3DB\x5X-\x12\x3AA\x3AB\f\x10"+
		"\x2\x2\x3AB\x3AC\a\x1B\x2\x2\x3AC\x3DB\x5X-\x11\x3AD\x3AE\f\xF\x2\x2\x3AE"+
		"\x3AF\a\x17\x2\x2\x3AF\x3B0\x5X-\x2\x3B0\x3B1\a\f\x2\x2\x3B1\x3B2\x5X"+
		"-\x10\x3B2\x3DB\x3\x2\x2\x2\x3B3\x3B4\f\r\x2\x2\x3B4\x3B5\a^\x2\x2\x3B5"+
		"\x3DB\x5X-\xE\x3B6\x3B7\f\f\x2\x2\x3B7\x3B8\aJ\x2\x2\x3B8\x3DB\x5X-\r"+
		"\x3B9\x3BA\f\v\x2\x2\x3BA\x3BB\aJ\x2\x2\x3BB\x3BC\a=\x2\x2\x3BC\x3DB\x5"+
		"X-\f\x3BD\x3BE\f\n\x2\x2\x3BE\x3BF\aJ\x2\x2\x3BF\x3C0\a@\x2\x2\x3C0\x3DB"+
		"\x5X-\v\x3C1\x3C2\f\t\x2\x2\x3C2\x3C3\ah\x2\x2\x3C3\x3C4\a^\x2\x2\x3C4"+
		"\x3DB\x5X-\n\x3C5\x3C6\f\b\x2\x2\x3C6\x3C7\ah\x2\x2\x3C7\x3C8\aJ\x2\x2"+
		"\x3C8\x3DB\x5X-\t\x3C9\x3CA\f\a\x2\x2\x3CA\x3CB\ah\x2\x2\x3CB\x3CC\aJ"+
		"\x2\x2\x3CC\x3CD\a=\x2\x2\x3CD\x3DB\x5X-\b\x3CE\x3CF\f\x6\x2\x2\x3CF\x3D0"+
		"\ah\x2\x2\x3D0\x3D1\aJ\x2\x2\x3D1\x3D2\a@\x2\x2\x3D2\x3DB\x5X-\a\x3D3"+
		"\x3D4\f\x16\x2\x2\x3D4\x3D5\a`\x2\x2\x3D5\x3D6\ah\x2\x2\x3D6\x3DB\x5\x100"+
		"\x81\x2\x3D7\x3D8\f\x15\x2\x2\x3D8\x3D9\a`\x2\x2\x3D9\x3DB\x5\x100\x81"+
		"\x2\x3DA\x37F\x3\x2\x2\x2\x3DA\x383\x3\x2\x2\x2\x3DA\x387\x3\x2\x2\x2"+
		"\x3DA\x38B\x3\x2\x2\x2\x3DA\x38F\x3\x2\x2\x2\x3DA\x392\x3\x2\x2\x2\x3DA"+
		"\x395\x3\x2\x2\x2\x3DA\x398\x3\x2\x2\x2\x3DA\x39B\x3\x2\x2\x2\x3DA\x39E"+
		"\x3\x2\x2\x2\x3DA\x3A1\x3\x2\x2\x2\x3DA\x3A4\x3\x2\x2\x2\x3DA\x3A7\x3"+
		"\x2\x2\x2\x3DA\x3AA\x3\x2\x2\x2\x3DA\x3AD\x3\x2\x2\x2\x3DA\x3B3\x3\x2"+
		"\x2\x2\x3DA\x3B6\x3\x2\x2\x2\x3DA\x3B9\x3\x2\x2\x2\x3DA\x3BD\x3\x2\x2"+
		"\x2\x3DA\x3C1\x3\x2\x2\x2\x3DA\x3C5\x3\x2\x2\x2\x3DA\x3C9\x3\x2\x2\x2"+
		"\x3DA\x3CE\x3\x2\x2\x2\x3DA\x3D3\x3\x2\x2\x2\x3DA\x3D7\x3\x2\x2\x2\x3DB"+
		"\x3DE\x3\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DDY\x3"+
		"\x2\x2\x2\x3DE\x3DC\x3\x2\x2\x2\x3DF\x3E0\x5\xAAV\x2\x3E0[\x3\x2\x2\x2"+
		"\x3E1\x3E2\b/\x1\x2\x3E2\x3E3\x5\xE6t\x2\x3E3\x3E8\x3\x2\x2\x2\x3E4\x3E5"+
		"\f\x3\x2\x2\x3E5\x3E7\x5j\x36\x2\x3E6\x3E4\x3\x2\x2\x2\x3E7\x3EA\x3\x2"+
		"\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9]\x3\x2\x2\x2\x3EA"+
		"\x3E8\x3\x2\x2\x2\x3EB\x3F2\x5`\x31\x2\x3EC\x3F2\x5l\x37\x2\x3ED\x3F2"+
		"\x5\x66\x34\x2\x3EE\x3F2\x5\x62\x32\x2\x3EF\x3F2\x5h\x35\x2\x3F0\x3F2"+
		"\x5P)\x2\x3F1\x3EB\x3\x2\x2\x2\x3F1\x3EC\x3\x2\x2\x2\x3F1\x3ED\x3\x2\x2"+
		"\x2\x3F1\x3EE\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F0\x3\x2\x2\x2"+
		"\x3F2_\x3\x2\x2\x2\x3F3\x3F4\x5\x9EP\x2\x3F4\x3F5\a\x11\x2\x2\x3F5\x3F6"+
		"\a\x12\x2\x2\x3F6\x61\x3\x2\x2\x2\x3F7\x3F8\ar\x2\x2\x3F8\x3F9\a[\x2\x2"+
		"\x3F9\x3FA\x5X-\x2\x3FA\x63\x3\x2\x2\x2\x3FB\x3FC\a\x85\x2\x2\x3FC\x3FD"+
		"\a\x11\x2\x2\x3FD\x3FE\x5X-\x2\x3FE\x3FF\a\x12\x2\x2\x3FF\x400\a\x7F\x2"+
		"\x2\x400\x401\x5X-\x2\x401\x402\a\r\x2\x2\x402\x65\x3\x2\x2\x2\x403\x404"+
		"\aX\x2\x2\x404\x405\a\x11\x2\x2\x405\x406\x5\xA8U\x2\x406\x407\a\x12\x2"+
		"\x2\x407\x408\a[\x2\x2\x408\x409\x5X-\x2\x409\x40A\a\x83\x2\x2\x40A\x40B"+
		"\x5X-\x2\x40Bg\x3\x2\x2\x2\x40C\x40D\az\x2\x2\x40D\x40E\a\x11\x2\x2\x40E"+
		"\x414\x5\\/\x2\x40F\x410\a\xE\x2\x2\x410\x411\x5\x104\x83\x2\x411\x412"+
		"\a)\x2\x2\x412\x413\x5\\/\x2\x413\x415\x3\x2\x2\x2\x414\x40F\x3\x2\x2"+
		"\x2\x414\x415\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x417\a\x12\x2\x2"+
		"\x417i\x3\x2\x2\x2\x418\x419\a\x10\x2\x2\x419\x423\x5\xA8U\x2\x41A\x41B"+
		"\a\x13\x2\x2\x41B\x41C\x5X-\x2\x41C\x41D\a\x14\x2\x2\x41D\x423\x3\x2\x2"+
		"\x2\x41E\x41F\a\x13\x2\x2\x41F\x420\x5\xFA~\x2\x420\x421\a\x14\x2\x2\x421"+
		"\x423\x3\x2\x2\x2\x422\x418\x3\x2\x2\x2\x422\x41A\x3\x2\x2\x2\x422\x41E"+
		"\x3\x2\x2\x2\x423k\x3\x2\x2\x2\x424\x425\x5\x9AN\x2\x425\x427\a\x11\x2"+
		"\x2\x426\x428\x5n\x38\x2\x427\x426\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428"+
		"\x429\x3\x2\x2\x2\x429\x42A\a\x12\x2\x2\x42Am\x3\x2\x2\x2\x42B\x42C\b"+
		"\x38\x1\x2\x42C\x42D\x5X-\x2\x42D\x42E\x6\x38!\x3\x42E\x431\x3\x2\x2\x2"+
		"\x42F\x431\x5p\x39\x2\x430\x42B\x3\x2\x2\x2\x430\x42F\x3\x2\x2\x2\x431"+
		"\x437\x3\x2\x2\x2\x432\x433\f\x3\x2\x2\x433\x434\a\xE\x2\x2\x434\x436"+
		"\x5p\x39\x2\x435\x432\x3\x2\x2\x2\x436\x439\x3\x2\x2\x2\x437\x435\x3\x2"+
		"\x2\x2\x437\x438\x3\x2\x2\x2\x438o\x3\x2\x2\x2\x439\x437\x3\x2\x2\x2\x43A"+
		"\x43B\x5\xA8U\x2\x43B\x43C\x5\x10A\x86\x2\x43C\x43D\x5X-\x2\x43Dq\x3\x2"+
		"\x2\x2\x43E\x43F\x5\xFE\x80\x2\x43F\x440\x5\x10A\x86\x2\x440\x441\x5X"+
		"-\x2\x441\x442\a\r\x2\x2\x442s\x3\x2\x2\x2\x443\x444\a\x10\x2\x2\x444"+
		"\x44A\x5\xA8U\x2\x445\x446\a\x13\x2\x2\x446\x447\x5X-\x2\x447\x448\a\x14"+
		"\x2\x2\x448\x44A\x3\x2\x2\x2\x449\x443\x3\x2\x2\x2\x449\x445\x3\x2\x2"+
		"\x2\x44Au\x3\x2\x2\x2\x44B\x44C\x5\xCCg\x2\x44C\x44D\x5\x10A\x86\x2\x44D"+
		"\x44E\x5X-\x2\x44E\x44F\a\r\x2\x2\x44Fw\x3\x2\x2\x2\x450\x451\aj\x2\x2"+
		"\x451y\x3\x2\x2\x2\x452\x454\x5|?\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3"+
		"\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x456\x5\x114\x8B\x2\x456\x457\a\x2"+
		"\x2\x3\x457{\x3\x2\x2\x2\x458\x459\b?\x1\x2\x459\x45A\x5~@\x2\x45A\x461"+
		"\x3\x2\x2\x2\x45B\x45C\f\x3\x2\x2\x45C\x45D\x5\x116\x8C\x2\x45D\x45E\x5"+
		"~@\x2\x45E\x460\x3\x2\x2\x2\x45F\x45B\x3\x2\x2\x2\x460\x463\x3\x2\x2\x2"+
		"\x461\x45F\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462}\x3\x2\x2\x2\x463\x461"+
		"\x3\x2\x2\x2\x464\x46A\x5\n\x6\x2\x465\x46A\x5\xA0Q\x2\x466\x46A\x5\x80"+
		"\x41\x2\x467\x46A\x5\x82\x42\x2\x468\x46A\x5\xCEh\x2\x469\x464\x3\x2\x2"+
		"\x2\x469\x465\x3\x2\x2\x2\x469\x466\x3\x2\x2\x2\x469\x467\x3\x2\x2\x2"+
		"\x469\x468\x3\x2\x2\x2\x46A\x7F\x3\x2\x2\x2\x46B\x46C\x5\x1C\xF\x2\x46C"+
		"\x81\x3\x2\x2\x2\x46D\x470\x5\x2\x2\x2\x46E\x470\x5\x4\x3\x2\x46F\x46D"+
		"\x3\x2\x2\x2\x46F\x46E\x3\x2\x2\x2\x470\x83\x3\x2\x2\x2\x471\x472\b\x43"+
		"\x1\x2\x472\x473\x5\b\x5\x2\x473\x47A\x3\x2\x2\x2\x474\x475\f\x3\x2\x2"+
		"\x475\x476\x5\x116\x8C\x2\x476\x477\x5\b\x5\x2\x477\x479\x3\x2\x2\x2\x478"+
		"\x474\x3\x2\x2\x2\x479\x47C\x3\x2\x2\x2\x47A\x478\x3\x2\x2\x2\x47A\x47B"+
		"\x3\x2\x2\x2\x47B\x85\x3\x2\x2\x2\x47C\x47A\x3\x2\x2\x2\x47D\x47E\b\x44"+
		"\x1\x2\x47E\x47F\x5\x6\x4\x2\x47F\x486\x3\x2\x2\x2\x480\x481\f\x3\x2\x2"+
		"\x481\x482\x5\x116\x8C\x2\x482\x483\x5\x6\x4\x2\x483\x485\x3\x2\x2\x2"+
		"\x484\x480\x3\x2\x2\x2\x485\x488\x3\x2\x2\x2\x486\x484\x3\x2\x2\x2\x486"+
		"\x487\x3\x2\x2\x2\x487\x87\x3\x2\x2\x2\x488\x486\x3\x2\x2\x2\x489\x48A"+
		"\b\x45\x1\x2\x48A\x48B\x5\xACW\x2\x48B\x491\x3\x2\x2\x2\x48C\x48D\f\x3"+
		"\x2\x2\x48D\x48E\a\xE\x2\x2\x48E\x490\x5\xACW\x2\x48F\x48C\x3\x2\x2\x2"+
		"\x490\x493\x3\x2\x2\x2\x491\x48F\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492"+
		"\x89\x3\x2\x2\x2\x493\x491\x3\x2\x2\x2\x494\x495\a^\x2\x2\x495\x49F\x5"+
		"\x8CG\x2\x496\x497\a^\x2\x2\x497\x49F\x5\x8EH\x2\x498\x499\a^\x2\x2\x499"+
		"\x49F\x5\x92J\x2\x49A\x49B\a\x62\x2\x2\x49B\x49F\a\x8D\x2\x2\x49C\x49D"+
		"\a\x62\x2\x2\x49D\x49F\x5X-\x2\x49E\x494\x3\x2\x2\x2\x49E\x496\x3\x2\x2"+
		"\x2\x49E\x498\x3\x2\x2\x2\x49E\x49A\x3\x2\x2\x2\x49E\x49C\x3\x2\x2\x2"+
		"\x49F\x8B\x3\x2\x2\x2\x4A0\x4A2\a\x13\x2\x2\x4A1\x4A3\x5\x90I\x2\x4A2"+
		"\x4A1\x3\x2\x2\x2\x4A2\x4A3\x3\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A5"+
		"\a\x14\x2\x2\x4A5\x8D\x3\x2\x2\x2\x4A6\x4A8\a&\x2\x2\x4A7\x4A9\x5\x90"+
		"I\x2\x4A8\x4A7\x3\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2"+
		"\x4AA\x4AB\a$\x2\x2\x4AB\x8F\x3\x2\x2\x2\x4AC\x4AD\bI\x1\x2\x4AD\x4AE"+
		"\x5X-\x2\x4AE\x4B4\x3\x2\x2\x2\x4AF\x4B0\f\x3\x2\x2\x4B0\x4B1\a\xE\x2"+
		"\x2\x4B1\x4B3\x5X-\x2\x4B2\x4AF\x3\x2\x2\x2\x4B3\x4B6\x3\x2\x2\x2\x4B4"+
		"\x4B2\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x91\x3\x2\x2\x2\x4B6\x4B4"+
		"\x3\x2\x2\x2\x4B7\x4B8\a\x13\x2\x2\x4B8\x4B9\x5X-\x2\x4B9\x4BA\a\xF\x2"+
		"\x2\x4BA\x4BB\x5X-\x2\x4BB\x4BC\a\x14\x2\x2\x4BC\x93\x3\x2\x2\x2\x4BD"+
		"\x4BE\bK\x1\x2\x4BE\x4BF\x5\x96L\x2\x4BF\x4CA\x3\x2\x2\x2\x4C0\x4C1\f"+
		"\x5\x2\x2\x4C1\x4C9\a(\x2\x2\x4C2\x4C3\f\x4\x2\x2\x4C3\x4C4\a\x13\x2\x2"+
		"\x4C4\x4C9\a\x14\x2\x2\x4C5\x4C6\f\x3\x2\x2\x4C6\x4C7\a\x15\x2\x2\x4C7"+
		"\x4C9\a\x16\x2\x2\x4C8\x4C0\x3\x2\x2\x2\x4C8\x4C2\x3\x2\x2\x2\x4C8\x4C5"+
		"\x3\x2\x2\x2\x4C9\x4CC\x3\x2\x2\x2\x4CA\x4C8\x3\x2\x2\x2\x4CA\x4CB\x3"+
		"\x2\x2\x2\x4CB\x95\x3\x2\x2\x2\x4CC\x4CA\x3\x2\x2\x2\x4CD\x4D0\x5\x98"+
		"M\x2\x4CE\x4D0\x5\x9AN\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4CE\x3\x2\x2\x2"+
		"\x4D0\x97\x3\x2\x2\x2\x4D1\x4DC\a\x30\x2\x2\x4D2\x4DC\a\x31\x2\x2\x4D3"+
		"\x4DC\a\x32\x2\x2\x4D4\x4DC\a\x33\x2\x2\x4D5\x4DC\a\x34\x2\x2\x4D6\x4DC"+
		"\a\x35\x2\x2\x4D7\x4DC\a\x37\x2\x2\x4D8\x4DC\a\x36\x2\x2\x4D9\x4DC\a\x38"+
		"\x2\x2\x4DA\x4DC\a:\x2\x2\x4DB\x4D1\x3\x2\x2\x2\x4DB\x4D2\x3\x2\x2\x2"+
		"\x4DB\x4D3\x3\x2\x2\x2\x4DB\x4D4\x3\x2\x2\x2\x4DB\x4D5\x3\x2\x2\x2\x4DB"+
		"\x4D6\x3\x2\x2\x2\x4DB\x4D7\x3\x2\x2\x2\x4DB\x4D8\x3\x2\x2\x2\x4DB\x4D9"+
		"\x3\x2\x2\x2\x4DB\x4DA\x3\x2\x2\x2\x4DC\x99\x3\x2\x2\x2\x4DD\x4DE\a\x8B"+
		"\x2\x2\x4DE\x9B\x3\x2\x2\x2\x4DF\x4E0\a:\x2\x2\x4E0\x9D\x3\x2\x2\x2\x4E1"+
		"\x4E2\a;\x2\x2\x4E2\x9F\x3\x2\x2\x2\x4E3\x4E7\x5\f\a\x2\x4E4\x4E7\x5\x1E"+
		"\x10\x2\x4E5\x4E7\x5\xE\b\x2\x4E6\x4E3\x3\x2\x2\x2\x4E6\x4E4\x3\x2\x2"+
		"\x2\x4E6\x4E5\x3\x2\x2\x2\x4E7\xA1\x3\x2\x2\x2\x4E8\x4E9\bR\x1\x2\x4E9"+
		"\x4EA\x5\xAAV\x2\x4EA\x4F0\x3\x2\x2\x2\x4EB\x4EC\f\x3\x2\x2\x4EC\x4ED"+
		"\a\xE\x2\x2\x4ED\x4EF\x5\xAAV\x2\x4EE\x4EB\x3\x2\x2\x2\x4EF\x4F2\x3\x2"+
		"\x2\x2\x4F0\x4EE\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\xA3\x3\x2\x2\x2"+
		"\x4F2\x4F0\x3\x2\x2\x2\x4F3\x4F6\x5\xA8U\x2\x4F4\x4F6\x5\xAAV\x2\x4F5"+
		"\x4F3\x3\x2\x2\x2\x4F5\x4F4\x3\x2\x2\x2\x4F6\xA5\x3\x2\x2\x2\x4F7\x4FB"+
		"\x5\xA8U\x2\x4F8\x4FB\x5\xAAV\x2\x4F9\x4FB\x5\xACW\x2\x4FA\x4F7\x3\x2"+
		"\x2\x2\x4FA\x4F8\x3\x2\x2\x2\x4FA\x4F9\x3\x2\x2\x2\x4FB\xA7\x3\x2\x2\x2"+
		"\x4FC\x4FD\a\x8C\x2\x2\x4FD\xA9\x3\x2\x2\x2\x4FE\x4FF\a\x8B\x2\x2\x4FF"+
		"\xAB\x3\x2\x2\x2\x500\x501\a\x8A\x2\x2\x501\xAD\x3\x2\x2\x2\x502\x503"+
		"\bX\x1\x2\x503\x504\x5\xB0Y\x2\x504\x50A\x3\x2\x2\x2\x505\x506\f\x3\x2"+
		"\x2\x506\x507\a\xE\x2\x2\x507\x509\x5\xB0Y\x2\x508\x505\x3\x2\x2\x2\x509"+
		"\x50C\x3\x2\x2\x2\x50A\x508\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B\xAF"+
		"\x3\x2\x2\x2\x50C\x50A\x3\x2\x2\x2\x50D\x510\x5\xB6\\\x2\x50E\x510\x5"+
		"\xB2Z\x2\x50F\x50D\x3\x2\x2\x2\x50F\x50E\x3\x2\x2\x2\x510\xB1\x3\x2\x2"+
		"\x2\x511\x514\x5\xB4[\x2\x512\x514\x5\x30\x19\x2\x513\x511\x3\x2\x2\x2"+
		"\x513\x512\x3\x2\x2\x2\x514\xB3\x3\x2\x2\x2\x515\x518\x5\xA8U\x2\x516"+
		"\x517\a)\x2\x2\x517\x519\x5\xECw\x2\x518\x516\x3\x2\x2\x2\x518\x519\x3"+
		"\x2\x2\x2\x519\xB5\x3\x2\x2\x2\x51A\x51B\x5\x9CO\x2\x51B\x51C\x5\xA8U"+
		"\x2\x51C\xB7\x3\x2\x2\x2\x51D\x520\x5\x94K\x2\x51E\x520\x5\xBA^\x2\x51F"+
		"\x51D\x3\x2\x2\x2\x51F\x51E\x3\x2\x2\x2\x520\xB9\x3\x2\x2\x2\x521\x522"+
		"\b^\x1\x2\x522\x523\a@\x2\x2\x523\x52C\x3\x2\x2\x2\x524\x525\f\x4\x2\x2"+
		"\x525\x526\a\x13\x2\x2\x526\x52B\a\x14\x2\x2\x527\x528\f\x3\x2\x2\x528"+
		"\x529\a\x15\x2\x2\x529\x52B\a\x16\x2\x2\x52A\x524\x3\x2\x2\x2\x52A\x527"+
		"\x3\x2\x2\x2\x52B\x52E\x3\x2\x2\x2\x52C\x52A\x3\x2\x2\x2\x52C\x52D\x3"+
		"\x2\x2\x2\x52D\xBB\x3\x2\x2\x2\x52E\x52C\x3\x2\x2\x2\x52F\x530\b_\x1\x2"+
		"\x530\x531\x5\xBE`\x2\x531\x538\x3\x2\x2\x2\x532\x533\f\x3\x2\x2\x533"+
		"\x534\x5\x116\x8C\x2\x534\x535\x5\xBE`\x2\x535\x537\x3\x2\x2\x2\x536\x532"+
		"\x3\x2\x2\x2\x537\x53A\x3\x2\x2\x2\x538\x536\x3\x2\x2\x2\x538\x539\x3"+
		"\x2\x2\x2\x539\xBD\x3\x2\x2\x2\x53A\x538\x3\x2\x2\x2\x53B\x540\x5\x18"+
		"\r\x2\x53C\x540\x5\x1A\xE\x2\x53D\x540\x5\x14\v\x2\x53E\x540\x5\x16\f"+
		"\x2\x53F\x53B\x3\x2\x2\x2\x53F\x53C\x3\x2\x2\x2\x53F\x53D\x3\x2\x2\x2"+
		"\x53F\x53E\x3\x2\x2\x2\x540\xBF\x3\x2\x2\x2\x541\x542\a\x6\x2\x2\x542"+
		"\x54C\x5\x158\xAD\x2\x543\x544\a\a\x2\x2\x544\x54C\x5\x16E\xB8\x2\x545"+
		"\x546\a\b\x2\x2\x546\x54C\x5\xC2\x62\x2\x547\x548\a\t\x2\x2\x548\x54C"+
		"\x5\xC2\x62\x2\x549\x54A\a\n\x2\x2\x54A\x54C\x5\xC8\x65\x2\x54B\x541\x3"+
		"\x2\x2\x2\x54B\x543\x3\x2\x2\x2\x54B\x545\x3\x2\x2\x2\x54B\x547\x3\x2"+
		"\x2\x2\x54B\x549\x3\x2\x2\x2\x54C\xC1\x3\x2\x2\x2\x54D\x54F\x5\xA6T\x2"+
		"\x54E\x550\x5\xC4\x63\x2\x54F\x54E\x3\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550"+
		"\xC3\x3\x2\x2\x2\x551\x552\a[\x2\x2\x552\x553\x5\xC6\x64\x2\x553\x554"+
		"\a\f\x2\x2\x554\x559\x5\xA6T\x2\x555\x556\a\x10\x2\x2\x556\x558\x5\xA6"+
		"T\x2\x557\x555\x3\x2\x2\x2\x558\x55B\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2"+
		"\x559\x55A\x3\x2\x2\x2\x55A\xC5\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55C"+
		"\x55D\a\x8C\x2\x2\x55D\x55E\x6\x64\x30\x3\x55E\xC7\x3\x2\x2\x2\x55F\x561"+
		"\x5\xA6T\x2\x560\x562\x5\xCA\x66\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3"+
		"\x2\x2\x2\x562\xC9\x3\x2\x2\x2\x563\x564\a[\x2\x2\x564\x565\x5\xC6\x64"+
		"\x2\x565\x567\a\f\x2\x2\x566\x568\a!\x2\x2\x567\x566\x3\x2\x2\x2\x567"+
		"\x568\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56E\x5\x12C\x97\x2\x56A"+
		"\x56B\a!\x2\x2\x56B\x56D\x5\x12C\x97\x2\x56C\x56A\x3\x2\x2\x2\x56D\x570"+
		"\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2\x56E\x56F\x3\x2\x2\x2\x56F\x573\x3"+
		"\x2\x2\x2\x570\x56E\x3\x2\x2\x2\x571\x572\a\x10\x2\x2\x572\x574\x5\x12C"+
		"\x97\x2\x573\x571\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\xCB\x3\x2\x2"+
		"\x2\x575\x576\bg\x1\x2\x576\x577\x5\xA8U\x2\x577\x57D\x3\x2\x2\x2\x578"+
		"\x579\f\x3\x2\x2\x579\x57A\a\xE\x2\x2\x57A\x57C\x5\xA8U\x2\x57B\x578\x3"+
		"\x2\x2\x2\x57C\x57F\x3\x2\x2\x2\x57D\x57B\x3\x2\x2\x2\x57D\x57E\x3\x2"+
		"\x2\x2\x57E\xCD\x3\x2\x2\x2\x57F\x57D\x3\x2\x2\x2\x580\x585\x5&\x14\x2"+
		"\x581\x585\x5(\x15\x2\x582\x585\x5*\x16\x2\x583\x585\x5,\x17\x2\x584\x580"+
		"\x3\x2\x2\x2\x584\x581\x3\x2\x2\x2\x584\x582\x3\x2\x2\x2\x584\x583\x3"+
		"\x2\x2\x2\x585\xCF\x3\x2\x2\x2\x586\x587\bi\x1\x2\x587\x588\x5\xD2j\x2"+
		"\x588\x58F\x3\x2\x2\x2\x589\x58A\f\x3\x2\x2\x58A\x58B\x5\x116\x8C\x2\x58B"+
		"\x58C\x5\xD2j\x2\x58C\x58E\x3\x2\x2\x2\x58D\x589\x3\x2\x2\x2\x58E\x591"+
		"\x3\x2\x2\x2\x58F\x58D\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\xD1\x3\x2"+
		"\x2\x2\x591\x58F\x3\x2\x2\x2\x592\x593\a\x6\x2\x2\x593\x59D\x5\x146\xA4"+
		"\x2\x594\x595\a\a\x2\x2\x595\x59D\x5\x15E\xB0\x2\x596\x597\a\b\x2\x2\x597"+
		"\x59D\x5\xD4k\x2\x598\x599\a\t\x2\x2\x599\x59D\x5\xD4k\x2\x59A\x59B\a"+
		"\n\x2\x2\x59B\x59D\x5\xD6l\x2\x59C\x592\x3\x2\x2\x2\x59C\x594\x3\x2\x2"+
		"\x2\x59C\x596\x3\x2\x2\x2\x59C\x598\x3\x2\x2\x2\x59C\x59A\x3\x2\x2\x2"+
		"\x59D\xD3\x3\x2\x2\x2\x59E\x5A0\x5\x12E\x98\x2\x59F\x5A1\a\r\x2\x2\x5A0"+
		"\x59F\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2\x2\x5A1\x5A3\x3\x2\x2\x2\x5A2\x5A4"+
		"\x5\xC4\x63\x2\x5A3\x5A2\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\xD5\x3"+
		"\x2\x2\x2\x5A5\x5A7\x5\x118\x8D\x2\x5A6\x5A8\a\r\x2\x2\x5A7\x5A6\x3\x2"+
		"\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5AA\x3\x2\x2\x2\x5A9\x5AB\x5\xCA\x66"+
		"\x2\x5AA\x5A9\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2\x5AB\xD7\x3\x2\x2\x2\x5AC"+
		"\x5AD\bm\x1\x2\x5AD\x5AE\x5\x34\x1B\x2\x5AE\x5B5\x3\x2\x2\x2\x5AF\x5B0"+
		"\f\x3\x2\x2\x5B0\x5B1\x5\x116\x8C\x2\x5B1\x5B2\x5\x34\x1B\x2\x5B2\x5B4"+
		"\x3\x2\x2\x2\x5B3\x5AF\x3\x2\x2\x2\x5B4\x5B7\x3\x2\x2\x2\x5B5\x5B3\x3"+
		"\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\xD9\x3\x2\x2\x2\x5B7\x5B5\x3\x2\x2"+
		"\x2\x5B8\x5B9\bn\x1\x2\x5B9\x5BA\x5.\x18\x2\x5BA\x5C1\x3\x2\x2\x2\x5BB"+
		"\x5BC\f\x3\x2\x2\x5BC\x5BD\x5\x116\x8C\x2\x5BD\x5BE\x5.\x18\x2\x5BE\x5C0"+
		"\x3\x2\x2\x2\x5BF\x5BB\x3\x2\x2\x2\x5C0\x5C3\x3\x2\x2\x2\x5C1\x5BF\x3"+
		"\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\xDB\x3\x2\x2\x2\x5C3\x5C1\x3\x2\x2"+
		"\x2\x5C4\x5C5\bo\x1\x2\x5C5\x5C6\x5<\x1F\x2\x5C6\x5CD\x3\x2\x2\x2\x5C7"+
		"\x5C8\f\x3\x2\x2\x5C8\x5C9\x5\x116\x8C\x2\x5C9\x5CA\x5<\x1F\x2\x5CA\x5CC"+
		"\x3\x2\x2\x2\x5CB\x5C7\x3\x2\x2\x2\x5CC\x5CF\x3\x2\x2\x2\x5CD\x5CB\x3"+
		"\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\xDD\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2"+
		"\x2\x5D0\x5D1\bp\x1\x2\x5D1\x5D2\x5L\'\x2\x5D2\x5D9\x3\x2\x2\x2\x5D3\x5D4"+
		"\f\x3\x2\x2\x5D4\x5D5\x5\x116\x8C\x2\x5D5\x5D6\x5L\'\x2\x5D6\x5D8\x3\x2"+
		"\x2\x2\x5D7\x5D3\x3\x2\x2\x2\x5D8\x5DB\x3\x2\x2\x2\x5D9\x5D7\x3\x2\x2"+
		"\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\xDF\x3\x2\x2\x2\x5DB\x5D9\x3\x2\x2\x2\x5DC"+
		"\x5DD\a\x13\x2\x2\x5DD\x5DE\x5\xE2r\x2\x5DE\x5DF\a\xF\x2\x2\x5DF\x5E0"+
		"\x5\xE2r\x2\x5E0\x5E1\a\x14\x2\x2\x5E1\x5EB\x3\x2\x2\x2\x5E2\x5E3\a\x13"+
		"\x2\x2\x5E3\x5E4\x5\xE4s\x2\x5E4\x5E5\a\x14\x2\x2\x5E5\x5EB\x3\x2\x2\x2"+
		"\x5E6\x5E7\a&\x2\x2\x5E7\x5E8\x5\xE4s\x2\x5E8\x5E9\a$\x2\x2\x5E9\x5EB"+
		"\x3\x2\x2\x2\x5EA\x5DC\x3\x2\x2\x2\x5EA\x5E2\x3\x2\x2\x2\x5EA\x5E6\x3"+
		"\x2\x2\x2\x5EB\xE1\x3\x2\x2\x2\x5EC\x5FA\a\x88\x2\x2\x5ED\x5FA\a\x89\x2"+
		"\x2\x5EE\x5FA\a\x8E\x2\x2\x5EF\x5FA\a\x8F\x2\x2\x5F0\x5FA\a\x87\x2\x2"+
		"\x5F1\x5FA\a\x93\x2\x2\x5F2\x5FA\a\x92\x2\x2\x5F3\x5FA\a\x8D\x2\x2\x5F4"+
		"\x5FA\a\x90\x2\x2\x5F5\x5FA\a\x91\x2\x2\x5F6\x5FA\a\x86\x2\x2\x5F7\x5FA"+
		"\a\x94\x2\x2\x5F8\x5FA\x5x=\x2\x5F9\x5EC\x3\x2\x2\x2\x5F9\x5ED\x3\x2\x2"+
		"\x2\x5F9\x5EE\x3\x2\x2\x2\x5F9\x5EF\x3\x2\x2\x2\x5F9\x5F0\x3\x2\x2\x2"+
		"\x5F9\x5F1\x3\x2\x2\x2\x5F9\x5F2\x3\x2\x2\x2\x5F9\x5F3\x3\x2\x2\x2\x5F9"+
		"\x5F4\x3\x2\x2\x2\x5F9\x5F5\x3\x2\x2\x2\x5F9\x5F6\x3\x2\x2\x2\x5F9\x5F7"+
		"\x3\x2\x2\x2\x5F9\x5F8\x3\x2\x2\x2\x5FA\xE3\x3\x2\x2\x2\x5FB\x5FC\bs\x1"+
		"\x2\x5FC\x5FD\x5\xE2r\x2\x5FD\x603\x3\x2\x2\x2\x5FE\x5FF\f\x3\x2\x2\x5FF"+
		"\x600\a\xE\x2\x2\x600\x602\x5\xE2r\x2\x601\x5FE\x3\x2\x2\x2\x602\x605"+
		"\x3\x2\x2\x2\x603\x601\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\xE5\x3\x2"+
		"\x2\x2\x605\x603\x3\x2\x2\x2\x606\x60B\x5\xEAv\x2\x607\x60B\x5\xECw\x2"+
		"\x608\x60B\x5\xA6T\x2\x609\x60B\x5\xE8u\x2\x60A\x606\x3\x2\x2\x2\x60A"+
		"\x607\x3\x2\x2\x2\x60A\x608\x3\x2\x2\x2\x60A\x609\x3\x2\x2\x2\x60B\xE7"+
		"\x3\x2\x2\x2\x60C\x60D\t\x3\x2\x2\x60D\xE9\x3\x2\x2\x2\x60E\x60F\a\x11"+
		"\x2\x2\x60F\x610\x5X-\x2\x610\x611\a\x12\x2\x2\x611\xEB\x3\x2\x2\x2\x612"+
		"\x615\x5\xE2r\x2\x613\x615\x5\xEEx\x2\x614\x612\x3\x2\x2\x2\x614\x613"+
		"\x3\x2\x2\x2\x615\xED\x3\x2\x2\x2\x616\x61C\x5\x92J\x2\x617\x61C\x5\x8C"+
		"G\x2\x618\x61C\x5\x8EH\x2\x619\x61C\x5\xF2z\x2\x61A\x61C\x5\xF0y\x2\x61B"+
		"\x616\x3\x2\x2\x2\x61B\x617\x3\x2\x2\x2\x61B\x618\x3\x2\x2\x2\x61B\x619"+
		"\x3\x2\x2\x2\x61B\x61A\x3\x2\x2\x2\x61C\xEF\x3\x2\x2\x2\x61D\x61F\a\x11"+
		"\x2\x2\x61E\x620\x5\xF4{\x2\x61F\x61E\x3\x2\x2\x2\x61F\x620\x3\x2\x2\x2"+
		"\x620\x621\x3\x2\x2\x2\x621\x622\a\x12\x2\x2\x622\xF1\x3\x2\x2\x2\x623"+
		"\x625\a\x15\x2\x2\x624\x626\x5\xF6|\x2\x625\x624\x3\x2\x2\x2\x625\x626"+
		"\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x628\a\x16\x2\x2\x628\xF3\x3\x2"+
		"\x2\x2\x629\x62A\b{\x1\x2\x62A\x62B\x5X-\x2\x62B\x631\x3\x2\x2\x2\x62C"+
		"\x62D\f\x3\x2\x2\x62D\x62E\a\xE\x2\x2\x62E\x630\x5X-\x2\x62F\x62C\x3\x2"+
		"\x2\x2\x630\x633\x3\x2\x2\x2\x631\x62F\x3\x2\x2\x2\x631\x632\x3\x2\x2"+
		"\x2\x632\xF5\x3\x2\x2\x2\x633\x631\x3\x2\x2\x2\x634\x635\b|\x1\x2\x635"+
		"\x636\x5\xF8}\x2\x636\x63C\x3\x2\x2\x2\x637\x638\f\x3\x2\x2\x638\x639"+
		"\a\xE\x2\x2\x639\x63B\x5\xF8}\x2\x63A\x637\x3\x2\x2\x2\x63B\x63E\x3\x2"+
		"\x2\x2\x63C\x63A\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\xF7\x3\x2\x2\x2"+
		"\x63E\x63C\x3\x2\x2\x2\x63F\x640\x5X-\x2\x640\x641\a\f\x2\x2\x641\x642"+
		"\x5X-\x2\x642\xF9\x3\x2\x2\x2\x643\x644\x5X-\x2\x644\x645\a\f\x2\x2\x645"+
		"\x646\x5X-\x2\x646\x64D\x3\x2\x2\x2\x647\x648\x5X-\x2\x648\x649\a\f\x2"+
		"\x2\x649\x64D\x3\x2\x2\x2\x64A\x64B\a\f\x2\x2\x64B\x64D\x5X-\x2\x64C\x643"+
		"\x3\x2\x2\x2\x64C\x647\x3\x2\x2\x2\x64C\x64A\x3\x2\x2\x2\x64D\xFB\x3\x2"+
		"\x2\x2\x64E\x64F\x5\xA8U\x2\x64F\x650\x5\x10A\x86\x2\x650\x651\x5X-\x2"+
		"\x651\xFD\x3\x2\x2\x2\x652\x653\b\x80\x1\x2\x653\x654\x5\xA8U\x2\x654"+
		"\x659\x3\x2\x2\x2\x655\x656\f\x3\x2\x2\x656\x658\x5t;\x2\x657\x655\x3"+
		"\x2\x2\x2\x658\x65B\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x659\x65A\x3\x2"+
		"\x2\x2\x65A\xFF\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65C\x65D\x6\x81;\x3"+
		"\x65D\x65E\a\x8C\x2\x2\x65E\x661\x5\xB8]\x2\x65F\x661\x5X-\x2\x660\x65C"+
		"\x3\x2\x2\x2\x660\x65F\x3\x2\x2\x2\x661\x101\x3\x2\x2\x2\x662\x669\a\x1E"+
		"\x2\x2\x663\x669\a\x1F\x2\x2\x664\x669\x5\x10C\x87\x2\x665\x669\x5\x10E"+
		"\x88\x2\x666\x669\x5\x110\x89\x2\x667\x669\x5\x112\x8A\x2\x668\x662\x3"+
		"\x2\x2\x2\x668\x663\x3\x2\x2\x2\x668\x664\x3\x2\x2\x2\x668\x665\x3\x2"+
		"\x2\x2\x668\x666\x3\x2\x2\x2\x668\x667\x3\x2\x2\x2\x669\x103\x3\x2\x2"+
		"\x2\x66A\x66B\a\x8C\x2\x2\x66B\x66C\x6\x83<\x3\x66C\x105\x3\x2\x2\x2\x66D"+
		"\x66E\a\x8C\x2\x2\x66E\x66F\x6\x84=\x3\x66F\x107\x3\x2\x2\x2\x670\x671"+
		"\a\x8C\x2\x2\x671\x672\x6\x85>\x3\x672\x109\x3\x2\x2\x2\x673\x674\a)\x2"+
		"\x2\x674\x10B\x3\x2\x2\x2\x675\x676\a \x2\x2\x676\x10D\x3\x2\x2\x2\x677"+
		"\x678\a!\x2\x2\x678\x10F\x3\x2\x2\x2\x679\x67A\a\"\x2\x2\x67A\x111\x3"+
		"\x2\x2\x2\x67B\x67C\t\x4\x2\x2\x67C\x113\x3\x2\x2\x2\x67D\x67E\x3\x2\x2"+
		"\x2\x67E\x115\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x117\x3\x2\x2\x2"+
		"\x681\x682\au\x2\x2\x682\x683\x5\x11A\x8E\x2\x683\x684\a\r\x2\x2\x684"+
		"\x689\x3\x2\x2\x2\x685\x686\x5\x11A\x8E\x2\x686\x687\a\r\x2\x2\x687\x689"+
		"\x3\x2\x2\x2\x688\x681\x3\x2\x2\x2\x688\x685\x3\x2\x2\x2\x689\x119\x3"+
		"\x2\x2\x2\x68A\x68B\b\x8E\x1\x2\x68B\x68C\x5\x11C\x8F\x2\x68C\x691\x3"+
		"\x2\x2\x2\x68D\x68E\f\x3\x2\x2\x68E\x690\x5\x11E\x90\x2\x68F\x68D\x3\x2"+
		"\x2\x2\x690\x693\x3\x2\x2\x2\x691\x68F\x3\x2\x2\x2\x691\x692\x3\x2\x2"+
		"\x2\x692\x11B\x3\x2\x2\x2\x693\x691\x3\x2\x2\x2\x694\x698\x5\x126\x94"+
		"\x2\x695\x698\x5\x128\x95\x2\x696\x698\x5\x12A\x96\x2\x697\x694\x3\x2"+
		"\x2\x2\x697\x695\x3\x2\x2\x2\x697\x696\x3\x2\x2\x2\x698\x11D\x3\x2\x2"+
		"\x2\x699\x69A\a\x10\x2\x2\x69A\x69D\x5\x120\x91\x2\x69B\x69D\x5\x124\x93"+
		"\x2\x69C\x699\x3\x2\x2\x2\x69C\x69B\x3\x2\x2\x2\x69D\x11F\x3\x2\x2\x2"+
		"\x69E\x69F\x5\x12C\x97\x2\x69F\x6A1\a\x11\x2\x2\x6A0\x6A2\x5\x122\x92"+
		"\x2\x6A1\x6A0\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2"+
		"\x6A3\x6A4\a\x12\x2\x2\x6A4\x121\x3\x2\x2\x2\x6A5\x6A6\b\x92\x1\x2\x6A6"+
		"\x6A7\x5\x11A\x8E\x2\x6A7\x6AD\x3\x2\x2\x2\x6A8\x6A9\f\x3\x2\x2\x6A9\x6AA"+
		"\a\xE\x2\x2\x6AA\x6AC\x5\x11A\x8E\x2\x6AB\x6A8\x3\x2\x2\x2\x6AC\x6AF\x3"+
		"\x2\x2\x2\x6AD\x6AB\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\x123\x3\x2"+
		"\x2\x2\x6AF\x6AD\x3\x2\x2\x2\x6B0\x6B1\a\x13\x2\x2\x6B1\x6B2\x5\x11A\x8E"+
		"\x2\x6B2\x6B3\a\x14\x2\x2\x6B3\x125\x3\x2\x2\x2\x6B4\x6B5\a\x11\x2\x2"+
		"\x6B5\x6B6\x5\x11A\x8E\x2\x6B6\x6B7\a\x12\x2\x2\x6B7\x127\x3\x2\x2\x2"+
		"\x6B8\x6B9\b\x95\x1\x2\x6B9\x6BA\x5\x12C\x97\x2\x6BA\x6C0\x3\x2\x2\x2"+
		"\x6BB\x6BC\f\x3\x2\x2\x6BC\x6BD\a\x10\x2\x2\x6BD\x6BF\x5\x12C\x97\x2\x6BE"+
		"\x6BB\x3\x2\x2\x2\x6BF\x6C2\x3\x2\x2\x2\x6C0\x6BE\x3\x2\x2\x2\x6C0\x6C1"+
		"\x3\x2\x2\x2\x6C1\x129\x3\x2\x2\x2\x6C2\x6C0\x3\x2\x2\x2\x6C3\x6C9\a\x8E"+
		"\x2\x2\x6C4\x6C9\a\x90\x2\x2\x6C5\x6C9\a\x8D\x2\x2\x6C6\x6C9\a\x86\x2"+
		"\x2\x6C7\x6C9\a\x87\x2\x2\x6C8\x6C3\x3\x2\x2\x2\x6C8\x6C4\x3\x2\x2\x2"+
		"\x6C8\x6C5\x3\x2\x2\x2\x6C8\x6C6\x3\x2\x2\x2\x6C8\x6C7\x3\x2\x2\x2\x6C9"+
		"\x12B\x3\x2\x2\x2\x6CA\x6CB\t\x5\x2\x2\x6CB\x12D\x3\x2\x2\x2\x6CC\x6CD"+
		"\au\x2\x2\x6CD\x6D0\x5\x130\x99\x2\x6CE\x6D0\x5\x130\x99\x2\x6CF\x6CC"+
		"\x3\x2\x2\x2\x6CF\x6CE\x3\x2\x2\x2\x6D0\x12F\x3\x2\x2\x2\x6D1\x6D2\b\x99"+
		"\x1\x2\x6D2\x6D3\x5\x132\x9A\x2\x6D3\x6D8\x3\x2\x2\x2\x6D4\x6D5\f\x3\x2"+
		"\x2\x6D5\x6D7\x5\x134\x9B\x2\x6D6\x6D4\x3\x2\x2\x2\x6D7\x6DA\x3\x2\x2"+
		"\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x131\x3\x2\x2\x2"+
		"\x6DA\x6D8\x3\x2\x2\x2\x6DB\x6E0\x5\x13E\xA0\x2\x6DC\x6E0\x5\x140\xA1"+
		"\x2\x6DD\x6E0\x5\x142\xA2\x2\x6DE\x6E0\x5\x136\x9C\x2\x6DF\x6DB\x3\x2"+
		"\x2\x2\x6DF\x6DC\x3\x2\x2\x2\x6DF\x6DD\x3\x2\x2\x2\x6DF\x6DE\x3\x2\x2"+
		"\x2\x6E0\x133\x3\x2\x2\x2\x6E1\x6E2\a\x10\x2\x2\x6E2\x6E8\x5\x136\x9C"+
		"\x2\x6E3\x6E4\a\x13\x2\x2\x6E4\x6E5\x5\x130\x99\x2\x6E5\x6E6\a\x14\x2"+
		"\x2\x6E6\x6E8\x3\x2\x2\x2\x6E7\x6E1\x3\x2\x2\x2\x6E7\x6E3\x3\x2\x2\x2"+
		"\x6E8\x135\x3\x2\x2\x2\x6E9\x6EA\x5\x144\xA3\x2\x6EA\x6EC\a\x11\x2\x2"+
		"\x6EB\x6ED\x5\x138\x9D\x2\x6EC\x6EB\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2"+
		"\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6EF\a\x12\x2\x2\x6EF\x137\x3\x2\x2\x2\x6F0"+
		"\x6F7\x5\x13A\x9E\x2\x6F1\x6F7\x5\x13C\x9F\x2\x6F2\x6F3\x5\x13A\x9E\x2"+
		"\x6F3\x6F4\a\xE\x2\x2\x6F4\x6F5\x5\x13C\x9F\x2\x6F5\x6F7\x3\x2\x2\x2\x6F6"+
		"\x6F0\x3\x2\x2\x2\x6F6\x6F1\x3\x2\x2\x2\x6F6\x6F2\x3\x2\x2\x2\x6F7\x139"+
		"\x3\x2\x2\x2\x6F8\x6F9\b\x9E\x1\x2\x6F9\x6FA\x5\x130\x99\x2\x6FA\x700"+
		"\x3\x2\x2\x2\x6FB\x6FC\f\x3\x2\x2\x6FC\x6FD\a\xE\x2\x2\x6FD\x6FF\x5\x130"+
		"\x99\x2\x6FE\x6FB\x3\x2\x2\x2\x6FF\x702\x3\x2\x2\x2\x700\x6FE\x3\x2\x2"+
		"\x2\x700\x701\x3\x2\x2\x2\x701\x13B\x3\x2\x2\x2\x702\x700\x3\x2\x2\x2"+
		"\x703\x704\b\x9F\x1\x2\x704\x705\x5\x144\xA3\x2\x705\x706\a)\x2\x2\x706"+
		"\x707\x5\x130\x99\x2\x707\x710\x3\x2\x2\x2\x708\x709\f\x3\x2\x2\x709\x70A"+
		"\a\xE\x2\x2\x70A\x70B\x5\x144\xA3\x2\x70B\x70C\a)\x2\x2\x70C\x70D\x5\x130"+
		"\x99\x2\x70D\x70F\x3\x2\x2\x2\x70E\x708\x3\x2\x2\x2\x70F\x712\x3\x2\x2"+
		"\x2\x710\x70E\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x13D\x3\x2\x2\x2"+
		"\x712\x710\x3\x2\x2\x2\x713\x714\a\x11\x2\x2\x714\x715\x5\x130\x99\x2"+
		"\x715\x716\a\x12\x2\x2\x716\x13F\x3\x2\x2\x2\x717\x718\b\xA1\x1\x2\x718"+
		"\x719\x5\x144\xA3\x2\x719\x71F\x3\x2\x2\x2\x71A\x71B\f\x3\x2\x2\x71B\x71C"+
		"\a\x10\x2\x2\x71C\x71E\x5\x144\xA3\x2\x71D\x71A\x3\x2\x2\x2\x71E\x721"+
		"\x3\x2\x2\x2\x71F\x71D\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x141\x3"+
		"\x2\x2\x2\x721\x71F\x3\x2\x2\x2\x722\x728\a\x8E\x2\x2\x723\x728\a\x90"+
		"\x2\x2\x724\x728\a\x8D\x2\x2\x725\x728\a\x86\x2\x2\x726\x728\a\x87\x2"+
		"\x2\x727\x722\x3\x2\x2\x2\x727\x723\x3\x2\x2\x2\x727\x724\x3\x2\x2\x2"+
		"\x727\x725\x3\x2\x2\x2\x727\x726\x3\x2\x2\x2\x728\x143\x3\x2\x2\x2\x729"+
		"\x72A\t\x5\x2\x2\x72A\x145\x3\x2\x2\x2\x72B\x72C\au\x2\x2\x72C\x72D\x5"+
		"\x148\xA5\x2\x72D\x72E\a\r\x2\x2\x72E\x733\x3\x2\x2\x2\x72F\x730\x5\x148"+
		"\xA5\x2\x730\x731\a\r\x2\x2\x731\x733\x3\x2\x2\x2\x732\x72B\x3\x2\x2\x2"+
		"\x732\x72F\x3\x2\x2\x2\x733\x147\x3\x2\x2\x2\x734\x735\b\xA5\x1\x2\x735"+
		"\x736\x5\x14A\xA6\x2\x736\x73B\x3\x2\x2\x2\x737\x738\f\x3\x2\x2\x738\x73A"+
		"\x5\x14C\xA7\x2\x739\x737\x3\x2\x2\x2\x73A\x73D\x3\x2\x2\x2\x73B\x739"+
		"\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x149\x3\x2\x2\x2\x73D\x73B\x3"+
		"\x2\x2\x2\x73E\x742\x5\x154\xAB\x2\x73F\x742\x5\x156\xAC\x2\x740\x742"+
		"\x5\x15A\xAE\x2\x741\x73E\x3\x2\x2\x2\x741\x73F\x3\x2\x2\x2\x741\x740"+
		"\x3\x2\x2\x2\x742\x14B\x3\x2\x2\x2\x743\x744\a\x10\x2\x2\x744\x747\x5"+
		"\x14E\xA8\x2\x745\x747\x5\x152\xAA\x2\x746\x743\x3\x2\x2\x2\x746\x745"+
		"\x3\x2\x2\x2\x747\x14D\x3\x2\x2\x2\x748\x749\x5\x15C\xAF\x2\x749\x74B"+
		"\a\x11\x2\x2\x74A\x74C\x5\x150\xA9\x2\x74B\x74A\x3\x2\x2\x2\x74B\x74C"+
		"\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\a\x12\x2\x2\x74E\x14F\x3"+
		"\x2\x2\x2\x74F\x750\b\xA9\x1\x2\x750\x751\x5\x148\xA5\x2\x751\x757\x3"+
		"\x2\x2\x2\x752\x753\f\x3\x2\x2\x753\x754\a\xE\x2\x2\x754\x756\x5\x148"+
		"\xA5\x2\x755\x752\x3\x2\x2\x2\x756\x759\x3\x2\x2\x2\x757\x755\x3\x2\x2"+
		"\x2\x757\x758\x3\x2\x2\x2\x758\x151\x3\x2\x2\x2\x759\x757\x3\x2\x2\x2"+
		"\x75A\x75B\a\x13\x2\x2\x75B\x75C\x5\x148\xA5\x2\x75C\x75D\a\x14\x2\x2"+
		"\x75D\x153\x3\x2\x2\x2\x75E\x75F\a\x11\x2\x2\x75F\x760\x5\x148\xA5\x2"+
		"\x760\x761\a\x12\x2\x2\x761\x155\x3\x2\x2\x2\x762\x763\b\xAC\x1\x2\x763"+
		"\x764\x5\x15C\xAF\x2\x764\x76A\x3\x2\x2\x2\x765\x766\f\x3\x2\x2\x766\x767"+
		"\a\x10\x2\x2\x767\x769\x5\x15C\xAF\x2\x768\x765\x3\x2\x2\x2\x769\x76C"+
		"\x3\x2\x2\x2\x76A\x768\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x157\x3"+
		"\x2\x2\x2\x76C\x76A\x3\x2\x2\x2\x76D\x76E\b\xAD\x1\x2\x76E\x76F\x5\x156"+
		"\xAC\x2\x76F\x775\x3\x2\x2\x2\x770\x771\f\x3\x2\x2\x771\x772\a\x19\x2"+
		"\x2\x772\x774\a\x8B\x2\x2\x773\x770\x3\x2\x2\x2\x774\x777\x3\x2\x2\x2"+
		"\x775\x773\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x159\x3\x2\x2\x2\x777"+
		"\x775\x3\x2\x2\x2\x778\x77E\a\x8E\x2\x2\x779\x77E\a\x90\x2\x2\x77A\x77E"+
		"\a\x8D\x2\x2\x77B\x77E\a\x86\x2\x2\x77C\x77E\a\x87\x2\x2\x77D\x778\x3"+
		"\x2\x2\x2\x77D\x779\x3\x2\x2\x2\x77D\x77A\x3\x2\x2\x2\x77D\x77B\x3\x2"+
		"\x2\x2\x77D\x77C\x3\x2\x2\x2\x77E\x15B\x3\x2\x2\x2\x77F\x780\t\x5\x2\x2"+
		"\x780\x15D\x3\x2\x2\x2\x781\x782\au\x2\x2\x782\x783\x5\x160\xB1\x2\x783"+
		"\x784\a\r\x2\x2\x784\x789\x3\x2\x2\x2\x785\x786\x5\x160\xB1\x2\x786\x787"+
		"\a\r\x2\x2\x787\x789\x3\x2\x2\x2\x788\x781\x3\x2\x2\x2\x788\x785\x3\x2"+
		"\x2\x2\x789\x15F\x3\x2\x2\x2\x78A\x78B\b\xB1\x1\x2\x78B\x78C\x5\x162\xB2"+
		"\x2\x78C\x791\x3\x2\x2\x2\x78D\x78E\f\x3\x2\x2\x78E\x790\x5\x164\xB3\x2"+
		"\x78F\x78D\x3\x2\x2\x2\x790\x793\x3\x2\x2\x2\x791\x78F\x3\x2\x2\x2\x791"+
		"\x792\x3\x2\x2\x2\x792\x161\x3\x2\x2\x2\x793\x791\x3\x2\x2\x2\x794\x798"+
		"\x5\x16C\xB7\x2\x795\x798\x5\x16E\xB8\x2\x796\x798\x5\x170\xB9\x2\x797"+
		"\x794\x3\x2\x2\x2\x797\x795\x3\x2\x2\x2\x797\x796\x3\x2\x2\x2\x798\x163"+
		"\x3\x2\x2\x2\x799\x79A\a\x10\x2\x2\x79A\x79D\x5\x166\xB4\x2\x79B\x79D"+
		"\x5\x16A\xB6\x2\x79C\x799\x3\x2\x2\x2\x79C\x79B\x3\x2\x2\x2\x79D\x165"+
		"\x3\x2\x2\x2\x79E\x79F\x5\x172\xBA\x2\x79F\x7A1\a\x11\x2\x2\x7A0\x7A2"+
		"\x5\x168\xB5\x2\x7A1\x7A0\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7A3"+
		"\x3\x2\x2\x2\x7A3\x7A4\a\x12\x2\x2\x7A4\x167\x3\x2\x2\x2\x7A5\x7A6\b\xB5"+
		"\x1\x2\x7A6\x7A7\x5\x160\xB1\x2\x7A7\x7AD\x3\x2\x2\x2\x7A8\x7A9\f\x3\x2"+
		"\x2\x7A9\x7AA\a\xE\x2\x2\x7AA\x7AC\x5\x160\xB1\x2\x7AB\x7A8\x3\x2\x2\x2"+
		"\x7AC\x7AF\x3\x2\x2\x2\x7AD\x7AB\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE"+
		"\x169\x3\x2\x2\x2\x7AF\x7AD\x3\x2\x2\x2\x7B0\x7B1\a\x13\x2\x2\x7B1\x7B2"+
		"\x5\x160\xB1\x2\x7B2\x7B3\a\x14\x2\x2\x7B3\x16B\x3\x2\x2\x2\x7B4\x7B5"+
		"\a\x11\x2\x2\x7B5\x7B6\x5\x160\xB1\x2\x7B6\x7B7\a\x12\x2\x2\x7B7\x16D"+
		"\x3\x2\x2\x2\x7B8\x7B9\b\xB8\x1\x2\x7B9\x7BA\x5\x172\xBA\x2\x7BA\x7C0"+
		"\x3\x2\x2\x2\x7BB\x7BC\f\x3\x2\x2\x7BC\x7BD\a\x10\x2\x2\x7BD\x7BF\x5\x172"+
		"\xBA\x2\x7BE\x7BB\x3\x2\x2\x2\x7BF\x7C2\x3\x2\x2\x2\x7C0\x7BE\x3\x2\x2"+
		"\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x16F\x3\x2\x2\x2\x7C2\x7C0\x3\x2\x2\x2"+
		"\x7C3\x7C9\a\x8E\x2\x2\x7C4\x7C9\a\x90\x2\x2\x7C5\x7C9\a\x8D\x2\x2\x7C6"+
		"\x7C9\a\x86\x2\x2\x7C7\x7C9\a\x87\x2\x2\x7C8\x7C3\x3\x2\x2\x2\x7C8\x7C4"+
		"\x3\x2\x2\x2\x7C8\x7C5\x3\x2\x2\x2\x7C8\x7C6\x3\x2\x2\x2\x7C8\x7C7\x3"+
		"\x2\x2\x2\x7C9\x171\x3\x2\x2\x2\x7CA\x7CB\t\x5\x2\x2\x7CB\x173\x3\x2\x2"+
		"\x2\xA6\x17B\x17F\x19E\x1A8\x1AC\x1B6\x1C2\x1C8\x1CB\x1CE\x1D4\x1D9\x1DE"+
		"\x1E7\x1EF\x1F7\x202\x20F\x225\x230\x235\x23B\x241\x247\x24C\x251\x258"+
		"\x26F\x279\x27E\x285\x287\x29A\x2B1\x2B3\x2BB\x2C2\x2C4\x2CC\x2D6\x2EB"+
		"\x2EF\x303\x310\x314\x31C\x31F\x324\x327\x32F\x33A\x33E\x342\x349\x352"+
		"\x35B\x364\x37D\x3DA\x3DC\x3E8\x3F1\x414\x422\x427\x430\x437\x449\x453"+
		"\x461\x469\x46F\x47A\x486\x491\x49E\x4A2\x4A8\x4B4\x4C8\x4CA\x4CF\x4DB"+
		"\x4E6\x4F0\x4F5\x4FA\x50A\x50F\x513\x518\x51F\x52A\x52C\x538\x53F\x54B"+
		"\x54F\x559\x561\x567\x56E\x573\x57D\x584\x58F\x59C\x5A0\x5A3\x5A7\x5AA"+
		"\x5B5\x5C1\x5CD\x5D9\x5EA\x5F9\x603\x60A\x614\x61B\x61F\x625\x631\x63C"+
		"\x64C\x659\x660\x668\x688\x691\x697\x69C\x6A1\x6AD\x6C0\x6C8\x6CF\x6D8"+
		"\x6DF\x6E7\x6EC\x6F6\x700\x710\x71F\x727\x732\x73B\x741\x746\x74B\x757"+
		"\x76A\x775\x77D\x788\x791\x797\x79C\x7A1\x7AD\x7C0\x7C8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace presto.parser
