//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace presto.parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="OParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public interface IOParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_category_declaration([NotNull] OParser.Enum_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.enum_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_category_declaration([NotNull] OParser.Enum_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_native_declaration([NotNull] OParser.Enum_native_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.enum_native_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_native_declaration([NotNull] OParser.Enum_native_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_symbol([NotNull] OParser.Category_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.category_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_symbol([NotNull] OParser.Category_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_symbol([NotNull] OParser.Native_symbolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.native_symbol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_symbol([NotNull] OParser.Native_symbolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_declaration([NotNull] OParser.Attribute_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.attribute_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_declaration([NotNull] OParser.Attribute_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_category_declaration([NotNull] OParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.concrete_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_category_declaration([NotNull] OParser.Concrete_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleton_category_declaration([NotNull] OParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.singleton_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleton_category_declaration([NotNull] OParser.Singleton_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DerivedList</c>
	/// labeled alternative in <see cref="OParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedList([NotNull] OParser.DerivedListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DerivedList</c>
	/// labeled alternative in <see cref="OParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedList([NotNull] OParser.DerivedListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DerivedListItem</c>
	/// labeled alternative in <see cref="OParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDerivedListItem([NotNull] OParser.DerivedListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DerivedListItem</c>
	/// labeled alternative in <see cref="OParser.derived_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDerivedListItem([NotNull] OParser.DerivedListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyCategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.category_method_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyCategoryMethodList([NotNull] OParser.EmptyCategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyCategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.category_method_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyCategoryMethodList([NotNull] OParser.EmptyCategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CurlyCategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.category_method_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCurlyCategoryMethodList([NotNull] OParser.CurlyCategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CurlyCategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.category_method_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCurlyCategoryMethodList([NotNull] OParser.CurlyCategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator_method_declaration([NotNull] OParser.Operator_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.operator_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator_method_declaration([NotNull] OParser.Operator_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter_method_declaration([NotNull] OParser.Setter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.setter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter_method_declaration([NotNull] OParser.Setter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter_method_declaration([NotNull] OParser.Getter_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.getter_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter_method_declaration([NotNull] OParser.Getter_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_resource_declaration([NotNull] OParser.Native_resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.native_resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_resource_declaration([NotNull] OParser.Native_resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_declaration([NotNull] OParser.Native_category_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.native_category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_declaration([NotNull] OParser.Native_category_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.native_category_mappings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_category_mappings([NotNull] OParser.Native_category_mappingsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.native_category_mappings"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_category_mappings([NotNull] OParser.Native_category_mappingsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMappingList</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMappingList([NotNull] OParser.NativeCategoryMappingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMappingList</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMappingList([NotNull] OParser.NativeCategoryMappingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryMappingListItem</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryMappingListItem([NotNull] OParser.NativeCategoryMappingListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryMappingListItem</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryMappingListItem([NotNull] OParser.NativeCategoryMappingListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeListItem</c>
	/// labeled alternative in <see cref="OParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeListItem([NotNull] OParser.AttributeListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeListItem</c>
	/// labeled alternative in <see cref="OParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeListItem([NotNull] OParser.AttributeListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeList</c>
	/// labeled alternative in <see cref="OParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeList([NotNull] OParser.AttributeListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeList</c>
	/// labeled alternative in <see cref="OParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeList([NotNull] OParser.AttributeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method_declaration([NotNull] OParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.abstract_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method_declaration([NotNull] OParser.Abstract_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcrete_method_declaration([NotNull] OParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.concrete_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcrete_method_declaration([NotNull] OParser.Concrete_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNative_method_declaration([NotNull] OParser.Native_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.native_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNative_method_declaration([NotNull] OParser.Native_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTest_method_declaration([NotNull] OParser.Test_method_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.test_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTest_method_declaration([NotNull] OParser.Test_method_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] OParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] OParser.AssertionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyped_argument([NotNull] OParser.Typed_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.typed_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyped_argument([NotNull] OParser.Typed_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingleStatement</c>
	/// labeled alternative in <see cref="OParser.statement_or_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleStatement([NotNull] OParser.SingleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleStatement</c>
	/// labeled alternative in <see cref="OParser.statement_or_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleStatement([NotNull] OParser.SingleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CurlyStatementList</c>
	/// labeled alternative in <see cref="OParser.statement_or_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCurlyStatementList([NotNull] OParser.CurlyStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CurlyStatementList</c>
	/// labeled alternative in <see cref="OParser.statement_or_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCurlyStatementList([NotNull] OParser.CurlyStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallStatement([NotNull] OParser.MethodCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallStatement([NotNull] OParser.MethodCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignInstanceStatement([NotNull] OParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignInstanceStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignInstanceStatement([NotNull] OParser.AssignInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignTupleStatement([NotNull] OParser.AssignTupleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignTupleStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignTupleStatement([NotNull] OParser.AssignTupleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] OParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] OParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] OParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] OParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] OParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] OParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] OParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForEachStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] OParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] OParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] OParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] OParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoWhileStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] OParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] OParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] OParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaiseStatement([NotNull] OParser.RaiseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RaiseStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaiseStatement([NotNull] OParser.RaiseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] OParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] OParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithResourceStatement([NotNull] OParser.WithResourceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithResourceStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithResourceStatement([NotNull] OParser.WithResourceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithSingletonStatement([NotNull] OParser.WithSingletonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WithSingletonStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithSingletonStatement([NotNull] OParser.WithSingletonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureStatement([NotNull] OParser.ClosureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureStatement</c>
	/// labeled alternative in <see cref="OParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureStatement([NotNull] OParser.ClosureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_resource_statement([NotNull] OParser.With_resource_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.with_resource_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_resource_statement([NotNull] OParser.With_resource_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_singleton_statement([NotNull] OParser.With_singleton_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.with_singleton_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_singleton_statement([NotNull] OParser.With_singleton_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] OParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] OParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicSwitchCase([NotNull] OParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicSwitchCase</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicSwitchCase([NotNull] OParser.AtomicSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionSwitchCase([NotNull] OParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionSwitchCase</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionSwitchCase([NotNull] OParser.CollectionSwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_each_statement([NotNull] OParser.For_each_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.for_each_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_each_statement([NotNull] OParser.For_each_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] OParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] OParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] OParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] OParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] OParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] OParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="OParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementList([NotNull] OParser.ElseIfStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementList</c>
	/// labeled alternative in <see cref="OParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementList([NotNull] OParser.ElseIfStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="OParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatementListItem([NotNull] OParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseIfStatementListItem</c>
	/// labeled alternative in <see cref="OParser.else_if_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatementListItem([NotNull] OParser.ElseIfStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRaise_statement([NotNull] OParser.Raise_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.raise_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRaise_statement([NotNull] OParser.Raise_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] OParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] OParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="OParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchAtomicStatement([NotNull] OParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchAtomicStatement</c>
	/// labeled alternative in <see cref="OParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchAtomicStatement([NotNull] OParser.CatchAtomicStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="OParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchCollectionStatement([NotNull] OParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchCollectionStatement</c>
	/// labeled alternative in <see cref="OParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchCollectionStatement([NotNull] OParser.CatchCollectionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] OParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] OParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call([NotNull] OParser.Method_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call([NotNull] OParser.Method_callContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="OParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodName([NotNull] OParser.MethodNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodName</c>
	/// labeled alternative in <see cref="OParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodName([NotNull] OParser.MethodNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="OParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodParent([NotNull] OParser.MethodParentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodParent</c>
	/// labeled alternative in <see cref="OParser.method_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodParent([NotNull] OParser.MethodParentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="OParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableRoot([NotNull] OParser.CallableRootContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableRoot</c>
	/// labeled alternative in <see cref="OParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableRoot([NotNull] OParser.CallableRootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="OParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableSelector([NotNull] OParser.CallableSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableSelector</c>
	/// labeled alternative in <see cref="OParser.callable_parent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableSelector([NotNull] OParser.CallableSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="OParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableMemberSelector([NotNull] OParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableMemberSelector</c>
	/// labeled alternative in <see cref="OParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableMemberSelector([NotNull] OParser.CallableMemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="OParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallableItemSelector([NotNull] OParser.CallableItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallableItemSelector</c>
	/// labeled alternative in <see cref="OParser.callable_selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallableItemSelector([NotNull] OParser.CallableItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] OParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClosureExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] OParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] OParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] OParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAnyExpression([NotNull] OParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAnyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAnyExpression([NotNull] OParser.NotContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDivideExpression([NotNull] OParser.IntDivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntDivideExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDivideExpression([NotNull] OParser.IntDivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsExpression([NotNull] OParser.EqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsExpression([NotNull] OParser.EqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] OParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] OParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoughlyEqualsExpression([NotNull] OParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RoughlyEqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoughlyEqualsExpression([NotNull] OParser.RoughlyEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsExpression([NotNull] OParser.ContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsExpression([NotNull] OParser.ContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeExpression([NotNull] OParser.CodeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeExpression([NotNull] OParser.CodeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsExpression([NotNull] OParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsExpression([NotNull] OParser.NotEqualsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] OParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] OParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] OParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] OParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceExpression([NotNull] OParser.InstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceExpression([NotNull] OParser.InstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] OParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] OParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodExpression([NotNull] OParser.MethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodExpression([NotNull] OParser.MethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpression([NotNull] OParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpression([NotNull] OParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] OParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] OParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] OParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] OParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpression([NotNull] OParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpression([NotNull] OParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsAllExpression([NotNull] OParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsAllExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsAllExpression([NotNull] OParser.NotContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpression([NotNull] OParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpression([NotNull] OParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] OParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] OParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] OParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] OParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] OParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivideExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] OParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAllExpression([NotNull] OParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAllExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAllExpression([NotNull] OParser.ContainsAllExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecuteExpression([NotNull] OParser.ExecuteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExecuteExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecuteExpression([NotNull] OParser.ExecuteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotContainsExpression([NotNull] OParser.NotContainsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotContainsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotContainsExpression([NotNull] OParser.NotContainsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotInExpression([NotNull] OParser.NotInExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotInExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotInExpression([NotNull] OParser.NotInExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpression([NotNull] OParser.LessThanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpression([NotNull] OParser.LessThanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainsAnyExpression([NotNull] OParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContainsAnyExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainsAnyExpression([NotNull] OParser.ContainsAnyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsExpression([NotNull] OParser.IsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsExpression([NotNull] OParser.IsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] OParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinusExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] OParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotExpression([NotNull] OParser.IsNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotExpression</c>
	/// labeled alternative in <see cref="OParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotExpression([NotNull] OParser.IsNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosure_expression([NotNull] OParser.Closure_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.closure_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosure_expression([NotNull] OParser.Closure_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="OParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectableExpression([NotNull] OParser.SelectableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectableExpression</c>
	/// labeled alternative in <see cref="OParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectableExpression([NotNull] OParser.SelectableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="OParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorExpression([NotNull] OParser.SelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelectorExpression</c>
	/// labeled alternative in <see cref="OParser.instance_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorExpression([NotNull] OParser.SelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocumentExpression([NotNull] OParser.DocumentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DocumentExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocumentExpression([NotNull] OParser.DocumentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetchExpression([NotNull] OParser.FetchExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FetchExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetchExpression([NotNull] OParser.FetchExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadExpression([NotNull] OParser.ReadExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadExpression([NotNull] OParser.ReadExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSortedExpression([NotNull] OParser.SortedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SortedExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSortedExpression([NotNull] OParser.SortedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCallExpression([NotNull] OParser.MethodCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCallExpression([NotNull] OParser.MethodCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorExpression([NotNull] OParser.ConstructorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorExpression</c>
	/// labeled alternative in <see cref="OParser.method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorExpression([NotNull] OParser.ConstructorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_expression([NotNull] OParser.Document_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.document_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_expression([NotNull] OParser.Document_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRead_expression([NotNull] OParser.Read_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.read_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRead_expression([NotNull] OParser.Read_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWrite_statement([NotNull] OParser.Write_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.write_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWrite_statement([NotNull] OParser.Write_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFetch_expression([NotNull] OParser.Fetch_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.fetch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFetch_expression([NotNull] OParser.Fetch_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSorted_expression([NotNull] OParser.Sorted_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.sorted_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSorted_expression([NotNull] OParser.Sorted_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberSelector([NotNull] OParser.MemberSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberSelector([NotNull] OParser.MemberSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemSelector([NotNull] OParser.ItemSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemSelector([NotNull] OParser.ItemSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceSelector([NotNull] OParser.SliceSelectorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceSelector</c>
	/// labeled alternative in <see cref="OParser.selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceSelector([NotNull] OParser.SliceSelectorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor_expression([NotNull] OParser.Constructor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.constructor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor_expression([NotNull] OParser.Constructor_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentList([NotNull] OParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentList</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentList([NotNull] OParser.ArgumentAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAssignmentList([NotNull] OParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionAssignmentList</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAssignmentList([NotNull] OParser.ExpressionAssignmentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentAssignmentListItem([NotNull] OParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentAssignmentListItem</c>
	/// labeled alternative in <see cref="OParser.argument_assignment_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentAssignmentListItem([NotNull] OParser.ArgumentAssignmentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_assignment([NotNull] OParser.Argument_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.argument_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_assignment([NotNull] OParser.Argument_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_instance_statement([NotNull] OParser.Assign_instance_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.assign_instance_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_instance_statement([NotNull] OParser.Assign_instance_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="OParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInstance([NotNull] OParser.MemberInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberInstance</c>
	/// labeled alternative in <see cref="OParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInstance([NotNull] OParser.MemberInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="OParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterItemInstance([NotNull] OParser.ItemInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ItemInstance</c>
	/// labeled alternative in <see cref="OParser.child_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitItemInstance([NotNull] OParser.ItemInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_tuple_statement([NotNull] OParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.assign_tuple_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_tuple_statement([NotNull] OParser.Assign_tuple_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_literal([NotNull] OParser.Null_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.null_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_literal([NotNull] OParser.Null_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="OParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullDeclarationList([NotNull] OParser.FullDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FullDeclarationList</c>
	/// labeled alternative in <see cref="OParser.declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullDeclarationList([NotNull] OParser.FullDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="OParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationListItem([NotNull] OParser.DeclarationListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationListItem</c>
	/// labeled alternative in <see cref="OParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationListItem([NotNull] OParser.DeclarationListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="OParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationList([NotNull] OParser.DeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclarationList</c>
	/// labeled alternative in <see cref="OParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationList([NotNull] OParser.DeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AttributeDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributeDeclaration([NotNull] OParser.AttributeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AttributeDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributeDeclaration([NotNull] OParser.AttributeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryDeclaration([NotNull] OParser.CategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryDeclaration([NotNull] OParser.CategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ResourceDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResourceDeclaration([NotNull] OParser.ResourceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ResourceDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResourceDeclaration([NotNull] OParser.ResourceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDeclaration([NotNull] OParser.EnumDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDeclaration([NotNull] OParser.EnumDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] OParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="OParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] OParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_declaration([NotNull] OParser.Resource_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.resource_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_declaration([NotNull] OParser.Resource_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumCategoryDeclaration([NotNull] OParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumCategoryDeclaration([NotNull] OParser.EnumCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="OParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumNativeDeclaration([NotNull] OParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EnumNativeDeclaration</c>
	/// labeled alternative in <see cref="OParser.enum_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumNativeDeclaration([NotNull] OParser.EnumNativeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="OParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolList([NotNull] OParser.NativeSymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolList</c>
	/// labeled alternative in <see cref="OParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolList([NotNull] OParser.NativeSymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="OParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeSymbolListItem([NotNull] OParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeSymbolListItem</c>
	/// labeled alternative in <see cref="OParser.native_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeSymbolListItem([NotNull] OParser.NativeSymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="OParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolListItem([NotNull] OParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolListItem</c>
	/// labeled alternative in <see cref="OParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolListItem([NotNull] OParser.CategorySymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="OParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategorySymbolList([NotNull] OParser.CategorySymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategorySymbolList</c>
	/// labeled alternative in <see cref="OParser.category_symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategorySymbolList([NotNull] OParser.CategorySymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="OParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolList([NotNull] OParser.SymbolListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolList</c>
	/// labeled alternative in <see cref="OParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolList([NotNull] OParser.SymbolListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="OParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolListItem([NotNull] OParser.SymbolListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolListItem</c>
	/// labeled alternative in <see cref="OParser.symbol_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolListItem([NotNull] OParser.SymbolListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingList([NotNull] OParser.MatchingListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingList</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingList([NotNull] OParser.MatchingListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingSet([NotNull] OParser.MatchingSetContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingSet</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingSet([NotNull] OParser.MatchingSetContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingRange([NotNull] OParser.MatchingRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingRange</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingRange([NotNull] OParser.MatchingRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingPattern([NotNull] OParser.MatchingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingPattern</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingPattern([NotNull] OParser.MatchingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchingExpression([NotNull] OParser.MatchingExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatchingExpression</c>
	/// labeled alternative in <see cref="OParser.attribute_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchingExpression([NotNull] OParser.MatchingExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_literal([NotNull] OParser.List_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_literal([NotNull] OParser.List_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_literal([NotNull] OParser.Set_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.set_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_literal([NotNull] OParser.Set_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="OParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueListItem([NotNull] OParser.ValueListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueListItem</c>
	/// labeled alternative in <see cref="OParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueListItem([NotNull] OParser.ValueListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="OParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueList([NotNull] OParser.ValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueList</c>
	/// labeled alternative in <see cref="OParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueList([NotNull] OParser.ValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_literal([NotNull] OParser.Range_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.range_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_literal([NotNull] OParser.Range_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] OParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] OParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryType([NotNull] OParser.PrimaryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrimaryType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryType([NotNull] OParser.PrimaryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictType([NotNull] OParser.DictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictType([NotNull] OParser.DictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] OParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetType</c>
	/// labeled alternative in <see cref="OParser.typedef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] OParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="OParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] OParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeType</c>
	/// labeled alternative in <see cref="OParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] OParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="OParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryType([NotNull] OParser.CategoryTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryType</c>
	/// labeled alternative in <see cref="OParser.primary_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryType([NotNull] OParser.CategoryTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanType([NotNull] OParser.BooleanTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanType([NotNull] OParser.BooleanTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterType([NotNull] OParser.CharacterTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterType([NotNull] OParser.CharacterTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextType([NotNull] OParser.TextTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextType([NotNull] OParser.TextTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerType([NotNull] OParser.IntegerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerType([NotNull] OParser.IntegerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalType([NotNull] OParser.DecimalTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalType([NotNull] OParser.DecimalTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateType([NotNull] OParser.DateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateType([NotNull] OParser.DateTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeType([NotNull] OParser.DateTimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeType([NotNull] OParser.DateTimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeType([NotNull] OParser.TimeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeType([NotNull] OParser.TimeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodType([NotNull] OParser.PeriodTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodType([NotNull] OParser.PeriodTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeType([NotNull] OParser.CodeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeType</c>
	/// labeled alternative in <see cref="OParser.native_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeType([NotNull] OParser.CodeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategory_type([NotNull] OParser.Category_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.category_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategory_type([NotNull] OParser.Category_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_type([NotNull] OParser.Code_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.code_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_type([NotNull] OParser.Code_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.document_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument_type([NotNull] OParser.Document_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.document_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument_type([NotNull] OParser.Document_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteCategoryDeclaration([NotNull] OParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteCategoryDeclaration([NotNull] OParser.ConcreteCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeCategoryDeclaration([NotNull] OParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeCategoryDeclaration([NotNull] OParser.NativeCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingletonCategoryDeclaration([NotNull] OParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingletonCategoryDeclaration</c>
	/// labeled alternative in <see cref="OParser.category_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingletonCategoryDeclaration([NotNull] OParser.SingletonCategoryDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="OParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierListItem([NotNull] OParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierListItem</c>
	/// labeled alternative in <see cref="OParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierListItem([NotNull] OParser.TypeIdentifierListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="OParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifierList([NotNull] OParser.TypeIdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifierList</c>
	/// labeled alternative in <see cref="OParser.type_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifierList([NotNull] OParser.TypeIdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="OParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodVariableIdentifier([NotNull] OParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodVariableIdentifier</c>
	/// labeled alternative in <see cref="OParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodVariableIdentifier([NotNull] OParser.MethodVariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="OParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodTypeIdentifier([NotNull] OParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodTypeIdentifier</c>
	/// labeled alternative in <see cref="OParser.method_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodTypeIdentifier([NotNull] OParser.MethodTypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableIdentifier([NotNull] OParser.VariableIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableIdentifier([NotNull] OParser.VariableIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] OParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] OParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbolIdentifier([NotNull] OParser.SymbolIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SymbolIdentifier</c>
	/// labeled alternative in <see cref="OParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbolIdentifier([NotNull] OParser.SymbolIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_identifier([NotNull] OParser.Variable_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.variable_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_identifier([NotNull] OParser.Variable_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_identifier([NotNull] OParser.Type_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.type_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_identifier([NotNull] OParser.Type_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbol_identifier([NotNull] OParser.Symbol_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.symbol_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbol_identifier([NotNull] OParser.Symbol_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentListItem([NotNull] OParser.ArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentListItem([NotNull] OParser.ArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="OParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] OParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentList</c>
	/// labeled alternative in <see cref="OParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] OParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="OParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeArgument([NotNull] OParser.CodeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CodeArgument</c>
	/// labeled alternative in <see cref="OParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeArgument([NotNull] OParser.CodeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="OParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorArgument([NotNull] OParser.OperatorArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorArgument</c>
	/// labeled alternative in <see cref="OParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorArgument([NotNull] OParser.OperatorArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="OParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedArgument([NotNull] OParser.NamedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NamedArgument</c>
	/// labeled alternative in <see cref="OParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedArgument([NotNull] OParser.NamedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="OParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypedArgument([NotNull] OParser.TypedArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypedArgument</c>
	/// labeled alternative in <see cref="OParser.operator_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypedArgument([NotNull] OParser.TypedArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_argument([NotNull] OParser.Named_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.named_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_argument([NotNull] OParser.Named_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode_argument([NotNull] OParser.Code_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.code_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode_argument([NotNull] OParser.Code_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="OParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryArgumentType([NotNull] OParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryArgumentType</c>
	/// labeled alternative in <see cref="OParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryArgumentType([NotNull] OParser.CategoryArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="OParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyArgumentType([NotNull] OParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyArgumentType</c>
	/// labeled alternative in <see cref="OParser.category_or_any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyArgumentType([NotNull] OParser.AnyArgumentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyType([NotNull] OParser.AnyTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyType([NotNull] OParser.AnyTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyListType([NotNull] OParser.AnyListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyListType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyListType([NotNull] OParser.AnyListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnyDictType([NotNull] OParser.AnyDictTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AnyDictType</c>
	/// labeled alternative in <see cref="OParser.any_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnyDictType([NotNull] OParser.AnyDictTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodListItem([NotNull] OParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodListItem</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodListItem([NotNull] OParser.CategoryMethodListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCategoryMethodList([NotNull] OParser.CategoryMethodListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CategoryMethodList</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCategoryMethodList([NotNull] OParser.CategoryMethodListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetterMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetterMemberMethod([NotNull] OParser.SetterMemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetterMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetterMemberMethod([NotNull] OParser.SetterMemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GetterMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetterMemberMethod([NotNull] OParser.GetterMemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GetterMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetterMemberMethod([NotNull] OParser.GetterMemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteMemberMethod([NotNull] OParser.ConcreteMemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteMemberMethod([NotNull] OParser.ConcreteMemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractMemberMethod([NotNull] OParser.AbstractMemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractMemberMethod([NotNull] OParser.AbstractMemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMemberMethod([NotNull] OParser.OperatorMemberMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMemberMethod</c>
	/// labeled alternative in <see cref="OParser.member_method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMemberMethod([NotNull] OParser.OperatorMemberMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCategoryMapping([NotNull] OParser.JavaCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCategoryMapping([NotNull] OParser.JavaCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCategoryMapping([NotNull] OParser.CSharpCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCategoryMapping([NotNull] OParser.CSharpCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2CategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2CategoryMapping([NotNull] OParser.Python2CategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2CategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2CategoryMapping([NotNull] OParser.Python2CategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3CategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3CategoryMapping([NotNull] OParser.Python3CategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3CategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3CategoryMapping([NotNull] OParser.Python3CategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptCategoryMapping([NotNull] OParser.JavaScriptCategoryMappingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptCategoryMapping</c>
	/// labeled alternative in <see cref="OParser.native_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptCategoryMapping([NotNull] OParser.JavaScriptCategoryMappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_category_mapping([NotNull] OParser.Python_category_mappingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_category_mapping([NotNull] OParser.Python_category_mappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_module([NotNull] OParser.Python_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_module([NotNull] OParser.Python_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule_token([NotNull] OParser.Module_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.module_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule_token([NotNull] OParser.Module_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_category_mapping([NotNull] OParser.Javascript_category_mappingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_category_mapping"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_category_mapping([NotNull] OParser.Javascript_category_mappingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_module([NotNull] OParser.Javascript_moduleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_module"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_module([NotNull] OParser.Javascript_moduleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="OParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableList([NotNull] OParser.VariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableList</c>
	/// labeled alternative in <see cref="OParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableList([NotNull] OParser.VariableListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="OParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableListItem([NotNull] OParser.VariableListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableListItem</c>
	/// labeled alternative in <see cref="OParser.variable_identifier_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableListItem([NotNull] OParser.VariableListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractMethod([NotNull] OParser.AbstractMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractMethod([NotNull] OParser.AbstractMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcreteMethod([NotNull] OParser.ConcreteMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConcreteMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcreteMethod([NotNull] OParser.ConcreteMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeMethod([NotNull] OParser.NativeMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeMethod([NotNull] OParser.NativeMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTestMethod([NotNull] OParser.TestMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TestMethod</c>
	/// labeled alternative in <see cref="OParser.method_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTestMethod([NotNull] OParser.TestMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="OParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementList([NotNull] OParser.NativeStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementList</c>
	/// labeled alternative in <see cref="OParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementList([NotNull] OParser.NativeStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="OParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeStatementListItem([NotNull] OParser.NativeStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NativeStatementListItem</c>
	/// labeled alternative in <see cref="OParser.native_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeStatementListItem([NotNull] OParser.NativeStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaNativeStatement([NotNull] OParser.JavaNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaNativeStatement([NotNull] OParser.JavaNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpNativeStatement([NotNull] OParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpNativeStatement([NotNull] OParser.CSharpNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython2NativeStatement([NotNull] OParser.Python2NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python2NativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython2NativeStatement([NotNull] OParser.Python2NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython3NativeStatement([NotNull] OParser.Python3NativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Python3NativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython3NativeStatement([NotNull] OParser.Python3NativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaScriptNativeStatement([NotNull] OParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaScriptNativeStatement</c>
	/// labeled alternative in <see cref="OParser.native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaScriptNativeStatement([NotNull] OParser.JavaScriptNativeStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_native_statement([NotNull] OParser.Python_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_native_statement([NotNull] OParser.Python_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_native_statement([NotNull] OParser.Javascript_native_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_native_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_native_statement([NotNull] OParser.Javascript_native_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="OParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementListItem([NotNull] OParser.StatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementListItem</c>
	/// labeled alternative in <see cref="OParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementListItem([NotNull] OParser.StatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="OParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] OParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StatementList</c>
	/// labeled alternative in <see cref="OParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] OParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="OParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionListItem([NotNull] OParser.AssertionListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionListItem</c>
	/// labeled alternative in <see cref="OParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionListItem([NotNull] OParser.AssertionListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="OParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertionList([NotNull] OParser.AssertionListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssertionList</c>
	/// labeled alternative in <see cref="OParser.assertion_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertionList([NotNull] OParser.AssertionListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementListItem([NotNull] OParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementListItem</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementListItem([NotNull] OParser.SwitchCaseStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseStatementList([NotNull] OParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseStatementList</c>
	/// labeled alternative in <see cref="OParser.switch_case_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseStatementList([NotNull] OParser.SwitchCaseStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="OParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementListItem([NotNull] OParser.CatchStatementListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementListItem</c>
	/// labeled alternative in <see cref="OParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementListItem([NotNull] OParser.CatchStatementListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="OParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchStatementList([NotNull] OParser.CatchStatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CatchStatementList</c>
	/// labeled alternative in <see cref="OParser.catch_statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchStatementList([NotNull] OParser.CatchStatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralRangeLiteral([NotNull] OParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralRangeLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralRangeLiteral([NotNull] OParser.LiteralRangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListLiteral([NotNull] OParser.LiteralListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListLiteral([NotNull] OParser.LiteralListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralSetLiteral([NotNull] OParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralSetLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_collection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralSetLiteral([NotNull] OParser.LiteralSetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinIntegerLiteral([NotNull] OParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinIntegerLiteral([NotNull] OParser.MinIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxIntegerLiteral([NotNull] OParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxIntegerLiteral([NotNull] OParser.MaxIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] OParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] OParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHexadecimalLiteral([NotNull] OParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>HexadecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHexadecimalLiteral([NotNull] OParser.HexadecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacterLiteral([NotNull] OParser.CharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacterLiteral([NotNull] OParser.CharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] OParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] OParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] OParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TimeLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] OParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTextLiteral([NotNull] OParser.TextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTextLiteral([NotNull] OParser.TextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] OParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] OParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] OParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DateTimeLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] OParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] OParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] OParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPeriodLiteral([NotNull] OParser.PeriodLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PeriodLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPeriodLiteral([NotNull] OParser.PeriodLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] OParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="OParser.atomic_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] OParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="OParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralList([NotNull] OParser.LiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralList</c>
	/// labeled alternative in <see cref="OParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralList([NotNull] OParser.LiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="OParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralListItem([NotNull] OParser.LiteralListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralListItem</c>
	/// labeled alternative in <see cref="OParser.literal_list_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralListItem([NotNull] OParser.LiteralListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] OParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] OParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] OParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] OParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] OParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] OParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] OParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="OParser.selectable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] OParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThis_expression([NotNull] OParser.This_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.this_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThis_expression([NotNull] OParser.This_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] OParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] OParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicLiteral([NotNull] OParser.AtomicLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicLiteral([NotNull] OParser.AtomicLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollectionLiteral([NotNull] OParser.CollectionLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollectionLiteral</c>
	/// labeled alternative in <see cref="OParser.literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollectionLiteral([NotNull] OParser.CollectionLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeLiteral([NotNull] OParser.RangeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RangeLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeLiteral([NotNull] OParser.RangeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListLiteral([NotNull] OParser.ListLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListLiteral([NotNull] OParser.ListLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetLiteral([NotNull] OParser.SetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SetLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetLiteral([NotNull] OParser.SetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictLiteral([NotNull] OParser.DictLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictLiteral([NotNull] OParser.DictLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleLiteral([NotNull] OParser.TupleLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleLiteral</c>
	/// labeled alternative in <see cref="OParser.collection_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleLiteral([NotNull] OParser.TupleLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_literal([NotNull] OParser.Tuple_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.tuple_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_literal([NotNull] OParser.Tuple_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_literal([NotNull] OParser.Dict_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.dict_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_literal([NotNull] OParser.Dict_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="OParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTupleItem([NotNull] OParser.ValueTupleItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTupleItem</c>
	/// labeled alternative in <see cref="OParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTupleItem([NotNull] OParser.ValueTupleItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="OParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueTuple([NotNull] OParser.ValueTupleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueTuple</c>
	/// labeled alternative in <see cref="OParser.expression_tuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueTuple([NotNull] OParser.ValueTupleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="OParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryList([NotNull] OParser.DictEntryListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryList</c>
	/// labeled alternative in <see cref="OParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryList([NotNull] OParser.DictEntryListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="OParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDictEntryListItem([NotNull] OParser.DictEntryListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DictEntryListItem</c>
	/// labeled alternative in <see cref="OParser.dict_entry_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDictEntryListItem([NotNull] OParser.DictEntryListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDict_entry([NotNull] OParser.Dict_entryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.dict_entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDict_entry([NotNull] OParser.Dict_entryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstAndLast([NotNull] OParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstAndLast</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstAndLast([NotNull] OParser.SliceFirstAndLastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceFirstOnly([NotNull] OParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceFirstOnly</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceFirstOnly([NotNull] OParser.SliceFirstOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLastOnly([NotNull] OParser.SliceLastOnlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLastOnly</c>
	/// labeled alternative in <see cref="OParser.slice_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLastOnly([NotNull] OParser.SliceLastOnlyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign_variable_statement([NotNull] OParser.Assign_variable_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.assign_variable_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign_variable_statement([NotNull] OParser.Assign_variable_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="OParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRootInstance([NotNull] OParser.RootInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RootInstance</c>
	/// labeled alternative in <see cref="OParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRootInstance([NotNull] OParser.RootInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="OParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChildInstance([NotNull] OParser.ChildInstanceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ChildInstance</c>
	/// labeled alternative in <see cref="OParser.assignable_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChildInstance([NotNull] OParser.ChildInstanceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="OParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsATypeExpression([NotNull] OParser.IsATypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsATypeExpression</c>
	/// labeled alternative in <see cref="OParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsATypeExpression([NotNull] OParser.IsATypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="OParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsOtherExpression([NotNull] OParser.IsOtherExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsOtherExpression</c>
	/// labeled alternative in <see cref="OParser.is_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsOtherExpression([NotNull] OParser.IsOtherExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorPlus([NotNull] OParser.OperatorPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorPlus</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorPlus([NotNull] OParser.OperatorPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMinus([NotNull] OParser.OperatorMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMinus</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMinus([NotNull] OParser.OperatorMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMultiply([NotNull] OParser.OperatorMultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorMultiply</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMultiply([NotNull] OParser.OperatorMultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorDivide([NotNull] OParser.OperatorDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorDivide</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorDivide([NotNull] OParser.OperatorDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorIDivide([NotNull] OParser.OperatorIDivideContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorIDivide</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorIDivide([NotNull] OParser.OperatorIDivideContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorModulo([NotNull] OParser.OperatorModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorModulo</c>
	/// labeled alternative in <see cref="OParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorModulo([NotNull] OParser.OperatorModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKey_token([NotNull] OParser.Key_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.key_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKey_token([NotNull] OParser.Key_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_token([NotNull] OParser.Value_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.value_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_token([NotNull] OParser.Value_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSymbols_token([NotNull] OParser.Symbols_tokenContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.symbols_token"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSymbols_token([NotNull] OParser.Symbols_tokenContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] OParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] OParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] OParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] OParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivide([NotNull] OParser.DivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivide([NotNull] OParser.DivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdivide([NotNull] OParser.IdivideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.idivide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdivide([NotNull] OParser.IdivideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulo([NotNull] OParser.ModuloContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulo([NotNull] OParser.ModuloContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfs([NotNull] OParser.LfsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.lfs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfs([NotNull] OParser.LfsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLfp([NotNull] OParser.LfpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.lfp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLfp([NotNull] OParser.LfpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="OParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptReturnStatement([NotNull] OParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptReturnStatement</c>
	/// labeled alternative in <see cref="OParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptReturnStatement([NotNull] OParser.JavascriptReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="OParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptStatement([NotNull] OParser.JavascriptStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptStatement</c>
	/// labeled alternative in <see cref="OParser.javascript_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptStatement([NotNull] OParser.JavascriptStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptPrimaryExpression([NotNull] OParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptPrimaryExpression([NotNull] OParser.JavascriptPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptSelectorExpression([NotNull] OParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptSelectorExpression([NotNull] OParser.JavascriptSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptParenthesisExpression([NotNull] OParser.JavascriptParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptParenthesisExpression([NotNull] OParser.JavascriptParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIdentifierExpression([NotNull] OParser.JavascriptIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIdentifierExpression([NotNull] OParser.JavascriptIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptLiteralExpression([NotNull] OParser.JavascriptLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptLiteralExpression([NotNull] OParser.JavascriptLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptMethodExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptMethodExpression([NotNull] OParser.JavascriptMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptMethodExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptMethodExpression([NotNull] OParser.JavascriptMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptItemExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptItemExpression([NotNull] OParser.JavascriptItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptItemExpression</c>
	/// labeled alternative in <see cref="OParser.javascript_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptItemExpression([NotNull] OParser.JavascriptItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_method_expression([NotNull] OParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_method_expression([NotNull] OParser.Javascript_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentListItem([NotNull] OParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentListItem([NotNull] OParser.JavascriptArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="OParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptArgumentList([NotNull] OParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptArgumentList</c>
	/// labeled alternative in <see cref="OParser.javascript_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptArgumentList([NotNull] OParser.JavascriptArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_item_expression([NotNull] OParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_item_expression([NotNull] OParser.Javascript_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_parenthesis_expression([NotNull] OParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_parenthesis_expression([NotNull] OParser.Javascript_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptChildIdentifier([NotNull] OParser.JavascriptChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptChildIdentifier([NotNull] OParser.JavascriptChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIdentifier</c>
	/// labeled alternative in <see cref="OParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIdentifier([NotNull] OParser.JavascriptIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIdentifier</c>
	/// labeled alternative in <see cref="OParser.javascript_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIdentifier([NotNull] OParser.JavascriptIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptIntegerLiteral([NotNull] OParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptIntegerLiteral([NotNull] OParser.JavascriptIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptDecimalLiteral([NotNull] OParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptDecimalLiteral([NotNull] OParser.JavascriptDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptTextLiteral([NotNull] OParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptTextLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptTextLiteral([NotNull] OParser.JavascriptTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptBooleanLiteral([NotNull] OParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptBooleanLiteral([NotNull] OParser.JavascriptBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascriptCharacterLiteral([NotNull] OParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavascriptCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.javascript_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascriptCharacterLiteral([NotNull] OParser.JavascriptCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavascript_identifier([NotNull] OParser.Javascript_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.javascript_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavascript_identifier([NotNull] OParser.Javascript_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="OParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonReturnStatement([NotNull] OParser.PythonReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonReturnStatement</c>
	/// labeled alternative in <see cref="OParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonReturnStatement([NotNull] OParser.PythonReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="OParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonStatement([NotNull] OParser.PythonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonStatement</c>
	/// labeled alternative in <see cref="OParser.python_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonStatement([NotNull] OParser.PythonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonPrimaryExpression([NotNull] OParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonPrimaryExpression([NotNull] OParser.PythonPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonSelectorExpression([NotNull] OParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.python_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonSelectorExpression([NotNull] OParser.PythonSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonParenthesisExpression([NotNull] OParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonParenthesisExpression([NotNull] OParser.PythonParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifierExpression([NotNull] OParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifierExpression([NotNull] OParser.PythonIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonLiteralExpression([NotNull] OParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonLiteralExpression([NotNull] OParser.PythonLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonGlobalMethodExpression([NotNull] OParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonGlobalMethodExpression</c>
	/// labeled alternative in <see cref="OParser.python_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonGlobalMethodExpression([NotNull] OParser.PythonGlobalMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="OParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonMethodExpression([NotNull] OParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonMethodExpression</c>
	/// labeled alternative in <see cref="OParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonMethodExpression([NotNull] OParser.PythonMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="OParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonItemExpression([NotNull] OParser.PythonItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonItemExpression</c>
	/// labeled alternative in <see cref="OParser.python_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonItemExpression([NotNull] OParser.PythonItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_method_expression([NotNull] OParser.Python_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_method_expression([NotNull] OParser.Python_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalOnlyArgumentList([NotNull] OParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalOnlyArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalOnlyArgumentList([NotNull] OParser.PythonOrdinalOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedOnlyArgumentList([NotNull] OParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedOnlyArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedOnlyArgumentList([NotNull] OParser.PythonNamedOnlyArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonArgumentList([NotNull] OParser.PythonArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonArgumentList([NotNull] OParser.PythonArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentListItem([NotNull] OParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentListItem([NotNull] OParser.PythonOrdinalArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonOrdinalArgumentList([NotNull] OParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonOrdinalArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_ordinal_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonOrdinalArgumentList([NotNull] OParser.PythonOrdinalArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentListItem([NotNull] OParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentListItem([NotNull] OParser.PythonNamedArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonNamedArgumentList([NotNull] OParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonNamedArgumentList</c>
	/// labeled alternative in <see cref="OParser.python_named_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonNamedArgumentList([NotNull] OParser.PythonNamedArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_parenthesis_expression([NotNull] OParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_parenthesis_expression([NotNull] OParser.Python_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonChildIdentifier([NotNull] OParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonChildIdentifier([NotNull] OParser.PythonChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="OParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIdentifier([NotNull] OParser.PythonIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIdentifier</c>
	/// labeled alternative in <see cref="OParser.python_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIdentifier([NotNull] OParser.PythonIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonIntegerLiteral([NotNull] OParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonIntegerLiteral([NotNull] OParser.PythonIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonDecimalLiteral([NotNull] OParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonDecimalLiteral([NotNull] OParser.PythonDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonTextLiteral([NotNull] OParser.PythonTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonTextLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonTextLiteral([NotNull] OParser.PythonTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonBooleanLiteral([NotNull] OParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonBooleanLiteral([NotNull] OParser.PythonBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPythonCharacterLiteral([NotNull] OParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PythonCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.python_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPythonCharacterLiteral([NotNull] OParser.PythonCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPython_identifier([NotNull] OParser.Python_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.python_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPython_identifier([NotNull] OParser.Python_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="OParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaReturnStatement([NotNull] OParser.JavaReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaReturnStatement</c>
	/// labeled alternative in <see cref="OParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaReturnStatement([NotNull] OParser.JavaReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="OParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaStatement([NotNull] OParser.JavaStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaStatement</c>
	/// labeled alternative in <see cref="OParser.java_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaStatement([NotNull] OParser.JavaStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaPrimaryExpression([NotNull] OParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaPrimaryExpression([NotNull] OParser.JavaPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaSelectorExpression([NotNull] OParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.java_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaSelectorExpression([NotNull] OParser.JavaSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaParenthesisExpression([NotNull] OParser.JavaParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaParenthesisExpression([NotNull] OParser.JavaParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifierExpression([NotNull] OParser.JavaIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifierExpression([NotNull] OParser.JavaIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaLiteralExpression([NotNull] OParser.JavaLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.java_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaLiteralExpression([NotNull] OParser.JavaLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="OParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaMethodExpression([NotNull] OParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaMethodExpression</c>
	/// labeled alternative in <see cref="OParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaMethodExpression([NotNull] OParser.JavaMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="OParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaItemExpression([NotNull] OParser.JavaItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaItemExpression</c>
	/// labeled alternative in <see cref="OParser.java_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaItemExpression([NotNull] OParser.JavaItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_method_expression([NotNull] OParser.Java_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.java_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_method_expression([NotNull] OParser.Java_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="OParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentList([NotNull] OParser.JavaArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentList</c>
	/// labeled alternative in <see cref="OParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentList([NotNull] OParser.JavaArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaArgumentListItem([NotNull] OParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.java_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaArgumentListItem([NotNull] OParser.JavaArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_item_expression([NotNull] OParser.Java_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.java_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_item_expression([NotNull] OParser.Java_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_parenthesis_expression([NotNull] OParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.java_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_parenthesis_expression([NotNull] OParser.Java_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIdentifier([NotNull] OParser.JavaIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIdentifier([NotNull] OParser.JavaIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildIdentifier([NotNull] OParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildIdentifier([NotNull] OParser.JavaChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaChildClassIdentifier([NotNull] OParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaChildClassIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaChildClassIdentifier([NotNull] OParser.JavaChildClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaClassIdentifier([NotNull] OParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaClassIdentifier</c>
	/// labeled alternative in <see cref="OParser.java_class_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaClassIdentifier([NotNull] OParser.JavaClassIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaIntegerLiteral([NotNull] OParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaIntegerLiteral([NotNull] OParser.JavaIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaDecimalLiteral([NotNull] OParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaDecimalLiteral([NotNull] OParser.JavaDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaTextLiteral([NotNull] OParser.JavaTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaTextLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaTextLiteral([NotNull] OParser.JavaTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaBooleanLiteral([NotNull] OParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaBooleanLiteral([NotNull] OParser.JavaBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJavaCharacterLiteral([NotNull] OParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JavaCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.java_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJavaCharacterLiteral([NotNull] OParser.JavaCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJava_identifier([NotNull] OParser.Java_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.java_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJava_identifier([NotNull] OParser.Java_identifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="OParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpReturnStatement([NotNull] OParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpReturnStatement</c>
	/// labeled alternative in <see cref="OParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpReturnStatement([NotNull] OParser.CSharpReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="OParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpStatement([NotNull] OParser.CSharpStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpStatement</c>
	/// labeled alternative in <see cref="OParser.csharp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpStatement([NotNull] OParser.CSharpStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpPrimaryExpression([NotNull] OParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpPrimaryExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpPrimaryExpression([NotNull] OParser.CSharpPrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpSelectorExpression([NotNull] OParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpSelectorExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpSelectorExpression([NotNull] OParser.CSharpSelectorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpParenthesisExpression([NotNull] OParser.CSharpParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpParenthesisExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpParenthesisExpression([NotNull] OParser.CSharpParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifierExpression([NotNull] OParser.CSharpIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifierExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifierExpression([NotNull] OParser.CSharpIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpLiteralExpression([NotNull] OParser.CSharpLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpLiteralExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpLiteralExpression([NotNull] OParser.CSharpLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpMethodExpression([NotNull] OParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpMethodExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpMethodExpression([NotNull] OParser.CSharpMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpItemExpression([NotNull] OParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpItemExpression</c>
	/// labeled alternative in <see cref="OParser.csharp_selector_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpItemExpression([NotNull] OParser.CSharpItemExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_method_expression([NotNull] OParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.csharp_method_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_method_expression([NotNull] OParser.Csharp_method_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="OParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentList([NotNull] OParser.CSharpArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentList</c>
	/// labeled alternative in <see cref="OParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentList([NotNull] OParser.CSharpArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpArgumentListItem([NotNull] OParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpArgumentListItem</c>
	/// labeled alternative in <see cref="OParser.csharp_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpArgumentListItem([NotNull] OParser.CSharpArgumentListItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_item_expression([NotNull] OParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.csharp_item_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_item_expression([NotNull] OParser.Csharp_item_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_parenthesis_expression([NotNull] OParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.csharp_parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_parenthesis_expression([NotNull] OParser.Csharp_parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="OParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIdentifier([NotNull] OParser.CSharpIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIdentifier</c>
	/// labeled alternative in <see cref="OParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIdentifier([NotNull] OParser.CSharpIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpChildIdentifier([NotNull] OParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpChildIdentifier</c>
	/// labeled alternative in <see cref="OParser.csharp_identifier_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpChildIdentifier([NotNull] OParser.CSharpChildIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpIntegerLiteral([NotNull] OParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpIntegerLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpIntegerLiteral([NotNull] OParser.CSharpIntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpDecimalLiteral([NotNull] OParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpDecimalLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpDecimalLiteral([NotNull] OParser.CSharpDecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpTextLiteral([NotNull] OParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpTextLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpTextLiteral([NotNull] OParser.CSharpTextLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpBooleanLiteral([NotNull] OParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpBooleanLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpBooleanLiteral([NotNull] OParser.CSharpBooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCSharpCharacterLiteral([NotNull] OParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CSharpCharacterLiteral</c>
	/// labeled alternative in <see cref="OParser.csharp_literal_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCSharpCharacterLiteral([NotNull] OParser.CSharpCharacterLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCsharp_identifier([NotNull] OParser.Csharp_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OParser.csharp_identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCsharp_identifier([NotNull] OParser.Csharp_identifierContext context);
}
} // namespace presto.parser
